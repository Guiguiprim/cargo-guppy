(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; UnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; UnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; UnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl UnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colour","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ascii"] = [{"text":"impl UnwindSafe for AsciiChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ToAsciiCharError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsciiStr","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsAsciiStrError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsciiString","synthetic":true,"types":[]},{"text":"impl&lt;O&gt; UnwindSafe for FromAsciiError&lt;O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atomicwrites"] = [{"text":"impl UnwindSafe for OverwriteBehavior","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for Error&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtomicFile","synthetic":true,"types":[]}];
implementors["bit_set"] = [{"text":"impl&lt;B&gt; UnwindSafe for BitSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Iter&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Union&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Intersection&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Difference&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for SymmetricDifference&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bit_vec"] = [{"text":"impl&lt;B&gt; UnwindSafe for BitVec&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Iter&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for IntoIter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Blocks&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl UnwindSafe for BStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; UnwindSafe for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["camino"] = [{"text":"impl UnwindSafe for Utf8PathBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Path","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8Ancestors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8Components&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8Component&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8Prefix&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8PrefixComponent&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["cargo_guppy"] = [{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueryOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BaseFilterOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffSummariesOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DupsOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuildKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveCargoOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmdSelectOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubtreeSizeOptions","synthetic":true,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl UnwindSafe for DependencyKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dependency","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticSpanMacroExpansion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Applicability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Artifact","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompilerMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuildScript","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuildFinished","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for MessageIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackageId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Resolve","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeDep","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DepKindInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Package","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CargoOpt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataCommand","synthetic":true,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl UnwindSafe for CfgExpr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cfg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Platform","synthetic":true,"types":[]}];
implementors["cfg_expr"] = [{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reason","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Token&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lexer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LexerToken&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Func","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TargetPredicate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Predicate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expression","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Arch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Vendor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Os&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Family","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TargetInfo&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl UnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseMonthError","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl UnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;T, R&gt; UnwindSafe for Info&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; !UnwindSafe for Error&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, R, P&gt; !UnwindSafe for Errors&lt;I, R, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Stream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; UnwindSafe for Info&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Consumed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnexpectedParse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringStreamError","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Tracked&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for FastResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for BufferedStream&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Position: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, X&gt; UnwindSafe for State&lt;I, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexPositioner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourcePosition","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PartialStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for SliceStream&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IteratorStream&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadStream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PointerOffset","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; UnwindSafe for U16&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; UnwindSafe for U32&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; UnwindSafe for U64&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; UnwindSafe for I16&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; UnwindSafe for I32&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; UnwindSafe for I64&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; UnwindSafe for F32&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; UnwindSafe for F64&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Digit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Space&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Spaces&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Newline&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CrLf&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Tab&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Upper&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Lower&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AlphaNum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Letter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for OctDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for HexDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Bytes&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, I&gt; UnwindSafe for BytesCmp&lt;C, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TakeUntilByte&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TakeUntilByte2&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TakeUntilByte3&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for take_until_bytes&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Digit&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Space&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Spaces&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Newline&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CrLf&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Tab&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Upper&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Lower&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AlphaNum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Letter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for OctDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for HexDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Str&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, I&gt; UnwindSafe for StrCmp&lt;C, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Choice&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; UnwindSafe for Or&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Optional&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for NotFollowedBy&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Try&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for LookAhead&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for Map&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for FlatMap&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for AndThen&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for Recognize&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for NoPartial&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Ignore&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AnyPartialState","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for AnyPartialStateParser&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AnySendPartialState","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for AnySendPartialStateParser&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Lazy&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, R&gt; UnwindSafe for Factory&lt;P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, P&gt; UnwindSafe for FromStr&lt;O, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, I, O, S&gt; UnwindSafe for Opaque&lt;F, I, O, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for Unexpected&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Message&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Expected&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Silent&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FnParser&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, I, T&gt; UnwindSafe for EnvParser&lt;E, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Any&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Satisfy&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for SatisfyMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Token&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T, I&gt; UnwindSafe for Tokens&lt;C, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T, I&gt; UnwindSafe for Tokens2&lt;C, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Position&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for OneOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for NoneOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for Value&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Eof&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Range&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Recognize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for RecognizeWithValue&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Take&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for TakeWhile&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for TakeWhile1&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TakeUntilRange&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TakeRange","synthetic":true,"types":[]},{"text":"impl&lt;F, I&gt; UnwindSafe for TakeFn&lt;F, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for Count&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SkipCount&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for CountMinMax&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SkipCountMinMax&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, S, M&gt; !UnwindSafe for Iter&lt;'a, P, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for Many&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for Many1&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SkipMany&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SkipMany1&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; UnwindSafe for SepBy&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; UnwindSafe for SepBy1&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; UnwindSafe for SepEndBy&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; UnwindSafe for SepEndBy1&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Op&gt; UnwindSafe for Chainl1&lt;P, Op&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Op&gt; UnwindSafe for Chainr1&lt;P, Op&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; UnwindSafe for TakeUntil&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SkipUntil&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for EscapedState&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; UnwindSafe for Escaped&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for PartialState1&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for PartialState2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; UnwindSafe for PartialState3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; UnwindSafe for PartialState4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; UnwindSafe for PartialState5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F&gt; UnwindSafe for PartialState6&lt;A, B, C, D, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G&gt; UnwindSafe for PartialState7&lt;A, B, C, D, E, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H&gt; UnwindSafe for PartialState8&lt;A, B, C, D, E, F, G, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I&gt; UnwindSafe for PartialState9&lt;A, B, C, D, E, F, G, H, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J&gt; UnwindSafe for PartialState10&lt;A, B, C, D, E, F, G, H, I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K&gt; UnwindSafe for PartialState11&lt;A, B, C, D, E, F, G, H, I, J, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L&gt; UnwindSafe for PartialState12&lt;A, B, C, D, E, F, G, H, I, J, K, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; UnwindSafe for With&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; UnwindSafe for Skip&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R, P&gt; UnwindSafe for Between&lt;L, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for Then&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; UnwindSafe for ThenPartial&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["console"] = [{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TermTarget","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TermFamily","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TermFeatures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Term","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alignment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for StyledObject&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; UnwindSafe for Emoji&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for AnsiCodeIterator&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; UnwindSafe for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; UnwindSafe for CompareExchangeError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; UnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; UnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !UnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !UnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; UnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["determinator"] = [{"text":"impl&lt;'g, 'a&gt; !UnwindSafe for Determinator&lt;'g, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for DeterminatorSet&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RulesError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RulesErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Paths0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeterminatorRules","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeterminatorPostRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackageRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeterminatorMarkChanged","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuleIndex","synthetic":true,"types":[]}];
implementors["dialoguer"] = [{"text":"impl UnwindSafe for Editor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Confirm&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Input&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for MultiSelect&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Password&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Sort&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleTheme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorfulTheme","synthetic":true,"types":[]}];
implementors["diff"] = [{"text":"impl&lt;T&gt; UnwindSafe for Result&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["diffus"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized, Diff&gt; UnwindSafe for Edit&lt;'a, T, Diff&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Diff: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, Diff&gt; UnwindSafe for Edit&lt;'a, T, Diff&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Diff: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for Edit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diffable&lt;'a&gt;&gt;::Diff: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for Edit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Edit","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for Edit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diffable&lt;'a&gt;&gt;::Diff: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["diffy"] = [{"text":"impl UnwindSafe for ApplyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConflictStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatchFormatter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParsePatchError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for Patch&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToOwned&gt;::Owned: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for Hunk&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HunkRange","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for Line&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; UnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fixture_manager"] = [{"text":"impl&lt;'g, T&gt; !UnwindSafe for GenerateContext&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; UnwindSafe for ContextItem&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ContextImpl&lt;'g&gt;&gt;::Existing: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ContextImpl&lt;'g&gt;&gt;::IterItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HakariTomlContext","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for HakariTomlItem&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SummaryContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixtureManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateSummariesOpts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateHakariOpts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateOpts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateMode","synthetic":true,"types":[]}];
implementors["fixtures"] = [{"text":"impl&lt;'a&gt; UnwindSafe for DirectionDesc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixtureDetails","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackageDetails","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkDetails","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformResults","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JsonFixture","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl UnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["globset"] = [{"text":"impl UnwindSafe for Glob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobMatcher","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for GlobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Candidate&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["guppy"] = [{"text":"impl&lt;T&gt; UnwindSafe for DebugIgnore&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DependencyKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FeatureGraphWarning","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FeatureBuildStage","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for BuildTarget&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for BuildTargetId&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for BuildTargetKind&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CargoOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CargoResolverVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitialsPlatform","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for CargoSet&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuildPlatform","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for Cycles&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for Cycles&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for FeatureList&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for IntoIter&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, 'a&gt; UnwindSafe for Iter&lt;'g, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, 'a&gt; UnwindSafe for DisplayFeatures&lt;'g, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for FeatureGraph&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for FeatureId&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for FeatureMetadata&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for CrossLink&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FeatureType","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FeatureFilterFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardFeatures","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for FeatureQuery&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for FeatureSet&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackageGraph","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for DependsCache&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for Workspace&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for PackageMetadata&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for PackageSource&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for ExternalSource&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for GitReq&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for PackageLink&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for DependencyReq&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for EnabledStatus&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for PlatformStatus&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnabledTernary","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for PlatformEval&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prop010Resolver","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for PackageQuery&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for PackageSet&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CargoOptionsSummary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitialsPlatformSummary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FeaturesOnlySummary","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DotWrite&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DependencyDirection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CargoMetadata","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Obs&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackageId","synthetic":true,"types":[]}];
implementors["guppy_cmdlib"] = [{"text":"impl UnwindSafe for PackagesAndFeatures","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CargoResolverOpts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CargoMetadataOptions","synthetic":true,"types":[]}];
implementors["guppy_summaries"] = [{"text":"impl&lt;'a, 'b&gt; UnwindSafe for SummaryReport&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SummaryDiff&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PackageDiff&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SummaryDiffStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SummaryDiffTag","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; UnwindSafe for SummaryWithMetadata&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SummaryId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SummarySource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackageInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackageStatus","synthetic":true,"types":[]}];
implementors["hakari"] = [{"text":"impl UnwindSafe for HakariCargoToml","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CargoTomlError","synthetic":true,"types":[]},{"text":"impl&lt;'g, 'a&gt; UnwindSafe for HakariBuilder&lt;'g, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnifyTargetHost","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputKey","synthetic":true,"types":[]},{"text":"impl&lt;'g, 'a&gt; UnwindSafe for Hakari&lt;'g, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for ComputedValue&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HakariBuilderSummary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TomlOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TomlOutError","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FilterMapOk&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FilterOk&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; UnwindSafe for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !UnwindSafe for TakeWhileRef&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; UnwindSafe for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GroupingMap&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; UnwindSafe for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !UnwindSafe for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !UnwindSafe for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ElemF&gt; UnwindSafe for IntersperseWith&lt;I, ElemF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ElemF: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; UnwindSafe for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PeekNth&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !UnwindSafe for PeekingTakeWhile&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; !UnwindSafe for ProcessResults&lt;'a, I, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Powerset&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for CircularTupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; UnwindSafe for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; UnwindSafe for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entries&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; UnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["nested"] = [{"text":"impl&lt;T&gt; UnwindSafe for Nested&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl UnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !UnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwningIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MRemapFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Persona","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VsockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpKeepCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpKeepInterval","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindToDevice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; UnwindSafe for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for RecvMmsgData&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statfs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expiration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysconfVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for User","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OnceBox&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceNonZeroUsize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceBool","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;UnwindSafe&gt; UnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;R&gt; UnwindSafe for Error&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ErrorVariant&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LineColLocation","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for FlatPairs&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for Pair&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for Pairs&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for Tokens&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lookahead","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Atomicity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchDir","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for ParserState&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for Position&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assoc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Operator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PrecClimber&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for Span&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for Lines&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for Token&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["petgraph"] = [{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for DfsEvent&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Control&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; UnwindSafe for Dfs&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; UnwindSafe for DfsPostOrder&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; UnwindSafe for Bfs&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; UnwindSafe for Topo&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, C&gt; UnwindSafe for WalkerIter&lt;W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, F&gt; UnwindSafe for NodeFiltered&lt;G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; UnwindSafe for NodeFilteredNeighbors&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; UnwindSafe for NodeFilteredNodes&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; UnwindSafe for NodeFilteredEdgeReferences&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; UnwindSafe for NodeFilteredEdges&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, F&gt; UnwindSafe for EdgeFiltered&lt;G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, F&gt; UnwindSafe for EdgeFilteredNeighbors&lt;'a, G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoEdges&gt;::Edges: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; UnwindSafe for EdgeFilteredEdges&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, F&gt; UnwindSafe for EdgeFilteredNeighborsDirected&lt;'a, G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoEdgesDirected&gt;::EdgesDirected: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as GraphBase&gt;::NodeId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; UnwindSafe for Reversed&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ReversedEdges&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReversedEdgeReference&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ReversedEdgeReferences&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E&gt; UnwindSafe for Element&lt;N, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FilterElements&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Dominators&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; UnwindSafe for DominatorsIter&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; UnwindSafe for DfsSpace&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; UnwindSafe for MinSpanningTree&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as Data&gt;::EdgeWeight: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as GraphBase&gt;::NodeId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoNodeReferences&gt;::NodeReferences: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Cycle&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NegativeCycle","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty, Ix&gt; UnwindSafe for Csr&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EdgesNotSorted","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; UnwindSafe for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; UnwindSafe for EdgeReference&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; UnwindSafe for EdgeReferences&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Ix&gt; UnwindSafe for Neighbors&lt;'a, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; UnwindSafe for NodeIdentifiers&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G&gt; !UnwindSafe for Dot&lt;'a, G&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; UnwindSafe for NodeIndex&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; UnwindSafe for EdgeIndex&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, Ix&gt; UnwindSafe for Node&lt;N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, Ix&gt; UnwindSafe for Edge&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty, Ix&gt; UnwindSafe for Graph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty, Ix&gt; UnwindSafe for Externals&lt;'a, N, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; UnwindSafe for Neighbors&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; UnwindSafe for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; UnwindSafe for EdgesConnecting&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&nbsp;=&nbsp;u32&gt; !UnwindSafe for NodeWeightsMut&lt;'a, N, Ix&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&nbsp;=&nbsp;u32&gt; !UnwindSafe for EdgeWeightsMut&lt;'a, E, Ix&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; UnwindSafe for WalkNeighbors&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; UnwindSafe for NodeIndices&lt;Ix&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; UnwindSafe for EdgeIndices&lt;Ix&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; UnwindSafe for EdgeReference&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&gt; UnwindSafe for NodeReferences&lt;'a, N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; UnwindSafe for EdgeReferences&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G&gt; !UnwindSafe for Frozen&lt;'a, G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty&gt; UnwindSafe for GraphMap&lt;N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; UnwindSafe for Nodes&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty&gt; UnwindSafe for Neighbors&lt;'a, N, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty&gt; UnwindSafe for NeighborsDirected&lt;'a, N, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; UnwindSafe for Edges&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; UnwindSafe for AllEdges&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; !UnwindSafe for AllEdgesMut&lt;'a, N, E, Ty&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'b, T&gt; UnwindSafe for Ptr&lt;'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; UnwindSafe for NodeIdentifiers&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; UnwindSafe for NodeReferences&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for UnionFind&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Directed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Undirected","synthetic":true,"types":[]}];
implementors["pretty_assertions"] = [{"text":"impl&lt;'a, TLeft:&nbsp;?Sized, TRight:&nbsp;?Sized&gt; UnwindSafe for Comparison&lt;'a, TLeft, TRight&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TLeft: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRight: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpanRange","synthetic":true,"types":[]}];
implementors["proptest"] = [{"text":"impl&lt;S, T&gt; UnwindSafe for UniformArrayStrategy&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ArrayValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BitSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SampledBitSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BitSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weighted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolValueTree","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CharStrategy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharValueTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeRange","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VecStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VecDequeStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VecDequeValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LinkedListStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LinkedListValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BinaryHeapStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BinaryHeapValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HashSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HashSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BTreeSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BTreeSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for HashMapStrategy&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for HashMapValueTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for BTreeMapStrategy&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for BTreeMapValueTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VecValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinarySearch","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, F, O&gt; UnwindSafe for FilterMapValueTree&lt;V, F, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for FlattenValueTree&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for IndFlatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for IndFlattenMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Fuse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Just&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for LazyJust&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for LazyValueTree&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, O&gt; UnwindSafe for MapInto&lt;S, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Perturb&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for PerturbValueTree&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; !UnwindSafe for Recursive&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Shuffle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for ShuffleValueTree&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NoShrink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BoxedStrategy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for SBoxedStrategy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckStrategySanityOptions","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Union&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnionValueTree&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TupleUnion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TupleUnionValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestCaseError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TestError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileFailurePersistence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MapFailurePersistence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PersistedSeed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reason","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ResultCacheKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RngAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TestRunner","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TupleValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Probability","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OptionStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for OptionValueTree&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for MaybeOk&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Strategy&gt;::Value: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for MaybeOkValueTree&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for MaybeErr&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Strategy&gt;::Value: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for MaybeErrValueTree&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Subsequence&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubsequenceValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Select&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SelectValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexValueTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Selector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectorStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectorValueTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringParam","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RegexGeneratorStrategy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RegexGeneratorValueTree&lt;T&gt;","synthetic":true,"types":[]}];
implementors["proptest_ext"] = [{"text":"impl !UnwindSafe for ValueGenerator","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; UnwindSafe for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformChar","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl UnwindSafe for XorShiftRng","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; UnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; UnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; UnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; UnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; UnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; UnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; !UnwindSafe for SplitMut&lt;'data, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !UnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !UnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T, S&gt; UnwindSafe for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequences","synthetic":true,"types":[]}];
implementors["rusty_fork"] = [{"text":"impl UnwindSafe for RustyForkId","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExitStatusWrapper","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChildWrapper","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SemVerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl UnwindSafe for RangeSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comparator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Op","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for Token&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for Lexer&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for Error&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for Parser&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for BytesDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl UnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["supercow"] = [{"text":"impl&lt;T, B:&nbsp;?Sized&gt; UnwindSafe for TwoStepRc&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B:&nbsp;?Sized&gt; UnwindSafe for TwoStepArc&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for InlineStorage&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoxedStorage","synthetic":true,"types":[]},{"text":"impl&lt;'a, OWNED, BORROWED:&nbsp;?Sized, SHARED, STORAGE, PTR&gt; UnwindSafe for Supercow&lt;'a, OWNED, BORROWED, SHARED, STORAGE, PTR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BORROWED: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OWNED: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PTR: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SHARED: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;STORAGE: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for Ref&lt;'a, P&gt;","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Existential","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprInPlace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExistential","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemExistential","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgSelfRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgCaptured","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntSuffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatSuffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArgName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]}];
implementors["target_spec"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TargetSpec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Platform&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetFeatures","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformSummary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetFeaturesSummary","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl UnwindSafe for TempDir","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PathPersistError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TempPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NamedTempFile","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PersistError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; UnwindSafe for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["terminal_size"] = [{"text":"impl UnwindSafe for Width","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Height","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl UnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; UnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CachedIntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml_edit"] = [{"text":"impl UnwindSafe for ArrayOfTables","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TomlError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Array","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineTable","synthetic":true,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrieSetOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TrieSetSlice&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; UnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for Entry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for VacantEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for IterMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for ValuesMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; UnwindSafe for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()