(function() {var implementors = {};
implementors["anyhow"] = [{"text":"impl AsRef&lt;dyn Error + 'static + Sync + Send&gt; for Error","synthetic":false,"types":[]},{"text":"impl AsRef&lt;dyn Error + 'static&gt; for Error","synthetic":false,"types":[]}];
implementors["ascii"] = [{"text":"impl AsRef&lt;[u8]&gt; for AsciiStr","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for AsciiStr","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[AsciiChar]&gt; for AsciiStr","synthetic":false,"types":[]},{"text":"impl AsRef&lt;AsciiStr&gt; for [AsciiChar]","synthetic":false,"types":[]},{"text":"impl AsRef&lt;AsciiStr&gt; for AsciiString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[AsciiChar]&gt; for AsciiString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for AsciiString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for AsciiString","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl AsRef&lt;[u8]&gt; for BString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for BString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for BStr","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for [u8]","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for str","synthetic":false,"types":[]}];
implementors["camino"] = [{"text":"impl AsRef&lt;Utf8Path&gt; for Utf8Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Utf8Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Utf8Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Utf8Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for Utf8Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Utf8Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Utf8Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Utf8Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for Utf8Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for Utf8PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for str","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for String","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Utf8Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Utf8PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Utf8Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Utf8PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Utf8Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Utf8PathBuf","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;T&gt; AsRef&lt;T&gt; for Consumed&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; AsRef&lt;T&gt; for Owned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R, Target&gt; AsRef&lt;Target&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;Target&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;Target&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;str&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;str&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;str&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;Path&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;Path&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;Path&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;OsStr&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;OsStr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;OsStr&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;CStr&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;CStr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;CStr&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R, Target&gt; AsRef&lt;[Target]&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;[Target]&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;[Target]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl AsRef&lt;str&gt; for Signal","synthetic":false,"types":[]},{"text":"impl AsRef&lt;sigset_t&gt; for SigSet","synthetic":false,"types":[]},{"text":"impl AsRef&lt;timespec&gt; for TimeSpec","synthetic":false,"types":[]},{"text":"impl AsRef&lt;timeval&gt; for TimeVal","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl AsRef&lt;[u8]&gt; for Literal","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; AsRef&lt;[&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["supercow"] = [{"text":"impl&lt;'a, OWNED, BORROWED:&nbsp;?Sized, SHARED, STORAGE, PTR&gt; AsRef&lt;BORROWED&gt; for Supercow&lt;'a, OWNED, BORROWED, SHARED, STORAGE, PTR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BORROWED: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;*const BORROWED: PointerFirstRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;STORAGE: OwnedStorage&lt;OWNED, SHARED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PTR: PtrWrite&lt;BORROWED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PTR: PtrRead&lt;BORROWED&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl AsRef&lt;Path&gt; for TempDir","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for TempPath","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for TempPath","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for NamedTempFile","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()