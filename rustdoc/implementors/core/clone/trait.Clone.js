(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Clone + StateID&gt; Clone for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Searcher","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Clone for Prefix","synthetic":false,"types":[]},{"text":"impl Clone for Infix","synthetic":false,"types":[]},{"text":"impl Clone for Suffix","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Colour","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Clone for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl&lt;'a&gt; Clone for Chain&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["ascii"] = [{"text":"impl Clone for AsciiChar","synthetic":false,"types":[]},{"text":"impl Clone for ToAsciiCharError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Lines&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AsAsciiStrError","synthetic":false,"types":[]},{"text":"impl Clone for AsciiString","synthetic":false,"types":[]},{"text":"impl&lt;O:&nbsp;Clone&gt; Clone for FromAsciiError&lt;O&gt;","synthetic":false,"types":[]}];
implementors["atomicwrites"] = [{"text":"impl Clone for OverwriteBehavior","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Clone for Stream","synthetic":false,"types":[]}];
implementors["bit_set"] = [{"text":"impl&lt;B:&nbsp;BitBlock&gt; Clone for BitSet&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Iter&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Union&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Intersection&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Difference&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for SymmetricDifference&lt;'a, B&gt;","synthetic":false,"types":[]}];
implementors["bit_vec"] = [{"text":"impl&lt;B:&nbsp;BitBlock&gt; Clone for BitVec&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Iter&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Blocks&lt;'a, B&gt;","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl Clone for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Finder&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for FinderReverse&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Bytes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Graphemes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for GraphemeIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Sentences&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SentenceIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Words&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for WordIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for WordsWithBreaks&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for WordsWithBreakIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Chars&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CharIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Utf8Chunks&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["cargo_guppy"] = [{"text":"impl Clone for Kind","synthetic":false,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl Clone for DependencyKind","synthetic":false,"types":[]},{"text":"impl Clone for Dependency","synthetic":false,"types":[]},{"text":"impl Clone for DiagnosticCode","synthetic":false,"types":[]},{"text":"impl Clone for DiagnosticSpanLine","synthetic":false,"types":[]},{"text":"impl Clone for DiagnosticSpanMacroExpansion","synthetic":false,"types":[]},{"text":"impl Clone for DiagnosticSpan","synthetic":false,"types":[]},{"text":"impl Clone for Applicability","synthetic":false,"types":[]},{"text":"impl Clone for DiagnosticLevel","synthetic":false,"types":[]},{"text":"impl Clone for Diagnostic","synthetic":false,"types":[]},{"text":"impl Clone for ArtifactProfile","synthetic":false,"types":[]},{"text":"impl Clone for Artifact","synthetic":false,"types":[]},{"text":"impl Clone for CompilerMessage","synthetic":false,"types":[]},{"text":"impl Clone for BuildScript","synthetic":false,"types":[]},{"text":"impl Clone for BuildFinished","synthetic":false,"types":[]},{"text":"impl Clone for Message","synthetic":false,"types":[]},{"text":"impl Clone for PackageId","synthetic":false,"types":[]},{"text":"impl Clone for Metadata","synthetic":false,"types":[]},{"text":"impl Clone for Resolve","synthetic":false,"types":[]},{"text":"impl Clone for Node","synthetic":false,"types":[]},{"text":"impl Clone for NodeDep","synthetic":false,"types":[]},{"text":"impl Clone for DepKindInfo","synthetic":false,"types":[]},{"text":"impl Clone for Package","synthetic":false,"types":[]},{"text":"impl Clone for Source","synthetic":false,"types":[]},{"text":"impl Clone for Target","synthetic":false,"types":[]},{"text":"impl Clone for CargoOpt","synthetic":false,"types":[]},{"text":"impl Clone for MetadataCommand","synthetic":false,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl Clone for CfgExpr","synthetic":false,"types":[]},{"text":"impl Clone for Cfg","synthetic":false,"types":[]},{"text":"impl Clone for Platform","synthetic":false,"types":[]}];
implementors["cfg_expr"] = [{"text":"impl&lt;'a&gt; Clone for Token&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Func","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TargetPredicate&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Arch&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Vendor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Os&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Env&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Endian","synthetic":false,"types":[]},{"text":"impl Clone for Family","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TargetInfo&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FixedOffset","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Utc","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDate","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Clone for IsoWeek","synthetic":false,"types":[]},{"text":"impl Clone for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Pad","synthetic":false,"types":[]},{"text":"impl Clone for Numeric","synthetic":false,"types":[]},{"text":"impl Clone for InternalNumeric","synthetic":false,"types":[]},{"text":"impl Clone for Fixed","synthetic":false,"types":[]},{"text":"impl Clone for InternalFixed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Item&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for Parsed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StrftimeItems&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RoundingError","synthetic":false,"types":[]},{"text":"impl Clone for Weekday","synthetic":false,"types":[]},{"text":"impl Clone for ParseWeekdayError","synthetic":false,"types":[]},{"text":"impl Clone for Month","synthetic":false,"types":[]},{"text":"impl Clone for ParseMonthError","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Clone for AppSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for App&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for Arg&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgMatches&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Values&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OsValues&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArgSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SubCommand&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Shell","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;T:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Info&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Consumed&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnexpectedParse","synthetic":false,"types":[]},{"text":"impl Clone for StringStreamError","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Tracked&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for FastResult&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Info&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Stream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, X:&nbsp;Clone&gt; Clone for State&lt;I, X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IndexPositioner","synthetic":false,"types":[]},{"text":"impl Clone for SourcePosition","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for PartialStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for SliceStream&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for IteratorStream&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PointerOffset","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Digit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Space&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Spaces&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Newline&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for CrLf&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Tab&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Upper&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Lower&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for AlphaNum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Letter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for OctDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for HexDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;u8, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Bytes&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for BytesCmp&lt;C, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for TakeUntilByte&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Error: ParseError&lt;&lt;I as StreamOnce&gt;::Item, &lt;I as StreamOnce&gt;::Range, &lt;I as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RangeStream + FullRangeStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Range: AsRef&lt;[u8]&gt; + Range,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Range: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for TakeUntilByte2&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Error: ParseError&lt;&lt;I as StreamOnce&gt;::Item, &lt;I as StreamOnce&gt;::Range, &lt;I as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RangeStream + FullRangeStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Range: AsRef&lt;[u8]&gt; + Range,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Range: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for TakeUntilByte3&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Error: ParseError&lt;&lt;I as StreamOnce&gt;::Item, &lt;I as StreamOnce&gt;::Range, &lt;I as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RangeStream + FullRangeStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Range: AsRef&lt;[u8]&gt; + Range,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Range: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for U16&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for U32&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for U64&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for I16&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for I32&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for I64&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for F32&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for F64&lt;B, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Digit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Error: ParseError&lt;&lt;I as StreamOnce&gt;::Item, &lt;I as StreamOnce&gt;::Range, &lt;I as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Space&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Spaces&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Newline&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for CrLf&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Tab&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Upper&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Lower&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for AlphaNum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Letter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for OctDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for HexDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;char, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Str&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for StrCmp&lt;C, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Choice&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Clone, P2:&nbsp;Clone&gt; Clone for Or&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Optional&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for NotFollowedBy&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Try&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for LookAhead&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FlatMap&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for AndThen&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Recognize&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Ignore&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Lazy&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Factory&lt;P, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, I:&nbsp;Clone, O:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Opaque&lt;F, I, O, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Unexpected&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Range: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Message&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Expected&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Silent&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FnParser&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E, I, T&gt; Clone for EnvParser&lt;E, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Any&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Satisfy&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for SatisfyMap&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Token&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: PartialEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, T:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for Tokens&lt;C, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Range: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, T:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for Tokens2&lt;C, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Position&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for OneOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, I:&nbsp;Clone&gt; Clone for NoneOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Value&lt;I, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Eof&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Recognize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: RangeStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Range: Range,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for RecognizeWithValue&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Count&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Extend&lt;P::Output&gt; + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for SkipCount&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for CountMinMax&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for SkipCountMinMax&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Many&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Many1&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for SkipMany&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for SkipMany1&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for SepBy&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for SepBy1&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for SepEndBy&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for SepEndBy1&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, Op:&nbsp;Clone&gt; Clone for Chainl1&lt;P, Op&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, Op:&nbsp;Clone&gt; Clone for Chainr1&lt;P, Op&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for TakeUntil&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for SkipUntil&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Clone, P2:&nbsp;Clone&gt; Clone for With&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Clone, P2:&nbsp;Clone&gt; Clone for Skip&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Between&lt;L, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Parser&lt;Input = &lt;L as Parser&gt;::Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser&lt;Input = &lt;L as Parser&gt;::Input&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;L::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Output: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Then&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for ThenPartial&lt;P, F&gt;","synthetic":false,"types":[]}];
implementors["console"] = [{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for TermTarget","synthetic":false,"types":[]},{"text":"impl Clone for TermFamily","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TermFeatures&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Term","synthetic":false,"types":[]},{"text":"impl Clone for Color","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for Alignment","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone&gt; Clone for StyledObject&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for Emoji&lt;'a, 'b&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RecvError","synthetic":false,"types":[]},{"text":"impl Clone for TryRecvError","synthetic":false,"types":[]},{"text":"impl Clone for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TrySelectError","synthetic":false,"types":[]},{"text":"impl Clone for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TryReadyError","synthetic":false,"types":[]},{"text":"impl Clone for ReadyTimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Clone for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Clone for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Clone for Shared&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Unparker","synthetic":false,"types":[]},{"text":"impl Clone for WaitGroup","synthetic":false,"types":[]}];
implementors["determinator"] = [{"text":"impl&lt;'g, 'a&gt; Clone for Determinator&lt;'g, 'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for DeterminatorSet&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Paths0","synthetic":false,"types":[]},{"text":"impl Clone for DeterminatorRules","synthetic":false,"types":[]},{"text":"impl Clone for PathRule","synthetic":false,"types":[]},{"text":"impl Clone for DeterminatorPostRule","synthetic":false,"types":[]},{"text":"impl Clone for PackageRule","synthetic":false,"types":[]},{"text":"impl Clone for DeterminatorMarkChanged","synthetic":false,"types":[]},{"text":"impl Clone for PathMatch","synthetic":false,"types":[]},{"text":"impl Clone for RuleIndex","synthetic":false,"types":[]}];
implementors["diffus"] = [{"text":"impl Clone for Edit","synthetic":false,"types":[]}];
implementors["diffy"] = [{"text":"impl Clone for ConflictStyle","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ToOwned + ?Sized&gt; Clone for Patch&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Clone for Hunk&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HunkRange","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Clone for Line&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["fixedbitset"] = [{"text":"impl Clone for FixedBitSet","synthetic":false,"types":[]}];
implementors["fixture_manager"] = [{"text":"impl Clone for GenerateMode","synthetic":false,"types":[]}];
implementors["fixtures"] = [{"text":"impl&lt;'a&gt; Clone for DirectionDesc&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LinkDetails","synthetic":false,"types":[]},{"text":"impl Clone for PlatformResults","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["globset"] = [{"text":"impl Clone for Glob","synthetic":false,"types":[]},{"text":"impl Clone for GlobMatcher","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for GlobBuilder&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for GlobSet","synthetic":false,"types":[]},{"text":"impl Clone for GlobSetBuilder","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Candidate&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["guppy"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugIgnore&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DependencyKind","synthetic":false,"types":[]},{"text":"impl Clone for FeatureGraphWarning","synthetic":false,"types":[]},{"text":"impl Clone for FeatureBuildStage","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for BuildTargetId&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for BuildTargetKind&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CargoOptions&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CargoResolverVersion","synthetic":false,"types":[]},{"text":"impl Clone for InitialsPlatform","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for CargoSet&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BuildPlatform","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for FeatureList&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g, 'a&gt; Clone for DisplayFeatures&lt;'g, 'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for FeatureGraph&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for FeatureId&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for FeatureMetadata&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for CrossLink&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FeatureType","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for FeatureFilterFn&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for StandardFeatures","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for FeatureQuery&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for FeatureSet&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PackageGraph","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for DependsCache&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for Workspace&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for PackageMetadata&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for PackageSource&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for ExternalSource&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for GitReq&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for PackageLink&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for DependencyReq&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for EnabledStatus&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for PlatformStatus&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EnabledTernary","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for PlatformEval&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Prop010Resolver","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for PackageQuery&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for PackageSet&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CargoOptionsSummary","synthetic":false,"types":[]},{"text":"impl Clone for InitialsPlatformSummary","synthetic":false,"types":[]},{"text":"impl Clone for FeaturesOnlySummary","synthetic":false,"types":[]},{"text":"impl Clone for DependencyDirection","synthetic":false,"types":[]},{"text":"impl Clone for MetadataCommand","synthetic":false,"types":[]},{"text":"impl Clone for CargoMetadata","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Obs&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PackageId","synthetic":false,"types":[]}];
implementors["guppy_cmdlib"] = [{"text":"impl Clone for CargoResolverOpts","synthetic":false,"types":[]},{"text":"impl Clone for CargoMetadataOptions","synthetic":false,"types":[]}];
implementors["guppy_summaries"] = [{"text":"impl&lt;'a&gt; Clone for SummaryDiff&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PackageDiff&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SummaryDiffStatus&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SummaryDiffTag","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for SummaryReport&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Clone&gt; Clone for SummaryWithMetadata&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SummaryId","synthetic":false,"types":[]},{"text":"impl Clone for SummarySource","synthetic":false,"types":[]},{"text":"impl Clone for PackageInfo","synthetic":false,"types":[]},{"text":"impl Clone for PackageStatus","synthetic":false,"types":[]}];
implementors["hakari"] = [{"text":"impl Clone for HakariCargoToml","synthetic":false,"types":[]},{"text":"impl&lt;'g, 'a&gt; Clone for HakariBuilder&lt;'g, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnifyTargetHost","synthetic":false,"types":[]},{"text":"impl Clone for OutputKey","synthetic":false,"types":[]},{"text":"impl&lt;'g, 'a&gt; Clone for Hakari&lt;'g, 'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Clone for ComputedValue&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HakariBuilderSummary","synthetic":false,"types":[]},{"text":"impl Clone for TomlOptions","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Clone for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawTable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for RawIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TryReserveError","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Clone for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Iter&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S1, S2&gt; Clone for SymmetricDifference&lt;'_, T, S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Batching&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Step&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J, F&gt; Clone for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;I&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;J&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HasCombination&lt;I&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Combination: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FilterOk&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Positions&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Update&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherOrBoth&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J&gt; Clone for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator&lt;Item = J&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FormatWith&lt;'a, I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Clone&gt; Clone for Format&lt;'a, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for GroupingMap&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, ElemF:&nbsp;Clone&gt; Clone for IntersperseWith&lt;I, ElemF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, F&gt; Clone for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, J, F&gt; Clone for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;PutBack&lt;Fuse&lt;I&gt;&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;PutBack&lt;Fuse&lt;J&gt;&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for PadUsing&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for PeekNth&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Powerset&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator&gt; Clone for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for RcIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RepeatN&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for RepeatCall&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Unfold&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Iterate&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Buffer: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator&lt;Item = T::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Buffer: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator&lt;Item = T::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator, V:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for UniqueBy&lt;I, V, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator&gt; Clone for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for ZipEq&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for ZipLongest&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Zip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_tp","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_j1939","synthetic":false,"types":[]},{"text":"impl Clone for can_filter","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_can_addr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_can","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for can_frame","synthetic":false,"types":[]},{"text":"impl Clone for canfd_frame","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K:&nbsp;Hash + Eq + Clone, V:&nbsp;Clone, S:&nbsp;BuildHasher + Clone&gt; Clone for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Keys&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Values&lt;'a, K, V&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Metadata&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["nested"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Nested&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + 'a&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Clone for Entry","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Errno","synthetic":false,"types":[]},{"text":"impl Clone for AtFlags","synthetic":false,"types":[]},{"text":"impl Clone for OFlag","synthetic":false,"types":[]},{"text":"impl Clone for SealFlag","synthetic":false,"types":[]},{"text":"impl Clone for FdFlag","synthetic":false,"types":[]},{"text":"impl Clone for FlockArg","synthetic":false,"types":[]},{"text":"impl Clone for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Clone for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Clone for InterfaceAddress","synthetic":false,"types":[]},{"text":"impl Clone for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Clone for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Clone for MsFlags","synthetic":false,"types":[]},{"text":"impl Clone for MntFlags","synthetic":false,"types":[]},{"text":"impl Clone for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Clone for FdFlag","synthetic":false,"types":[]},{"text":"impl Clone for MqAttr","synthetic":false,"types":[]},{"text":"impl Clone for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Clone for PollFd","synthetic":false,"types":[]},{"text":"impl Clone for PollFlags","synthetic":false,"types":[]},{"text":"impl Clone for OpenptyResult","synthetic":false,"types":[]},{"text":"impl Clone for ForkptyResult","synthetic":false,"types":[]},{"text":"impl Clone for CloneFlags","synthetic":false,"types":[]},{"text":"impl Clone for CpuSet","synthetic":false,"types":[]},{"text":"impl Clone for AioFsyncMode","synthetic":false,"types":[]},{"text":"impl Clone for LioOpcode","synthetic":false,"types":[]},{"text":"impl Clone for LioMode","synthetic":false,"types":[]},{"text":"impl Clone for AioCancelStat","synthetic":false,"types":[]},{"text":"impl Clone for EpollFlags","synthetic":false,"types":[]},{"text":"impl Clone for EpollOp","synthetic":false,"types":[]},{"text":"impl Clone for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Clone for EpollEvent","synthetic":false,"types":[]},{"text":"impl Clone for EfdFlags","synthetic":false,"types":[]},{"text":"impl Clone for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Clone for ProtFlags","synthetic":false,"types":[]},{"text":"impl Clone for MapFlags","synthetic":false,"types":[]},{"text":"impl Clone for MmapAdvise","synthetic":false,"types":[]},{"text":"impl Clone for MsFlags","synthetic":false,"types":[]},{"text":"impl Clone for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Clone for Request","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]},{"text":"impl Clone for QuotaType","synthetic":false,"types":[]},{"text":"impl Clone for QuotaFmt","synthetic":false,"types":[]},{"text":"impl Clone for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Clone for Dqblk","synthetic":false,"types":[]},{"text":"impl Clone for RebootMode","synthetic":false,"types":[]},{"text":"impl Clone for FdSet","synthetic":false,"types":[]},{"text":"impl Clone for Signal","synthetic":false,"types":[]},{"text":"impl Clone for SignalIterator","synthetic":false,"types":[]},{"text":"impl Clone for SaFlags","synthetic":false,"types":[]},{"text":"impl Clone for SigmaskHow","synthetic":false,"types":[]},{"text":"impl Clone for SigSet","synthetic":false,"types":[]},{"text":"impl Clone for SigHandler","synthetic":false,"types":[]},{"text":"impl Clone for SigAction","synthetic":false,"types":[]},{"text":"impl Clone for SigevNotify","synthetic":false,"types":[]},{"text":"impl Clone for SigEvent","synthetic":false,"types":[]},{"text":"impl Clone for SfdFlags","synthetic":false,"types":[]},{"text":"impl Clone for SignalFd","synthetic":false,"types":[]},{"text":"impl Clone for AddressFamily","synthetic":false,"types":[]},{"text":"impl Clone for InetAddr","synthetic":false,"types":[]},{"text":"impl Clone for IpAddr","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Addr","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Addr","synthetic":false,"types":[]},{"text":"impl Clone for UnixAddr","synthetic":false,"types":[]},{"text":"impl Clone for SockAddr","synthetic":false,"types":[]},{"text":"impl Clone for NetlinkAddr","synthetic":false,"types":[]},{"text":"impl Clone for AlgAddr","synthetic":false,"types":[]},{"text":"impl Clone for LinkAddr","synthetic":false,"types":[]},{"text":"impl Clone for ReuseAddr","synthetic":false,"types":[]},{"text":"impl Clone for ReusePort","synthetic":false,"types":[]},{"text":"impl Clone for TcpNoDelay","synthetic":false,"types":[]},{"text":"impl Clone for Linger","synthetic":false,"types":[]},{"text":"impl Clone for IpAddMembership","synthetic":false,"types":[]},{"text":"impl Clone for IpDropMembership","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6AddMembership","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6DropMembership","synthetic":false,"types":[]},{"text":"impl Clone for IpMulticastTtl","synthetic":false,"types":[]},{"text":"impl Clone for IpMulticastLoop","synthetic":false,"types":[]},{"text":"impl Clone for ReceiveTimeout","synthetic":false,"types":[]},{"text":"impl Clone for SendTimeout","synthetic":false,"types":[]},{"text":"impl Clone for Broadcast","synthetic":false,"types":[]},{"text":"impl Clone for OobInline","synthetic":false,"types":[]},{"text":"impl Clone for SocketError","synthetic":false,"types":[]},{"text":"impl Clone for KeepAlive","synthetic":false,"types":[]},{"text":"impl Clone for PeerCredentials","synthetic":false,"types":[]},{"text":"impl Clone for TcpKeepIdle","synthetic":false,"types":[]},{"text":"impl Clone for RcvBuf","synthetic":false,"types":[]},{"text":"impl Clone for SndBuf","synthetic":false,"types":[]},{"text":"impl Clone for RcvBufForce","synthetic":false,"types":[]},{"text":"impl Clone for SndBufForce","synthetic":false,"types":[]},{"text":"impl Clone for SockType","synthetic":false,"types":[]},{"text":"impl Clone for AcceptConn","synthetic":false,"types":[]},{"text":"impl Clone for OriginalDst","synthetic":false,"types":[]},{"text":"impl Clone for ReceiveTimestamp","synthetic":false,"types":[]},{"text":"impl Clone for IpTransparent","synthetic":false,"types":[]},{"text":"impl Clone for Mark","synthetic":false,"types":[]},{"text":"impl Clone for PassCred","synthetic":false,"types":[]},{"text":"impl Clone for TcpCongestion","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4PacketInfo","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6RecvPacketInfo","synthetic":false,"types":[]},{"text":"impl Clone for AlgSetAeadAuthSize","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AlgSetKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SockType","synthetic":false,"types":[]},{"text":"impl Clone for SockProtocol","synthetic":false,"types":[]},{"text":"impl Clone for SockFlag","synthetic":false,"types":[]},{"text":"impl Clone for MsgFlags","synthetic":false,"types":[]},{"text":"impl Clone for UnixCredentials","synthetic":false,"types":[]},{"text":"impl Clone for IpMembershipRequest","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6MembershipRequest","synthetic":false,"types":[]},{"text":"impl Clone for SockLevel","synthetic":false,"types":[]},{"text":"impl Clone for Shutdown","synthetic":false,"types":[]},{"text":"impl Clone for SFlag","synthetic":false,"types":[]},{"text":"impl Clone for Mode","synthetic":false,"types":[]},{"text":"impl Clone for FchmodatFlags","synthetic":false,"types":[]},{"text":"impl Clone for UtimensatFlags","synthetic":false,"types":[]},{"text":"impl Clone for FsFlags","synthetic":false,"types":[]},{"text":"impl Clone for Statvfs","synthetic":false,"types":[]},{"text":"impl Clone for SysInfo","synthetic":false,"types":[]},{"text":"impl Clone for Termios","synthetic":false,"types":[]},{"text":"impl Clone for BaudRate","synthetic":false,"types":[]},{"text":"impl Clone for SetArg","synthetic":false,"types":[]},{"text":"impl Clone for FlushArg","synthetic":false,"types":[]},{"text":"impl Clone for FlowArg","synthetic":false,"types":[]},{"text":"impl Clone for SpecialCharacterIndices","synthetic":false,"types":[]},{"text":"impl Clone for InputFlags","synthetic":false,"types":[]},{"text":"impl Clone for OutputFlags","synthetic":false,"types":[]},{"text":"impl Clone for ControlFlags","synthetic":false,"types":[]},{"text":"impl Clone for LocalFlags","synthetic":false,"types":[]},{"text":"impl Clone for TimeSpec","synthetic":false,"types":[]},{"text":"impl Clone for TimeVal","synthetic":false,"types":[]},{"text":"impl Clone for RemoteIoVec","synthetic":false,"types":[]},{"text":"impl Clone for UtsName","synthetic":false,"types":[]},{"text":"impl Clone for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Clone for WaitStatus","synthetic":false,"types":[]},{"text":"impl Clone for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Clone for InitFlags","synthetic":false,"types":[]},{"text":"impl Clone for Inotify","synthetic":false,"types":[]},{"text":"impl Clone for WatchDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for UContext","synthetic":false,"types":[]},{"text":"impl Clone for Uid","synthetic":false,"types":[]},{"text":"impl Clone for Gid","synthetic":false,"types":[]},{"text":"impl Clone for Pid","synthetic":false,"types":[]},{"text":"impl Clone for ForkResult","synthetic":false,"types":[]},{"text":"impl Clone for FchownatFlags","synthetic":false,"types":[]},{"text":"impl Clone for Whence","synthetic":false,"types":[]},{"text":"impl Clone for PathconfVar","synthetic":false,"types":[]},{"text":"impl Clone for SysconfVar","synthetic":false,"types":[]},{"text":"impl Clone for AccessFlags","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for Error&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for ErrorVariant&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for InputLocation","synthetic":false,"types":[]},{"text":"impl Clone for LineColLocation","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for FlatPairs&lt;'i, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for Pair&lt;'i, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for Pairs&lt;'i, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for Tokens&lt;'i, R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lookahead","synthetic":false,"types":[]},{"text":"impl Clone for Atomicity","synthetic":false,"types":[]},{"text":"impl Clone for MatchDir","synthetic":false,"types":[]},{"text":"impl&lt;'i&gt; Clone for Position&lt;'i&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Assoc","synthetic":false,"types":[]},{"text":"impl&lt;'i&gt; Clone for Span&lt;'i&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'i, R:&nbsp;Clone&gt; Clone for Token&lt;'i, R&gt;","synthetic":false,"types":[]}];
implementors["petgraph"] = [{"text":"impl Clone for Time","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for DfsEvent&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for Control&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Dfs&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for DfsPostOrder&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Bfs&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Topo&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Clone, C:&nbsp;Clone&gt; Clone for WalkerIter&lt;W, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for NodeFiltered&lt;G, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for EdgeFiltered&lt;G, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone&gt; Clone for Reversed&lt;G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for ReversedEdgeReference&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for Element&lt;N, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Dominators&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Copy + Eq + Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for DfsSpace&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Cycle&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NegativeCycle","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone, Ty, Ix:&nbsp;Clone&gt; Clone for Csr&lt;N, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EdgesNotSorted","synthetic":false,"types":[]},{"text":"impl&lt;'a, E:&nbsp;Clone + 'a, Ty:&nbsp;Clone, Ix:&nbsp;Clone + 'a&gt; Clone for Edges&lt;'a, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix:&nbsp;Copy&gt; Clone for EdgeReference&lt;'a, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Ix:&nbsp;Clone + 'a&gt; Clone for Neighbors&lt;'a, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for NodeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for EdgeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E, Ix&gt; Clone for Node&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;E, Ix&gt; Clone for Edge&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, E, Ty, Ix:&nbsp;IndexType&gt; Clone for Graph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; Clone for Neighbors&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; Clone for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: EdgeType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ix&gt; Clone for WalkNeighbors&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for NodeIndices&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for EdgeIndices&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix:&nbsp;IndexType&gt; Clone for EdgeReference&lt;'a, E, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone, Ty:&nbsp;Clone&gt; Clone for GraphMap&lt;N, E, Ty&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'b, T&gt; Clone for Ptr&lt;'b, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone&gt; Clone for UnionFind&lt;K&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Direction","synthetic":false,"types":[]},{"text":"impl Clone for Directed","synthetic":false,"types":[]},{"text":"impl Clone for Undirected","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Clone for YesS3","synthetic":false,"types":[]},{"text":"impl Clone for NoS3","synthetic":false,"types":[]},{"text":"impl Clone for YesS4","synthetic":false,"types":[]},{"text":"impl Clone for NoS4","synthetic":false,"types":[]},{"text":"impl Clone for YesA1","synthetic":false,"types":[]},{"text":"impl Clone for NoA1","synthetic":false,"types":[]},{"text":"impl Clone for YesA2","synthetic":false,"types":[]},{"text":"impl Clone for NoA2","synthetic":false,"types":[]},{"text":"impl Clone for YesNI","synthetic":false,"types":[]},{"text":"impl Clone for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Clone, S4:&nbsp;Clone, NI:&nbsp;Clone&gt; Clone for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Clone&gt; Clone for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Clone for vec128_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec256_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Clone for SpanRange","synthetic":false,"types":[]}];
implementors["proptest"] = [{"text":"impl&lt;S:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for UniformArrayStrategy&lt;S, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for ArrayValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + BitSetLike&gt; Clone for BitSetStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + BitSetLike&gt; Clone for SampledBitSetStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + BitSetLike&gt; Clone for BitSetValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for Weighted","synthetic":false,"types":[]},{"text":"impl Clone for BoolValueTree","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CharStrategy&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CharValueTree","synthetic":false,"types":[]},{"text":"impl Clone for SizeRange","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Strategy&gt; Clone for VecStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for VecDequeStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for VecDequeValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LinkedListStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LinkedListValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BinaryHeapStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BinaryHeapValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HashSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HashSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BTreeSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BTreeSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for HashMapStrategy&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::Value: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for HashMapValueTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::Value: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for BTreeMapStrategy&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for BTreeMapValueTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: ValueTree,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::Value: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + ValueTree&gt; Clone for VecValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl Clone for Any","synthetic":false,"types":[]},{"text":"impl Clone for BinarySearch","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for Filter&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for FilterMap&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone + ValueTree, F:&nbsp;Fn(V::Value) -&gt; Option&lt;O&gt;, O&gt; Clone for FilterMapValueTree&lt;V, F, O&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Flatten&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;ValueTree&gt; Clone for FlattenValueTree&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Value: Strategy + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S::Value as Strategy&gt;::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for IndFlatten&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for IndFlattenMap&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Fuse&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Debug&gt; Clone for Just&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;Clone + Fn() -&gt; T&gt; Clone for LazyJust&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Strategy&gt; Clone for LazyValueTree&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for Map&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, O&gt; Clone for MapInto&lt;S, O&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for Perturb&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F&gt; Clone for PerturbValueTree&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F&gt; Clone for Recursive&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Shuffle&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for ShuffleValueTree&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for NoShrink&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for BoxedStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for SBoxedStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CheckStrategySanityOptions","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Strategy&gt; Clone for Union&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Strategy&gt; Clone for UnionValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleUnion&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleUnionValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Filter&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for TestCaseError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TestError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FileFailurePersistence","synthetic":false,"types":[]},{"text":"impl Clone for MapFailurePersistence","synthetic":false,"types":[]},{"text":"impl Clone for PersistedSeed","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn FailurePersistence&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Reason","synthetic":false,"types":[]},{"text":"impl Clone for RngAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for TestRng","synthetic":false,"types":[]},{"text":"impl Clone for TestRunner","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Probability","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OptionStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Value: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Strategy&gt; Clone for OptionValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for MaybeOk&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Strategy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for MaybeErr&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Strategy,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Strategy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Strategy, E:&nbsp;Strategy&gt; Clone for MaybeOkValueTree&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Tree: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Strategy, E:&nbsp;Strategy&gt; Clone for MaybeErrValueTree&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Tree: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::Tree: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + 'static&gt; Clone for Subsequence&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + 'static&gt; Clone for SubsequenceValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Select&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Debug + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SelectValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Debug + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for IndexStrategy","synthetic":false,"types":[]},{"text":"impl Clone for IndexValueTree","synthetic":false,"types":[]},{"text":"impl Clone for Selector","synthetic":false,"types":[]},{"text":"impl Clone for StringParam","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Clone for Bernoulli","synthetic":false,"types":[]},{"text":"impl Clone for BernoulliError","synthetic":false,"types":[]},{"text":"impl Clone for Binomial","synthetic":false,"types":[]},{"text":"impl Clone for Cauchy","synthetic":false,"types":[]},{"text":"impl Clone for Dirichlet","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for FisherF","synthetic":false,"types":[]},{"text":"impl Clone for StudentT","synthetic":false,"types":[]},{"text":"impl Clone for Beta","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Pareto","synthetic":false,"types":[]},{"text":"impl Clone for Poisson","synthetic":false,"types":[]},{"text":"impl Clone for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform&gt; Clone for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UniformDuration","synthetic":false,"types":[]},{"text":"impl Clone for UnitCircle","synthetic":false,"types":[]},{"text":"impl Clone for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Clone for Weibull","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Weight&gt; Clone for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Uniform&lt;W&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform + PartialOrd&gt; Clone for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for WeightedError","synthetic":false,"types":[]},{"text":"impl Clone for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Clone for Open01","synthetic":false,"types":[]},{"text":"impl Clone for Standard","synthetic":false,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Clone for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BlockRngCore + SeedableRng + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RngCore + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for StepRng","synthetic":false,"types":[]},{"text":"impl Clone for StdRng","synthetic":false,"types":[]},{"text":"impl Clone for ThreadRng","synthetic":false,"types":[]},{"text":"impl Clone for IndexVec","synthetic":false,"types":[]},{"text":"impl Clone for IndexVecIntoIter","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Clone for ChaCha20Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OsRng","synthetic":false,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl Clone for XorShiftRng","synthetic":false,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T:&nbsp;Clone + Ord + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Ord + Sync, V:&nbsp;Sync&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync + 'a&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Hash + Eq + Sync, V:&nbsp;Sync&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Hash + Eq + Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ParallelIterator&lt;Item = A::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Cloned&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Copied&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Clone for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Enumerate&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, P:&nbsp;Clone&gt; Clone for Filter&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, P:&nbsp;Clone&gt; Clone for FilterMap&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for FlatMap&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for FlatMapIter&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Flatten&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for FlattenIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Fold&lt;I, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FoldWith&lt;I, U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Inspect&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for MinLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for MaxLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Map&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapWith&lt;I, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, INIT:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapInit&lt;I, INIT, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MultiZip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for Once&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for PanicFuse&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Iter:&nbsp;Clone&gt; Clone for IterBridge&lt;Iter&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator, P:&nbsp;Clone&gt; Clone for Positions&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for RepeatN&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Rev&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Skip&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Split&lt;D, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Take&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for TryFold&lt;I, U, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone + Try, F:&nbsp;Clone&gt; Clone for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Ok: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Update&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + IndexedParallelIterator, B:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Zip&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + IndexedParallelIterator, B:&nbsp;Clone + IndexedParallelIterator&gt; Clone for ZipEq&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for StepBy&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Iter&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Chunks&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for ChunksExact&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Windows&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T, P:&nbsp;Clone&gt; Clone for Split&lt;'data, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Chars&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for CharIndices&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Bytes&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for EncodeUtf16&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for Split&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for SplitTerminator&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Lines&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for SplitWhitespace&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for Matches&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for MatchIndices&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl&lt;'r&gt; Clone for CaptureNames&lt;'r&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for NoExpand&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl&lt;'r&gt; Clone for CaptureNames&lt;'r&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for NoExpand&lt;'t&gt;","synthetic":false,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for DenseDFA&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Standard&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for ByteClass&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Premultiplied&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for PremultipliedByteClass&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone&gt; Clone for Regex&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for SparseDFA&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Standard&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for ByteClass&lt;T, S&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["rusty_fork"] = [{"text":"impl Clone for RustyForkId","synthetic":false,"types":[]},{"text":"impl Clone for ExitStatusWrapper","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Clone for Identifier","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]},{"text":"impl Clone for SemVerError","synthetic":false,"types":[]},{"text":"impl Clone for VersionReq","synthetic":false,"types":[]},{"text":"impl Clone for ReqParseError","synthetic":false,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Clone for RangeSet","synthetic":false,"types":[]},{"text":"impl Clone for Compat","synthetic":false,"types":[]},{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl Clone for Comparator","synthetic":false,"types":[]},{"text":"impl Clone for Op","synthetic":false,"types":[]},{"text":"impl Clone for Identifier","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]},{"text":"impl Clone for Identifier","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for BytesDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Clone for Category","synthetic":false,"types":[]},{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompactFormatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Clone for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array + Clone&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["supercow"] = [{"text":"impl&lt;T, B:&nbsp;?Sized&gt; Clone for TwoStepRc&lt;T, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, B:&nbsp;?Sized&gt; Clone for TwoStepArc&lt;T, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for InlineStorage&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BoxedStorage","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Box&lt;dyn DefaultFeatures&lt;'a&gt; + 'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Box&lt;dyn NonSyncFeatures&lt;'a&gt; + 'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, OWNED, BORROWED:&nbsp;?Sized, SHARED, STORAGE, PTR&gt; Clone for Supercow&lt;'a, OWNED, BORROWED, SHARED, STORAGE, PTR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BORROWED: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;*const BORROWED: PointerFirstRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;STORAGE: OwnedStorage&lt;OWNED, SHARED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PTR: PtrWrite&lt;BORROWED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;OWNED: Clone + SafeBorrow&lt;BORROWED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SHARED: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Existential","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprBox","synthetic":false,"types":[]},{"text":"impl Clone for ExprInPlace","synthetic":false,"types":[]},{"text":"impl Clone for ExprArray","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprMethodCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprTuple","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprType","synthetic":false,"types":[]},{"text":"impl Clone for ExprLet","synthetic":false,"types":[]},{"text":"impl Clone for ExprIf","synthetic":false,"types":[]},{"text":"impl Clone for ExprWhile","synthetic":false,"types":[]},{"text":"impl Clone for ExprForLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprMatch","synthetic":false,"types":[]},{"text":"impl Clone for ExprClosure","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnsafe","synthetic":false,"types":[]},{"text":"impl Clone for ExprBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssign","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssignOp","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprRange","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprReference","synthetic":false,"types":[]},{"text":"impl Clone for ExprBreak","synthetic":false,"types":[]},{"text":"impl Clone for ExprContinue","synthetic":false,"types":[]},{"text":"impl Clone for ExprReturn","synthetic":false,"types":[]},{"text":"impl Clone for ExprMacro","synthetic":false,"types":[]},{"text":"impl Clone for ExprStruct","synthetic":false,"types":[]},{"text":"impl Clone for ExprRepeat","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprGroup","synthetic":false,"types":[]},{"text":"impl Clone for ExprTry","synthetic":false,"types":[]},{"text":"impl Clone for ExprAsync","synthetic":false,"types":[]},{"text":"impl Clone for ExprTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprYield","synthetic":false,"types":[]},{"text":"impl Clone for ExprVerbatim","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for MethodTurbofish","synthetic":false,"types":[]},{"text":"impl Clone for GenericMethodArgument","synthetic":false,"types":[]},{"text":"impl Clone for FieldValue","synthetic":false,"types":[]},{"text":"impl Clone for Label","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Pat","synthetic":false,"types":[]},{"text":"impl Clone for PatWild","synthetic":false,"types":[]},{"text":"impl Clone for PatIdent","synthetic":false,"types":[]},{"text":"impl Clone for PatStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatTupleStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatPath","synthetic":false,"types":[]},{"text":"impl Clone for PatTuple","synthetic":false,"types":[]},{"text":"impl Clone for PatBox","synthetic":false,"types":[]},{"text":"impl Clone for PatRef","synthetic":false,"types":[]},{"text":"impl Clone for PatLit","synthetic":false,"types":[]},{"text":"impl Clone for PatRange","synthetic":false,"types":[]},{"text":"impl Clone for PatSlice","synthetic":false,"types":[]},{"text":"impl Clone for PatMacro","synthetic":false,"types":[]},{"text":"impl Clone for PatVerbatim","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for RangeLimits","synthetic":false,"types":[]},{"text":"impl Clone for FieldPat","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for ItemExternCrate","synthetic":false,"types":[]},{"text":"impl Clone for ItemUse","synthetic":false,"types":[]},{"text":"impl Clone for ItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ItemMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemForeignMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemType","synthetic":false,"types":[]},{"text":"impl Clone for ItemExistential","synthetic":false,"types":[]},{"text":"impl Clone for ItemStruct","synthetic":false,"types":[]},{"text":"impl Clone for ItemEnum","synthetic":false,"types":[]},{"text":"impl Clone for ItemUnion","synthetic":false,"types":[]},{"text":"impl Clone for ItemTrait","synthetic":false,"types":[]},{"text":"impl Clone for ItemTraitAlias","synthetic":false,"types":[]},{"text":"impl Clone for ItemImpl","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro2","synthetic":false,"types":[]},{"text":"impl Clone for ItemVerbatim","synthetic":false,"types":[]},{"text":"impl Clone for UseTree","synthetic":false,"types":[]},{"text":"impl Clone for UsePath","synthetic":false,"types":[]},{"text":"impl Clone for UseName","synthetic":false,"types":[]},{"text":"impl Clone for UseRename","synthetic":false,"types":[]},{"text":"impl Clone for UseGlob","synthetic":false,"types":[]},{"text":"impl Clone for UseGroup","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItem","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemType","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemVerbatim","synthetic":false,"types":[]},{"text":"impl Clone for TraitItem","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemConst","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemType","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemVerbatim","synthetic":false,"types":[]},{"text":"impl Clone for ImplItem","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemType","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemExistential","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemVerbatim","synthetic":false,"types":[]},{"text":"impl Clone for MethodSig","synthetic":false,"types":[]},{"text":"impl Clone for FnDecl","synthetic":false,"types":[]},{"text":"impl Clone for FnArg","synthetic":false,"types":[]},{"text":"impl Clone for ArgSelfRef","synthetic":false,"types":[]},{"text":"impl Clone for ArgSelf","synthetic":false,"types":[]},{"text":"impl Clone for ArgCaptured","synthetic":false,"types":[]},{"text":"impl Clone for File","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for LitVerbatim","synthetic":false,"types":[]},{"text":"impl Clone for StrStyle","synthetic":false,"types":[]},{"text":"impl Clone for IntSuffix","synthetic":false,"types":[]},{"text":"impl Clone for FloatSuffix","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeVerbatim","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArgName","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for IntoPairs&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for IntoIter&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Pair&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["target_spec"] = [{"text":"impl&lt;'a&gt; Clone for TargetSpec&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Platform&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TargetFeatures","synthetic":false,"types":[]},{"text":"impl Clone for PlatformSummary","synthetic":false,"types":[]},{"text":"impl Clone for TargetFeaturesSummary","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl&lt;'a, 'b&gt; Clone for Builder&lt;'a, 'b&gt;","synthetic":false,"types":[]}];
implementors["textwrap"] = [{"text":"impl Clone for NoHyphenation","synthetic":false,"types":[]},{"text":"impl Clone for HyphenSplitter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone + WordSplitter&gt; Clone for Wrapper&lt;'a, S&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Clone for Timespec","synthetic":false,"types":[]},{"text":"impl Clone for PreciseTime","synthetic":false,"types":[]},{"text":"impl Clone for SteadyTime","synthetic":false,"types":[]},{"text":"impl Clone for Tm","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Datetime","synthetic":false,"types":[]},{"text":"impl Clone for DatetimeParseError","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Spanned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["toml_edit"] = [{"text":"impl Clone for ArrayOfTables","synthetic":false,"types":[]},{"text":"impl Clone for Decor","synthetic":false,"types":[]},{"text":"impl Clone for Document","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for TomlError","synthetic":false,"types":[]},{"text":"impl Clone for Table","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Array","synthetic":false,"types":[]},{"text":"impl Clone for InlineTable","synthetic":false,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Clone for XxHash64","synthetic":false,"types":[]},{"text":"impl Clone for XxHash32","synthetic":false,"types":[]},{"text":"impl Clone for Hash64","synthetic":false,"types":[]},{"text":"impl Clone for Hash128","synthetic":false,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for TrieSetOwned","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TrieSetSlice&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Clone for GraphemeIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Graphemes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for GraphemeCursor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UWordBounds&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UWordBoundIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UnicodeSentences&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for USentenceBounds&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for USentenceBoundIndices&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for VecMap&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Iter&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Keys&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Values&lt;'a, V&gt;","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Clone for Void","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()