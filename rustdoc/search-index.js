var searchIndex = JSON.parse('{\
"aho_corasick":{"doc":"A library for finding occurrences of many patterns at …","i":[[0,"packed","aho_corasick","A lower level API for packed multiple substring search, …",null,null],[3,"Builder","aho_corasick::packed","A builder for constructing a packed searcher from a …",null,null],[3,"Config","","The configuration for a packed multiple pattern searcher.",null,null],[3,"FindIter","","An iterator over non-overlapping matches from a packed …",null,null],[4,"MatchKind","","A knob for controlling the match semantics of a packed …",null,null],[13,"LeftmostFirst","","Use leftmost-first match semantics, which reports …",0,null],[13,"LeftmostLongest","","Use leftmost-longest match semantics, which reports …",0,null],[3,"Searcher","","A packed searcher for quickly finding occurrences of …",null,null],[3,"AhoCorasick","aho_corasick","An automaton for searching multiple strings in linear …",null,null],[3,"AhoCorasickBuilder","","A builder for configuring an Aho-Corasick automaton.",null,null],[3,"FindIter","","An iterator of non-overlapping matches in a particular …",null,null],[3,"FindOverlappingIter","","An iterator of overlapping matches in a particular …",null,null],[4,"MatchKind","","A knob for controlling the match semantics of an …",null,null],[13,"Standard","","Use standard match semantics, which support overlapping …",1,null],[13,"LeftmostFirst","","Use leftmost-first match semantics, which reports …",1,null],[13,"LeftmostLongest","","Use leftmost-longest match semantics, which reports …",1,null],[3,"StreamFindIter","","An iterator that reports Aho-Corasick matches in a stream.",null,null],[3,"Error","","An error that occurred during the construction of an …",null,null],[4,"ErrorKind","","The kind of error that occurred.",null,null],[13,"StateIDOverflow","","An error that occurs when constructing an automaton would …",2,null],[12,"max","aho_corasick::ErrorKind","The maximum possible state ID.",3,null],[13,"PremultiplyOverflow","aho_corasick","An error that occurs when premultiplication of state IDs …",2,null],[12,"max","aho_corasick::ErrorKind","The maximum possible state id.",4,null],[12,"requested_max","","The maximum ID required by premultiplication.",4,null],[8,"StateID","aho_corasick","A trait describing the representation of an automaton\'s …",null,null],[10,"from_usize","","Convert from a <code>usize</code> to this implementation\'s …",5,[[]]],[10,"to_usize","","Convert this implementation\'s representation to a <code>usize</code>.",5,[[]]],[10,"max_id","","Return the maximum state identifier supported by this …",5,[[]]],[3,"Match","","A representation of a match reported by an Aho-Corasick …",null,null],[11,"pattern","","Returns the identifier of the pattern that matched.",6,[[]]],[11,"start","","The starting position of the match.",6,[[]]],[11,"end","","The ending position of the match.",6,[[]]],[11,"is_empty","","Returns true if and only if this match is empty. That is, …",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","aho_corasick::packed","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","aho_corasick","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"next","","",8,[[],[["option",4],["match",3]]]],[11,"next","","",9,[[],[["option",4],["match",3]]]],[11,"next","","",10,[[],[["result",6],["option",4]]]],[11,"next","aho_corasick::packed","",16,[[],[["option",4],["match",3]]]],[11,"clone","aho_corasick","",7,[[],["ahocorasick",3]]],[11,"clone","","",11,[[],["ahocorasickbuilder",3]]],[11,"clone","","",1,[[],["matchkind",4]]],[11,"clone","","",12,[[],["error",3]]],[11,"clone","","",2,[[],["errorkind",4]]],[11,"clone","aho_corasick::packed","",0,[[],["matchkind",4]]],[11,"clone","","",13,[[],["config",3]]],[11,"clone","","",14,[[],["builder",3]]],[11,"clone","","",15,[[],["searcher",3]]],[11,"clone","aho_corasick","",6,[[],["match",3]]],[11,"default","","",11,[[],["ahocorasickbuilder",3]]],[11,"default","","",1,[[],["matchkind",4]]],[11,"default","aho_corasick::packed","",0,[[],["matchkind",4]]],[11,"default","","",13,[[],["config",3]]],[11,"default","","",14,[[],["builder",3]]],[11,"eq","aho_corasick","",1,[[["matchkind",4]]]],[11,"eq","aho_corasick::packed","",0,[[["matchkind",4]]]],[11,"eq","aho_corasick","",6,[[["match",3]]]],[11,"ne","","",6,[[["match",3]]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","aho_corasick::packed","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","aho_corasick","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"hash","","",6,[[]]],[11,"description","","",12,[[]]],[11,"new","","Create a new Aho-Corasick automaton using the default …",7,[[],["ahocorasick",3]]],[11,"new_auto_configured","","Build an Aho-Corasick automaton with an automatically …",7,[[],["ahocorasick",3]]],[11,"is_match","","Returns true if and only if this automaton matches the …",7,[[["asref",8]]]],[11,"earliest_find","","Returns the location of the first detected match in …",7,[[["asref",8]],[["option",4],["match",3]]]],[11,"find","","Returns the location of the first match according to the …",7,[[["asref",8]],[["option",4],["match",3]]]],[11,"find_iter","","Returns an iterator of non-overlapping matches, using the …",7,[[],["finditer",3]]],[11,"find_overlapping_iter","","Returns an iterator of overlapping matches in the given …",7,[[],["findoverlappingiter",3]]],[11,"replace_all","","Replace all matches with a corresponding value in the …",7,[[],["string",3]]],[11,"replace_all_bytes","","Replace all matches using raw bytes with a corresponding …",7,[[],["vec",3]]],[11,"replace_all_with","","Replace all matches using a closure called on each match. …",7,[[["string",3]]]],[11,"replace_all_with_bytes","","Replace all matches using raw bytes with a closure called …",7,[[["vec",3]]]],[11,"stream_find_iter","","Returns an iterator of non-overlapping matches in the …",7,[[["read",8]],[["streamfinditer",3],["read",8]]]],[11,"stream_replace_all","","Search for and replace all matches of this automaton in …",7,[[],["result",6]]],[11,"stream_replace_all_with","","Search the given reader and replace all matches of this …",7,[[],["result",6]]],[11,"match_kind","","Returns the match kind used by this automaton.",7,[[],["matchkind",4]]],[11,"max_pattern_len","","Returns the length of the longest pattern matched by this …",7,[[]]],[11,"pattern_count","","Return the total number of patterns matched by this …",7,[[]]],[11,"supports_overlapping","","Returns true if and only if this automaton supports …",7,[[]]],[11,"supports_stream","","Returns true if and only if this automaton supports …",7,[[]]],[11,"heap_bytes","","Returns the approximate total amount of heap used by this …",7,[[]]],[11,"new","","Create a new builder for configuring an Aho-Corasick …",11,[[],["ahocorasickbuilder",3]]],[11,"build","","Build an Aho-Corasick automaton using the configuration …",11,[[],["ahocorasick",3]]],[11,"build_with_size","","Build an Aho-Corasick automaton using the configuration …",11,[[],[["result",4],["error",3],["ahocorasick",3]]]],[11,"auto_configure","","Automatically configure the settings on this builder …",11,[[],["ahocorasickbuilder",3]]],[11,"match_kind","","Set the desired match semantics.",11,[[["matchkind",4]],["ahocorasickbuilder",3]]],[11,"anchored","","Enable anchored mode, which requires all matches to start …",11,[[],["ahocorasickbuilder",3]]],[11,"ascii_case_insensitive","","Enable ASCII-aware case insensitive matching.",11,[[],["ahocorasickbuilder",3]]],[11,"dense_depth","","Set the limit on how many NFA states use a dense …",11,[[],["ahocorasickbuilder",3]]],[11,"dfa","","Compile the standard Aho-Corasick automaton into a …",11,[[],["ahocorasickbuilder",3]]],[11,"prefilter","","Enable heuristic prefilter optimizations.",11,[[],["ahocorasickbuilder",3]]],[11,"byte_classes","","Shrink the size of the transition alphabet by mapping …",11,[[],["ahocorasickbuilder",3]]],[11,"premultiply","","Premultiply state identifiers in the transition table. …",11,[[],["ahocorasickbuilder",3]]],[11,"kind","","Return the kind of this error.",12,[[],["errorkind",4]]],[11,"new","aho_corasick::packed","Create a new default configuration. A default …",13,[[],["config",3]]],[11,"builder","","Create a packed builder from this configuration. The …",13,[[],["builder",3]]],[11,"match_kind","","Set the match semantics for this configuration.",13,[[["matchkind",4]],["config",3]]],[11,"new","","Create a new builder for constructing a multi-pattern …",14,[[],["builder",3]]],[11,"build","","Build a searcher from the patterns added to this builder …",14,[[],[["searcher",3],["option",4]]]],[11,"add","","Add the given pattern to this set to match.",14,[[["asref",8]],["builder",3]]],[11,"extend","","Add the given iterator of patterns to this set to match.",14,[[],["builder",3]]],[11,"new","","A convenience function for constructing a searcher from …",15,[[],[["searcher",3],["option",4]]]],[11,"find","","Return the first occurrence of any of the patterns in …",15,[[["asref",8]],[["option",4],["match",3]]]],[11,"find_at","","Return the first occurrence of any of the patterns in …",15,[[["asref",8]],[["option",4],["match",3]]]],[11,"find_iter","","Return an iterator of non-overlapping occurrences of the …",15,[[],["finditer",3]]],[11,"match_kind","","Returns the match kind used by this packed searcher.",15,[[],["matchkind",4]]],[11,"minimum_len","","Returns the minimum length of a haystack that is required …",15,[[]]],[11,"heap_bytes","","Returns the approximate total amount of heap used by this …",15,[[]]]],"p":[[4,"MatchKind"],[4,"MatchKind"],[4,"ErrorKind"],[13,"StateIDOverflow"],[13,"PremultiplyOverflow"],[8,"StateID"],[3,"Match"],[3,"AhoCorasick"],[3,"FindIter"],[3,"FindOverlappingIter"],[3,"StreamFindIter"],[3,"AhoCorasickBuilder"],[3,"Error"],[3,"Config"],[3,"Builder"],[3,"Searcher"],[3,"FindIter"]]},\
"ansi_term":{"doc":"This is a library for controlling colours and formatting, …","i":[[3,"Prefix","ansi_term","Like <code>ANSIString</code>, but only displays the style prefix.",null,null],[3,"Infix","","Like <code>ANSIString</code>, but only displays the difference between …",null,null],[3,"Suffix","","Like <code>ANSIString</code>, but only displays the style suffix.",null,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and …",null,null],[13,"Black","","Colour #0 (foreground code <code>30</code>, background code <code>40</code>).",0,null],[13,"Red","","Colour #1 (foreground code <code>31</code>, background code <code>41</code>).",0,null],[13,"Green","","Colour #2 (foreground code <code>32</code>, background code <code>42</code>).",0,null],[13,"Yellow","","Colour #3 (foreground code <code>33</code>, background code <code>43</code>).",0,null],[13,"Blue","","Colour #4 (foreground code <code>34</code>, background code <code>44</code>).",0,null],[13,"Purple","","Colour #5 (foreground code <code>35</code>, background code <code>45</code>).",0,null],[13,"Cyan","","Colour #6 (foreground code <code>36</code>, background code <code>46</code>).",0,null],[13,"White","","Colour #7 (foreground code <code>37</code>, background code <code>47</code>).",0,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour …",0,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",0,null],[3,"Style","","A style is a collection of properties that can format a …",null,null],[12,"foreground","","The style\'s foreground colour, if it has one.",1,null],[12,"background","","The style\'s background colour, if it has one.",1,null],[12,"is_bold","","Whether this style is bold.",1,null],[12,"is_dimmed","","Whether this style is dimmed.",1,null],[12,"is_italic","","Whether this style is italic.",1,null],[12,"is_underline","","Whether this style is underlined.",1,null],[12,"is_blink","","Whether this style is blinking.",1,null],[12,"is_reverse","","Whether this style has reverse colours.",1,null],[12,"is_hidden","","Whether this style is hidden.",1,null],[12,"is_strikethrough","","Whether this style is struckthrough.",1,null],[4,"Color","","A colour is one specific type of ANSI escape code, and …",null,null],[13,"Black","","Colour #0 (foreground code <code>30</code>, background code <code>40</code>).",0,null],[13,"Red","","Colour #1 (foreground code <code>31</code>, background code <code>41</code>).",0,null],[13,"Green","","Colour #2 (foreground code <code>32</code>, background code <code>42</code>).",0,null],[13,"Yellow","","Colour #3 (foreground code <code>33</code>, background code <code>43</code>).",0,null],[13,"Blue","","Colour #4 (foreground code <code>34</code>, background code <code>44</code>).",0,null],[13,"Purple","","Colour #5 (foreground code <code>35</code>, background code <code>45</code>).",0,null],[13,"Cyan","","Colour #6 (foreground code <code>36</code>, background code <code>46</code>).",0,null],[13,"White","","Colour #7 (foreground code <code>37</code>, background code <code>47</code>).",0,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour …",0,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",0,null],[3,"ANSIGenericString","","An <code>ANSIGenericString</code> includes a generic string type and a …",null,null],[6,"ANSIString","","An ANSI String is a string coupled with the <code>Style</code> to …",null,null],[6,"ANSIByteString","","An <code>ANSIByteString</code> represents a formatted series of bytes. …",null,null],[3,"ANSIGenericStrings","","A set of <code>ANSIGenericString</code>s collected together, in order …",null,null],[12,"0","","",2,null],[6,"ANSIStrings","","A set of <code>ANSIString</code>s collected together, in order to be …",null,null],[5,"ANSIStrings","","A function to construct an <code>ANSIStrings</code> instance.",null,[[],["ansistrings",6]]],[6,"ANSIByteStrings","","A set of <code>ANSIByteString</code>s collected together, in order to …",null,null],[5,"ANSIByteStrings","","A function to construct an <code>ANSIByteStrings</code> instance.",null,[[],["ansibytestrings",6]]],[5,"sub_string","","Return a substring of the given ANSIStrings sequence, …",null,[[["ansistrings",6]],[["vec",3],["ansistring",6]]]],[5,"unstyle","","Return a concatenated copy of <code>strs</code> without the …",null,[[["ansistrings",6]],["string",3]]],[5,"unstyled_len","","Return the unstyled length of ANSIStrings. This is …",null,[[["ansistrings",6]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","You can turn a <code>Colour</code> into a <code>Style</code> with the foreground …",1,[[["colour",4]],["style",3]]],[11,"from","","",6,[[],["ansigenericstring",3]]],[11,"clone","","",3,[[],["prefix",3]]],[11,"clone","","",4,[[],["infix",3]]],[11,"clone","","",5,[[],["suffix",3]]],[11,"clone","","",1,[[],["style",3]]],[11,"clone","","",0,[[],["colour",4]]],[11,"clone","","",6,[[],["ansigenericstring",3]]],[11,"default","","Returns a style with <em>no</em> properties set. Formatting text …",1,[[],["style",3]]],[11,"eq","","",1,[[["style",3]]]],[11,"ne","","",1,[[["style",3]]]],[11,"eq","","",0,[[["colour",4]]]],[11,"ne","","",0,[[["colour",4]]]],[11,"eq","","",6,[[["ansigenericstring",3]]]],[11,"ne","","",6,[[["ansigenericstring",3]]]],[11,"eq","","",2,[[["ansigenericstrings",3]]]],[11,"ne","","",2,[[["ansigenericstrings",3]]]],[11,"deref","","",6,[[]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"prefix","","The prefix bytes for this style. These are the bytes that …",1,[[],["prefix",3]]],[11,"infix","","The infix bytes between this style and <code>next</code> style. These …",1,[[["style",3]],["infix",3]]],[11,"suffix","","The suffix for this style. These are the bytes that tell …",1,[[],["suffix",3]]],[11,"prefix","","The prefix bytes for this colour as a <code>Style</code>. These are …",0,[[],["prefix",3]]],[11,"infix","","The infix bytes between this colour and <code>next</code> colour. …",0,[[["colour",4]],["infix",3]]],[11,"suffix","","The suffix for this colour as a <code>Style</code>. These are the …",0,[[],["suffix",3]]],[11,"new","","Creates a new Style with no properties set.",1,[[],["style",3]]],[11,"bold","","Returns a <code>Style</code> with the bold property set.",1,[[],["style",3]]],[11,"dimmed","","Returns a <code>Style</code> with the dimmed property set.",1,[[],["style",3]]],[11,"italic","","Returns a <code>Style</code> with the italic property set.",1,[[],["style",3]]],[11,"underline","","Returns a <code>Style</code> with the underline property set.",1,[[],["style",3]]],[11,"blink","","Returns a <code>Style</code> with the blink property set.",1,[[],["style",3]]],[11,"reverse","","Returns a <code>Style</code> with the reverse property set.",1,[[],["style",3]]],[11,"hidden","","Returns a <code>Style</code> with the hidden property set.",1,[[],["style",3]]],[11,"strikethrough","","Returns a <code>Style</code> with the strikethrough property set.",1,[[],["style",3]]],[11,"fg","","Returns a <code>Style</code> with the foreground colour property set.",1,[[["colour",4]],["style",3]]],[11,"on","","Returns a <code>Style</code> with the background colour property set.",1,[[["colour",4]],["style",3]]],[11,"is_plain","","Return true if this <code>Style</code> has no actual styles, and can …",1,[[]]],[11,"normal","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"bold","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"dimmed","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"italic","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"underline","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"blink","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"reverse","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"hidden","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"strikethrough","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[],["style",3]]],[11,"on","","Returns a <code>Style</code> with the foreground colour set to this …",0,[[["colour",4]],["style",3]]],[11,"style_ref","","Directly access the style",6,[[],["style",3]]],[11,"style_ref_mut","","Directly access the style mutably",6,[[],["style",3]]],[11,"paint","","Paints the given text with this colour, returning an ANSI …",1,[[],[["toowned",8],["sized",8],["ansigenericstring",3]]]],[11,"paint","","Paints the given text with this colour, returning an ANSI …",0,[[],[["toowned",8],["sized",8],["ansigenericstring",3]]]],[11,"write_to","","Write an <code>ANSIByteString</code> to an <code>io::Write</code>.  This writes the …",6,[[],["result",6]]],[11,"write_to","","Write an <code>ANSIByteString</code> to an <code>io::Write</code>.  This writes the …",9,[[],["result",6]]],[11,"write_to","","Write <code>ANSIByteStrings</code> to an <code>io::Write</code>.  This writes the …",2,[[],["result",6]]],[11,"write_to","","Write <code>ANSIByteStrings</code> to an <code>io::Write</code>.  This writes the …",10,[[],["result",6]]]],"p":[[4,"Colour"],[3,"Style"],[3,"ANSIGenericStrings"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIStrings"],[6,"ANSIByteString"],[6,"ANSIByteStrings"]]},\
"anyhow":{"doc":"github crates-io docs-rs","i":[[3,"Error","anyhow","The <code>Error</code> type, a wrapper around a dynamic error type.",null,null],[3,"Chain","","Iterator of a chain of source errors.",null,null],[6,"Result","","<code>Result<T, Error></code>",null,null],[8,"Context","","Provides the <code>context</code> method for <code>Result</code>.",null,null],[10,"context","","Wrap the error value with additional context.",0,[[],[["error",3],["result",6]]]],[10,"with_context","","Wrap the error value with additional context that is …",0,[[],[["error",3],["result",6]]]],[14,"bail","","Return early with an error.",null,null],[14,"ensure","","Return early with an error if a condition is not …",null,null],[14,"anyhow","","Construct an ad-hoc error from a string or existing non-…",null,null],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"drop","","",1,[[]]],[11,"as_ref","","",1,[[],["stderror",8]]],[11,"as_ref","","",1,[[],["stderror",8]]],[11,"from","","",1,[[]]],[11,"next_back","","",2,[[],["option",4]]],[11,"len","","",2,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"clone","","",2,[[],["chain",3]]],[11,"default","","",2,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"new","","",2,[[["stderror",8]]]],[11,"new","","Create a new error object from any error type.",1,[[]]],[11,"msg","","Create a new error object from a printable error message.",1,[[]]],[11,"context","","Wrap the error value with additional context.",1,[[]]],[11,"chain","","An iterator of the chain of source errors contained by …",1,[[],["chain",3]]],[11,"root_cause","","The lowest level cause of this error — this error\'s …",1,[[],["stderror",8]]],[11,"is","","Returns true if <code>E</code> is the type held by this error object.",1,[[]]],[11,"downcast","","Attempt to downcast the error object to a concrete type.",1,[[],["result",4]]],[11,"downcast_ref","","Downcast this error object by reference.",1,[[],["option",4]]],[11,"downcast_mut","","Downcast this error object by mutable reference.",1,[[],["option",4]]]],"p":[[8,"Context"],[3,"Error"],[3,"Chain"]]},\
"ascii":{"doc":"A library that provides ASCII-only string and character …","i":[[4,"AsciiChar","ascii","An ASCII character. It wraps a <code>u8</code>, with the highest bit …",null,null],[13,"Null","","<code>\'\\\\0\'</code>",0,null],[13,"SOH","","Start Of Heading",0,null],[13,"SOX","","Start Of teXt",0,null],[13,"ETX","","End of TeXt",0,null],[13,"EOT","","End Of Transmission",0,null],[13,"ENQ","","Enquiry",0,null],[13,"ACK","","Acknowledgement",0,null],[13,"Bell","","bell / alarm / audible",0,null],[13,"BackSpace","","Backspace",0,null],[13,"Tab","","<code>\'\\\\t\'</code>",0,null],[13,"LineFeed","","<code>\'\\\\n\'</code>",0,null],[13,"VT","","Vertical tab",0,null],[13,"FF","","Form Feed",0,null],[13,"CarriageReturn","","<code>\'\\\\r\'</code>",0,null],[13,"SI","","Shift In",0,null],[13,"SO","","Shift Out",0,null],[13,"DLE","","Data Link Escape",0,null],[13,"DC1","","Device control 1, often XON",0,null],[13,"DC2","","Device control 2",0,null],[13,"DC3","","Device control 3, Often XOFF",0,null],[13,"DC4","","Device control 4",0,null],[13,"NAK","","Negative AcKnowledgement",0,null],[13,"SYN","","Synchronous idle",0,null],[13,"ETB","","End of Transmission Block",0,null],[13,"CAN","","Cancel",0,null],[13,"EM","","End of Medium",0,null],[13,"SUB","","Substitute",0,null],[13,"ESC","","Escape",0,null],[13,"FS","","File Separator",0,null],[13,"GS","","Group Separator",0,null],[13,"RS","","Record Separator",0,null],[13,"US","","Unit Separator",0,null],[13,"Space","","<code>\' \'</code>",0,null],[13,"Exclamation","","<code>\'!\'</code>",0,null],[13,"Quotation","","<code>\'\\\"\'</code>",0,null],[13,"Hash","","<code>\'#\'</code>",0,null],[13,"Dollar","","<code>\'$\'</code>",0,null],[13,"Percent","","<code>\'%\'</code>",0,null],[13,"Ampersand","","<code>\'&\'</code>",0,null],[13,"Apostrophe","","<code>\'\\\\\'\'</code>",0,null],[13,"ParenOpen","","<code>\'(\'</code>",0,null],[13,"ParenClose","","<code>\')\'</code>",0,null],[13,"Asterisk","","<code>\'*\'</code>",0,null],[13,"Plus","","<code>\'+\'</code>",0,null],[13,"Comma","","<code>\',\'</code>",0,null],[13,"Minus","","<code>\'-\'</code>",0,null],[13,"Dot","","<code>\'.\'</code>",0,null],[13,"Slash","","<code>\'/\'</code>",0,null],[13,"_0","","<code>\'0\'</code>",0,null],[13,"_1","","<code>\'1\'</code>",0,null],[13,"_2","","<code>\'2\'</code>",0,null],[13,"_3","","<code>\'3\'</code>",0,null],[13,"_4","","<code>\'4\'</code>",0,null],[13,"_5","","<code>\'5\'</code>",0,null],[13,"_6","","<code>\'6\'</code>",0,null],[13,"_7","","<code>\'7\'</code>",0,null],[13,"_8","","<code>\'8\'</code>",0,null],[13,"_9","","<code>\'9\'</code>",0,null],[13,"Colon","","<code>\':\'</code>",0,null],[13,"Semicolon","","<code>\';\'</code>",0,null],[13,"LessThan","","<code>\'<\'</code>",0,null],[13,"Equal","","<code>\'=\'</code>",0,null],[13,"GreaterThan","","<code>\'>\'</code>",0,null],[13,"Question","","<code>\'?\'</code>",0,null],[13,"At","","<code>\'@\'</code>",0,null],[13,"A","","<code>\'A\'</code>",0,null],[13,"B","","<code>\'B\'</code>",0,null],[13,"C","","<code>\'C\'</code>",0,null],[13,"D","","<code>\'D\'</code>",0,null],[13,"E","","<code>\'E\'</code>",0,null],[13,"F","","<code>\'F\'</code>",0,null],[13,"G","","<code>\'G\'</code>",0,null],[13,"H","","<code>\'H\'</code>",0,null],[13,"I","","<code>\'I\'</code>",0,null],[13,"J","","<code>\'J\'</code>",0,null],[13,"K","","<code>\'K\'</code>",0,null],[13,"L","","<code>\'L\'</code>",0,null],[13,"M","","<code>\'M\'</code>",0,null],[13,"N","","<code>\'N\'</code>",0,null],[13,"O","","<code>\'O\'</code>",0,null],[13,"P","","<code>\'P\'</code>",0,null],[13,"Q","","<code>\'Q\'</code>",0,null],[13,"R","","<code>\'R\'</code>",0,null],[13,"S","","<code>\'S\'</code>",0,null],[13,"T","","<code>\'T\'</code>",0,null],[13,"U","","<code>\'U\'</code>",0,null],[13,"V","","<code>\'V\'</code>",0,null],[13,"W","","<code>\'W\'</code>",0,null],[13,"X","","<code>\'X\'</code>",0,null],[13,"Y","","<code>\'Y\'</code>",0,null],[13,"Z","","<code>\'Z\'</code>",0,null],[13,"BracketOpen","","<code>\'[\'</code>",0,null],[13,"BackSlash","","<code>\'\\\\\'</code>",0,null],[13,"BracketClose","","<code>\']\'</code>",0,null],[13,"Caret","","<code>\'_\'</code>",0,null],[13,"UnderScore","","<code>\'_\'</code>",0,null],[13,"Grave","","<code>\'</code>\'`",0,null],[13,"a","","<code>\'a\'</code>",0,null],[13,"b","","<code>\'b\'</code>",0,null],[13,"c","","<code>\'c\'</code>",0,null],[13,"d","","<code>\'d\'</code>",0,null],[13,"e","","<code>\'e\'</code>",0,null],[13,"f","","<code>\'f\'</code>",0,null],[13,"g","","<code>\'g\'</code>",0,null],[13,"h","","<code>\'h\'</code>",0,null],[13,"i","","<code>\'i\'</code>",0,null],[13,"j","","<code>\'j\'</code>",0,null],[13,"k","","<code>\'k\'</code>",0,null],[13,"l","","<code>\'l\'</code>",0,null],[13,"m","","<code>\'m\'</code>",0,null],[13,"n","","<code>\'n\'</code>",0,null],[13,"o","","<code>\'o\'</code>",0,null],[13,"p","","<code>\'p\'</code>",0,null],[13,"q","","<code>\'q\'</code>",0,null],[13,"r","","<code>\'r\'</code>",0,null],[13,"s","","<code>\'s\'</code>",0,null],[13,"t","","<code>\'t\'</code>",0,null],[13,"u","","<code>\'u\'</code>",0,null],[13,"v","","<code>\'v\'</code>",0,null],[13,"w","","<code>\'w\'</code>",0,null],[13,"x","","<code>\'x\'</code>",0,null],[13,"y","","<code>\'y\'</code>",0,null],[13,"z","","<code>\'z\'</code>",0,null],[13,"CurlyBraceOpen","","<code>\'{\'</code>",0,null],[13,"VerticalBar","","<code>\'|\'</code>",0,null],[13,"CurlyBraceClose","","<code>\'}\'</code>",0,null],[13,"Tilde","","<code>\'~\'</code>",0,null],[13,"DEL","","Delete",0,null],[8,"ToAsciiChar","","Convert <code>char</code>, <code>u8</code> and other character types to <code>AsciiChar</code>.",null,null],[10,"to_ascii_char_unchecked","","Convert to <code>AsciiChar</code> without checking that it is an ASCII …",1,[[],["asciichar",4]]],[10,"to_ascii_char","","Convert to <code>AsciiChar</code>.",1,[[],[["result",4],["toasciicharerror",3],["asciichar",4]]]],[3,"ToAsciiCharError","","Error returned by <code>ToAsciiChar</code>.",null,null],[3,"AsciiStr","","AsciiStr represents a byte or string slice that only …",null,null],[8,"AsAsciiStr","","Convert slices of bytes to <code>AsciiStr</code>.",null,null],[10,"as_ascii_str_unchecked","","Convert to an ASCII slice without checking for non-ASCII …",2,[[],["asciistr",3]]],[10,"as_ascii_str","","Convert to an ASCII slice.",2,[[],[["result",4],["asciistr",3],["asasciistrerror",3]]]],[8,"AsMutAsciiStr","","Convert mutable slices of bytes to <code>AsciiStr</code>.",null,null],[10,"as_mut_ascii_str_unchecked","","Convert to a mutable ASCII slice without checking for …",3,[[],["asciistr",3]]],[10,"as_mut_ascii_str","","Convert to a mutable ASCII slice.",3,[[],[["result",4],["asciistr",3],["asasciistrerror",3]]]],[3,"AsAsciiStrError","","Error that is returned when a sequence of <code>u8</code> are not all …",null,null],[6,"Chars","","An immutable iterator over the characters of an <code>AsciiStr</code>.",null,null],[6,"CharsMut","","A mutable iterator over the characters of an <code>AsciiStr</code>.",null,null],[3,"Lines","","An iterator over the lines of the internal character …",null,null],[3,"AsciiString","","A growable string stored as an ASCII encoded buffer.",null,null],[8,"IntoAsciiString","","Convert vectors into <code>AsciiString</code>.",null,null],[10,"into_ascii_string_unchecked","","Convert to <code>AsciiString</code> without checking for non-ASCII …",4,[[],["asciistring",3]]],[10,"into_ascii_string","","Convert to <code>AsciiString</code>.",4,[[],[["asciistring",3],["result",4],["fromasciierror",3]]]],[3,"FromAsciiError","","A possible error value when converting an <code>AsciiString</code> …",null,null],[5,"caret_encode","","Terminals use caret notation to display some typed …",null,[[["copy",8],["into",8]],[["option",4],["asciichar",4]]]],[5,"caret_decode","","Returns the control code represented by a caret notation …",null,[[["copy",8],["into",8]],[["option",4],["asciichar",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_ascii_char","","",0,[[],[["result",4],["toasciicharerror",3],["asciichar",4]]]],[11,"to_ascii_char_unchecked","","",0,[[],["asciichar",4]]],[11,"as_ascii_str","","",6,[[],[["result",4],["asciistr",3],["asasciistrerror",3]]]],[11,"as_ascii_str_unchecked","","",6,[[],["asciistr",3]]],[11,"as_mut_ascii_str","","",6,[[],[["result",4],["asciistr",3],["asasciistrerror",3]]]],[11,"as_mut_ascii_str_unchecked","","",6,[[],["asciistr",3]]],[11,"into_ascii_string_unchecked","","",9,[[],["asciistring",3]]],[11,"into_ascii_string","","",9,[[],[["asciistring",3],["result",4],["fromasciierror",3]]]],[11,"as_mut","","",6,[[]]],[11,"as_mut","","",9,[[],["asciistr",3]]],[11,"as_mut","","",9,[[]]],[11,"as_ref","","",6,[[]]],[11,"as_ref","","",6,[[]]],[11,"as_ref","","",6,[[]]],[11,"as_ref","","",9,[[],["asciistr",3]]],[11,"as_ref","","",9,[[]]],[11,"as_ref","","",9,[[]]],[11,"as_ref","","",9,[[]]],[11,"from","","",9,[[["vec",3],["asciichar",4]]]],[11,"from","","",9,[[["asciistr",3]]]],[11,"from","","",9,[[],["asciistring",3]]],[11,"from","","",9,[[["asciistr",3],["cow",4]],["asciistring",3]]],[11,"into","","",9,[[],["vec",3]]],[11,"into","","",9,[[],["string",3]]],[11,"next_back","","",7,[[],[["asciistr",3],["option",4]]]],[11,"extend","","",9,[[["intoiterator",8]]]],[11,"extend","","",9,[[["intoiterator",8]]]],[11,"extend","","",9,[[["intoiterator",8]]]],[11,"extend","","",9,[[["intoiterator",8]]]],[11,"next","","",7,[[],[["asciistr",3],["option",4]]]],[11,"clone","","",0,[[],["asciichar",4]]],[11,"clone","","",5,[[],["toasciicharerror",3]]],[11,"clone","","",7,[[],["lines",3]]],[11,"clone","","",8,[[],["asasciistrerror",3]]],[11,"clone","","",9,[[],["asciistring",3]]],[11,"clone","","",10,[[],["fromasciierror",3]]],[11,"default","","",0,[[],["asciichar",4]]],[11,"default","","",9,[[],["asciistring",3]]],[11,"cmp","","",0,[[["asciichar",4]],["ordering",4]]],[11,"cmp","","",6,[[["asciistr",3]],["ordering",4]]],[11,"cmp","","",9,[[["asciistring",3]],["ordering",4]]],[11,"eq","","",0,[[["asciichar",4]]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",5,[[["toasciicharerror",3]]]],[11,"ne","","",5,[[["toasciicharerror",3]]]],[11,"eq","","",6,[[["asciistr",3]]]],[11,"ne","","",6,[[["asciistr",3]]]],[11,"eq","","",6,[[]]],[11,"eq","","",6,[[]]],[11,"eq","","",6,[[]]],[11,"eq","","",8,[[["asasciistrerror",3]]]],[11,"ne","","",8,[[["asasciistrerror",3]]]],[11,"eq","","",9,[[["asciistring",3]]]],[11,"ne","","",9,[[["asciistring",3]]]],[11,"eq","","",9,[[]]],[11,"eq","","",9,[[["string",3]]]],[11,"ne","","",9,[[["string",3]]]],[11,"eq","","",9,[[["asciistr",3]]]],[11,"ne","","",9,[[["asciistr",3]]]],[11,"eq","","",9,[[]]],[11,"ne","","",9,[[]]],[11,"eq","","",10,[[["fromasciierror",3]]]],[11,"ne","","",10,[[["fromasciierror",3]]]],[11,"partial_cmp","","",0,[[["asciichar",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",6,[[["asciistr",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["asciistr",3]]]],[11,"le","","",6,[[["asciistr",3]]]],[11,"gt","","",6,[[["asciistr",3]]]],[11,"ge","","",6,[[["asciistr",3]]]],[11,"partial_cmp","","",9,[[["asciistring",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["asciistring",3]]]],[11,"le","","",9,[[["asciistring",3]]]],[11,"gt","","",9,[[["asciistring",3]]]],[11,"ge","","",9,[[["asciistring",3]]]],[11,"to_owned","","",6,[[],["asciistring",3]]],[11,"deref","","",9,[[],["asciistr",3]]],[11,"deref_mut","","",9,[[],["asciistr",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"add","","",9,[[["asciistr",3]],["asciistring",3]]],[11,"add_assign","","",9,[[["asciistr",3]]]],[11,"index","","",6,[[["range",3]],["asciistr",3]]],[11,"index","","",6,[[["rangeto",3]],["asciistr",3]]],[11,"index","","",6,[[["rangefrom",3]],["asciistr",3]]],[11,"index","","",6,[[["rangefull",3]],["asciistr",3]]],[11,"index","","",6,[[],["asciichar",4]]],[11,"index","","",9,[[]]],[11,"index_mut","","",6,[[["range",3]],["asciistr",3]]],[11,"index_mut","","",6,[[["rangeto",3]],["asciistr",3]]],[11,"index_mut","","",6,[[["rangefrom",3]],["asciistr",3]]],[11,"index_mut","","",6,[[["rangefull",3]],["asciistr",3]]],[11,"index_mut","","",6,[[],["asciichar",4]]],[11,"index_mut","","",9,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",9,[[]]],[11,"borrow","","",9,[[],["asciistr",3]]],[11,"borrow_mut","","",9,[[],["asciistr",3]]],[11,"from_str","","",9,[[],[["asciistring",3],["asasciistrerror",3],["result",4]]]],[11,"write_str","","",9,[[],["result",6]]],[11,"write_char","","",9,[[],["result",6]]],[11,"from_iter","","",9,[[["intoiterator",8]],["asciistring",3]]],[11,"from_iter","","",9,[[["intoiterator",8]],["asciistring",3]]],[11,"from_iter","","",9,[[["intoiterator",8]],["asciistring",3]]],[11,"description","","",5,[[]]],[11,"description","","",8,[[]]],[11,"description","","",10,[[]]],[11,"cause","","Always returns an <code>AsAsciiStrError</code>",10,[[],[["error",8],["option",4]]]],[11,"is_ascii","","",0,[[]]],[11,"to_ascii_uppercase","","",0,[[],["asciichar",4]]],[11,"to_ascii_lowercase","","",0,[[],["asciichar",4]]],[11,"eq_ignore_ascii_case","","",0,[[]]],[11,"make_ascii_uppercase","","",0,[[]]],[11,"make_ascii_lowercase","","",0,[[]]],[11,"is_ascii","","",6,[[]]],[11,"to_ascii_uppercase","","",6,[[],["asciistring",3]]],[11,"to_ascii_lowercase","","",6,[[],["asciistring",3]]],[11,"eq_ignore_ascii_case","","",6,[[]]],[11,"make_ascii_uppercase","","",6,[[]]],[11,"make_ascii_lowercase","","",6,[[]]],[11,"from","","Constructs an ASCII character from a <code>u8</code>, <code>char</code> or other …",0,[[["toasciichar",8]],[["result",4],["toasciicharerror",3]]]],[11,"from_unchecked","","Constructs an ASCII character from a <code>char</code> or <code>u8</code> without …",0,[[["toasciichar",8]]]],[11,"as_byte","","Converts an ASCII character into a <code>u8</code>.",0,[[]]],[11,"as_char","","Converts an ASCII character into a <code>char</code>.",0,[[]]],[11,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",0,[[]]],[11,"is_digit","","Check if the character is a number (0-9)",0,[[]]],[11,"is_alphanumeric","","Check if the character is a letter or number",0,[[]]],[11,"is_blank","","Check if the character is a space or horizontal tab",0,[[]]],[11,"is_whitespace","","Check if the character is a \' \', \'\\\\t\', \'\\\\n\' or \'\\\\r\'",0,[[]]],[11,"is_control","","Check if the character is a control character",0,[[]]],[11,"is_graph","","Checks if the character is printable (except space)",0,[[]]],[11,"is_print","","Checks if the character is printable (including space)",0,[[]]],[11,"is_lowercase","","Checks if the character is alphabetic and lowercase",0,[[]]],[11,"is_uppercase","","Checks if the character is alphabetic and uppercase",0,[[]]],[11,"is_punctuation","","Checks if the character is punctuation",0,[[]]],[11,"is_hex","","Checks if the character is a valid hex digit",0,[[]]],[11,"as_printable_char","","Unicode has printable versions of the ASCII control …",0,[[]]],[11,"make_ascii_uppercase","","Replaces letters <code>a</code> to <code>z</code> with <code>A</code> to <code>Z</code>",0,[[]]],[11,"make_ascii_lowercase","","Replaces letters <code>A</code> to <code>Z</code> with <code>a</code> to <code>z</code>",0,[[]]],[11,"to_ascii_uppercase","","Maps letters <code>a</code>...<code>z</code> to <code>A</code>...<code>Z</code> and returns everything else …",0,[[]]],[11,"to_ascii_lowercase","","Maps letters <code>A</code>...<code>Z</code> to <code>a</code>...<code>z</code> and returns everything else …",0,[[]]],[11,"eq_ignore_ascii_case","","Compares two characters case-insensitively.",0,[[]]],[11,"new","","Coerces into an <code>AsciiStr</code> slice.",6,[[],["asciistr",3]]],[11,"as_str","","Converts <code>&self</code> to a <code>&str</code> slice.",6,[[]]],[11,"as_bytes","","Converts <code>&self</code> into a byte slice.",6,[[]]],[11,"as_slice","","Returns the entire string as slice of <code>AsciiChar</code>s.",6,[[]]],[11,"as_mut_slice","","Returns the entire string as mutable slice of <code>AsciiChar</code>s.",6,[[]]],[11,"as_ptr","","Returns a raw pointer to the <code>AsciiStr</code>\'s buffer.",6,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the <code>AsciiStr</code>\'s …",6,[[]]],[11,"to_ascii_string","","Copies the content of this <code>AsciiStr</code> into an owned …",6,[[],["asciistring",3]]],[11,"from_ascii","","Converts anything that can represent a byte slice into an …",6,[[],[["result",4],["asciistr",3],["asasciistrerror",3]]]],[11,"from_ascii_unchecked","","Converts anything that can be represented as a byte slice …",6,[[],["asciistr",3]]],[11,"len","","Returns the number of characters / bytes in this ASCII …",6,[[]]],[11,"is_empty","","Returns true if the ASCII slice contains zero bytes.",6,[[]]],[11,"chars","","Returns an iterator over the characters of the <code>AsciiStr</code>.",6,[[],["chars",6]]],[11,"chars_mut","","Returns an iterator over the characters of the <code>AsciiStr</code> …",6,[[],["charsmut",6]]],[11,"split","","Returns an iterator over parts of the <code>AsciiStr</code> separated …",6,[[["asciichar",4]],["split",3]]],[11,"lines","","Returns an iterator over the lines of the <code>AsciiStr</code>, which …",6,[[],["lines",3]]],[11,"trim","","Returns an ASCII string slice with leading and trailing …",6,[[]]],[11,"trim_left","","Returns an ASCII string slice with leading whitespace …",6,[[]]],[11,"trim_right","","Returns an ASCII string slice with trailing whitespace …",6,[[]]],[11,"eq_ignore_ascii_case","","Compares two strings case-insensitively.",6,[[]]],[11,"make_ascii_uppercase","","Replaces lowercase letters with their uppercase …",6,[[]]],[11,"make_ascii_lowercase","","Replaces uppercase letters with their lowercase …",6,[[]]],[11,"to_ascii_uppercase","","Returns a copy of this string where letters \'a\' to \'z\' …",6,[[],["asciistring",3]]],[11,"to_ascii_lowercase","","Returns a copy of this string where letters \'A\' to \'Z\' …",6,[[],["asciistring",3]]],[11,"first","","Returns the first character if the string is not empty.",6,[[],[["option",4],["asciichar",4]]]],[11,"last","","Returns the last character if the string is not empty.",6,[[],[["option",4],["asciichar",4]]]],[11,"valid_up_to","","Returns the index of the first non-ASCII byte.",8,[[]]],[11,"new","","Creates a new, empty ASCII string buffer without …",9,[[]]],[11,"with_capacity","","Creates a new ASCII string buffer with the given capacity.…",9,[[]]],[11,"from_raw_parts","","Creates a new <code>AsciiString</code> from a length, capacity and …",9,[[]]],[11,"from_ascii_unchecked","","Converts a vector of bytes to an <code>AsciiString</code> without …",9,[[]]],[11,"from_ascii","","Converts anything that can represent a byte buffer into …",9,[[],[["result",4],["asciistring",3],["fromasciierror",3]]]],[11,"push_str","","Pushes the given ASCII string onto this ASCII string …",9,[[["asciistr",3]]]],[11,"capacity","","Returns the number of bytes that this ASCII string buffer …",9,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more bytes to …",9,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",9,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of this ASCII string buffer to match …",9,[[]]],[11,"push","","Adds the given ASCII character to the end of the ASCII …",9,[[["asciichar",4]]]],[11,"truncate","","Shortens a ASCII string to the specified length.",9,[[]]],[11,"pop","","Removes the last character from the ASCII string buffer …",9,[[],[["option",4],["asciichar",4]]]],[11,"remove","","Removes the ASCII character at position <code>idx</code> from the …",9,[[],["asciichar",4]]],[11,"insert","","Inserts an ASCII character into the buffer at position <code>idx</code>…",9,[[["asciichar",4]]]],[11,"len","","Returns the number of bytes in this ASCII string.",9,[[]]],[11,"is_empty","","Returns true if the ASCII string contains zero bytes.",9,[[]]],[11,"clear","","Truncates the ASCII string, setting length (but not …",9,[[]]],[11,"ascii_error","","Get the position of the first non-ASCII byte or character.",10,[[],["asasciistrerror",3]]],[11,"into_source","","Get back the original, unmodified type.",10,[[]]]],"p":[[4,"AsciiChar"],[8,"ToAsciiChar"],[8,"AsAsciiStr"],[8,"AsMutAsciiStr"],[8,"IntoAsciiString"],[3,"ToAsciiCharError"],[3,"AsciiStr"],[3,"Lines"],[3,"AsAsciiStrError"],[3,"AsciiString"],[3,"FromAsciiError"]]},\
"atomicwrites":{"doc":"","i":[[4,"OverwriteBehavior","atomicwrites","Whether to allow overwriting if the target file exists.",null,null],[13,"AllowOverwrite","","Overwrite files silently.",0,null],[13,"DisallowOverwrite","","Don\'t overwrite files. <code>AtomicFile.write</code> will raise errors …",0,null],[4,"Error","","Represents an error raised by <code>AtomicFile.write</code>.",null,null],[13,"Internal","","The error originated in the library itself, while it was …",1,null],[13,"User","","The error originated in the user-supplied callback.",1,null],[3,"AtomicFile","","Create a file and write to it atomically, in a callback.",null,null],[11,"new","","Helper for writing to the file at <code>path</code> atomically, in …",2,[[["overwritebehavior",4]]]],[11,"new_with_tmpdir","","Like <code>AtomicFile::new</code>, but the temporary file is written …",2,[[["overwritebehavior",4]]]],[11,"path","","Get the target filepath.",2,[[],["path",3]]],[11,"write","","Open a temporary file, call <code>f</code> on it (which is supposed to …",2,[[],[["error",4],["result",4]]]],[5,"replace_atomic","","Move <code>src</code> to <code>dst</code>. If <code>dst</code> exists, it will be silently …",null,[[["path",3]],["result",6]]],[5,"move_atomic","","Move <code>src</code> to <code>dst</code>. An error will be returned if <code>dst</code> exists.",null,[[["path",3]],["result",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"clone","","",0,[[],["overwritebehavior",4]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"cause","","",1,[[],[["errortrait",8],["option",4]]]]],"p":[[4,"OverwriteBehavior"],[4,"Error"],[3,"AtomicFile"]]},\
"atty":{"doc":"atty is a simple utility that answers one question","i":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,[[["stream",4]]]],[5,"isnt","","returns true if this is <em>not</em> a tty",null,[[["stream",4]]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["stream",4]]]],"p":[[4,"Stream"]]},\
"bit_set":{"doc":"An implementation of a set using a bit vector as an …","i":[[3,"BitSet","bit_set","",null,null],[11,"new","","Creates a new empty <code>BitSet</code>.",0,[[]]],[11,"with_capacity","","Creates a new <code>BitSet</code> with initially no contents, able to …",0,[[]]],[11,"from_bit_vec","","Creates a new <code>BitSet</code> from the given bit vector.",0,[[["bitvec",3]]]],[11,"from_bytes","","",0,[[]]],[11,"capacity","","Returns the capacity in bits for this bit vector. …",0,[[]]],[11,"reserve_len","","Reserves capacity for the given <code>BitSet</code> to contain <code>len</code> …",0,[[]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given <code>BitSet</code> to …",0,[[]]],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,[[],["bitvec",3]]],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,[[],["bitvec",3]]],[11,"shrink_to_fit","","Truncates the underlying vector to the least length …",0,[[]]],[11,"iter","","Iterator over each usize stored in the <code>BitSet</code>.",0,[[],["iter",3]]],[11,"union","","Iterator over each usize stored in <code>self</code> union <code>other</code>. See …",0,[[],["union",3]]],[11,"intersection","","Iterator over each usize stored in <code>self</code> intersect <code>other</code>. …",0,[[],["intersection",3]]],[11,"difference","","Iterator over each usize stored in the <code>self</code> setminus <code>other</code>…",0,[[],["difference",3]]],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric …",0,[[],["symmetricdifference",3]]],[11,"union_with","","Unions in-place with the specified other bit vector.",0,[[]]],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,[[]]],[11,"difference_with","","Makes this bit vector the difference with the specified …",0,[[]]],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the …",0,[[]]],[11,"len","","Returns the number of set bits in this set.",0,[[]]],[11,"is_empty","","Returns whether there are no bits set in this set",0,[[]]],[11,"clear","","Clears all bits in this set",0,[[]]],[11,"contains","","Returns <code>true</code> if this set contains the specified integer.",0,[[]]],[11,"is_disjoint","","Returns <code>true</code> if the set has no elements in common with …",0,[[]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another.",0,[[]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another.",0,[[]]],[11,"insert","","Adds a value to the set. Returns <code>true</code> if the value was …",0,[[]]],[11,"remove","","Removes a value from the set. Returns <code>true</code> if the value …",0,[[]]],[3,"Iter","","An iterator for <code>BitSet</code>.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"into_iter","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["ordering",4],["option",4]]]],[11,"hash","","",0,[[]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"clone","","",0,[[]]],[11,"clone_from","","",0,[[]]],[11,"clone","","",1,[[],["iter",3]]],[11,"clone","","",2,[[],["union",3]]],[11,"clone","","",3,[[],["intersection",3]]],[11,"clone","","",4,[[],["difference",3]]],[11,"clone","","",5,[[],["symmetricdifference",3]]],[11,"default","","",0,[[]]]],"p":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]},\
"bit_vec":{"doc":"Collections implemented with bit vectors.","i":[[8,"BitBlock","bit_vec","Abstracts over a pile of bits (basically unsigned …",null,null],[10,"bits","","How many bits it has",0,[[]]],[11,"bytes","","How many bytes it has",0,[[]]],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,[[]]],[10,"count_ones","","Count the number of 1\'s in the bitwise repr",0,[[]]],[10,"zero","","Get <code>0</code>",0,[[]]],[10,"one","","Get <code>1</code>",0,[[]]],[3,"BitVec","","The bitvector type.",null,null],[11,"new","","Creates an empty <code>BitVec</code>.",1,[[]]],[11,"from_elem","","Creates a <code>BitVec</code> that holds <code>nbits</code> elements, setting each …",1,[[]]],[11,"with_capacity","","Constructs a new, empty <code>BitVec</code> with the specified …",1,[[]]],[11,"from_bytes","","Transforms a byte-vector into a <code>BitVec</code>. Each byte becomes …",1,[[]]],[11,"from_fn","","Creates a <code>BitVec</code> of the specified length where the value …",1,[[]]],[11,"blocks","","Iterator over the underlying blocks of data",1,[[],["blocks",3]]],[11,"storage","","Exposes the raw block storage of this BitVec",1,[[]]],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,[[],["vec",3]]],[11,"get","","Retrieves the value at index <code>i</code>, or <code>None</code> if the index is …",1,[[],["option",4]]],[11,"set","","Sets the value of a bit at an index <code>i</code>.",1,[[]]],[11,"set_all","","Sets all bits to 1.",1,[[]]],[11,"negate","","Flips all bits.",1,[[]]],[11,"union","","Calculates the union of two bitvectors. This acts like …",1,[[]]],[11,"intersect","","Calculates the intersection of two bitvectors. This acts …",1,[[]]],[11,"or","","Calculates the bitwise <code>or</code> of two bitvectors.",1,[[]]],[11,"and","","Calculates the bitwise <code>and</code> of two bitvectors.",1,[[]]],[11,"difference","","Calculates the difference between two bitvectors.",1,[[]]],[11,"xor","","Calculates the xor of two bitvectors.",1,[[]]],[11,"nand","","Calculates the nand of two bitvectors.",1,[[]]],[11,"nor","","Calculates the nor of two bitvectors.",1,[[]]],[11,"xnor","","Calculates the xnor of two bitvectors.",1,[[]]],[11,"all","","Returns <code>true</code> if all bits are 1.",1,[[]]],[11,"iter","","Returns an iterator over the elements of the vector in …",1,[[],["iter",3]]],[11,"append","","Moves all bits from <code>other</code> into <code>Self</code>, leaving <code>other</code> empty.",1,[[]]],[11,"split_off","","Splits the <code>BitVec</code> into two at the given bit, retaining …",1,[[]]],[11,"none","","Returns <code>true</code> if all bits are 0.",1,[[]]],[11,"any","","Returns <code>true</code> if any bit is 1.",1,[[]]],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in …",1,[[],["vec",3]]],[11,"eq_vec","","Compares a <code>BitVec</code> to a slice of <code>bool</code>s. Both the <code>BitVec</code> …",1,[[]]],[11,"truncate","","Shortens a <code>BitVec</code>, dropping excess elements.",1,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more bits to be …",1,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",1,[[]]],[11,"capacity","","Returns the capacity in bits for this bit vector. …",1,[[]]],[11,"grow","","Grows the <code>BitVec</code> in-place, adding <code>n</code> copies of <code>value</code> to …",1,[[]]],[11,"pop","","Removes the last bit from the BitVec, and returns it. …",1,[[],["option",4]]],[11,"push","","Pushes a <code>bool</code> onto the end.",1,[[]]],[11,"len","","Returns the total number of bits in this vector",1,[[]]],[11,"set_len","","Sets the number of bits that this BitVec considers …",1,[[]]],[11,"is_empty","","Returns true if there are no bits in this vector",1,[[]]],[11,"clear","","Clears all bits in this vector.",1,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the underlying storage as much as …",1,[[]]],[3,"Iter","","An iterator for <code>BitVec</code>.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a <code>BitVec</code>.",null,null],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"partial_cmp","","",1,[[],[["ordering",4],["option",4]]]],[11,"index","","",1,[[]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"next_back","","",4,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"into_iter","","",1,[[],["intoiter",3]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"clone","","",1,[[]]],[11,"clone_from","","",1,[[]]],[11,"clone","","",2,[[],["iter",3]]],[11,"clone","","",4,[[],["blocks",3]]],[11,"default","","",1,[[]]]],"p":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","i":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"p":[]},\
"bstr":{"doc":"An experimental byte string library.","i":[[0,"io","bstr","Utilities for working with I/O using byte strings.",null,null],[8,"BufReadExt","bstr::io","An extention trait for <code>std::io::BufRead</code> which provides …",null,null],[11,"byte_lines","","Returns an iterator over the lines of this reader, where …",0,[[],["bytelines",3]]],[11,"byte_records","","Returns an iterator over byte-terminated records of this …",0,[[],["byterecords",3]]],[11,"for_byte_line","","Executes the given closure on each line in the underlying …",0,[[],["result",6]]],[11,"for_byte_record","","Executes the given closure on each byte-terminated record …",0,[[],["result",6]]],[11,"for_byte_line_with_terminator","","Executes the given closure on each line in the underlying …",0,[[],["result",6]]],[11,"for_byte_record_with_terminator","","Executes the given closure on each byte-terminated record …",0,[[],["result",6]]],[3,"ByteLines","","An iterator over lines from an instance of …",null,null],[3,"ByteRecords","","An iterator over records from an instance of …",null,null],[3,"BStr","bstr","A wrapper for <code>&[u8]</code> that provides convenient string …",null,null],[3,"BString","","A wrapper for <code>Vec<u8></code> that provides convenient string …",null,null],[8,"ByteSlice","","A trait that extends <code>&[u8]</code> with string oriented methods.",null,null],[11,"as_bstr","","Return this byte slice as a <code>&BStr</code>.",1,[[],["bstr",3]]],[11,"as_bstr_mut","","Return this byte slice as a <code>&mut BStr</code>.",1,[[],["bstr",3]]],[11,"from_os_str","","Create an immutable byte string from an OS string slice.",1,[[["osstr",3]],["option",4]]],[11,"from_path","","Create an immutable byte string from a file path.",1,[[["path",3]],["option",4]]],[11,"to_str","","Safely convert this byte string into a <code>&str</code> if it\'s valid …",1,[[],[["utf8error",3],["result",4]]]],[11,"to_str_unchecked","","Unsafely convert this byte string into a <code>&str</code>, without …",1,[[]]],[11,"to_str_lossy","","Convert this byte string to a valid UTF-8 string by …",1,[[],["cow",4]]],[11,"to_str_lossy_into","","Copy the contents of this byte string into the given …",1,[[["string",3]]]],[11,"to_os_str","","Create an OS string slice from this byte string.",1,[[],[["result",4],["utf8error",3],["osstr",3]]]],[11,"to_os_str_lossy","","Lossily create an OS string slice from this byte string.",1,[[],[["cow",4],["osstr",3]]]],[11,"to_path","","Create a path slice from this byte string.",1,[[],[["utf8error",3],["result",4],["path",3]]]],[11,"to_path_lossy","","Lossily create a path slice from this byte string.",1,[[],[["cow",4],["path",3]]]],[11,"repeatn","","Create a new byte string by repeating this byte string <code>n</code> …",1,[[],["vec",3]]],[11,"contains_str","","Returns true if and only if this byte string contains the …",1,[[["asref",8]]]],[11,"starts_with_str","","Returns true if and only if this byte string has the …",1,[[["asref",8]]]],[11,"ends_with_str","","Returns true if and only if this byte string has the …",1,[[["asref",8]]]],[11,"find","","Returns the index of the first occurrence of the given …",1,[[["asref",8]],["option",4]]],[11,"rfind","","Returns the index of the last occurrence of the given …",1,[[["asref",8]],["option",4]]],[11,"find_iter","","Returns an iterator of the non-overlapping occurrences of …",1,[[],["find",3]]],[11,"rfind_iter","","Returns an iterator of the non-overlapping occurrences of …",1,[[],["findreverse",3]]],[11,"find_byte","","Returns the index of the first occurrence of the given …",1,[[],["option",4]]],[11,"rfind_byte","","Returns the index of the last occurrence of the given …",1,[[],["option",4]]],[11,"find_char","","Returns the index of the first occurrence of the given …",1,[[],["option",4]]],[11,"rfind_char","","Returns the index of the last occurrence of the given …",1,[[],["option",4]]],[11,"find_byteset","","Returns the index of the first occurrence of any of the …",1,[[["asref",8]],["option",4]]],[11,"find_not_byteset","","Returns the index of the first occurrence of a byte that …",1,[[["asref",8]],["option",4]]],[11,"rfind_byteset","","Returns the index of the last occurrence of any of the …",1,[[["asref",8]],["option",4]]],[11,"rfind_not_byteset","","Returns the index of the last occurrence of a byte that …",1,[[["asref",8]],["option",4]]],[11,"fields","","Returns an iterator over the fields in a byte string, …",1,[[],["fields",3]]],[11,"fields_with","","Returns an iterator over the fields in a byte string, …",1,[[["fnmut",8]],[["fieldswith",3],["fnmut",8]]]],[11,"split_str","","Returns an iterator over substrings of this byte string, …",1,[[],["split",3]]],[11,"rsplit_str","","Returns an iterator over substrings of this byte string, …",1,[[],["splitreverse",3]]],[11,"splitn_str","","Returns an iterator of at most <code>limit</code> substrings of this …",1,[[],["splitn",3]]],[11,"rsplitn_str","","Returns an iterator of at most <code>limit</code> substrings of this …",1,[[],["splitnreverse",3]]],[11,"replace","","Replace all matches of the given needle with the given …",1,[[["asref",8]],["vec",3]]],[11,"replacen","","Replace up to <code>limit</code> matches of the given needle with the …",1,[[["asref",8]],["vec",3]]],[11,"replace_into","","Replace all matches of the given needle with the given …",1,[[["vec",3],["asref",8]]]],[11,"replacen_into","","Replace up to <code>limit</code> matches of the given needle with the …",1,[[["vec",3],["asref",8]]]],[11,"bytes","","Returns an iterator over the bytes in this byte string.",1,[[],["bytes",3]]],[11,"chars","","Returns an iterator over the Unicode scalar values in …",1,[[],["chars",3]]],[11,"char_indices","","Returns an iterator over the Unicode scalar values in …",1,[[],["charindices",3]]],[11,"utf8_chunks","","Iterate over chunks of valid UTF-8.",1,[[],["utf8chunks",3]]],[11,"graphemes","","Returns an iterator over the grapheme clusters in this …",1,[[],["graphemes",3]]],[11,"grapheme_indices","","Returns an iterator over the grapheme clusters in this …",1,[[],["graphemeindices",3]]],[11,"words","","Returns an iterator over the words in this byte string. …",1,[[],["words",3]]],[11,"word_indices","","Returns an iterator over the words in this byte string …",1,[[],["wordindices",3]]],[11,"words_with_breaks","","Returns an iterator over the words in this byte string, …",1,[[],["wordswithbreaks",3]]],[11,"words_with_break_indices","","Returns an iterator over the words and their byte offsets …",1,[[],["wordswithbreakindices",3]]],[11,"sentences","","Returns an iterator over the sentences in this byte …",1,[[],["sentences",3]]],[11,"sentence_indices","","Returns an iterator over the sentences in this byte …",1,[[],["sentenceindices",3]]],[11,"lines","","An iterator over all lines in a byte string, without their…",1,[[],["lines",3]]],[11,"lines_with_terminator","","An iterator over all lines in a byte string, including …",1,[[],["lineswithterminator",3]]],[11,"trim","","Return a byte string slice with leading and trailing …",1,[[]]],[11,"trim_start","","Return a byte string slice with leading whitespace …",1,[[]]],[11,"trim_end","","Return a byte string slice with trailing whitespace …",1,[[]]],[11,"trim_with","","Return a byte string slice with leading and trailing …",1,[[["fnmut",8]]]],[11,"trim_start_with","","Return a byte string slice with leading characters …",1,[[["fnmut",8]]]],[11,"trim_end_with","","Return a byte string slice with trailing characters …",1,[[["fnmut",8]]]],[11,"to_lowercase","","Returns a new <code>Vec<u8></code> containing the lowercase equivalent …",1,[[],["vec",3]]],[11,"to_lowercase_into","","Writes the lowercase equivalent of this byte string into …",1,[[["vec",3]]]],[11,"to_ascii_lowercase","","Returns a new <code>Vec<u8></code> containing the ASCII lowercase …",1,[[],["vec",3]]],[11,"make_ascii_lowercase","","Convert this byte string to its lowercase ASCII …",1,[[]]],[11,"to_uppercase","","Returns a new <code>Vec<u8></code> containing the uppercase equivalent …",1,[[],["vec",3]]],[11,"to_uppercase_into","","Writes the uppercase equivalent of this byte string into …",1,[[["vec",3]]]],[11,"to_ascii_uppercase","","Returns a new <code>Vec<u8></code> containing the ASCII uppercase …",1,[[],["vec",3]]],[11,"make_ascii_uppercase","","Convert this byte string to its uppercase ASCII …",1,[[]]],[11,"reverse_bytes","","Reverse the bytes in this string, in place.",1,[[]]],[11,"reverse_chars","","Reverse the codepoints in this string, in place.",1,[[]]],[11,"reverse_graphemes","","Reverse the graphemes in this string, in place.",1,[[]]],[11,"is_ascii","","Returns true if and only if every byte in this byte …",1,[[]]],[11,"is_utf8","","Returns true if and only if the entire byte string is …",1,[[]]],[11,"last_byte","","Returns the last byte in this byte string, if it\'s …",1,[[],["option",4]]],[11,"find_non_ascii_byte","","Returns the index of the first non-ASCII byte in this …",1,[[],["option",4]]],[11,"copy_within_str","","Copies elements from one part of the slice to another …",1,[[]]],[3,"Bytes","","An iterator over the bytes in a byte string.",null,null],[3,"Fields","","An iterator over the fields in a byte string, separated …",null,null],[3,"FieldsWith","","An iterator over fields in the byte string, separated by …",null,null],[3,"Find","","An iterator over non-overlapping substring matches.",null,null],[3,"FindReverse","","An iterator over non-overlapping substring matches in …",null,null],[3,"Finder","","A single substring searcher fixed to a particular needle.",null,null],[3,"FinderReverse","","A single substring reverse searcher fixed to a particular …",null,null],[3,"Lines","","An iterator over all lines in a byte string, without …",null,null],[3,"LinesWithTerminator","","An iterator over all lines in a byte string, including …",null,null],[3,"Split","","An iterator over substrings in a byte string, split by a …",null,null],[3,"SplitN","","An iterator over at most <code>n</code> substrings in a byte string, …",null,null],[3,"SplitNReverse","","An iterator over at most <code>n</code> substrings in a byte string, …",null,null],[3,"SplitReverse","","An iterator over substrings in a byte string, split by a …",null,null],[5,"B","","A short-hand constructor for building a <code>&[u8]</code>.",null,[[]]],[5,"concat","","Concatenate the elements given by the iterator together …",null,[[],["vec",3]]],[5,"join","","Join the elements given by the iterator with the given …",null,[[],["vec",3]]],[8,"ByteVec","","A trait that extends <code>Vec<u8></code> with string oriented methods.",null,null],[11,"from_slice","","Create a new owned byte string from the given byte slice.",2,[[["asref",8]],["vec",3]]],[11,"from_os_string","","Create a new byte string from an owned OS string.",2,[[["osstring",3]],[["vec",3],["result",4],["osstring",3]]]],[11,"from_os_str_lossy","","Lossily create a new byte string from an OS string slice.",2,[[["osstr",3]],["cow",4]]],[11,"from_path_buf","","Create a new byte string from an owned file path.",2,[[["pathbuf",3]],[["vec",3],["result",4],["pathbuf",3]]]],[11,"from_path_lossy","","Lossily create a new byte string from a file path.",2,[[["path",3]],["cow",4]]],[11,"push_byte","","Appends the given byte to the end of this byte string.",2,[[]]],[11,"push_char","","Appends the given <code>char</code> to the end of this byte string.",2,[[]]],[11,"push_str","","Appends the given slice to the end of this byte string. …",2,[[["asref",8]]]],[11,"into_string","","Converts a <code>Vec<u8></code> into a <code>String</code> if and only if this byte …",2,[[],[["string",3],["fromutf8error",3],["result",4]]]],[11,"into_string_lossy","","Lossily converts a <code>Vec<u8></code> into a <code>String</code>. If this byte …",2,[[],["string",3]]],[11,"into_string_unchecked","","Unsafely convert this byte string into a <code>String</code>, without …",2,[[],["string",3]]],[11,"into_os_string","","Converts this byte string into an OS string, in place.",2,[[],[["vec",3],["result",4],["osstring",3]]]],[11,"into_os_string_lossy","","Lossily converts this byte string into an OS string, in …",2,[[],["osstring",3]]],[11,"into_path_buf","","Converts this byte string into an owned file path, in …",2,[[],[["vec",3],["pathbuf",3],["result",4]]]],[11,"into_path_buf_lossy","","Lossily converts this byte string into an owned file …",2,[[],["pathbuf",3]]],[11,"pop_byte","","Removes the last byte from this <code>Vec<u8></code> and returns it.",2,[[],["option",4]]],[11,"pop_char","","Removes the last codepoint from this <code>Vec<u8></code> and returns …",2,[[],["option",4]]],[11,"remove_char","","Removes a <code>char</code> from this <code>Vec<u8></code> at the given byte …",2,[[]]],[11,"insert_char","","Inserts the given codepoint into this <code>Vec<u8></code> at a …",2,[[]]],[11,"insert_str","","Inserts the given byte string into this byte string at a …",2,[[["asref",8]]]],[11,"replace_range","","Removes the specified range in this byte string and …",2,[[]]],[11,"drain_bytes","","Creates a draining iterator that removes the specified …",2,[[],["drainbytes",3]]],[3,"DrainBytes","","A draining byte oriented iterator for <code>Vec<u8></code>.",null,null],[3,"FromUtf8Error","","An error that may occur when converting a <code>Vec<u8></code> to a …",null,null],[3,"GraphemeIndices","","An iterator over grapheme clusters in a byte string and …",null,null],[3,"Graphemes","","An iterator over grapheme clusters in a byte string.",null,null],[3,"SentenceIndices","","An iterator over sentences in a byte string, along with …",null,null],[3,"Sentences","","An iterator over sentences in a byte string.",null,null],[3,"WordIndices","","An iterator over words in a byte string and their byte …",null,null],[3,"Words","","An iterator over words in a byte string.",null,null],[3,"WordsWithBreakIndices","","An iterator over all word breaks in a byte string, along …",null,null],[3,"WordsWithBreaks","","An iterator over all word breaks in a byte string.",null,null],[5,"decode_utf8","","UTF-8 decode a single Unicode scalar value from the …",null,[[["asref",8]]]],[5,"decode_last_utf8","","UTF-8 decode a single Unicode scalar value from the end …",null,[[["asref",8]]]],[3,"CharIndices","","An iterator over Unicode scalar values in a byte string …",null,null],[3,"Chars","","An iterator over Unicode scalar values in a byte string.",null,null],[3,"Utf8Chunk","","A chunk of valid UTF-8, possibly followed by invalid …",null,null],[3,"Utf8Chunks","","An iterator over chunks of valid UTF-8 in a byte slice.",null,null],[3,"Utf8Error","","An error that occurs when UTF-8 decoding fails.",null,null],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"into_iter","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"into_iter","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","bstr::io","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","bstr","",22,[[]]],[11,"into","","",22,[[]]],[11,"into_iter","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"into_iter","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"into_iter","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"into_iter","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"into_iter","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"into_iter","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"as_mut","","",4,[[]]],[11,"as_mut","","",4,[[],["bstr",3]]],[11,"as_mut","","",3,[[]]],[11,"as_ref","","",4,[[]]],[11,"as_ref","","",4,[[],["bstr",3]]],[11,"as_ref","","",3,[[]]],[11,"from","","",4,[[],["bstring",3]]],[11,"from","","",4,[[["vec",3]],["bstring",3]]],[11,"from","","",4,[[],["bstring",3]]],[11,"from","","",4,[[["string",3]],["bstring",3]]],[11,"from","","",4,[[["bstr",3]],["bstring",3]]],[11,"next_back","","",9,[[],["option",4]]],[11,"next_back","","",18,[[],["option",4]]],[11,"next_back","","",22,[[],["option",4]]],[11,"next_back","","",23,[[],["option",4]]],[11,"next_back","","",30,[[],["option",4]]],[11,"next_back","","",31,[[],["option",4]]],[11,"len","","",9,[[]]],[11,"len","","",18,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"next","","",8,[[],["option",4]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"next","","",11,[[],["option",4]]],[11,"next","","",12,[[],["option",4]]],[11,"next","","",13,[[],["option",4]]],[11,"next","","",14,[[],["option",4]]],[11,"next","","",15,[[],["option",4]]],[11,"next","","",16,[[],["option",4]]],[11,"next","","",17,[[],["option",4]]],[11,"next","","",18,[[],["option",4]]],[11,"next","bstr::io","",20,[[],[["option",4],["result",6]]]],[11,"next","","",21,[[],[["option",4],["result",6]]]],[11,"next","bstr","",22,[[],["option",4]]],[11,"next","","",23,[[],["option",4]]],[11,"next","","",24,[[],["option",4]]],[11,"next","","",25,[[],["option",4]]],[11,"next","","",26,[[],["option",4]]],[11,"next","","",27,[[],["option",4]]],[11,"next","","",28,[[],["option",4]]],[11,"next","","",29,[[],["option",4]]],[11,"next","","",30,[[],["option",4]]],[11,"next","","",31,[[],["option",4]]],[11,"next","","",32,[[],[["utf8chunk",3],["option",4]]]],[11,"size_hint","","",32,[[]]],[11,"clone","","",4,[[],["bstring",3]]],[11,"clone","","",5,[[],["finder",3]]],[11,"clone","","",6,[[],["finderreverse",3]]],[11,"clone","","",9,[[],["bytes",3]]],[11,"clone","","",22,[[],["graphemes",3]]],[11,"clone","","",23,[[],["graphemeindices",3]]],[11,"clone","","",24,[[],["sentences",3]]],[11,"clone","","",25,[[],["sentenceindices",3]]],[11,"clone","","",26,[[],["words",3]]],[11,"clone","","",27,[[],["wordindices",3]]],[11,"clone","","",28,[[],["wordswithbreaks",3]]],[11,"clone","","",29,[[],["wordswithbreakindices",3]]],[11,"clone","","",30,[[],["chars",3]]],[11,"clone","","",31,[[],["charindices",3]]],[11,"clone","","",32,[[],["utf8chunks",3]]],[11,"default","","",4,[[],["bstring",3]]],[11,"cmp","","",4,[[["bstring",3]],["ordering",4]]],[11,"cmp","","",3,[[["bstr",3]],["ordering",4]]],[11,"eq","","",19,[[["fromutf8error",3]]]],[11,"ne","","",19,[[["fromutf8error",3]]]],[11,"eq","","",4,[[["bstring",3]]]],[11,"eq","","",4,[[["vec",3]]]],[11,"eq","","",4,[[]]],[11,"eq","","",4,[[]]],[11,"eq","","",4,[[["string",3]]]],[11,"eq","","",4,[[]]],[11,"eq","","",4,[[]]],[11,"eq","","",4,[[["bstr",3]]]],[11,"eq","","",3,[[["bstring",3]]]],[11,"eq","","",4,[[["bstr",3]]]],[11,"eq","","",3,[[["bstr",3]]]],[11,"eq","","",3,[[]]],[11,"eq","","",3,[[]]],[11,"eq","","",3,[[]]],[11,"eq","","",3,[[]]],[11,"eq","","",3,[[["vec",3]]]],[11,"eq","","",3,[[["string",3]]]],[11,"eq","","",34,[[["utf8error",3]]]],[11,"ne","","",34,[[["utf8error",3]]]],[11,"partial_cmp","","",4,[[["bstring",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["vec",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["string",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["bstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[["bstring",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["bstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[["bstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[["vec",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[["string",3]],[["option",4],["ordering",4]]]],[11,"to_owned","","",3,[[],["bstring",3]]],[11,"deref","","",4,[[],["vec",3]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",4,[[],["vec",3]]],[11,"deref_mut","","",3,[[]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","bstr::io","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","bstr","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"index","","",3,[[]]],[11,"index","","",3,[[["rangefull",3]],["bstr",3]]],[11,"index","","",3,[[["range",3]],["bstr",3]]],[11,"index","","",3,[[["rangeinclusive",3]],["bstr",3]]],[11,"index","","",3,[[["rangefrom",3]],["bstr",3]]],[11,"index","","",3,[[["rangeto",3]],["bstr",3]]],[11,"index","","",3,[[["rangetoinclusive",3]],["bstr",3]]],[11,"index_mut","","",3,[[]]],[11,"index_mut","","",3,[[["rangefull",3]],["bstr",3]]],[11,"index_mut","","",3,[[["range",3]],["bstr",3]]],[11,"index_mut","","",3,[[["rangeinclusive",3]],["bstr",3]]],[11,"index_mut","","",3,[[["rangefrom",3]],["bstr",3]]],[11,"index_mut","","",3,[[["rangeto",3]],["bstr",3]]],[11,"index_mut","","",3,[[["rangetoinclusive",3]],["bstr",3]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"borrow","","",4,[[],["bstr",3]]],[11,"from_iter","","",4,[[["intoiterator",8]],["bstring",3]]],[11,"from_iter","","",4,[[["intoiterator",8]],["bstring",3]]],[11,"from_iter","","",4,[[["intoiterator",8]],["bstring",3]]],[11,"from_iter","","",4,[[["intoiterator",8]],["bstring",3]]],[11,"from_iter","","",4,[[["intoiterator",8]],["bstring",3]]],[11,"from_iter","","",4,[[["intoiterator",8]],["bstring",3]]],[11,"description","","",19,[[]]],[11,"description","","",34,[[]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"deserialize","","",4,[[],[["result",4],["bstring",3]]]],[11,"as_bstr","","Return this byte slice as a <code>&BStr</code>.",1,[[],["bstr",3]]],[11,"as_bstr_mut","","Return this byte slice as a <code>&mut BStr</code>.",1,[[],["bstr",3]]],[11,"from_os_str","","Create an immutable byte string from an OS string slice.",1,[[["osstr",3]],["option",4]]],[11,"from_path","","Create an immutable byte string from a file path.",1,[[["path",3]],["option",4]]],[11,"to_str","","Safely convert this byte string into a <code>&str</code> if it\'s valid …",1,[[],[["utf8error",3],["result",4]]]],[11,"to_str_unchecked","","Unsafely convert this byte string into a <code>&str</code>, without …",1,[[]]],[11,"to_str_lossy","","Convert this byte string to a valid UTF-8 string by …",1,[[],["cow",4]]],[11,"to_str_lossy_into","","Copy the contents of this byte string into the given …",1,[[["string",3]]]],[11,"to_os_str","","Create an OS string slice from this byte string.",1,[[],[["result",4],["utf8error",3],["osstr",3]]]],[11,"to_os_str_lossy","","Lossily create an OS string slice from this byte string.",1,[[],[["cow",4],["osstr",3]]]],[11,"to_path","","Create a path slice from this byte string.",1,[[],[["utf8error",3],["result",4],["path",3]]]],[11,"to_path_lossy","","Lossily create a path slice from this byte string.",1,[[],[["cow",4],["path",3]]]],[11,"repeatn","","Create a new byte string by repeating this byte string <code>n</code> …",1,[[],["vec",3]]],[11,"contains_str","","Returns true if and only if this byte string contains the …",1,[[["asref",8]]]],[11,"starts_with_str","","Returns true if and only if this byte string has the …",1,[[["asref",8]]]],[11,"ends_with_str","","Returns true if and only if this byte string has the …",1,[[["asref",8]]]],[11,"find","","Returns the index of the first occurrence of the given …",1,[[["asref",8]],["option",4]]],[11,"rfind","","Returns the index of the last occurrence of the given …",1,[[["asref",8]],["option",4]]],[11,"find_iter","","Returns an iterator of the non-overlapping occurrences of …",1,[[],["find",3]]],[11,"rfind_iter","","Returns an iterator of the non-overlapping occurrences of …",1,[[],["findreverse",3]]],[11,"find_byte","","Returns the index of the first occurrence of the given …",1,[[],["option",4]]],[11,"rfind_byte","","Returns the index of the last occurrence of the given …",1,[[],["option",4]]],[11,"find_char","","Returns the index of the first occurrence of the given …",1,[[],["option",4]]],[11,"rfind_char","","Returns the index of the last occurrence of the given …",1,[[],["option",4]]],[11,"find_byteset","","Returns the index of the first occurrence of any of the …",1,[[["asref",8]],["option",4]]],[11,"find_not_byteset","","Returns the index of the first occurrence of a byte that …",1,[[["asref",8]],["option",4]]],[11,"rfind_byteset","","Returns the index of the last occurrence of any of the …",1,[[["asref",8]],["option",4]]],[11,"rfind_not_byteset","","Returns the index of the last occurrence of a byte that …",1,[[["asref",8]],["option",4]]],[11,"fields","","Returns an iterator over the fields in a byte string, …",1,[[],["fields",3]]],[11,"fields_with","","Returns an iterator over the fields in a byte string, …",1,[[["fnmut",8]],[["fieldswith",3],["fnmut",8]]]],[11,"split_str","","Returns an iterator over substrings of this byte string, …",1,[[],["split",3]]],[11,"rsplit_str","","Returns an iterator over substrings of this byte string, …",1,[[],["splitreverse",3]]],[11,"splitn_str","","Returns an iterator of at most <code>limit</code> substrings of this …",1,[[],["splitn",3]]],[11,"rsplitn_str","","Returns an iterator of at most <code>limit</code> substrings of this …",1,[[],["splitnreverse",3]]],[11,"replace","","Replace all matches of the given needle with the given …",1,[[["asref",8]],["vec",3]]],[11,"replacen","","Replace up to <code>limit</code> matches of the given needle with the …",1,[[["asref",8]],["vec",3]]],[11,"replace_into","","Replace all matches of the given needle with the given …",1,[[["vec",3],["asref",8]]]],[11,"replacen_into","","Replace up to <code>limit</code> matches of the given needle with the …",1,[[["vec",3],["asref",8]]]],[11,"bytes","","Returns an iterator over the bytes in this byte string.",1,[[],["bytes",3]]],[11,"chars","","Returns an iterator over the Unicode scalar values in …",1,[[],["chars",3]]],[11,"char_indices","","Returns an iterator over the Unicode scalar values in …",1,[[],["charindices",3]]],[11,"utf8_chunks","","Iterate over chunks of valid UTF-8.",1,[[],["utf8chunks",3]]],[11,"graphemes","","Returns an iterator over the grapheme clusters in this …",1,[[],["graphemes",3]]],[11,"grapheme_indices","","Returns an iterator over the grapheme clusters in this …",1,[[],["graphemeindices",3]]],[11,"words","","Returns an iterator over the words in this byte string. …",1,[[],["words",3]]],[11,"word_indices","","Returns an iterator over the words in this byte string …",1,[[],["wordindices",3]]],[11,"words_with_breaks","","Returns an iterator over the words in this byte string, …",1,[[],["wordswithbreaks",3]]],[11,"words_with_break_indices","","Returns an iterator over the words and their byte offsets …",1,[[],["wordswithbreakindices",3]]],[11,"sentences","","Returns an iterator over the sentences in this byte …",1,[[],["sentences",3]]],[11,"sentence_indices","","Returns an iterator over the sentences in this byte …",1,[[],["sentenceindices",3]]],[11,"lines","","An iterator over all lines in a byte string, without their…",1,[[],["lines",3]]],[11,"lines_with_terminator","","An iterator over all lines in a byte string, including …",1,[[],["lineswithterminator",3]]],[11,"trim","","Return a byte string slice with leading and trailing …",1,[[]]],[11,"trim_start","","Return a byte string slice with leading whitespace …",1,[[]]],[11,"trim_end","","Return a byte string slice with trailing whitespace …",1,[[]]],[11,"trim_with","","Return a byte string slice with leading and trailing …",1,[[["fnmut",8]]]],[11,"trim_start_with","","Return a byte string slice with leading characters …",1,[[["fnmut",8]]]],[11,"trim_end_with","","Return a byte string slice with trailing characters …",1,[[["fnmut",8]]]],[11,"to_lowercase","","Returns a new <code>Vec<u8></code> containing the lowercase equivalent …",1,[[],["vec",3]]],[11,"to_lowercase_into","","Writes the lowercase equivalent of this byte string into …",1,[[["vec",3]]]],[11,"to_ascii_lowercase","","Returns a new <code>Vec<u8></code> containing the ASCII lowercase …",1,[[],["vec",3]]],[11,"make_ascii_lowercase","","Convert this byte string to its lowercase ASCII …",1,[[]]],[11,"to_uppercase","","Returns a new <code>Vec<u8></code> containing the uppercase equivalent …",1,[[],["vec",3]]],[11,"to_uppercase_into","","Writes the uppercase equivalent of this byte string into …",1,[[["vec",3]]]],[11,"to_ascii_uppercase","","Returns a new <code>Vec<u8></code> containing the ASCII uppercase …",1,[[],["vec",3]]],[11,"make_ascii_uppercase","","Convert this byte string to its uppercase ASCII …",1,[[]]],[11,"reverse_bytes","","Reverse the bytes in this string, in place.",1,[[]]],[11,"reverse_chars","","Reverse the codepoints in this string, in place.",1,[[]]],[11,"reverse_graphemes","","Reverse the graphemes in this string, in place.",1,[[]]],[11,"is_ascii","","Returns true if and only if every byte in this byte …",1,[[]]],[11,"is_utf8","","Returns true if and only if the entire byte string is …",1,[[]]],[11,"last_byte","","Returns the last byte in this byte string, if it\'s …",1,[[],["option",4]]],[11,"find_non_ascii_byte","","Returns the index of the first non-ASCII byte in this …",1,[[],["option",4]]],[11,"copy_within_str","","Copies elements from one part of the slice to another …",1,[[]]],[11,"new","","Create a new finder for the given needle.",5,[[],["finder",3]]],[11,"into_owned","","Convert this finder into its owned variant, such that it …",5,[[],["finder",3]]],[11,"needle","","Returns the needle that this finder searches for.",5,[[]]],[11,"find","","Returns the index of the first occurrence of this needle …",5,[[["asref",8]],["option",4]]],[11,"new","","Create a new reverse finder for the given needle.",6,[[],["finderreverse",3]]],[11,"into_owned","","Convert this finder into its owned variant, such that it …",6,[[],["finderreverse",3]]],[11,"needle","","Returns the needle that this finder searches for.",6,[[]]],[11,"rfind","","Returns the index of the last occurrence of this needle …",6,[[["asref",8]],["option",4]]],[11,"as_slice","","Views the remaining underlying data as a subslice of the …",9,[[]]],[11,"from_slice","","Create a new owned byte string from the given byte slice.",2,[[["asref",8]],["vec",3]]],[11,"from_os_string","","Create a new byte string from an owned OS string.",2,[[["osstring",3]],[["vec",3],["result",4],["osstring",3]]]],[11,"from_os_str_lossy","","Lossily create a new byte string from an OS string slice.",2,[[["osstr",3]],["cow",4]]],[11,"from_path_buf","","Create a new byte string from an owned file path.",2,[[["pathbuf",3]],[["vec",3],["result",4],["pathbuf",3]]]],[11,"from_path_lossy","","Lossily create a new byte string from a file path.",2,[[["path",3]],["cow",4]]],[11,"push_byte","","Appends the given byte to the end of this byte string.",2,[[]]],[11,"push_char","","Appends the given <code>char</code> to the end of this byte string.",2,[[]]],[11,"push_str","","Appends the given slice to the end of this byte string. …",2,[[["asref",8]]]],[11,"into_string","","Converts a <code>Vec<u8></code> into a <code>String</code> if and only if this byte …",2,[[],[["string",3],["fromutf8error",3],["result",4]]]],[11,"into_string_lossy","","Lossily converts a <code>Vec<u8></code> into a <code>String</code>. If this byte …",2,[[],["string",3]]],[11,"into_string_unchecked","","Unsafely convert this byte string into a <code>String</code>, without …",2,[[],["string",3]]],[11,"into_os_string","","Converts this byte string into an OS string, in place.",2,[[],[["vec",3],["result",4],["osstring",3]]]],[11,"into_os_string_lossy","","Lossily converts this byte string into an OS string, in …",2,[[],["osstring",3]]],[11,"into_path_buf","","Converts this byte string into an owned file path, in …",2,[[],[["vec",3],["pathbuf",3],["result",4]]]],[11,"into_path_buf_lossy","","Lossily converts this byte string into an owned file …",2,[[],["pathbuf",3]]],[11,"pop_byte","","Removes the last byte from this <code>Vec<u8></code> and returns it.",2,[[],["option",4]]],[11,"pop_char","","Removes the last codepoint from this <code>Vec<u8></code> and returns …",2,[[],["option",4]]],[11,"remove_char","","Removes a <code>char</code> from this <code>Vec<u8></code> at the given byte …",2,[[]]],[11,"insert_char","","Inserts the given codepoint into this <code>Vec<u8></code> at a …",2,[[]]],[11,"insert_str","","Inserts the given byte string into this byte string at a …",2,[[["asref",8]]]],[11,"replace_range","","Removes the specified range in this byte string and …",2,[[]]],[11,"drain_bytes","","Creates a draining iterator that removes the specified …",2,[[],["drainbytes",3]]],[11,"as_bytes","","Return the original bytes as a slice that failed to …",19,[[]]],[11,"into_vec","","Consume this error and return the original byte string …",19,[[],["vec",3]]],[11,"utf8_error","","Return the underlying UTF-8 error that occurred. This …",19,[[],["utf8error",3]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",22,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",23,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",24,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",25,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",26,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",27,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",28,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",29,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",30,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original …",31,[[]]],[11,"valid","","Returns the (possibly empty) valid UTF-8 bytes in this …",33,[[]]],[11,"invalid","","Returns the (possibly empty) invalid UTF-8 bytes in this …",33,[[]]],[11,"incomplete","","Returns whether the invalid sequence might still become …",33,[[]]],[11,"valid_up_to","","Returns the byte index of the position immediately …",34,[[]]],[11,"error_len","","Returns the total number of invalid UTF-8 bytes …",34,[[],["option",4]]]],"p":[[8,"BufReadExt"],[8,"ByteSlice"],[8,"ByteVec"],[3,"BStr"],[3,"BString"],[3,"Finder"],[3,"FinderReverse"],[3,"Find"],[3,"FindReverse"],[3,"Bytes"],[3,"Fields"],[3,"FieldsWith"],[3,"Split"],[3,"SplitReverse"],[3,"SplitN"],[3,"SplitNReverse"],[3,"Lines"],[3,"LinesWithTerminator"],[3,"DrainBytes"],[3,"FromUtf8Error"],[3,"ByteLines"],[3,"ByteRecords"],[3,"Graphemes"],[3,"GraphemeIndices"],[3,"Sentences"],[3,"SentenceIndices"],[3,"Words"],[3,"WordIndices"],[3,"WordsWithBreaks"],[3,"WordsWithBreakIndices"],[3,"Chars"],[3,"CharIndices"],[3,"Utf8Chunks"],[3,"Utf8Chunk"],[3,"Utf8Error"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","i":[[8,"ReadBytesExt","byteorder","Extends <code>Read</code> with methods for reading numbers. (For …",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u128","","Reads an unsigned 128 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i128","","Reads a signed 128 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying …",0,[[],["result",6]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[],["result",6]]],[11,"read_uint128","","Reads an unsigned n-bytes integer from the underlying …",0,[[],["result",6]]],[11,"read_int128","","Reads a signed n-bytes integer from the underlying reader.",0,[[],["result",6]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point …",0,[[],["result",6]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point …",0,[[],["result",6]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the …",0,[[],["result",6]]],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the …",0,[[],["result",6]]],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the …",0,[[],["result",6]]],[11,"read_u128_into","","Reads a sequence of unsigned 128 bit integers from the …",0,[[],["result",6]]],[11,"read_i8_into","","Reads a sequence of signed 8 bit integers from the …",0,[[],["result",6]]],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the …",0,[[],["result",6]]],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the …",0,[[],["result",6]]],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the …",0,[[],["result",6]]],[11,"read_i128_into","","Reads a sequence of signed 128 bit integers from the …",0,[[],["result",6]]],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) …",0,[[],["result",6]]],[11,"read_f32_into_unchecked","","<strong>DEPRECATED</strong>.",0,[[],["result",6]]],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) …",0,[[],["result",6]]],[11,"read_f64_into_unchecked","","<strong>DEPRECATED</strong>.",0,[[],["result",6]]],[8,"WriteBytesExt","","Extends <code>Write</code> with methods for writing numbers. (For …",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u128","","Writes an unsigned 128 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i128","","Writes a signed 128 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying …",1,[[],["result",6]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[],["result",6]]],[11,"write_uint128","","Writes an unsigned n-bytes integer to the underlying …",1,[[],["result",6]]],[11,"write_int128","","Writes a signed n-bytes integer to the underlying writer.",1,[[],["result",6]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating …",1,[[],["result",6]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating …",1,[[],["result",6]]],[8,"ByteOrder","","<code>ByteOrder</code> describes types that can serialize integers as …",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from <code>buf</code>.",2,[[]]],[11,"read_u24","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.",2,[[]]],[10,"read_u32","","Reads an unsigned 32 bit integer from <code>buf</code>.",2,[[]]],[11,"read_u48","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.",2,[[]]],[10,"read_u64","","Reads an unsigned 64 bit integer from <code>buf</code>.",2,[[]]],[10,"read_u128","","Reads an unsigned 128 bit integer from <code>buf</code>.",2,[[]]],[10,"read_uint","","Reads an unsigned n-bytes integer from <code>buf</code>.",2,[[]]],[10,"read_uint128","","Reads an unsigned n-bytes integer from <code>buf</code>.",2,[[]]],[10,"write_u16","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.",2,[[]]],[11,"write_u24","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.",2,[[]]],[10,"write_u32","","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.",2,[[]]],[11,"write_u48","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.",2,[[]]],[10,"write_u64","","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.",2,[[]]],[10,"write_u128","","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.",2,[[]]],[10,"write_uint","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",2,[[]]],[10,"write_uint128","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",2,[[]]],[11,"read_i16","","Reads a signed 16 bit integer from <code>buf</code>.",2,[[]]],[11,"read_i24","","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.",2,[[]]],[11,"read_i32","","Reads a signed 32 bit integer from <code>buf</code>.",2,[[]]],[11,"read_i48","","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.",2,[[]]],[11,"read_i64","","Reads a signed 64 bit integer from <code>buf</code>.",2,[[]]],[11,"read_i128","","Reads a signed 128 bit integer from <code>buf</code>.",2,[[]]],[11,"read_int","","Reads a signed n-bytes integer from <code>buf</code>.",2,[[]]],[11,"read_int128","","Reads a signed n-bytes integer from <code>buf</code>.",2,[[]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point …",2,[[]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point …",2,[[]]],[11,"write_i16","","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.",2,[[]]],[11,"write_i24","","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.",2,[[]]],[11,"write_i32","","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.",2,[[]]],[11,"write_i48","","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.",2,[[]]],[11,"write_i64","","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.",2,[[]]],[11,"write_i128","","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.",2,[[]]],[11,"write_int","","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",2,[[]]],[11,"write_int128","","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",2,[[]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating …",2,[[]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating …",2,[[]]],[10,"read_u16_into","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[10,"read_u32_into","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[10,"read_u64_into","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[10,"read_u128_into","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"read_i16_into","","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.",2,[[]]],[11,"read_i32_into","","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"read_i64_into","","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"read_i128_into","","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"read_f32_into","","Reads IEEE754 single-precision (4 bytes) floating point …",2,[[]]],[11,"read_f32_into_unchecked","","<strong>DEPRECATED</strong>.",2,[[]]],[11,"read_f64_into","","Reads IEEE754 single-precision (4 bytes) floating point …",2,[[]]],[11,"read_f64_into_unchecked","","<strong>DEPRECATED</strong>.",2,[[]]],[10,"write_u16_into","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[10,"write_u32_into","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[10,"write_u64_into","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[10,"write_u128_into","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"write_i8_into","","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"write_i16_into","","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"write_i32_into","","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"write_i64_into","","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"write_i128_into","","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.",2,[[]]],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point …",2,[[]]],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point …",2,[[]]],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a …",2,[[]]],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a …",2,[[]]],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a …",2,[[]]],[10,"from_slice_u128","","Converts the given slice of unsigned 128 bit integers to …",2,[[]]],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a …",2,[[]]],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a …",2,[[]]],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a …",2,[[]]],[11,"from_slice_i128","","Converts the given slice of signed 128 bit integers to a …",2,[[]]],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 …",2,[[]]],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 …",2,[[]]],[4,"BigEndian","","Defines big-endian serialization.",null,null],[6,"BE","","A type alias for <code>BigEndian</code>.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"LE","","A type alias for <code>LittleEndian</code>.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"read_u16","","",3,[[]]],[11,"read_u32","","",3,[[]]],[11,"read_u64","","",3,[[]]],[11,"read_u128","","",3,[[]]],[11,"read_uint","","",3,[[]]],[11,"read_uint128","","",3,[[]]],[11,"write_u16","","",3,[[]]],[11,"write_u32","","",3,[[]]],[11,"write_u64","","",3,[[]]],[11,"write_u128","","",3,[[]]],[11,"write_uint","","",3,[[]]],[11,"write_uint128","","",3,[[]]],[11,"read_u16_into","","",3,[[]]],[11,"read_u32_into","","",3,[[]]],[11,"read_u64_into","","",3,[[]]],[11,"read_u128_into","","",3,[[]]],[11,"write_u16_into","","",3,[[]]],[11,"write_u32_into","","",3,[[]]],[11,"write_u64_into","","",3,[[]]],[11,"write_u128_into","","",3,[[]]],[11,"from_slice_u16","","",3,[[]]],[11,"from_slice_u32","","",3,[[]]],[11,"from_slice_u64","","",3,[[]]],[11,"from_slice_u128","","",3,[[]]],[11,"from_slice_f32","","",3,[[]]],[11,"from_slice_f64","","",3,[[]]],[11,"read_u16","","",4,[[]]],[11,"read_u32","","",4,[[]]],[11,"read_u64","","",4,[[]]],[11,"read_u128","","",4,[[]]],[11,"read_uint","","",4,[[]]],[11,"read_uint128","","",4,[[]]],[11,"write_u16","","",4,[[]]],[11,"write_u32","","",4,[[]]],[11,"write_u64","","",4,[[]]],[11,"write_u128","","",4,[[]]],[11,"write_uint","","",4,[[]]],[11,"write_uint128","","",4,[[]]],[11,"read_u16_into","","",4,[[]]],[11,"read_u32_into","","",4,[[]]],[11,"read_u64_into","","",4,[[]]],[11,"read_u128_into","","",4,[[]]],[11,"write_u16_into","","",4,[[]]],[11,"write_u32_into","","",4,[[]]],[11,"write_u64_into","","",4,[[]]],[11,"write_u128_into","","",4,[[]]],[11,"from_slice_u16","","",4,[[]]],[11,"from_slice_u32","","",4,[[]]],[11,"from_slice_u64","","",4,[[]]],[11,"from_slice_u128","","",4,[[]]],[11,"from_slice_f32","","",4,[[]]],[11,"from_slice_f64","","",4,[[]]],[11,"clone","","",3,[[],["bigendian",4]]],[11,"clone","","",4,[[],["littleendian",4]]],[11,"default","","",3,[[],["bigendian",4]]],[11,"default","","",4,[[],["littleendian",4]]],[11,"cmp","","",3,[[["bigendian",4]],["ordering",4]]],[11,"cmp","","",4,[[["littleendian",4]],["ordering",4]]],[11,"eq","","",3,[[["bigendian",4]]]],[11,"eq","","",4,[[["littleendian",4]]]],[11,"partial_cmp","","",3,[[["bigendian",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["littleendian",4]],[["option",4],["ordering",4]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_u128","","Reads an unsigned 128 bit integer from the underlying …",0,[[],["result",6]]],[11,"read_i128","","Reads a signed 128 bit integer from the underlying reader.",0,[[],["result",6]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying …",0,[[],["result",6]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[],["result",6]]],[11,"read_uint128","","Reads an unsigned n-bytes integer from the underlying …",0,[[],["result",6]]],[11,"read_int128","","Reads a signed n-bytes integer from the underlying reader.",0,[[],["result",6]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point …",0,[[],["result",6]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point …",0,[[],["result",6]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the …",0,[[],["result",6]]],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the …",0,[[],["result",6]]],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the …",0,[[],["result",6]]],[11,"read_u128_into","","Reads a sequence of unsigned 128 bit integers from the …",0,[[],["result",6]]],[11,"read_i8_into","","Reads a sequence of signed 8 bit integers from the …",0,[[],["result",6]]],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the …",0,[[],["result",6]]],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the …",0,[[],["result",6]]],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the …",0,[[],["result",6]]],[11,"read_i128_into","","Reads a sequence of signed 128 bit integers from the …",0,[[],["result",6]]],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) …",0,[[],["result",6]]],[11,"read_f32_into_unchecked","","<strong>DEPRECATED</strong>.",0,[[],["result",6]]],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) …",0,[[],["result",6]]],[11,"read_f64_into_unchecked","","<strong>DEPRECATED</strong>.",0,[[],["result",6]]],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_u128","","Writes an unsigned 128 bit integer to the underlying …",1,[[],["result",6]]],[11,"write_i128","","Writes a signed 128 bit integer to the underlying writer.",1,[[],["result",6]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying …",1,[[],["result",6]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[],["result",6]]],[11,"write_uint128","","Writes an unsigned n-bytes integer to the underlying …",1,[[],["result",6]]],[11,"write_int128","","Writes a signed n-bytes integer to the underlying writer.",1,[[],["result",6]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating …",1,[[],["result",6]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating …",1,[[],["result",6]]]],"p":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]},\
"camino":{"doc":"UTF-8 encoded paths.","i":[[3,"Utf8PathBuf","camino","An owned, mutable UTF-8 path (akin to [<code>String</code>]).",null,null],[11,"new","","Allocates an empty <code>Utf8PathBuf</code>.",0,[[],["utf8pathbuf",3]]],[11,"from_path_buf","","Creates a new <code>Utf8PathBuf</code> from a <code>PathBuf</code> containing valid …",0,[[["pathbuf",3]],[["utf8pathbuf",3],["result",4],["pathbuf",3]]]],[11,"with_capacity","","Creates a new <code>Utf8PathBuf</code> with a given capacity used to …",0,[[],["utf8pathbuf",3]]],[11,"as_path","","Coerces to a [<code>Utf8Path</code>] slice.",0,[[],["utf8path",3]]],[11,"push","","Extends <code>self</code> with <code>path</code>.",0,[[]]],[11,"pop","","Truncates <code>self</code> to <code>self.parent</code>.",0,[[]]],[11,"set_file_name","","Updates <code>self.file_name</code> to <code>file_name</code>.",0,[[]]],[11,"set_extension","","Updates <code>self.extension</code> to <code>extension</code>.",0,[[]]],[11,"into_string","","Consumes the <code>Utf8PathBuf</code>, yielding its internal [<code>String</code>] …",0,[[],["string",3]]],[11,"into_os_string","","Consumes the <code>Utf8PathBuf</code>, yielding its internal [<code>OsString</code>]…",0,[[],["osstring",3]]],[11,"into_boxed_path","","Converts this <code>Utf8PathBuf</code> into a boxed [<code>Utf8Path</code>].",0,[[],[["utf8path",3],["box",3]]]],[11,"capacity","","Invokes <code>capacity</code> on the underlying instance of [<code>PathBuf</code>].",0,[[]]],[11,"clear","","Invokes <code>clear</code> on the underlying instance of [<code>PathBuf</code>].",0,[[]]],[11,"reserve","","Invokes <code>reserve</code> on the underlying instance of [<code>PathBuf</code>].",0,[[]]],[11,"reserve_exact","","Invokes <code>reserve_exact</code> on the underlying instance of […",0,[[]]],[11,"shrink_to_fit","","Invokes <code>shrink_to_fit</code> on the underlying instance of […",0,[[]]],[3,"Utf8Path","","A slice of a UTF-8 path (akin to [<code>str</code>]).",null,null],[11,"new","","Directly wraps a string slice as a <code>Utf8Path</code> slice.",1,[[],["utf8path",3]]],[11,"from_path","","Converts a [<code>Path</code>] to a <code>Utf8Path</code>.",1,[[["path",3]],[["utf8path",3],["option",4]]]],[11,"as_str","","Yields the underlying <code>str</code> slice.",1,[[]]],[11,"as_os_str","","Yields the underlying [<code>OsStr</code>] slice.",1,[[],["osstr",3]]],[11,"to_path_buf","","Converts a <code>Utf8Path</code> to an owned [<code>Utf8PathBuf</code>].",1,[[],["utf8pathbuf",3]]],[11,"is_absolute","","Returns <code>true</code> if the <code>Utf8Path</code> is absolute, i.e., if it is …",1,[[]]],[11,"is_relative","","Returns <code>true</code> if the <code>Utf8Path</code> is relative, i.e., not …",1,[[]]],[11,"has_root","","Returns <code>true</code> if the <code>Utf8Path</code> has a root.",1,[[]]],[11,"parent","","Returns the <code>Path</code> without its final component, if there is …",1,[[],[["utf8path",3],["option",4]]]],[11,"ancestors","","Produces an iterator over <code>Utf8Path</code> and its ancestors.",1,[[],["utf8ancestors",3]]],[11,"file_name","","Returns the final component of the <code>Utf8Path</code>, if there is …",1,[[],["option",4]]],[11,"strip_prefix","","Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.",1,[[],[["utf8path",3],["result",4],["stripprefixerror",3]]]],[11,"starts_with","","Determines whether <code>base</code> is a prefix of <code>self</code>.",1,[[]]],[11,"ends_with","","Determines whether <code>child</code> is a suffix of <code>self</code>.",1,[[]]],[11,"file_stem","","Extracts the stem (non-extension) portion of …",1,[[],["option",4]]],[11,"extension","","Extracts the extension of <code>self.file_name</code>, if possible.",1,[[],["option",4]]],[11,"join","","Creates an owned [<code>Utf8PathBuf</code>] with <code>path</code> adjoined to <code>self</code>.",1,[[],["utf8pathbuf",3]]],[11,"join_os","","Creates an owned [<code>PathBuf</code>] with <code>path</code> adjoined to <code>self</code>.",1,[[],["pathbuf",3]]],[11,"with_file_name","","Creates an owned [<code>Utf8PathBuf</code>] like <code>self</code> but with the …",1,[[],["utf8pathbuf",3]]],[11,"with_extension","","Creates an owned [<code>Utf8PathBuf</code>] like <code>self</code> but with the …",1,[[],["utf8pathbuf",3]]],[11,"components","","Produces an iterator over the [<code>Utf8Component</code>]s of the …",1,[[],["utf8components",3]]],[11,"iter","","Produces an iterator over the path\'s components viewed as …",1,[[],["iter",3]]],[11,"metadata","","Queries the file system to get information about a file, …",1,[[],[["result",6],["metadata",3]]]],[11,"symlink_metadata","","Queries the metadata about a file without following …",1,[[],[["result",6],["metadata",3]]]],[11,"canonicalize","","Returns the canonical, absolute form of the path with all …",1,[[],[["result",6],["pathbuf",3]]]],[11,"read_link","","Reads a symbolic link, returning the file that the link …",1,[[],[["result",6],["pathbuf",3]]]],[11,"read_dir","","Returns an iterator over the entries within a directory.",1,[[],[["result",6],["readdir",3]]]],[11,"exists","","Returns <code>true</code> if the path points at an existing entity.",1,[[]]],[11,"is_file","","Returns <code>true</code> if the path exists on disk and is pointing …",1,[[]]],[11,"is_dir","","Returns <code>true</code> if the path exists on disk and is pointing …",1,[[]]],[11,"into_path_buf","","Converts a <code>Box<Utf8Path></code> into a [<code>Utf8PathBuf</code>] without …",1,[[["utf8path",3],["box",3]],["utf8pathbuf",3]]],[3,"Utf8Ancestors","","An iterator over [<code>Utf8Path</code>] and its ancestors.",null,null],[3,"Utf8Components","","An iterator over the [<code>Utf8Component</code>]s of a [<code>Utf8Path</code>].",null,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path …",2,[[],["utf8path",3]]],[3,"Iter","","An iterator over the [<code>Utf8Component</code>]s of a [<code>Utf8Path</code>], as …",null,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path …",3,[[],["utf8path",3]]],[4,"Utf8Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g., <code>C:</code> or <code>\\\\\\\\server\\\\share</code>.",4,null],[13,"RootDir","","The root directory component, appears after any prefix …",4,null],[13,"CurDir","","A reference to the current directory, i.e., <code>.</code>.",4,null],[13,"ParentDir","","A reference to the parent directory, i.e., <code>..</code>.",4,null],[13,"Normal","","A normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.",4,null],[11,"as_str","","Extracts the underlying [<code>str</code>] slice.",4,[[]]],[11,"as_os_str","","Extracts the underlying [<code>OsStr</code>] slice.",4,[[],["osstr",3]]],[4,"Utf8Prefix","","Windows path prefixes, e.g., <code>C:</code> or <code>\\\\\\\\server\\\\share</code>.",null,null],[13,"Verbatim","","Verbatim prefix, e.g., <code>\\\\\\\\?\\\\cat_pics</code>.",5,null],[13,"VerbatimUNC","","Verbatim prefix using Windows\' <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, …",5,null],[13,"VerbatimDisk","","Verbatim disk prefix, e.g., <code>\\\\\\\\?\\\\C:</code>.",5,null],[13,"DeviceNS","","Device namespace prefix, e.g., <code>\\\\\\\\.\\\\COM42</code>.",5,null],[13,"UNC","","Prefix using Windows\' <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, e.g. …",5,null],[13,"Disk","","Prefix <code>C:</code> for the given disk drive.",5,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e., begins with …",5,[[]]],[3,"Utf8PrefixComponent","","A structure wrapping a Windows path prefix as well as its …",null,null],[11,"kind","","Returns the parsed prefix data.",6,[[],["utf8prefix",4]]],[11,"as_str","","Returns the [<code>str</code>] slice for this prefix.",6,[[]]],[11,"as_os_str","","Returns the raw [<code>OsStr</code>] slice for this prefix.",6,[[],["osstr",3]]],[3,"FromPathBufError","","A possible error value while converting a [<code>PathBuf</code>] to a […",null,null],[11,"as_path","","Returns the [<code>Path</code>] slice that was attempted to be …",7,[[],["path",3]]],[11,"into_path_buf","","Returns the [<code>PathBuf</code>] that was attempted to be converted …",7,[[],["pathbuf",3]]],[11,"from_path_error","","Fetch a [<code>FromPathError</code>] for more about the conversion …",7,[[],["frompatherror",3]]],[3,"FromPathError","","A possible error value while converting a [<code>Path</code>] to a […",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"as_ref","","",2,[[],["utf8path",3]]],[11,"as_ref","","",2,[[],["path",3]]],[11,"as_ref","","",2,[[]]],[11,"as_ref","","",2,[[],["osstr",3]]],[11,"as_ref","","",3,[[],["utf8path",3]]],[11,"as_ref","","",3,[[],["path",3]]],[11,"as_ref","","",3,[[]]],[11,"as_ref","","",3,[[],["osstr",3]]],[11,"as_ref","","",4,[[],["utf8path",3]]],[11,"as_ref","","",4,[[],["path",3]]],[11,"as_ref","","",4,[[]]],[11,"as_ref","","",4,[[],["osstr",3]]],[11,"as_ref","","",1,[[],["utf8path",3]]],[11,"as_ref","","",0,[[],["utf8path",3]]],[11,"as_ref","","",1,[[],["path",3]]],[11,"as_ref","","",0,[[],["path",3]]],[11,"as_ref","","",1,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",1,[[],["osstr",3]]],[11,"as_ref","","",0,[[],["osstr",3]]],[11,"from","","",0,[[["string",3]],["utf8pathbuf",3]]],[11,"from","","",0,[[],["utf8pathbuf",3]]],[11,"from","","",0,[[["utf8path",3],["box",3]],["utf8pathbuf",3]]],[11,"from","","",0,[[["cow",4],["utf8path",3]],["utf8pathbuf",3]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"next","","",8,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"clone","","",0,[[],["utf8pathbuf",3]]],[11,"clone","","",8,[[],["utf8ancestors",3]]],[11,"clone","","",2,[[],["utf8components",3]]],[11,"clone","","",3,[[],["iter",3]]],[11,"clone","","",4,[[],["utf8component",4]]],[11,"clone","","",5,[[],["utf8prefix",4]]],[11,"clone","","",6,[[],["utf8prefixcomponent",3]]],[11,"clone","","",7,[[],["frompathbuferror",3]]],[11,"clone","","",9,[[],["frompatherror",3]]],[11,"default","","",0,[[],["utf8pathbuf",3]]],[11,"cmp","","",2,[[["utf8components",3]],["ordering",4]]],[11,"cmp","","",4,[[["utf8component",4]],["ordering",4]]],[11,"cmp","","",5,[[["utf8prefix",4]],["ordering",4]]],[11,"cmp","","",6,[[["utf8prefixcomponent",3]],["ordering",4]]],[11,"cmp","","",0,[[["utf8pathbuf",3]],["ordering",4]]],[11,"cmp","","",1,[[["utf8path",3]],["ordering",4]]],[11,"eq","","",2,[[["utf8components",3]]]],[11,"ne","","",2,[[["utf8components",3]]]],[11,"eq","","",4,[[["utf8component",4]]]],[11,"ne","","",4,[[["utf8component",4]]]],[11,"eq","","",5,[[["utf8prefix",4]]]],[11,"ne","","",5,[[["utf8prefix",4]]]],[11,"eq","","",6,[[["utf8prefixcomponent",3]]]],[11,"ne","","",6,[[["utf8prefixcomponent",3]]]],[11,"eq","","",7,[[["frompathbuferror",3]]]],[11,"ne","","",7,[[["frompathbuferror",3]]]],[11,"eq","","",9,[[["frompatherror",3]]]],[11,"ne","","",9,[[["frompatherror",3]]]],[11,"eq","","",0,[[["utf8pathbuf",3]]]],[11,"eq","","",1,[[["utf8path",3]]]],[11,"eq","","",0,[[["utf8path",3]]]],[11,"eq","","",1,[[["utf8pathbuf",3]]]],[11,"eq","","",0,[[["utf8path",3]]]],[11,"eq","","",1,[[["cow",4]]]],[11,"eq","","",0,[[["cow",4]]]],[11,"eq","","",0,[[["path",3]]]],[11,"eq","","",0,[[["path",3]]]],[11,"eq","","",0,[[["cow",4]]]],[11,"eq","","",0,[[["pathbuf",3]]]],[11,"eq","","",1,[[["path",3]]]],[11,"eq","","",1,[[["path",3]]]],[11,"eq","","",1,[[["cow",4]]]],[11,"eq","","",1,[[["pathbuf",3]]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[["cow",4]]]],[11,"eq","","",0,[[["string",3]]]],[11,"eq","","",1,[[]]],[11,"eq","","",1,[[]]],[11,"eq","","",1,[[["cow",4]]]],[11,"eq","","",1,[[["string",3]]]],[11,"eq","","",0,[[["osstr",3]]]],[11,"eq","","",0,[[["osstr",3]]]],[11,"eq","","",0,[[["cow",4]]]],[11,"eq","","",0,[[["osstring",3]]]],[11,"eq","","",1,[[["osstr",3]]]],[11,"eq","","",1,[[["osstr",3]]]],[11,"eq","","",1,[[["cow",4]]]],[11,"eq","","",1,[[["osstring",3]]]],[11,"partial_cmp","","",2,[[["utf8components",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["utf8components",3]]]],[11,"le","","",2,[[["utf8components",3]]]],[11,"gt","","",2,[[["utf8components",3]]]],[11,"ge","","",2,[[["utf8components",3]]]],[11,"partial_cmp","","",4,[[["utf8component",4]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["utf8component",4]]]],[11,"le","","",4,[[["utf8component",4]]]],[11,"gt","","",4,[[["utf8component",4]]]],[11,"ge","","",4,[[["utf8component",4]]]],[11,"partial_cmp","","",5,[[["utf8prefix",4]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["utf8prefix",4]]]],[11,"le","","",5,[[["utf8prefix",4]]]],[11,"gt","","",5,[[["utf8prefix",4]]]],[11,"ge","","",5,[[["utf8prefix",4]]]],[11,"partial_cmp","","",6,[[["utf8prefixcomponent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["utf8prefixcomponent",3]]]],[11,"le","","",6,[[["utf8prefixcomponent",3]]]],[11,"gt","","",6,[[["utf8prefixcomponent",3]]]],[11,"ge","","",6,[[["utf8prefixcomponent",3]]]],[11,"partial_cmp","","",0,[[["utf8pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["utf8path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["utf8path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["utf8pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["utf8path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["string",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["string",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["osstring",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["osstring",3]],[["option",4],["ordering",4]]]],[11,"to_owned","","",1,[[],["utf8pathbuf",3]]],[11,"deref","","",0,[[],["utf8path",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"borrow","","",0,[[],["utf8path",3]]],[11,"try_from","","",0,[[["pathbuf",3]],[["result",4],["utf8pathbuf",3]]]],[11,"from_str","","",0,[[],["result",4]]],[11,"from_iter","","",0,[[["intoiterator",8]],["utf8pathbuf",3]]],[11,"source","","",7,[[],[["option",4],["error",8]]]],[11,"source","","",9,[[],[["option",4],["error",8]]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"Utf8PathBuf"],[3,"Utf8Path"],[3,"Utf8Components"],[3,"Iter"],[4,"Utf8Component"],[4,"Utf8Prefix"],[3,"Utf8PrefixComponent"],[3,"FromPathBufError"],[3,"Utf8Ancestors"],[3,"FromPathError"]]},\
"cargo_guppy":{"doc":"A command-line frontend for <code>guppy</code>.","i":[[4,"Kind","cargo_guppy","",null,null],[13,"All","","",0,null],[13,"Workspace","","",0,null],[13,"DirectThirdParty","","",0,null],[13,"ThirdParty","","",0,null],[3,"QueryOptions","","",null,null],[3,"BaseFilterOptions","","",null,null],[12,"omit_edges_into","","Omit edges that point into a given package; useful for …",1,null],[12,"kind","","Kind of crates to select",1,null],[3,"FilterOptions","","",null,null],[12,"base_opts","","",2,null],[12,"include_dev","","Include dev dependencies",2,null],[12,"include_build","","Include build dependencies",2,null],[12,"target","","Target to filter, default is to match all targets",2,null],[3,"MvOptions","","",null,null],[5,"cmd_diff","","",null,[[],[["error",3],["result",6]]]],[3,"DiffSummariesOptions","","",null,null],[12,"old","","The old summary",3,null],[12,"new","","The new summary",3,null],[11,"exec","","",3,[[],["result",6]]],[3,"DupsOptions","","",null,null],[5,"cmd_dups","","",null,[[["dupsoptions",3]],[["error",3],["result",6]]]],[4,"BuildKind","","",null,null],[13,"All","","",4,null],[13,"Target","","",4,null],[13,"ProcMacro","","",4,null],[13,"TargetAndProcMacro","","",4,null],[13,"Host","","",4,null],[11,"variants","","",4,[[]]],[3,"ResolveCargoOptions","","",null,null],[5,"cmd_resolve_cargo","","",null,[[["resolvecargooptions",3]],[["error",3],["result",6]]]],[3,"CmdSelectOptions","","",null,null],[5,"cmd_select","","",null,[[["cmdselectoptions",3]],[["error",3],["result",6]]]],[3,"SubtreeSizeOptions","","",null,null],[5,"cmd_subtree_size","","",null,[[["subtreesizeoptions",3]],[["error",3],["result",6]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"borrow_replacement","","",0,[[]]],[11,"clone_boxed","","",0,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",0,[[]]],[11,"clone_boxed","","",0,[[],[["global",3],["box",3],["nonsyncfeatures",8]]]],[11,"self_address_mut","","",0,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"borrow_replacement","","",5,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"borrow_replacement","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"borrow_replacement","","",2,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"borrow_replacement","","",6,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"borrow_replacement","","",3,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"borrow_replacement","","",7,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"borrow_replacement","","",4,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"borrow_replacement","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"borrow_replacement","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"borrow_replacement","","",10,[[]]],[11,"clone","","",0,[[],["kind",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"from_str","","",0,[[],["result",4]]],[11,"from_str","","",4,[[],["result",4]]],[11,"clap","","",5,[[],["app",3]]],[11,"from_clap","","",5,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"clap","","",2,[[],["app",3]]],[11,"from_clap","","",2,[[["argmatches",3]]]],[11,"clap","","",6,[[],["app",3]]],[11,"from_clap","","",6,[[["argmatches",3]]]],[11,"clap","","",3,[[],["app",3]]],[11,"from_clap","","",3,[[["argmatches",3]]]],[11,"clap","","",7,[[],["app",3]]],[11,"from_clap","","",7,[[["argmatches",3]]]],[11,"clap","","",8,[[],["app",3]]],[11,"from_clap","","",8,[[["argmatches",3]]]],[11,"clap","","",9,[[],["app",3]]],[11,"from_clap","","",9,[[["argmatches",3]]]],[11,"clap","","",10,[[],["app",3]]],[11,"from_clap","","",10,[[["argmatches",3]]]],[11,"augment_clap","","",5,[[["app",3]],["app",3]]],[11,"is_subcommand","","",5,[[]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[]]],[11,"augment_clap","","",2,[[["app",3]],["app",3]]],[11,"is_subcommand","","",2,[[]]],[11,"augment_clap","","",6,[[["app",3]],["app",3]]],[11,"is_subcommand","","",6,[[]]],[11,"augment_clap","","",3,[[["app",3]],["app",3]]],[11,"is_subcommand","","",3,[[]]],[11,"augment_clap","","",7,[[["app",3]],["app",3]]],[11,"is_subcommand","","",7,[[]]],[11,"augment_clap","","",8,[[["app",3]],["app",3]]],[11,"is_subcommand","","",8,[[]]],[11,"augment_clap","","",9,[[["app",3]],["app",3]]],[11,"is_subcommand","","",9,[[]]],[11,"augment_clap","","",10,[[["app",3]],["app",3]]],[11,"is_subcommand","","",10,[[]]],[11,"variants","","",0,[[]]],[11,"should_traverse","","Returns true if this link should be traversed.",0,[[["packagelink",3]]]],[11,"apply","","Constructs a <code>PackageQuery</code> based on these options.",5,[[["packagegraph",3]],[["result",4],["packagequery",3],["error",3]]]],[11,"omitted_package_ids","","Return the set of omitted package IDs.",1,[[["packagegraph",3]]]],[11,"make_resolver","","Construct a package resolver based on the filter options.",2,[[["packagegraph",3]]]],[11,"exec","","",6,[[],["result",6]]]],"p":[[4,"Kind"],[3,"BaseFilterOptions"],[3,"FilterOptions"],[3,"DiffSummariesOptions"],[4,"BuildKind"],[3,"QueryOptions"],[3,"MvOptions"],[3,"DupsOptions"],[3,"ResolveCargoOptions"],[3,"CmdSelectOptions"],[3,"SubtreeSizeOptions"]]},\
"cargo_metadata":{"doc":"Structured access to the output of <code>cargo metadata</code> and …","i":[[3,"Version","cargo_metadata","Represents a version number conforming to the semantic …",null,null],[12,"major","","The major version, to be incremented on incompatible …",0,null],[12,"minor","","The minor version, to be incremented when functionality …",0,null],[12,"patch","","The patch version, to be incremented when …",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version …",0,null],[0,"diagnostic","","This module contains <code>Diagnostic</code> and the types/functions …",null,null],[3,"DiagnosticCode","cargo_metadata::diagnostic","The error code associated to this diagnostic.",null,null],[12,"code","","The code itself.",1,null],[12,"explanation","","An explanation for the code",1,null],[3,"DiagnosticSpanLine","","A line of code associated with the Diagnostic",null,null],[12,"text","","The line of code associated with the error",2,null],[12,"highlight_start","","Start of the section of the line to highlight. 1-based, …",2,null],[12,"highlight_end","","End of the section of the line to highlight. 1-based, …",2,null],[3,"DiagnosticSpanMacroExpansion","","Macro expansion information associated with a diagnostic.",null,null],[12,"span","","span where macro was applied to generate this code; note …",3,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \\\"foo!\\\" or \\\"#[…",3,null],[12,"def_site_span","","span where macro was defined (if known)",3,null],[3,"DiagnosticSpan","","A section of the source code associated with a Diagnostic",null,null],[12,"file_name","","The file name or the macro name this diagnostic comes …",4,null],[12,"byte_start","","The byte offset in the file where this diagnostic starts …",4,null],[12,"byte_end","","The byte offset in the file where this diagnostic ends.",4,null],[12,"line_start","","1-based. The line in the file.",4,null],[12,"line_end","","1-based. The line in the file.",4,null],[12,"column_start","","1-based, character offset.",4,null],[12,"column_end","","1-based, character offset.",4,null],[12,"is_primary","","Is this a \\\"primary\\\" span -- meaning the point, or one of …",4,null],[12,"text","","Source text from the start of line_start to the end of …",4,null],[12,"label","","Label that should be placed at this location (if any)",4,null],[12,"suggested_replacement","","If we are suggesting a replacement, this will contain text…",4,null],[12,"suggestion_applicability","","If the suggestion is approximate",4,null],[12,"expansion","","Macro invocations that created the code at this span, if …",4,null],[4,"Applicability","","Whether a suggestion can be safely applied.",null,null],[13,"MachineApplicable","","The suggested replacement can be applied automatically …",5,null],[13,"HasPlaceholders","","The suggested replacement has placeholders that will need …",5,null],[13,"MaybeIncorrect","","The suggested replacement may be incorrect in some …",5,null],[13,"Unspecified","","The suggested replacement will probably not work.",5,null],[4,"DiagnosticLevel","","The diagnostic level",null,null],[13,"Ice","","Internal compiler error",6,null],[13,"Error","","Error",6,null],[13,"Warning","","Warning",6,null],[13,"Note","","Note",6,null],[13,"Help","","Help",6,null],[3,"Diagnostic","","A diagnostic message generated by rustc",null,null],[12,"message","","The error message of this diagnostic.",7,null],[12,"code","","The associated error code for this diagnostic",7,null],[12,"level","","\\\"error: internal compiler error\\\", \\\"error\\\", \\\"warning\\\", …",7,null],[12,"spans","","A list of source code spans this diagnostic is associated …",7,null],[12,"children","","Associated diagnostic messages.",7,null],[12,"rendered","","The message as rustc would render it",7,null],[3,"Dependency","cargo_metadata","A dependency of the main crate",null,null],[12,"name","","Name as given in the <code>Cargo.toml</code>",8,null],[12,"source","","The source of dependency",8,null],[12,"req","","The required version",8,null],[12,"kind","","The kind of dependency this is",8,null],[12,"optional","","Whether this dependency is required or optional",8,null],[12,"uses_default_features","","Whether the default features in this dependency are used.",8,null],[12,"features","","The list of features enabled for this dependency.",8,null],[12,"target","","The target this dependency is specific to.",8,null],[12,"rename","","If the dependency is renamed, this is the new name for …",8,null],[12,"registry","","The URL of the index of the registry where this …",8,null],[12,"path","","The file system path for a local path dependency.",8,null],[4,"DependencyKind","","Dependencies can come in three kinds",null,null],[13,"Normal","","The \'normal\' kind",9,null],[13,"Development","","Those used in tests only",9,null],[13,"Build","","Those used in build scripts only",9,null],[4,"Error","","Error returned when executing/parsing <code>cargo metadata</code> …",null,null],[13,"CargoMetadata","","Error during execution of <code>cargo metadata</code>",10,null],[12,"stderr","cargo_metadata::Error","stderr returned by the <code>cargo metadata</code> command",11,null],[13,"Io","cargo_metadata","IO Error during execution of <code>cargo metadata</code>",10,null],[13,"Utf8","","Output of <code>cargo metadata</code> was not valid utf8",10,null],[13,"ErrUtf8","","Error output of <code>cargo metadata</code> was not valid utf8",10,null],[13,"Json","","Deserialization error (structure of json did not match …",10,null],[13,"NoJson","","The output did not contain any json",10,null],[6,"Result","","Custom result type for <code>cargo_metadata::Error</code>",null,null],[5,"parse_messages","","Creates an iterator of Message from a Read outputting a …",null,[[["read",8]],[["message",4],["ioread",3],["streamdeserializer",3]]]],[3,"Artifact","","A compiler-generated file.",null,null],[12,"package_id","","The package this artifact belongs to",12,null],[12,"target","","The target this artifact was compiled for",12,null],[12,"profile","","The profile this artifact was compiled with",12,null],[12,"features","","The enabled features for this artifact",12,null],[12,"filenames","","The full paths to the generated artifacts (e.g. binary …",12,null],[12,"executable","","Path to the executable file",12,null],[12,"fresh","","If true, then the files were already generated",12,null],[3,"ArtifactProfile","","Profile settings used to determine which compiler flags …",null,null],[12,"opt_level","","Optimization level. Possible values are 0-3, s or z.",13,null],[12,"debuginfo","","The amount of debug info. 0 for none, 1 for limited, 2 …",13,null],[12,"debug_assertions","","State of the <code>cfg(debug_assertions)</code> directive, enabling …",13,null],[12,"overflow_checks","","State of the overflow checks.",13,null],[12,"test","","Whether this profile is a test",13,null],[3,"BuildFinished","","Final result of a build.",null,null],[12,"success","","Whether or not the build finished successfully.",14,null],[3,"BuildScript","","Output of a build script execution.",null,null],[12,"package_id","","The package this build script execution belongs to",15,null],[12,"linked_libs","","The libs to link",15,null],[12,"linked_paths","","The paths to search when resolving libs",15,null],[12,"cfgs","","Various <code>--cfg</code> flags to pass to the compiler",15,null],[12,"env","","The environment variables to add to the compilation",15,null],[12,"out_dir","","The <code>OUT_DIR</code> environment variable where this script places …",15,null],[3,"CompilerMessage","","Message left by the compiler",null,null],[12,"package_id","","The package this message belongs to",16,null],[12,"target","","The target this message is aimed at",16,null],[12,"message","","The message the compiler sent.",16,null],[4,"Message","","A cargo message",null,null],[13,"CompilerArtifact","","The compiler generated an artifact",17,null],[13,"CompilerMessage","","The compiler wants to display a message",17,null],[13,"BuildScriptExecuted","","A build script successfully executed.",17,null],[13,"BuildFinished","","The build has finished.",17,null],[13,"TextLine","","A line of text which isn\'t a cargo or compiler message. …",17,null],[3,"MessageIter","","An iterator of Messages.",null,null],[3,"PackageId","","An \\\"opaque\\\" identifier for a package. It is possible to …",null,null],[12,"repr","","The underlying string representation of id.",18,null],[3,"Metadata","","Starting point for metadata returned by <code>cargo metadata</code>",null,null],[12,"packages","","A list of all crates referenced by this crate (and the …",19,null],[12,"workspace_members","","A list of all workspace members",19,null],[12,"resolve","","Dependencies graph",19,null],[12,"workspace_root","","Workspace root",19,null],[12,"target_directory","","Build directory",19,null],[12,"workspace_metadata","","The workspace-level metadata object. Null if non-existent.",19,null],[11,"root_package","","Get the root package of this metadata instance.",19,[[],[["package",3],["option",4]]]],[3,"Resolve","","A dependency graph",null,null],[12,"nodes","","Nodes in a dependencies graph",20,null],[12,"root","","The crate for which the metadata was read.",20,null],[3,"Node","","A node in a dependencies graph",null,null],[12,"id","","An opaque identifier for a package",21,null],[12,"deps","","Dependencies in a structured format.",21,null],[12,"dependencies","","List of opaque identifiers for this node\'s dependencies. …",21,null],[12,"features","","Features enabled on the crate",21,null],[3,"NodeDep","","A dependency in a node",null,null],[12,"name","","The name of the dependency\'s library target. If the crate …",22,null],[12,"pkg","","Package ID (opaque unique identifier)",22,null],[12,"dep_kinds","","The kinds of dependencies.",22,null],[3,"DepKindInfo","","Information about a dependency kind.",null,null],[12,"kind","","The kind of dependency.",23,null],[12,"target","","The target platform for the dependency.",23,null],[3,"Package","","One or more crates described by a single <code>Cargo.toml</code>",null,null],[12,"name","","Name as given in the <code>Cargo.toml</code>",24,null],[12,"version","","Version given in the <code>Cargo.toml</code>",24,null],[12,"authors","","Authors given in the <code>Cargo.toml</code>",24,null],[12,"id","","An opaque identifier for a package",24,null],[12,"source","","The source of the package, e.g. crates.io or <code>None</code> for …",24,null],[12,"description","","Description as given in the <code>Cargo.toml</code>",24,null],[12,"dependencies","","List of dependencies of this particular package",24,null],[12,"license","","License as given in the <code>Cargo.toml</code>",24,null],[12,"license_file","","If the package is using a nonstandard license, this key …",24,null],[12,"targets","","Targets provided by the crate (lib, bin, example, test, …",24,null],[12,"features","","Features provided by the crate, mapped to the features …",24,null],[12,"manifest_path","","Path containing the <code>Cargo.toml</code>",24,null],[12,"categories","","Categories as given in the <code>Cargo.toml</code>",24,null],[12,"keywords","","Keywords as given in the <code>Cargo.toml</code>",24,null],[12,"readme","","Readme as given in the <code>Cargo.toml</code>",24,null],[12,"repository","","Repository as given in the <code>Cargo.toml</code>",24,null],[12,"homepage","","Homepage as given in the <code>Cargo.toml</code>",24,null],[12,"documentation","","Documentation URL as given in the <code>Cargo.toml</code>",24,null],[12,"edition","","Default Rust edition for the package",24,null],[12,"metadata","","Contents of the free form package.metadata section",24,null],[12,"links","","The name of a native library the package is linking to.",24,null],[12,"publish","","List of registries to which this package may be published.",24,null],[11,"license_file","","Full path to the license file if one is present in the …",24,[[],[["utf8pathbuf",3],["option",4]]]],[11,"readme","","Full path to the readme file if one is present in the …",24,[[],[["utf8pathbuf",3],["option",4]]]],[3,"Source","","The source of a package such as crates.io.",null,null],[12,"repr","","The underlying string representation of a source.",25,null],[11,"is_crates_io","","Returns true if the source is crates.io.",25,[[]]],[3,"Target","","A single target (lib, bin, example, ...) provided by a …",null,null],[12,"name","","Name as given in the <code>Cargo.toml</code> or generated from the …",26,null],[12,"kind","","Kind of target (\\\"bin\\\", \\\"example\\\", \\\"test\\\", \\\"bench\\\", \\\"lib\\\")",26,null],[12,"crate_types","","Almost the same as <code>kind</code>, except when an example is a …",26,null],[12,"required_features","","This target is built only if these features are enabled. …",26,null],[12,"src_path","","Path to the main source file of the target",26,null],[12,"edition","","Rust edition for this target",26,null],[12,"doctest","","Whether or not this target has doc tests enabled, and the …",26,null],[12,"test","","Whether or not this target is tested by default by …",26,null],[4,"CargoOpt","","Cargo features flags",null,null],[13,"AllFeatures","","Run cargo with <code>--features-all</code>",27,null],[13,"NoDefaultFeatures","","Run cargo with <code>--no-default-features</code>",27,null],[13,"SomeFeatures","","Run cargo with <code>--features <FEATURES></code>",27,null],[3,"MetadataCommand","","A builder for configurating <code>cargo metadata</code> invocation.",null,null],[11,"new","","Creates a default <code>cargo metadata</code> command, which will look …",28,[[],["metadatacommand",3]]],[11,"cargo_path","","Path to <code>cargo</code> executable.  If not set, this will use the …",28,[[],["metadatacommand",3]]],[11,"manifest_path","","Path to <code>Cargo.toml</code>",28,[[],["metadatacommand",3]]],[11,"current_dir","","Current directory of the <code>cargo metadata</code> process.",28,[[],["metadatacommand",3]]],[11,"no_deps","","Output information only about the root package and don\'t …",28,[[],["metadatacommand",3]]],[11,"features","","Which features to include.",28,[[["cargoopt",4]],["metadatacommand",3]]],[11,"other_options","","Arbitrary command line flags to pass to <code>cargo</code>.  These …",28,[[],["metadatacommand",3]]],[11,"cargo_command","","Builds a command for <code>cargo metadata</code>.  This is the first …",28,[[],["command",3]]],[11,"parse","","Parses <code>cargo metadata</code> output.  <code>data</code> must have been …",28,[[["asref",8]],[["result",6],["metadata",3]]]],[11,"exec","","Runs configured <code>cargo metadata</code> and returns parsed <code>Metadata</code>…",28,[[],[["result",6],["metadata",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","cargo_metadata::diagnostic","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","cargo_metadata","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",0,[[["version",3]],[["ordering",4],["option",4]]]],[11,"from_str","","",0,[[],[["semvererror",4],["version",3],["result",4]]]],[11,"from","","",0,[[],["version",3]]],[11,"from","","",0,[[["version",3]],["version",3]]],[11,"deserialize","","",0,[[],[["version",3],["result",4]]]],[11,"hash","","",0,[[]]],[11,"clone","","",0,[[],["version",3]]],[11,"serialize","","",0,[[],["result",4]]],[11,"cmp","","",0,[[["version",3]],["ordering",4]]],[11,"eq","","",0,[[["version",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",10,[[["error",3]]]],[11,"from","","",10,[[["utf8error",3]]]],[11,"from","","",10,[[["fromutf8error",3]]]],[11,"from","","",10,[[["error",3]]]],[11,"next","","",29,[[],["option",4]]],[11,"clone","","",9,[[],["dependencykind",4]]],[11,"clone","","",8,[[],["dependency",3]]],[11,"clone","cargo_metadata::diagnostic","",1,[[],["diagnosticcode",3]]],[11,"clone","","",2,[[],["diagnosticspanline",3]]],[11,"clone","","",3,[[],["diagnosticspanmacroexpansion",3]]],[11,"clone","","",4,[[],["diagnosticspan",3]]],[11,"clone","","",5,[[],["applicability",4]]],[11,"clone","","",6,[[],["diagnosticlevel",4]]],[11,"clone","","",7,[[],["diagnostic",3]]],[11,"clone","cargo_metadata","",13,[[],["artifactprofile",3]]],[11,"clone","","",12,[[],["artifact",3]]],[11,"clone","","",16,[[],["compilermessage",3]]],[11,"clone","","",15,[[],["buildscript",3]]],[11,"clone","","",14,[[],["buildfinished",3]]],[11,"clone","","",17,[[],["message",4]]],[11,"clone","","",18,[[],["packageid",3]]],[11,"clone","","",19,[[],["metadata",3]]],[11,"clone","","",20,[[],["resolve",3]]],[11,"clone","","",21,[[],["node",3]]],[11,"clone","","",22,[[],["nodedep",3]]],[11,"clone","","",23,[[],["depkindinfo",3]]],[11,"clone","","",24,[[],["package",3]]],[11,"clone","","",25,[[],["source",3]]],[11,"clone","","",26,[[],["target",3]]],[11,"clone","","",27,[[],["cargoopt",4]]],[11,"clone","","",28,[[],["metadatacommand",3]]],[11,"default","","",9,[[],["dependencykind",4]]],[11,"default","","",28,[[],["metadatacommand",3]]],[11,"cmp","","",18,[[["packageid",3]],["ordering",4]]],[11,"eq","","",9,[[["dependencykind",4]]]],[11,"eq","cargo_metadata::diagnostic","",1,[[["diagnosticcode",3]]]],[11,"ne","","",1,[[["diagnosticcode",3]]]],[11,"eq","","",2,[[["diagnosticspanline",3]]]],[11,"ne","","",2,[[["diagnosticspanline",3]]]],[11,"eq","","",3,[[["diagnosticspanmacroexpansion",3]]]],[11,"ne","","",3,[[["diagnosticspanmacroexpansion",3]]]],[11,"eq","","",4,[[["diagnosticspan",3]]]],[11,"ne","","",4,[[["diagnosticspan",3]]]],[11,"eq","","",5,[[["applicability",4]]]],[11,"eq","","",6,[[["diagnosticlevel",4]]]],[11,"eq","","",7,[[["diagnostic",3]]]],[11,"ne","","",7,[[["diagnostic",3]]]],[11,"eq","cargo_metadata","",13,[[["artifactprofile",3]]]],[11,"ne","","",13,[[["artifactprofile",3]]]],[11,"eq","","",12,[[["artifact",3]]]],[11,"ne","","",12,[[["artifact",3]]]],[11,"eq","","",16,[[["compilermessage",3]]]],[11,"ne","","",16,[[["compilermessage",3]]]],[11,"eq","","",15,[[["buildscript",3]]]],[11,"ne","","",15,[[["buildscript",3]]]],[11,"eq","","",14,[[["buildfinished",3]]]],[11,"ne","","",14,[[["buildfinished",3]]]],[11,"eq","","",17,[[["message",4]]]],[11,"ne","","",17,[[["message",4]]]],[11,"eq","","",18,[[["packageid",3]]]],[11,"ne","","",18,[[["packageid",3]]]],[11,"eq","","",26,[[["target",3]]]],[11,"ne","","",26,[[["target",3]]]],[11,"partial_cmp","","",18,[[["packageid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["packageid",3]]]],[11,"le","","",18,[[["packageid",3]]]],[11,"gt","","",18,[[["packageid",3]]]],[11,"ge","","",18,[[["packageid",3]]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","cargo_metadata::diagnostic","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","cargo_metadata","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","cargo_metadata::diagnostic","",7,[[["formatter",3]],["result",6]]],[11,"fmt","cargo_metadata","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"index","","",19,[[["packageid",3]],["package",3]]],[11,"hash","","",9,[[]]],[11,"hash","cargo_metadata::diagnostic","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","cargo_metadata","",13,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",26,[[]]],[11,"source","","",10,[[],[["error",8],["option",4]]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","cargo_metadata::diagnostic","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","cargo_metadata","",13,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","cargo_metadata::diagnostic","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","cargo_metadata","",13,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",16,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"new","","Contructs the simple case without pre or build.",0,[[],["version",3]]],[11,"parse","","Parse a string into a semver object.",0,[[],[["semvererror",4],["version",3],["result",4]]]],[11,"increment_patch","","Increments the patch number for this Version (Must be …",0,[[]]],[11,"increment_minor","","Increments the minor version number for this Version …",0,[[]]],[11,"increment_major","","Increments the major version number for this Version …",0,[[]]],[11,"is_prerelease","","Checks to see if the current Version is in pre-release …",0,[[]]],[11,"parse_stream","","Creates an iterator of Message from a Read outputting a …",17,[[["bufread",8]],[["bufread",8],["messageiter",3]]]]],"p":[[3,"Version"],[3,"DiagnosticCode"],[3,"DiagnosticSpanLine"],[3,"DiagnosticSpanMacroExpansion"],[3,"DiagnosticSpan"],[4,"Applicability"],[4,"DiagnosticLevel"],[3,"Diagnostic"],[3,"Dependency"],[4,"DependencyKind"],[4,"Error"],[13,"CargoMetadata"],[3,"Artifact"],[3,"ArtifactProfile"],[3,"BuildFinished"],[3,"BuildScript"],[3,"CompilerMessage"],[4,"Message"],[3,"PackageId"],[3,"Metadata"],[3,"Resolve"],[3,"Node"],[3,"NodeDep"],[3,"DepKindInfo"],[3,"Package"],[3,"Source"],[3,"Target"],[4,"CargoOpt"],[3,"MetadataCommand"],[3,"MessageIter"]]},\
"cargo_platform":{"doc":"Platform definition used by Cargo.","i":[[4,"Cfg","cargo_platform","A cfg value.",null,null],[13,"Name","","A named cfg value, like <code>unix</code>.",0,null],[13,"KeyPair","","A key/value cfg pair, like <code>target_os = \\\"linux\\\"</code>.",0,null],[4,"CfgExpr","","A cfg expression.",null,null],[13,"Not","","",1,null],[13,"All","","",1,null],[13,"Any","","",1,null],[13,"Value","","",1,null],[3,"ParseError","","",null,null],[4,"ParseErrorKind","","",null,null],[13,"UnterminatedString","","",2,null],[13,"UnexpectedChar","","",2,null],[13,"UnexpectedToken","","",2,null],[12,"expected","cargo_platform::ParseErrorKind","",3,null],[12,"found","","",3,null],[13,"IncompleteExpr","cargo_platform","",2,null],[13,"UnterminatedExpression","","",2,null],[13,"InvalidTarget","","",2,null],[4,"Platform","","Platform definition.",null,null],[13,"Name","","A named platform, like <code>x86_64-apple-darwin</code>.",4,null],[13,"Cfg","","A cfg expression, like <code>cfg(windows)</code>.",4,null],[11,"matches","","Returns whether the Platform matches the given target and …",4,[[]]],[11,"check_cfg_attributes","","",4,[[["vec",3]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"clone","","",1,[[],["cfgexpr",4]]],[11,"clone","","",0,[[],["cfg",4]]],[11,"clone","","",4,[[],["platform",4]]],[11,"cmp","","",1,[[["cfgexpr",4]],["ordering",4]]],[11,"cmp","","",0,[[["cfg",4]],["ordering",4]]],[11,"cmp","","",4,[[["platform",4]],["ordering",4]]],[11,"eq","","",1,[[["cfgexpr",4]]]],[11,"ne","","",1,[[["cfgexpr",4]]]],[11,"eq","","",0,[[["cfg",4]]]],[11,"ne","","",0,[[["cfg",4]]]],[11,"eq","","",4,[[["platform",4]]]],[11,"ne","","",4,[[["platform",4]]]],[11,"partial_cmp","","",1,[[["cfgexpr",4]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["cfgexpr",4]]]],[11,"le","","",1,[[["cfgexpr",4]]]],[11,"gt","","",1,[[["cfgexpr",4]]]],[11,"ge","","",1,[[["cfgexpr",4]]]],[11,"partial_cmp","","",0,[[["cfg",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["cfg",4]]]],[11,"le","","",0,[[["cfg",4]]]],[11,"gt","","",0,[[["cfg",4]]]],[11,"ge","","",0,[[["cfg",4]]]],[11,"partial_cmp","","",4,[[["platform",4]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["platform",4]]]],[11,"le","","",4,[[["platform",4]]]],[11,"gt","","",4,[[["platform",4]]]],[11,"ge","","",4,[[["platform",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",4,[[]]],[11,"from_str","","",0,[[],[["result",4],["cfg",4]]]],[11,"from_str","","",1,[[],[["result",4],["cfgexpr",4]]]],[11,"from_str","","",4,[[],[["parseerror",3],["platform",4],["result",4]]]],[11,"serialize","","",4,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"matches_key","","Utility function to check if the key, \\\"cfg(..)\\\" matches …",1,[[]]],[11,"matches","","",1,[[]]],[11,"new","","",5,[[["parseerrorkind",4]],["parseerror",3]]]],"p":[[4,"Cfg"],[4,"CfgExpr"],[4,"ParseErrorKind"],[13,"UnexpectedToken"],[4,"Platform"],[3,"ParseError"]]},\
"cfg_expr":{"doc":"cfg-expr is a crate that can be used to parse and …","i":[[0,"error","cfg_expr","Types related to parse errors",null,null],[3,"ParseError","cfg_expr::error","An error related to parsing of a cfg expression",null,null],[12,"original","","The string that was parsed",0,null],[12,"span","","The range of characters in the original string that result…",0,null],[12,"reason","","The specific reason for the error",0,null],[4,"Reason","","The particular reason for a <code>ParseError</code>",null,null],[13,"InvalidNot","","not() takes exactly 1 predicate, unlike all() and any()",1,null],[13,"InvalidCharacters","","The characters are not valid in an cfg expression",1,null],[13,"UnclosedParens","","An opening parens was unmatched with a closing parens",1,null],[13,"UnopenedParens","","A closing parens was unmatched with an opening parens",1,null],[13,"UnclosedQuotes","","An opening quotes was unmatched with a closing quotes",1,null],[13,"UnopenedQuotes","","A closing quotes was unmatched with an opening quotes",1,null],[13,"Empty","","The expression does not contain any valid terms",1,null],[13,"Unexpected","","Found an unexpected term, which wasn\'t one of the …",1,null],[13,"InvalidInteger","","Failed to parse an integer value",1,null],[13,"MultipleRootPredicates","","The root cfg() may only contain a single predicate",1,null],[13,"UnknownBuiltin","","An element was not part of the builtin information in …",1,null],[0,"expr","cfg_expr","Types related to cfg expressions",null,null],[0,"lexer","cfg_expr::expr","",null,null],[4,"Token","cfg_expr::expr::lexer","A single token in a cfg expression …",null,null],[13,"Key","","A single contiguous term",2,null],[13,"Value","","A single continguous value, without its surrounding quotes",2,null],[13,"Equals","","A \'=\', joining a key and a value",2,null],[13,"All","","Beginning of an all() predicate list",2,null],[13,"Any","","Beginning of an any() predicate list",2,null],[13,"Not","","Beginning of a not() predicate",2,null],[13,"OpenParen","","A <code>(</code> for starting a predicate list",2,null],[13,"CloseParen","","A <code>)</code> for ending a predicate list",2,null],[13,"Comma","","A <code>,</code> for separating predicates in a predicate list",2,null],[3,"Lexer","","Allows iteration through a cfg expression, yielding a …",null,null],[11,"new","","Creates a Lexer over a cfg expression, it can either be a …",3,[[]]],[3,"LexerToken","","A wrapper around a particular token that includes the …",null,null],[12,"token","","The token that was lexed",4,null],[12,"span","","The range of the token characters in the original license …",4,null],[4,"Func","cfg_expr::expr","A predicate function, used to combine 1 or more predicates…",null,null],[13,"Not","","<code>not()</code> with a configuration predicate. It is true if its …",5,null],[13,"All","","<code>all()</code> with a comma separated list of configuration …",5,null],[13,"Any","","<code>any()</code> with a comma separated list of configuration …",5,null],[4,"TargetPredicate","","All predicates that pertains to a target, except for …",null,null],[13,"Arch","","target_arch",6,null],[13,"Endian","","target_endian",6,null],[13,"Env","","target_env",6,null],[13,"Family","","target_family This also applies to the bare <code>unix</code> and …",6,null],[13,"Os","","target_os",6,null],[13,"PointerWidth","","target_pointer_width",6,null],[13,"Vendor","","target_vendor",6,null],[8,"TargetMatcher","","",null,null],[10,"matches","","",7,[[["targetpredicate",4]]]],[11,"matches","","Returns true of the predicate matches the specified target",6,[[]]],[4,"Predicate","","A single predicate in a <code>cfg()</code> expression",null,null],[13,"Target","","A target predicate, with the <code>target_</code> prefix",8,null],[13,"Test","","Whether rustc\'s test harness is enabled",8,null],[13,"DebugAssertions","","Enabled when compiling without optimizations.",8,null],[13,"ProcMacro","","Enabled for crates of the proc_macro type.",8,null],[13,"Feature","","A <code>feature = \\\"<name>\\\"</code>",8,null],[13,"TargetFeature","","target_feature",8,null],[13,"Flag","","A generic bare predicate key that doesn\'t match one of …",8,null],[13,"KeyValue","","A generic key = \\\"value\\\" predicate that doesn\'t match one …",8,null],[12,"key","cfg_expr::expr::Predicate","",9,null],[12,"val","","",9,null],[3,"Expression","cfg_expr::expr","A parsed <code>cfg()</code> expression that can evaluated",null,null],[11,"predicates","","An iterator over each predicate in the expression",10,[[]]],[11,"eval","","Evaluates the expression, using the provided closure to …",10,[[]]],[11,"original","","The original string which has been parsed to produce this …",10,[[]]],[8,"Logic","","A propositional logic used to evaluate <code>Expression</code> …",null,null],[10,"top","","The result of an <code>all</code> operation with no operands, akin to …",11,[[]]],[10,"bottom","","The result of an <code>any</code> operation with no operands, akin to …",11,[[]]],[10,"and","","<code>AND</code>, which corresponds to the <code>all</code> operator.",11,[[]]],[10,"or","","<code>OR</code>, which corresponds to the <code>any</code> operator.",11,[[]]],[10,"not","","<code>NOT</code>, which corresponds to the <code>not</code> operator.",11,[[]]],[0,"targets","cfg_expr","Types related to rustc targets",null,null],[17,"ALL_BUILTINS","cfg_expr::targets","",null,null],[3,"Arch","","The \\\"architecture\\\" field",null,null],[12,"0","","",12,null],[3,"Vendor","","The \\\"vendor\\\" field, which in practice is little more than …",null,null],[12,"0","","",13,null],[3,"Os","","The \\\"operating system\\\" field, which sometimes implies an …",null,null],[12,"0","","",14,null],[3,"Env","","The \\\"environment\\\" field, which specifies an ABI …",null,null],[12,"0","","",15,null],[4,"Endian","","The endian types known to rustc",null,null],[13,"big","","",16,null],[13,"little","","",16,null],[4,"Family","","All of the target families known to rustc",null,null],[13,"unix","","Everything that isn\'t windows, and has a family!",17,null],[13,"windows","","The lone wolf of target families.",17,null],[3,"TargetInfo","","Contains information regarding a particular target known …",null,null],[12,"triple","","The target\'s unique identifier",18,null],[12,"os","","The target\'s operating system, if any. Used by the …",18,null],[12,"arch","","The target\'s CPU architecture. Used by the target_arch …",18,null],[12,"env","","The target\'s ABI/libc used, if any. Used by the target_env…",18,null],[12,"vendor","","The target\'s vendor, if any. Used by the target_vendor …",18,null],[12,"family","","The target\'s family, if any. Used by the target_family …",18,null],[12,"pointer_width","","The size of the target\'s pointer type. Used by the …",18,null],[12,"endian","","The target\'s endianness. Used by the target_endian …",18,null],[5,"get_builtin_target_by_triple","","Attempts to find the <code>TargetInfo</code> for the specified target …",null,[[],[["option",4],["targetinfo",3]]]],[5,"rustc_version","","Retrieves the version of rustc for which the built-in …",null,[[]]],[11,"from","cfg_expr::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","cfg_expr::expr::lexer","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","cfg_expr::expr","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","cfg_expr::targets","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"matches","","",18,[[["targetpredicate",4]]]],[11,"next","cfg_expr::expr::lexer","",3,[[],["option",4]]],[11,"clone","","",2,[[],["token",4]]],[11,"clone","cfg_expr::expr","",5,[[],["func",4]]],[11,"clone","","",6,[[],["targetpredicate",4]]],[11,"clone","","",10,[[],["expression",3]]],[11,"clone","cfg_expr::targets","",12,[[],["arch",3]]],[11,"clone","","",13,[[],["vendor",3]]],[11,"clone","","",14,[[],["os",3]]],[11,"clone","","",15,[[],["env",3]]],[11,"clone","","",16,[[],["endian",4]]],[11,"clone","","",17,[[],["family",4]]],[11,"clone","","",18,[[],["targetinfo",3]]],[11,"cmp","cfg_expr::expr","",5,[[["func",4]],["ordering",4]]],[11,"cmp","cfg_expr::targets","",12,[[["arch",3]],["ordering",4]]],[11,"cmp","","",13,[[["vendor",3]],["ordering",4]]],[11,"cmp","","",14,[[["os",3]],["ordering",4]]],[11,"cmp","","",15,[[["env",3]],["ordering",4]]],[11,"cmp","","",16,[[["endian",4]],["ordering",4]]],[11,"cmp","","",17,[[["family",4]],["ordering",4]]],[11,"cmp","","",18,[[["targetinfo",3]],["ordering",4]]],[11,"eq","cfg_expr::error","",0,[[["parseerror",3]]]],[11,"ne","","",0,[[["parseerror",3]]]],[11,"eq","","",1,[[["reason",4]]]],[11,"ne","","",1,[[["reason",4]]]],[11,"eq","cfg_expr::expr::lexer","",2,[[["token",4]]]],[11,"ne","","",2,[[["token",4]]]],[11,"eq","cfg_expr::expr","",5,[[["func",4]]]],[11,"ne","","",5,[[["func",4]]]],[11,"eq","","",6,[[["targetpredicate",4]]]],[11,"ne","","",6,[[["targetpredicate",4]]]],[11,"eq","","",8,[[["predicate",4]]]],[11,"ne","","",8,[[["predicate",4]]]],[11,"eq","","",10,[[]]],[11,"eq","cfg_expr::targets","",12,[[["arch",3]]]],[11,"ne","","",12,[[["arch",3]]]],[11,"eq","","",13,[[["vendor",3]]]],[11,"ne","","",13,[[["vendor",3]]]],[11,"eq","","",14,[[["os",3]]]],[11,"ne","","",14,[[["os",3]]]],[11,"eq","","",15,[[["env",3]]]],[11,"ne","","",15,[[["env",3]]]],[11,"eq","","",16,[[["endian",4]]]],[11,"eq","","",17,[[["family",4]]]],[11,"eq","","",18,[[["targetinfo",3]]]],[11,"ne","","",18,[[["targetinfo",3]]]],[11,"partial_cmp","cfg_expr::expr","",5,[[["func",4]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["func",4]]]],[11,"le","","",5,[[["func",4]]]],[11,"gt","","",5,[[["func",4]]]],[11,"ge","","",5,[[["func",4]]]],[11,"partial_cmp","cfg_expr::targets","",12,[[["arch",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["arch",3]]]],[11,"le","","",12,[[["arch",3]]]],[11,"gt","","",12,[[["arch",3]]]],[11,"ge","","",12,[[["arch",3]]]],[11,"partial_cmp","","",13,[[["vendor",3]],[["option",4],["ordering",4]]]],[11,"lt","","",13,[[["vendor",3]]]],[11,"le","","",13,[[["vendor",3]]]],[11,"gt","","",13,[[["vendor",3]]]],[11,"ge","","",13,[[["vendor",3]]]],[11,"partial_cmp","","",14,[[["os",3]],[["option",4],["ordering",4]]]],[11,"lt","","",14,[[["os",3]]]],[11,"le","","",14,[[["os",3]]]],[11,"gt","","",14,[[["os",3]]]],[11,"ge","","",14,[[["os",3]]]],[11,"partial_cmp","","",15,[[["env",3]],[["option",4],["ordering",4]]]],[11,"lt","","",15,[[["env",3]]]],[11,"le","","",15,[[["env",3]]]],[11,"gt","","",15,[[["env",3]]]],[11,"ge","","",15,[[["env",3]]]],[11,"partial_cmp","","",16,[[["endian",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",17,[[["family",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",18,[[["targetinfo",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["targetinfo",3]]]],[11,"le","","",18,[[["targetinfo",3]]]],[11,"gt","","",18,[[["targetinfo",3]]]],[11,"ge","","",18,[[["targetinfo",3]]]],[11,"fmt","cfg_expr::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","cfg_expr::expr::lexer","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","cfg_expr::expr","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","cfg_expr::targets","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","cfg_expr::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","cfg_expr::expr::lexer","",2,[[["formatter",3]],["result",6]]],[11,"hash","cfg_expr::targets","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"from_str","","",16,[[],["result",4]]],[11,"from_str","","",17,[[],["result",4]]],[11,"description","cfg_expr::error","",0,[[]]],[11,"parse","cfg_expr::expr","Given a cfg() expression (the cfg( and ) are optional), …",10,[[],[["result",4],["parseerror",3]]]],[18,"aarch64","cfg_expr::targets","",12,null],[18,"arm","","",12,null],[18,"avr","","",12,null],[18,"hexagon","","",12,null],[18,"mips","","",12,null],[18,"mips64","","",12,null],[18,"msp430","","",12,null],[18,"nvptx64","","",12,null],[18,"powerpc","","",12,null],[18,"powerpc64","","",12,null],[18,"riscv32","","",12,null],[18,"riscv64","","",12,null],[18,"s390x","","",12,null],[18,"sparc","","",12,null],[18,"sparc64","","",12,null],[18,"wasm32","","",12,null],[18,"x86","","",12,null],[18,"x86_64","","",12,null],[18,"apple","","",13,null],[18,"fortanix","","",13,null],[18,"nvidia","","",13,null],[18,"pc","","",13,null],[18,"rumprun","","",13,null],[18,"sony","","",13,null],[18,"sun","","",13,null],[18,"unknown","","",13,null],[18,"uwp","","",13,null],[18,"wrs","","",13,null],[18,"android","","",14,null],[18,"cuda","","",14,null],[18,"dragonfly","","",14,null],[18,"emscripten","","",14,null],[18,"freebsd","","",14,null],[18,"fuchsia","","",14,null],[18,"haiku","","",14,null],[18,"hermit","","",14,null],[18,"illumos","","",14,null],[18,"ios","","",14,null],[18,"l4re","","",14,null],[18,"linux","","",14,null],[18,"macos","","",14,null],[18,"netbsd","","",14,null],[18,"openbsd","","",14,null],[18,"psp","","",14,null],[18,"redox","","",14,null],[18,"solaris","","",14,null],[18,"tvos","","",14,null],[18,"uefi","","",14,null],[18,"unknown","","",14,null],[18,"vxworks","","",14,null],[18,"wasi","","",14,null],[18,"windows","","",14,null],[18,"eabihf","","",15,null],[18,"gnu","","",15,null],[18,"gnueabihf","","",15,null],[18,"msvc","","",15,null],[18,"musl","","",15,null],[18,"relibc","","",15,null],[18,"sgx","","",15,null],[18,"uclibc","","",15,null]],"p":[[3,"ParseError"],[4,"Reason"],[4,"Token"],[3,"Lexer"],[3,"LexerToken"],[4,"Func"],[4,"TargetPredicate"],[8,"TargetMatcher"],[4,"Predicate"],[13,"KeyValue"],[3,"Expression"],[8,"Logic"],[3,"Arch"],[3,"Vendor"],[3,"Os"],[3,"Env"],[4,"Endian"],[4,"Family"],[3,"TargetInfo"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","i":[[14,"cfg_if","cfg_if","The main macro provided by this crate. See crate …",null,null]],"p":[]},\
"chrono":{"doc":"Chrono: Date and Time for RustIt aims to be a …","i":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This …",null,null],[0,"prelude","","A convenience module appropriate for glob imports (…",null,null],[0,"offset","","The time zone, which calculates offsets from the local …",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the …",null,null],[13,"None","","Given local time representation is invalid. This can …",0,null],[13,"Single","","Given local time representation has a single unique …",0,null],[13,"Ambiguous","","Given local time representation has multiple results and …",0,null],[11,"single","","Returns <code>Some</code> only when the conversion result is unique, …",0,[[],["option",4]]],[11,"earliest","","Returns <code>Some</code> for the earliest possible conversion result, …",0,[[],["option",4]]],[11,"latest","","Returns <code>Some</code> for the latest possible conversion result, …",0,[[],["option",4]]],[11,"map","","Maps a <code>LocalResult<T></code> into <code>LocalResult<U></code> with given …",0,[[["fnmut",8]],["localresult",4]]],[11,"and_time","","Makes a new <code>DateTime</code> from the current date and given …",0,[[["naivetime",3]],[["localresult",4],["datetime",3]]]],[11,"and_hms_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute …",0,[[],[["localresult",4],["datetime",3]]]],[11,"and_hms_milli_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[],[["localresult",4],["datetime",3]]]],[11,"and_hms_micro_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[],[["localresult",4],["datetime",3]]]],[11,"and_hms_nano_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",0,[[],[["localresult",4],["datetime",3]]]],[11,"unwrap","","Returns the single unique conversion result, or panics …",0,[[]]],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time …",1,[[],["fixedoffset",3]]],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the …",2,null],[11,"ymd","","Makes a new <code>Date</code> from year, month, day and the current …",2,[[],["date",3]]],[11,"ymd_opt","","Makes a new <code>Date</code> from year, month, day and the current …",2,[[],[["localresult",4],["date",3]]]],[11,"yo","","Makes a new <code>Date</code> from year, day of year (DOY or …",2,[[],["date",3]]],[11,"yo_opt","","Makes a new <code>Date</code> from year, day of year (DOY or …",2,[[],[["localresult",4],["date",3]]]],[11,"isoywd","","Makes a new <code>Date</code> from ISO week date (year and week …",2,[[["weekday",4]],["date",3]]],[11,"isoywd_opt","","Makes a new <code>Date</code> from ISO week date (year and week …",2,[[["weekday",4]],[["localresult",4],["date",3]]]],[11,"timestamp","","Makes a new <code>DateTime</code> from the number of non-leap seconds …",2,[[],["datetime",3]]],[11,"timestamp_opt","","Makes a new <code>DateTime</code> from the number of non-leap seconds …",2,[[],[["localresult",4],["datetime",3]]]],[11,"timestamp_millis","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[],["datetime",3]]],[11,"timestamp_millis_opt","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[],[["localresult",4],["datetime",3]]]],[11,"timestamp_nanos","","Makes a new <code>DateTime</code> from the number of non-leap …",2,[[],["datetime",3]]],[11,"datetime_from_str","","Parses a string with the specified format string and …",2,[[],[["datetime",3],["parseresult",6]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",2,[[]]],[10,"offset_from_local_date","","Creates the offset(s) for given local <code>NaiveDate</code> if …",2,[[["naivedate",3]],["localresult",4]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local <code>NaiveDateTime</code> if …",2,[[["naivedatetime",3]],["localresult",4]]],[11,"from_local_date","","Converts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> …",2,[[["naivedate",3]],[["localresult",4],["date",3]]]],[11,"from_local_datetime","","Converts the local <code>NaiveDateTime</code> to the timezone-aware …",2,[[["naivedatetime",3]],[["localresult",4],["datetime",3]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC <code>NaiveDate</code>. This cannot …",2,[[["naivedate",3]]]],[10,"offset_from_utc_datetime","","Creates the offset for given UTC <code>NaiveDateTime</code>. This …",2,[[["naivedatetime",3]]]],[11,"from_utc_date","","Converts the UTC <code>NaiveDate</code> to the local time. The UTC is …",2,[[["naivedate",3]],["date",3]]],[11,"from_utc_datetime","","Converts the UTC <code>NaiveDateTime</code> to the local time. The UTC …",2,[[["naivedatetime",3]],["datetime",3]]],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to …",null,null],[3,"Local","","The local timescale. This is implemented via the standard …",null,null],[3,"Utc","","The UTC time zone. This is the most efficient time zone …",null,null],[0,"naive","chrono","Date and time types unconcerned with timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every …",null,null],[17,"MAX_DATE","","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).",null,null],[17,"MIN_DATE","","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[17,"MAX_DATETIME","","The maximum possible <code>NaiveDateTime</code>.",null,null],[17,"MIN_DATETIME","","The minimum possible <code>NaiveDateTime</code>.",null,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond …",null,null],[0,"format","chrono","Formatting (and parsing) utilities for date and time.",null,null],[0,"strftime","chrono::format","<code>strftime</code>/<code>strptime</code>-inspired date and time formatting …",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for <code>strftime</code>-like format strings.",null,null],[11,"new","","Creates a new parsing iterator from the <code>strftime</code>-like …",3,[[],["strftimeitems",3]]],[5,"parse","chrono::format","Tries to parse given string into <code>parsed</code> with given …",null,[[["parsed",3]],["parseresult",6]]],[3,"Parsed","","Parsed parts of date and time. There are two classes of …",null,null],[12,"year","","Year.",4,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE …",4,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when …",4,null],[12,"isoyear","","Year in the ISO week date.",4,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that …",4,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the …",4,null],[12,"month","","Month (1--12).",4,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday …",4,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday …",4,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",4,null],[12,"weekday","","Day of the week.",4,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",4,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending …",4,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 …",4,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",4,null],[12,"minute","","Minute number (0--59).",4,null],[12,"second","","Second number (0--60, accounting for leap seconds).",4,null],[12,"nanosecond","","The number of nanoseconds since the whole second …",4,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on …",4,null],[12,"offset","","Offset from the local time to UTC, in seconds.",4,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",5,null],[13,"Zero","","Zero (<code>0</code>) padding.",5,null],[13,"Space","","Space padding.",5,null],[4,"Numeric","","Numeric item types. They have associated formatting width …",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years …",6,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). …",6,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",6,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept …",6,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). …",6,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot …",6,null],[13,"Month","","Month (FW=PW=2).",6,null],[13,"Day","","Day of the month (FW=PW=2).",6,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday …",6,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday …",6,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",6,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 …",6,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 …",6,null],[13,"Ordinal","","Day of the year (FW=PW=3).",6,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",6,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",6,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",6,null],[13,"Second","","The number of seconds since the last whole minute …",6,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second …",6,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on …",6,null],[13,"Internal","","Internal uses only.",6,null],[3,"InternalNumeric","","An opaque type representing numeric item types for …",null,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",7,null],[13,"LongMonthName","","Full month names.",7,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",7,null],[13,"LongWeekdayName","","Full day of the week names.",7,null],[13,"LowerAmPm","","AM/PM.",7,null],[13,"UpperAmPm","","AM/PM.",7,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned …",7,null],[13,"Nanosecond3","","Same as <code>Nanosecond</code> but the accuracy is fixed to 3.",7,null],[13,"Nanosecond6","","Same as <code>Nanosecond</code> but the accuracy is fixed to 6.",7,null],[13,"Nanosecond9","","Same as <code>Nanosecond</code> but the accuracy is fixed to 9.",7,null],[13,"TimezoneName","","Timezone name.",7,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …",7,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).",7,null],[13,"TimezoneOffset","","Same as <code>TimezoneOffsetColon</code> but prints no colon. Parsing …",7,null],[13,"TimezoneOffsetZ","","Same as <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …",7,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email …",7,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",7,null],[13,"Internal","","Internal uses only.",7,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for …",null,null],[4,"Item","","A single formatting item. This is used for both …",null,null],[13,"Literal","","A literally printed and parsed text.",8,null],[13,"OwnedLiteral","","Same as <code>Literal</code> but with the string owned by the item.",8,null],[13,"Space","","Whitespace. Prints literally but reads zero or more …",8,null],[13,"OwnedSpace","","Same as <code>Space</code> but with the string owned by the item.",8,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal …",8,null],[13,"Fixed","","Fixed-format item.",8,null],[13,"Error","","Issues a formatting error. Used to signal an invalid …",8,null],[3,"ParseError","","An error from the <code>parse</code> function.",null,null],[6,"ParseResult","","Same as <code>Result<T, ParseError></code>.",null,null],[5,"format_item","","Formats single formatting item",null,[[["option",4],["naivetime",3],["option",4],["option",4],["naivedate",3],["formatter",3],["item",4]],["result",6]]],[5,"format","","Tries to format given arguments with given formatting …",null,[[["option",4],["naivetime",3],["option",4],["option",4],["naivedate",3],["formatter",3]],["result",6]]],[3,"DelayedFormat","","A <em>temporary</em> object which can be used as an argument to …",null,null],[11,"new","","Makes a new <code>DelayedFormat</code> value out of local date and …",9,[[["naivedate",3],["naivetime",3],["option",4],["option",4]],["delayedformat",3]]],[11,"new_with_offset","","Makes a new <code>DelayedFormat</code> value out of local date and …",9,[[["naivedate",3],["naivetime",3],["option",4],["option",4]],["delayedformat",3]]],[3,"Date","chrono","ISO 8601 calendar date with time zone.",null,null],[17,"MAX_DATE","","The maximum possible <code>Date</code>.",null,null],[17,"MIN_DATE","","The minimum possible <code>Date</code>.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[4,"SecondsFormat","","Specific formatting options for seconds. This may be …",null,null],[13,"Secs","","Format whole seconds only, with no decimal point nor …",10,null],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to …",10,null],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to …",10,null],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to …",10,null],[13,"AutoSi","","Automatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code>…",10,null],[17,"MAX_DATETIME","","The maximum possible <code>DateTime<Utc></code>.",null,null],[17,"MIN_DATETIME","","The minimum possible <code>DateTime<Utc></code>.",null,null],[8,"DurationRound","","Extension trait for rounding or truncating a DateTime by …",null,null],[16,"Err","","Error that can occur in rounding or truncating",11,null],[10,"duration_round","","Return a copy rounded by Duration.",11,[[["duration",3]],["result",4]]],[10,"duration_trunc","","Return a copy truncated by Duration.",11,[[["duration",3]],["result",4]]],[4,"RoundingError","","An error from rounding by <code>Duration</code>",null,null],[13,"DurationExceedsTimestamp","","Error when the Duration exceeds the Duration from or …",12,null],[13,"DurationExceedsLimit","","Error when <code>Duration.num_nanoseconds</code> exceeds the limit.",12,null],[13,"TimestampExceedsLimit","","Error when <code>DateTime.timestamp_nanos</code> exceeds the limit.",12,null],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a …",null,null],[10,"round_subsecs","","Return a copy rounded to the specified number of …",13,[[]]],[10,"trunc_subsecs","","Return a copy truncated to the specified number of …",13,[[]]],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",14,null],[13,"Tue","","Tuesday.",14,null],[13,"Wed","","Wednesday.",14,null],[13,"Thu","","Thursday.",14,null],[13,"Fri","","Friday.",14,null],[13,"Sat","","Saturday.",14,null],[13,"Sun","","Sunday.",14,null],[11,"succ","","The next day in the week.",14,[[],["weekday",4]]],[11,"pred","","The previous day in the week.",14,[[],["weekday",4]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. …",14,[[]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",14,[[]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",14,[[]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",14,[[]]],[3,"ParseWeekdayError","","An error resulting from reading <code>Weekday</code> value with <code>FromStr</code>…",null,null],[4,"Month","","The month of the year.",null,null],[13,"January","","January",15,null],[13,"February","","February",15,null],[13,"March","","March",15,null],[13,"April","","April",15,null],[13,"May","","May",15,null],[13,"June","","June",15,null],[13,"July","","July",15,null],[13,"August","","August",15,null],[13,"September","","September",15,null],[13,"October","","October",15,null],[13,"November","","November",15,null],[13,"December","","December",15,null],[11,"succ","","The next month.",15,[[],["month",4]]],[11,"pred","","The previous month.",15,[[],["month",4]]],[11,"number_from_month","","Returns a month-of-year number starting from January = 1.",15,[[]]],[11,"name","","Get the name of the month",15,[[]]],[3,"ParseMonthError","","An error resulting from reading <code><Month></code> value with <code>FromStr</code>…",null,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",16,[[]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a …",16,[[]]],[10,"month","","Returns the month number starting from 1.",16,[[]]],[10,"month0","","Returns the month number starting from 0.",16,[[]]],[10,"day","","Returns the day of month starting from 1.",16,[[]]],[10,"day0","","Returns the day of month starting from 0.",16,[[]]],[10,"ordinal","","Returns the day of year starting from 1.",16,[[]]],[10,"ordinal0","","Returns the day of year starting from 0.",16,[[]]],[10,"weekday","","Returns the day of week.",16,[[],["weekday",4]]],[10,"iso_week","","Returns the ISO week.",16,[[],["isoweek",3]]],[10,"with_year","","Makes a new value with the year number changed.",16,[[],["option",4]]],[10,"with_month","","Makes a new value with the month number (starting from 1) …",16,[[],["option",4]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) …",16,[[],["option",4]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) …",16,[[],["option",4]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) …",16,[[],["option",4]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) …",16,[[],["option",4]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) …",16,[[],["option",4]]],[11,"num_days_from_ce","","Counts the days in the proleptic Gregorian calendar, with …",16,[[]]],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",17,[[]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, …",17,[[]]],[10,"minute","","Returns the minute number from 0 to 59.",17,[[]]],[10,"second","","Returns the second number from 0 to 59.",17,[[]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole …",17,[[]]],[10,"with_hour","","Makes a new value with the hour number changed.",17,[[],["option",4]]],[10,"with_minute","","Makes a new value with the minute number changed.",17,[[],["option",4]]],[10,"with_second","","Makes a new value with the second number changed.",17,[[],["option",4]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole …",17,[[],["option",4]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last …",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","chrono::offset","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","chrono::naive","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","chrono","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","chrono::format","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","chrono::format::strftime","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","chrono::format","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","chrono","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"fmt","","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",18,[[["duration",3]],[["ordering",4],["option",4]]]],[11,"lt","","",18,[[["duration",3]]]],[11,"le","","",18,[[["duration",3]]]],[11,"gt","","",18,[[["duration",3]]]],[11,"ge","","",18,[[["duration",3]]]],[11,"hash","","",18,[[]]],[11,"mul","","",18,[[],["duration",3]]],[11,"clone","","",18,[[],["duration",3]]],[11,"div","","",18,[[],["duration",3]]],[11,"cmp","","",18,[[["duration",3]],["ordering",4]]],[11,"eq","","",18,[[["duration",3]]]],[11,"ne","","",18,[[["duration",3]]]],[11,"neg","","",18,[[],["duration",3]]],[11,"fmt","","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"add","","",18,[[["duration",3]],["duration",3]]],[11,"sub","","",18,[[["duration",3]],["duration",3]]],[11,"fix","chrono::offset","",19,[[],["fixedoffset",3]]],[11,"fix","","",21,[[],["fixedoffset",3]]],[11,"from_offset","","",19,[[["fixedoffset",3]],["fixedoffset",3]]],[11,"offset_from_local_date","","",19,[[["naivedate",3]],[["fixedoffset",3],["localresult",4]]]],[11,"offset_from_local_datetime","","",19,[[["naivedatetime",3]],[["fixedoffset",3],["localresult",4]]]],[11,"offset_from_utc_date","","",19,[[["naivedate",3]],["fixedoffset",3]]],[11,"offset_from_utc_datetime","","",19,[[["naivedatetime",3]],["fixedoffset",3]]],[11,"from_offset","","",20,[[["fixedoffset",3]],["local",3]]],[11,"offset_from_local_date","","",20,[[["naivedate",3]],[["fixedoffset",3],["localresult",4]]]],[11,"offset_from_local_datetime","","",20,[[["naivedatetime",3]],[["fixedoffset",3],["localresult",4]]]],[11,"offset_from_utc_date","","",20,[[["naivedate",3]],["fixedoffset",3]]],[11,"offset_from_utc_datetime","","",20,[[["naivedatetime",3]],["fixedoffset",3]]],[11,"from_local_date","","",20,[[["naivedate",3]],[["localresult",4],["date",3]]]],[11,"from_local_datetime","","",20,[[["naivedatetime",3]],[["datetime",3],["localresult",4]]]],[11,"from_utc_date","","",20,[[["naivedate",3]],[["local",3],["date",3]]]],[11,"from_utc_datetime","","",20,[[["naivedatetime",3]],[["datetime",3],["local",3]]]],[11,"from_offset","","",21,[[["utc",3]],["utc",3]]],[11,"offset_from_local_date","","",21,[[["naivedate",3]],[["utc",3],["localresult",4]]]],[11,"offset_from_local_datetime","","",21,[[["naivedatetime",3]],[["utc",3],["localresult",4]]]],[11,"offset_from_utc_date","","",21,[[["naivedate",3]],["utc",3]]],[11,"offset_from_utc_datetime","","",21,[[["naivedatetime",3]],["utc",3]]],[11,"duration_round","chrono","",27,[[["duration",3]],["result",4]]],[11,"duration_trunc","","",27,[[["duration",3]],["result",4]]],[11,"year","chrono::naive","Returns the year number in the calendar date.",22,[[]]],[11,"month","","Returns the month number starting from 1.",22,[[]]],[11,"month0","","Returns the month number starting from 0.",22,[[]]],[11,"day","","Returns the day of month starting from 1.",22,[[]]],[11,"day0","","Returns the day of month starting from 0.",22,[[]]],[11,"ordinal","","Returns the day of year starting from 1.",22,[[]]],[11,"ordinal0","","Returns the day of year starting from 0.",22,[[]]],[11,"weekday","","Returns the day of week.",22,[[],["weekday",4]]],[11,"iso_week","","",22,[[],["isoweek",3]]],[11,"with_year","","Makes a new <code>NaiveDate</code> with the year number changed.",22,[[],[["option",4],["naivedate",3]]]],[11,"with_month","","Makes a new <code>NaiveDate</code> with the month number (starting …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_month0","","Makes a new <code>NaiveDate</code> with the month number (starting …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_day","","Makes a new <code>NaiveDate</code> with the day of month (starting …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_day0","","Makes a new <code>NaiveDate</code> with the day of month (starting …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_ordinal","","Makes a new <code>NaiveDate</code> with the day of year (starting from …",22,[[],[["option",4],["naivedate",3]]]],[11,"with_ordinal0","","Makes a new <code>NaiveDate</code> with the day of year (starting from …",22,[[],[["option",4],["naivedate",3]]]],[11,"year","","Returns the year number in the calendar date.",23,[[]]],[11,"month","","Returns the month number starting from 1.",23,[[]]],[11,"month0","","Returns the month number starting from 0.",23,[[]]],[11,"day","","Returns the day of month starting from 1.",23,[[]]],[11,"day0","","Returns the day of month starting from 0.",23,[[]]],[11,"ordinal","","Returns the day of year starting from 1.",23,[[]]],[11,"ordinal0","","Returns the day of year starting from 0.",23,[[]]],[11,"weekday","","Returns the day of week.",23,[[],["weekday",4]]],[11,"iso_week","","",23,[[],["isoweek",3]]],[11,"with_year","","Makes a new <code>NaiveDateTime</code> with the year number changed.",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_month","","Makes a new <code>NaiveDateTime</code> with the month number (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_month0","","Makes a new <code>NaiveDateTime</code> with the month number (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_day","","Makes a new <code>NaiveDateTime</code> with the day of month (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_day0","","Makes a new <code>NaiveDateTime</code> with the day of month (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_ordinal","","Makes a new <code>NaiveDateTime</code> with the day of year (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_ordinal0","","Makes a new <code>NaiveDateTime</code> with the day of year (starting …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"year","chrono","",26,[[]]],[11,"month","","",26,[[]]],[11,"month0","","",26,[[]]],[11,"day","","",26,[[]]],[11,"day0","","",26,[[]]],[11,"ordinal","","",26,[[]]],[11,"ordinal0","","",26,[[]]],[11,"weekday","","",26,[[],["weekday",4]]],[11,"iso_week","","",26,[[],["isoweek",3]]],[11,"with_year","","",26,[[],[["date",3],["option",4]]]],[11,"with_month","","",26,[[],[["date",3],["option",4]]]],[11,"with_month0","","",26,[[],[["date",3],["option",4]]]],[11,"with_day","","",26,[[],[["date",3],["option",4]]]],[11,"with_day0","","",26,[[],[["date",3],["option",4]]]],[11,"with_ordinal","","",26,[[],[["date",3],["option",4]]]],[11,"with_ordinal0","","",26,[[],[["date",3],["option",4]]]],[11,"year","","",27,[[]]],[11,"month","","",27,[[]]],[11,"month0","","",27,[[]]],[11,"day","","",27,[[]]],[11,"day0","","",27,[[]]],[11,"ordinal","","",27,[[]]],[11,"ordinal0","","",27,[[]]],[11,"weekday","","",27,[[],["weekday",4]]],[11,"iso_week","","",27,[[],["isoweek",3]]],[11,"with_year","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_month","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_month0","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_day","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_day0","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_ordinal","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_ordinal0","","",27,[[],[["datetime",3],["option",4]]]],[11,"hour","chrono::naive","Returns the hour number from 0 to 23.",23,[[]]],[11,"minute","","Returns the minute number from 0 to 59.",23,[[]]],[11,"second","","Returns the second number from 0 to 59.",23,[[]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole …",23,[[]]],[11,"with_hour","","Makes a new <code>NaiveDateTime</code> with the hour number changed.",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_minute","","Makes a new <code>NaiveDateTime</code> with the minute number changed.",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_second","","Makes a new <code>NaiveDateTime</code> with the second number changed.",23,[[],[["option",4],["naivedatetime",3]]]],[11,"with_nanosecond","","Makes a new <code>NaiveDateTime</code> with nanoseconds since the …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"hour","","Returns the hour number from 0 to 23.",25,[[]]],[11,"minute","","Returns the minute number from 0 to 59.",25,[[]]],[11,"second","","Returns the second number from 0 to 59.",25,[[]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole …",25,[[]]],[11,"with_hour","","Makes a new <code>NaiveTime</code> with the hour number changed.",25,[[],[["option",4],["naivetime",3]]]],[11,"with_minute","","Makes a new <code>NaiveTime</code> with the minute number changed.",25,[[],[["option",4],["naivetime",3]]]],[11,"with_second","","Makes a new <code>NaiveTime</code> with the second number changed.",25,[[],[["option",4],["naivetime",3]]]],[11,"with_nanosecond","","Makes a new <code>NaiveTime</code> with nanoseconds since the whole …",25,[[],[["option",4],["naivetime",3]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last …",25,[[]]],[11,"hour","chrono","",27,[[]]],[11,"minute","","",27,[[]]],[11,"second","","",27,[[]]],[11,"nanosecond","","",27,[[]]],[11,"with_hour","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_minute","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_second","","",27,[[],[["datetime",3],["option",4]]]],[11,"with_nanosecond","","",27,[[],[["datetime",3],["option",4]]]],[11,"from","","Convert this <code>DateTime<Utc></code> instance into a …",27,[[["datetime",3],["utc",3]]]],[11,"from","","Convert this <code>DateTime<Utc></code> instance into a <code>DateTime<Local></code>…",27,[[["datetime",3],["utc",3]]]],[11,"from","","Convert this <code>DateTime<FixedOffset></code> instance into a …",27,[[["fixedoffset",3],["datetime",3]]]],[11,"from","","Convert this <code>DateTime<FixedOffset></code> instance into a …",27,[[["fixedoffset",3],["datetime",3]]]],[11,"from","","Convert this <code>DateTime<Local></code> instance into a <code>DateTime<Utc></code>…",27,[[["datetime",3],["local",3]]]],[11,"from","","Convert this <code>DateTime<Local></code> instance into a …",27,[[["datetime",3],["local",3]]]],[11,"from","","",27,[[["systemtime",3]],[["datetime",3],["utc",3]]]],[11,"from","","",27,[[["systemtime",3]],[["datetime",3],["local",3]]]],[11,"next","chrono::format::strftime","",3,[[],[["item",4],["option",4]]]],[11,"clone","chrono::offset","",0,[[],["localresult",4]]],[11,"clone","","",19,[[],["fixedoffset",3]]],[11,"clone","","",20,[[],["local",3]]],[11,"clone","","",21,[[],["utc",3]]],[11,"clone","chrono::naive","",22,[[],["naivedate",3]]],[11,"clone","","",23,[[],["naivedatetime",3]]],[11,"clone","","",24,[[],["isoweek",3]]],[11,"clone","","",25,[[],["naivetime",3]]],[11,"clone","chrono","",26,[[],["date",3]]],[11,"clone","","",10,[[],["secondsformat",4]]],[11,"clone","","",27,[[],["datetime",3]]],[11,"clone","chrono::format","",5,[[],["pad",4]]],[11,"clone","","",6,[[],["numeric",4]]],[11,"clone","","",28,[[]]],[11,"clone","","",7,[[],["fixed",4]]],[11,"clone","","",29,[[],["internalfixed",3]]],[11,"clone","","",8,[[],["item",4]]],[11,"clone","","",30,[[],["parseerror",3]]],[11,"clone","","",4,[[],["parsed",3]]],[11,"clone","chrono::format::strftime","",3,[[],["strftimeitems",3]]],[11,"clone","chrono","",12,[[],["roundingerror",4]]],[11,"clone","","",14,[[],["weekday",4]]],[11,"clone","","",31,[[],["parseweekdayerror",3]]],[11,"clone","","",15,[[],["month",4]]],[11,"clone","","",32,[[],["parsemontherror",3]]],[11,"default","chrono::format","",4,[[],["parsed",3]]],[11,"cmp","chrono::naive","",22,[[["naivedate",3]],["ordering",4]]],[11,"cmp","","",23,[[["naivedatetime",3]],["ordering",4]]],[11,"cmp","","",24,[[["isoweek",3]],["ordering",4]]],[11,"cmp","","",25,[[["naivetime",3]],["ordering",4]]],[11,"cmp","chrono","",26,[[["date",3]],["ordering",4]]],[11,"cmp","","",27,[[["datetime",3]],["ordering",4]]],[11,"eq","chrono::offset","",0,[[["localresult",4]]]],[11,"ne","","",0,[[["localresult",4]]]],[11,"eq","","",19,[[["fixedoffset",3]]]],[11,"ne","","",19,[[["fixedoffset",3]]]],[11,"eq","","",21,[[["utc",3]]]],[11,"eq","chrono::naive","",22,[[["naivedate",3]]]],[11,"ne","","",22,[[["naivedate",3]]]],[11,"eq","","",23,[[["naivedatetime",3]]]],[11,"ne","","",23,[[["naivedatetime",3]]]],[11,"eq","","",24,[[["isoweek",3]]]],[11,"ne","","",24,[[["isoweek",3]]]],[11,"eq","","",25,[[["naivetime",3]]]],[11,"ne","","",25,[[["naivetime",3]]]],[11,"eq","chrono","",26,[[["date",3]]]],[11,"eq","","",10,[[["secondsformat",4]]]],[11,"eq","","",27,[[["datetime",3]]]],[11,"eq","chrono::format","",5,[[["pad",4]]]],[11,"eq","","",6,[[["numeric",4]]]],[11,"ne","","",6,[[["numeric",4]]]],[11,"eq","","",28,[[["internalnumeric",3]]]],[11,"eq","","",7,[[["fixed",4]]]],[11,"ne","","",7,[[["fixed",4]]]],[11,"eq","","",29,[[["internalfixed",3]]]],[11,"ne","","",29,[[["internalfixed",3]]]],[11,"eq","","",8,[[["item",4]]]],[11,"ne","","",8,[[["item",4]]]],[11,"eq","","",30,[[["parseerror",3]]]],[11,"ne","","",30,[[["parseerror",3]]]],[11,"eq","","",4,[[["parsed",3]]]],[11,"ne","","",4,[[["parsed",3]]]],[11,"eq","chrono","",12,[[["roundingerror",4]]]],[11,"eq","","",14,[[["weekday",4]]]],[11,"eq","","",31,[[["parseweekdayerror",3]]]],[11,"ne","","",31,[[["parseweekdayerror",3]]]],[11,"eq","","",15,[[["month",4]]]],[11,"eq","","",32,[[["parsemontherror",3]]]],[11,"ne","","",32,[[["parsemontherror",3]]]],[11,"partial_cmp","chrono::naive","",22,[[["naivedate",3]],[["option",4],["ordering",4]]]],[11,"lt","","",22,[[["naivedate",3]]]],[11,"le","","",22,[[["naivedate",3]]]],[11,"gt","","",22,[[["naivedate",3]]]],[11,"ge","","",22,[[["naivedate",3]]]],[11,"partial_cmp","","",23,[[["naivedatetime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",23,[[["naivedatetime",3]]]],[11,"le","","",23,[[["naivedatetime",3]]]],[11,"gt","","",23,[[["naivedatetime",3]]]],[11,"ge","","",23,[[["naivedatetime",3]]]],[11,"partial_cmp","","",24,[[["isoweek",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["isoweek",3]]]],[11,"le","","",24,[[["isoweek",3]]]],[11,"gt","","",24,[[["isoweek",3]]]],[11,"ge","","",24,[[["isoweek",3]]]],[11,"partial_cmp","","",25,[[["naivetime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",25,[[["naivetime",3]]]],[11,"le","","",25,[[["naivetime",3]]]],[11,"gt","","",25,[[["naivetime",3]]]],[11,"ge","","",25,[[["naivetime",3]]]],[11,"partial_cmp","chrono","",26,[[["date",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","Compare two DateTimes based on their true time, ignoring …",27,[[["datetime",3]],[["option",4],["ordering",4]]]],[11,"fmt","chrono::offset","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::naive","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format::strftime","",3,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",9,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::offset","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::naive","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","chrono::format","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","chrono","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"sub","chrono::naive","",25,[[["fixedoffset",3]],["naivetime",3]]],[11,"sub","","",23,[[["fixedoffset",3]],["naivedatetime",3]]],[11,"sub","chrono","",27,[[["fixedoffset",3]],["datetime",3]]],[11,"sub","chrono::naive","",22,[[["oldduration",3]],["naivedate",3]]],[11,"sub","","",22,[[["naivedate",3]],["oldduration",3]]],[11,"sub","","",23,[[["oldduration",3]],["naivedatetime",3]]],[11,"sub","","",23,[[["naivedatetime",3]],["oldduration",3]]],[11,"sub","","",25,[[["oldduration",3]],["naivetime",3]]],[11,"sub","","",25,[[["naivetime",3]],["oldduration",3]]],[11,"sub","chrono","",26,[[["oldduration",3]],["date",3]]],[11,"sub","","",26,[[["date",3]],["oldduration",3]]],[11,"sub","","",27,[[["oldduration",3]],["datetime",3]]],[11,"sub","","",27,[[["datetime",3]],["oldduration",3]]],[11,"add","chrono::naive","",25,[[["fixedoffset",3]],["naivetime",3]]],[11,"add","","",23,[[["fixedoffset",3]],["naivedatetime",3]]],[11,"add","chrono","",27,[[["fixedoffset",3]],["datetime",3]]],[11,"add","chrono::naive","",22,[[["oldduration",3]],["naivedate",3]]],[11,"add","","",23,[[["oldduration",3]],["naivedatetime",3]]],[11,"add","","",25,[[["oldduration",3]],["naivetime",3]]],[11,"add","chrono","",26,[[["oldduration",3]],["date",3]]],[11,"add","","",27,[[["oldduration",3]],["datetime",3]]],[11,"add_assign","chrono::naive","",22,[[["oldduration",3]]]],[11,"add_assign","","",23,[[["oldduration",3]]]],[11,"add_assign","","",25,[[["oldduration",3]]]],[11,"sub_assign","","",22,[[["oldduration",3]]]],[11,"sub_assign","","",23,[[["oldduration",3]]]],[11,"sub_assign","","",25,[[["oldduration",3]]]],[11,"hash","chrono::offset","",0,[[]]],[11,"hash","","",19,[[]]],[11,"hash","chrono::naive","",22,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",25,[[]]],[11,"hash","chrono","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"from_str","chrono::naive","",22,[[],[["parseresult",6],["naivedate",3]]]],[11,"from_str","","",23,[[],[["parseresult",6],["naivedatetime",3]]]],[11,"from_str","","",25,[[],[["parseresult",6],["naivetime",3]]]],[11,"from_str","chrono","",27,[[],[["datetime",3],["parseresult",6]]]],[11,"from_str","","",27,[[],[["datetime",3],["parseresult",6]]]],[11,"from_str","","",27,[[],[["parseresult",6],["datetime",3]]]],[11,"from_str","","",14,[[],["result",4]]],[11,"from_str","","",15,[[],["result",4]]],[11,"description","chrono::format","",30,[[]]],[11,"description","chrono","",12,[[]]],[11,"from_i64","","",14,[[],[["option",4],["weekday",4]]]],[11,"from_u64","","",14,[[],[["option",4],["weekday",4]]]],[11,"from_u64","","Returns an Option from a i64, assuming a 1-index, January …",15,[[],[["option",4],["month",4]]]],[11,"from_i64","","",15,[[],[["option",4],["month",4]]]],[11,"from_u32","","",15,[[],[["option",4],["month",4]]]],[11,"weeks","","Makes a new <code>Duration</code> with given number of weeks. …",18,[[],["duration",3]]],[11,"days","","Makes a new <code>Duration</code> with given number of days. …",18,[[],["duration",3]]],[11,"hours","","Makes a new <code>Duration</code> with given number of hours. …",18,[[],["duration",3]]],[11,"minutes","","Makes a new <code>Duration</code> with given number of minutes. …",18,[[],["duration",3]]],[11,"seconds","","Makes a new <code>Duration</code> with given number of seconds. Panics …",18,[[],["duration",3]]],[11,"milliseconds","","Makes a new <code>Duration</code> with given number of milliseconds.",18,[[],["duration",3]]],[11,"microseconds","","Makes a new <code>Duration</code> with given number of microseconds.",18,[[],["duration",3]]],[11,"nanoseconds","","Makes a new <code>Duration</code> with given number of nanoseconds.",18,[[],["duration",3]]],[11,"span","","Runs a closure, returning the duration of time it took to …",18,[[],["duration",3]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",18,[[]]],[11,"num_days","","Returns the total number of whole days in the duration.",18,[[]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",18,[[]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",18,[[]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",18,[[]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the …",18,[[]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the …",18,[[],["option",4]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the …",18,[[],["option",4]]],[11,"checked_add","","Add two durations, returning <code>None</code> if overflow occurred.",18,[[["duration",3]],[["duration",3],["option",4]]]],[11,"checked_sub","","Subtract two durations, returning <code>None</code> if overflow …",18,[[["duration",3]],[["duration",3],["option",4]]]],[11,"min_value","","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.",18,[[],["duration",3]]],[11,"max_value","","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.",18,[[],["duration",3]]],[11,"zero","","A duration where the stored seconds and nanoseconds are …",18,[[],["duration",3]]],[11,"is_zero","","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.",18,[[]]],[11,"from_std","","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>",18,[[["duration",3]],[["outofrangeerror",3],["result",4],["duration",3]]]],[11,"to_std","","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>",18,[[],[["result",4],["duration",3],["outofrangeerror",3]]]],[11,"east","chrono::offset","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …",19,[[],["fixedoffset",3]]],[11,"east_opt","","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …",19,[[],[["option",4],["fixedoffset",3]]]],[11,"west","","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …",19,[[],["fixedoffset",3]]],[11,"west_opt","","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …",19,[[],[["option",4],["fixedoffset",3]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC …",19,[[]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the …",19,[[]]],[11,"today","","Returns a <code>Date</code> which corresponds to the current date.",20,[[],[["local",3],["date",3]]]],[11,"now","","Returns a <code>DateTime</code> which corresponds to the current date.",20,[[],[["datetime",3],["local",3]]]],[11,"today","","Returns a <code>Date</code> which corresponds to the current date.",21,[[],[["date",3],["utc",3]]]],[11,"now","","Returns a <code>DateTime</code> which corresponds to the current date.",21,[[],[["datetime",3],["utc",3]]]],[11,"from_ymd","chrono::naive","Makes a new <code>NaiveDate</code> from the calendar date (year, month …",22,[[],["naivedate",3]]],[11,"from_ymd_opt","","Makes a new <code>NaiveDate</code> from the calendar date (year, month …",22,[[],[["option",4],["naivedate",3]]]],[11,"from_yo","","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …",22,[[],["naivedate",3]]],[11,"from_yo_opt","","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …",22,[[],[["option",4],["naivedate",3]]]],[11,"from_isoywd","","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …",22,[[["weekday",4]],["naivedate",3]]],[11,"from_isoywd_opt","","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …",22,[[["weekday",4]],[["option",4],["naivedate",3]]]],[11,"from_num_days_from_ce","","Makes a new <code>NaiveDate</code> from a day\'s number in the …",22,[[],["naivedate",3]]],[11,"from_num_days_from_ce_opt","","Makes a new <code>NaiveDate</code> from a day\'s number in the …",22,[[],[["option",4],["naivedate",3]]]],[11,"from_weekday_of_month","","Makes a new <code>NaiveDate</code> by counting the number of …",22,[[["weekday",4]],["naivedate",3]]],[11,"from_weekday_of_month_opt","","Makes a new <code>NaiveDate</code> by counting the number of …",22,[[["weekday",4]],[["option",4],["naivedate",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",22,[[],[["parseresult",6],["naivedate",3]]]],[11,"and_time","","Makes a new <code>NaiveDateTime</code> from the current date and given …",22,[[["naivetime",3]],["naivedatetime",3]]],[11,"and_hms","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],["naivedatetime",3]]],[11,"and_hms_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_milli","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],["naivedatetime",3]]],[11,"and_hms_milli_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_micro","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],["naivedatetime",3]]],[11,"and_hms_micro_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_nano","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],["naivedatetime",3]]],[11,"and_hms_nano_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",22,[[],[["option",4],["naivedatetime",3]]]],[11,"succ","","Makes a new <code>NaiveDate</code> for the next calendar date.",22,[[],["naivedate",3]]],[11,"succ_opt","","Makes a new <code>NaiveDate</code> for the next calendar date.",22,[[],[["option",4],["naivedate",3]]]],[11,"pred","","Makes a new <code>NaiveDate</code> for the previous calendar date.",22,[[],["naivedate",3]]],[11,"pred_opt","","Makes a new <code>NaiveDate</code> for the previous calendar date.",22,[[],[["option",4],["naivedate",3]]]],[11,"checked_add_signed","","Adds the <code>days</code> part of given <code>Duration</code> to the current date.",22,[[["oldduration",3]],[["option",4],["naivedate",3]]]],[11,"checked_sub_signed","","Subtracts the <code>days</code> part of given <code>Duration</code> from the …",22,[[["oldduration",3]],[["option",4],["naivedate",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveDate</code> from the current date. …",22,[[["naivedate",3]],["oldduration",3]]],[11,"format_with_items","","Formats the date with the specified formatting items. …",22,[[],["delayedformat",3]]],[11,"format","","Formats the date with the specified format string. See …",22,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"iter_days","","Returns an iterator that steps by days until the last …",22,[[],["naivedatedaysiterator",3]]],[11,"iter_weeks","","Returns an iterator that steps by weeks until the last …",22,[[],["naivedateweeksiterator",3]]],[11,"new","","Makes a new <code>NaiveDateTime</code> from date and time components. …",23,[[["naivedate",3],["naivetime",3]],["naivedatetime",3]]],[11,"from_timestamp","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …",23,[[],["naivedatetime",3]]],[11,"from_timestamp_opt","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …",23,[[],[["option",4],["naivedatetime",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",23,[[],[["parseresult",6],["naivedatetime",3]]]],[11,"date","","Retrieves a date component.",23,[[],["naivedate",3]]],[11,"time","","Retrieves a time component.",23,[[],["naivetime",3]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight …",23,[[]]],[11,"timestamp_millis","","Returns the number of non-leap <em>milliseconds</em> since …",23,[[]]],[11,"timestamp_nanos","","Returns the number of non-leap <em>nanoseconds</em> since midnight …",23,[[]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole …",23,[[]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole …",23,[[]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole …",23,[[]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date and time.",23,[[["oldduration",3]],[["option",4],["naivedatetime",3]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date and time.",23,[[["oldduration",3]],[["option",4],["naivedatetime",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveDateTime</code> from the current date and …",23,[[["naivedatetime",3]],["oldduration",3]]],[11,"format_with_items","","Formats the combined date and time with the specified …",23,[[],["delayedformat",3]]],[11,"format","","Formats the combined date and time with the specified …",23,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"year","","Returns the year number for this ISO week.",24,[[]]],[11,"week","","Returns the ISO week number starting from 1.",24,[[]]],[11,"week0","","Returns the ISO week number starting from 0.",24,[[]]],[11,"from_hms","","Makes a new <code>NaiveTime</code> from hour, minute and second.",25,[[],["naivetime",3]]],[11,"from_hms_opt","","Makes a new <code>NaiveTime</code> from hour, minute and second.",25,[[],[["option",4],["naivetime",3]]]],[11,"from_hms_milli","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],["naivetime",3]]],[11,"from_hms_milli_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],[["option",4],["naivetime",3]]]],[11,"from_hms_micro","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],["naivetime",3]]],[11,"from_hms_micro_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],[["option",4],["naivetime",3]]]],[11,"from_hms_nano","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],["naivetime",3]]],[11,"from_hms_nano_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",25,[[],[["option",4],["naivetime",3]]]],[11,"from_num_seconds_from_midnight","","Makes a new <code>NaiveTime</code> from the number of seconds since …",25,[[],["naivetime",3]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new <code>NaiveTime</code> from the number of seconds since …",25,[[],[["option",4],["naivetime",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",25,[[],[["parseresult",6],["naivetime",3]]]],[11,"overflowing_add_signed","","Adds given <code>Duration</code> to the current time, and also returns …",25,[[["oldduration",3]]]],[11,"overflowing_sub_signed","","Subtracts given <code>Duration</code> from the current time, and also …",25,[[["oldduration",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveTime</code> from the current time. …",25,[[["naivetime",3]],["oldduration",3]]],[11,"format_with_items","","Formats the time with the specified formatting items. …",25,[[],["delayedformat",3]]],[11,"format","","Formats the time with the specified format string. See …",25,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"from_utc","chrono","Makes a new <code>Date</code> with given <em>UTC</em> date and offset. The …",26,[[["naivedate",3]],["date",3]]],[11,"and_time","","Makes a new <code>DateTime</code> from the current date and given …",26,[[["naivetime",3]],[["datetime",3],["option",4]]]],[11,"and_hms","","Makes a new <code>DateTime</code> from the current date, hour, minute …",26,[[],["datetime",3]]],[11,"and_hms_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute …",26,[[],[["datetime",3],["option",4]]]],[11,"and_hms_milli","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],["datetime",3]]],[11,"and_hms_milli_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],[["datetime",3],["option",4]]]],[11,"and_hms_micro","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],["datetime",3]]],[11,"and_hms_micro_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],[["datetime",3],["option",4]]]],[11,"and_hms_nano","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],["datetime",3]]],[11,"and_hms_nano_opt","","Makes a new <code>DateTime</code> from the current date, hour, minute, …",26,[[],[["datetime",3],["option",4]]]],[11,"succ","","Makes a new <code>Date</code> for the next date.",26,[[],["date",3]]],[11,"succ_opt","","Makes a new <code>Date</code> for the next date.",26,[[],[["date",3],["option",4]]]],[11,"pred","","Makes a new <code>Date</code> for the prior date.",26,[[],["date",3]]],[11,"pred_opt","","Makes a new <code>Date</code> for the prior date.",26,[[],[["date",3],["option",4]]]],[11,"offset","","Retrieves an associated offset from UTC.",26,[[]]],[11,"timezone","","Retrieves an associated time zone.",26,[[]]],[11,"with_timezone","","Changes the associated time zone. This does not change …",26,[[],[["timezone",8],["date",3]]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date.",26,[[["oldduration",3]],[["date",3],["option",4]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date.",26,[[["oldduration",3]],[["date",3],["option",4]]]],[11,"signed_duration_since","","Subtracts another <code>Date</code> from the current date. Returns a …",26,[[["timezone",8],["date",3]],["oldduration",3]]],[11,"naive_utc","","Returns a view to the naive UTC date.",26,[[],["naivedate",3]]],[11,"naive_local","","Returns a view to the naive local date.",26,[[],["naivedate",3]]],[11,"format_with_items","","Formats the date with the specified formatting items.",26,[[],["delayedformat",3]]],[11,"format","","Formats the date with the specified format string. See …",26,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"from_utc","","Makes a new <code>DateTime</code> with given <em>UTC</em> datetime and offset. …",27,[[["naivedatetime",3]],["datetime",3]]],[11,"date","","Retrieves a date component.",27,[[],["date",3]]],[11,"time","","Retrieves a time component. Unlike <code>date</code>, this is not …",27,[[],["naivetime",3]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, …",27,[[]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January …",27,[[]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January …",27,[[]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second …",27,[[]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second …",27,[[]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second …",27,[[]]],[11,"offset","","Retrieves an associated offset from UTC.",27,[[]]],[11,"timezone","","Retrieves an associated time zone.",27,[[]]],[11,"with_timezone","","Changes the associated time zone. This does not change …",27,[[],[["datetime",3],["timezone",8]]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date and time.",27,[[["oldduration",3]],[["datetime",3],["option",4]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date and time.",27,[[["oldduration",3]],[["datetime",3],["option",4]]]],[11,"signed_duration_since","","Subtracts another <code>DateTime</code> from the current date and time.…",27,[[["datetime",3],["timezone",8]],["oldduration",3]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",27,[[],["naivedatetime",3]]],[11,"naive_local","","Returns a view to the naive local datetime.",27,[[],["naivedatetime",3]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as …",27,[[],[["parseresult",6],["datetime",3]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such …",27,[[],[["parseresult",6],["datetime",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",27,[[],[["parseresult",6],["datetime",3]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as …",27,[[],["string",3]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string …",27,[[],["string",3]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with …",27,[[["secondsformat",4]],["string",3]]],[11,"format_with_items","","Formats the combined date and time with the specified …",27,[[],["delayedformat",3]]],[11,"format","","Formats the combined date and time with the specified …",27,[[],[["strftimeitems",3],["delayedformat",3]]]],[11,"new","chrono::format","Returns the initial value of parsed parts.",4,[[],["parsed",3]]],[11,"set_year","","Tries to set the <code>year</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_year_div_100","","Tries to set the <code>year_div_100</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_year_mod_100","","Tries to set the <code>year_mod_100</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_isoyear","","Tries to set the <code>isoyear</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_isoyear_div_100","","Tries to set the <code>isoyear_div_100</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_isoyear_mod_100","","Tries to set the <code>isoyear_mod_100</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_month","","Tries to set the <code>month</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_week_from_sun","","Tries to set the <code>week_from_sun</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_week_from_mon","","Tries to set the <code>week_from_mon</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_isoweek","","Tries to set the <code>isoweek</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_weekday","","Tries to set the <code>weekday</code> field from given value.",4,[[["weekday",4]],["parseresult",6]]],[11,"set_ordinal","","Tries to set the <code>ordinal</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_day","","Tries to set the <code>day</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_ampm","","Tries to set the <code>hour_div_12</code> field from given value. (…",4,[[],["parseresult",6]]],[11,"set_hour12","","Tries to set the <code>hour_mod_12</code> field from given hour number …",4,[[],["parseresult",6]]],[11,"set_hour","","Tries to set both <code>hour_div_12</code> and <code>hour_mod_12</code> fields from …",4,[[],["parseresult",6]]],[11,"set_minute","","Tries to set the <code>minute</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_second","","Tries to set the <code>second</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_nanosecond","","Tries to set the <code>nanosecond</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_timestamp","","Tries to set the <code>timestamp</code> field from given value.",4,[[],["parseresult",6]]],[11,"set_offset","","Tries to set the <code>offset</code> field from given value.",4,[[],["parseresult",6]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",4,[[],[["parseresult",6],["naivedate",3]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",4,[[],[["parseresult",6],["naivetime",3]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, …",4,[[],[["parseresult",6],["naivedatetime",3]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given …",4,[[],[["fixedoffset",3],["parseresult",6]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of …",4,[[],[["parseresult",6],["datetime",3]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of …",4,[[],[["datetime",3],["parseresult",6]]]]],"p":[[4,"LocalResult"],[8,"Offset"],[8,"TimeZone"],[3,"StrftimeItems"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"DelayedFormat"],[4,"SecondsFormat"],[8,"DurationRound"],[4,"RoundingError"],[8,"SubsecRound"],[4,"Weekday"],[4,"Month"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"],[3,"FixedOffset"],[3,"Local"],[3,"Utc"],[3,"NaiveDate"],[3,"NaiveDateTime"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"Date"],[3,"DateTime"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"ParseWeekdayError"],[3,"ParseMonthError"]]},\
"clap":{"doc":"<code>clap</code> is a simple-to-use, efficient, and full-featured …","i":[[3,"App","clap","Used to create a representation of a command line program …",null,null],[4,"AppSettings","","Application level settings, which affect how <code>App</code> operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should <em>not</em> …",0,null],[13,"AllArgsOverrideSelf","","Essentially sets [<code>Arg::overrides_with(\\\"itself\\\")</code>] for all …",0,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument <em>…",0,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is …",0,null],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where …",0,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which …",0,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid argument negates subcommands…",0,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and …",0,null],[13,"ColoredHelp","","Uses colorized help messages.",0,null],[13,"ColorAuto","","Enables colored output only when the output is going to a …",0,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the …",0,null],[13,"ColorNever","","Disables colored output no matter if the output is going …",0,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into …",0,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when <code>--</code> or …",0,null],[13,"DisableHelpFlags","","Disables <code>-h</code> and <code>--help</code> <code>App</code> without affecting any of the …",0,null],[13,"DisableHelpSubcommand","","Disables the <code>help</code> subcommand",0,null],[13,"DisableVersion","","Disables <code>-V</code> and <code>--version</code> <code>App</code> without affecting any of …",0,null],[13,"DeriveDisplayOrder","","Displays the arguments and <code>SubCommand</code>s in the help …",0,null],[13,"GlobalVersion","","Specifies to use the version of the current command for …",0,null],[13,"Hidden","","Specifies that this <code>SubCommand</code> should be hidden from help …",0,null],[13,"HidePossibleValuesInHelp","","Tells <code>clap</code> <em>not</em> to print possible values when displaying …",0,null],[13,"InferSubcommands","","Tries to match unknown args to partial <code>subcommands</code> or …",0,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first …",0,null],[13,"NextLineHelp","","Places the help string for all arguments on the line …",0,null],[13,"PropagateGlobalValuesDown","","<strong>DEPRECATED</strong>: This setting is no longer required in order …",0,null],[13,"SubcommandsNegateReqs","","Allows <code>SubCommand</code>s to override all requirements of the …",0,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before …",0,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be …",0,null],[13,"SubcommandRequired","","Allows specifying that if no <code>SubCommand</code> is present at …",0,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a …",0,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more …",0,null],[13,"VersionlessSubcommands","","Disables <code>-V</code> and <code>--version</code> for all <code>SubCommand</code>s (Defaults …",0,null],[13,"WaitOnError","","Will display a message \\\"Press [ENTER]/[RETURN] to …",0,null],[3,"Arg","","The abstract representation of a command line argument. …",null,null],[3,"ArgGroup","","<code>ArgGroup</code>s are a family of related arguments and way for …",null,null],[3,"ArgMatches","","Used to get information about the arguments that were …",null,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, …",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as …",1,null],[13,"EmptyValues","","The argument allows empty values such as <code>--option \\\"\\\"</code>",1,null],[13,"Global","","The argument should be propagated down through all child …",1,null],[13,"Hidden","","The argument should <strong>not</strong> be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as <code>--option <value></code>",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped …",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple …",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a \'-\'",1,null],[13,"RequireEquals","","Require options use <code>--option=val</code> syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument …",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[13,"CaseInsensitive","","Makes <code>Arg::possible_values</code> case insensitive",1,null],[13,"HideEnvValues","","Hides ENV values in the help message",1,null],[13,"HiddenShortHelp","","The argument should <strong>not</strong> be shown in short help text",1,null],[13,"HiddenLongHelp","","The argument should <strong>not</strong> be shown in long help text",1,null],[3,"OsValues","","An iterator for getting multiple values out of an …",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an …",null,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again …",2,null],[13,"Fish","","Generates a .fish completion file for the Friendly …",2,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",2,null],[13,"PowerShell","","Generates a completion file for PowerShell",2,null],[13,"Elvish","","Generates a completion file for Elvish",2,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formatted error message",3,null],[12,"kind","","The type of error",3,null],[12,"info","","Any additional information passed along, such as the …",3,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an <code>Arg</code> has a set of possible values, and the …",4,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or …",4,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [<code>SubCommand</code>]…",4,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized <code>SubCommand</code> …",4,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an …",4,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument …",4,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument …",4,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an …",4,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of …",4,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict …",4,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more …",4,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by …",4,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or <code>SubCommand</code> is required, …",4,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an …",4,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid …",4,null],[13,"HelpDisplayed","","Not a true \\\"error\\\" as it means <code>--help</code> or similar was used.…",4,null],[13,"VersionDisplayed","","Not a true \\\"error\\\" as it means <code>--version</code> or similar was …",4,null],[13,"ArgumentNotFound","","Occurs when using the [<code>value_t!</code>] and [<code>values_t!</code>] macros …",4,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to …",4,null],[13,"Format","","Represents a Format error (which is a part of <code>Display</code>). …",4,null],[6,"Result","","Short hand for <code>Result</code> type",null,null],[14,"value_t","","Convenience macro getting a typed value <code>T</code> where <code>T</code> …",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value <code>T</code> where <code>T</code> …",null,null],[14,"values_t","","Convenience macro getting a typed value <code>Vec<T></code> where <code>T</code> …",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value <code>Vec<T></code> where <code>T</code> …",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed …",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with …",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at …",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your …",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml …",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at …",null,null],[14,"app_from_crate","","Allows you to build the <code>App</code> instance from your Cargo.toml …",null,null],[14,"clap_app","","Build <code>App</code>, <code>Arg</code>s, <code>SubCommand</code>s and <code>Group</code>s with Usage-string …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",6,[[["arg",3]]]],[11,"from","","",10,[[["arggroup",3]]]],[11,"from","","",3,[[["error",3]]]],[11,"from","","",3,[[["error",3]]]],[11,"next_back","","",8,[[],["option",4]]],[11,"next_back","","",9,[[],[["osstr",3],["option",4]]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",9,[[],[["osstr",3],["option",4]]]],[11,"size_hint","","",9,[[]]],[11,"clone","","",0,[[],["appsettings",4]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[],["arg",3]]],[11,"clone","","",7,[[],["argmatches",3]]],[11,"clone","","",8,[[],["values",3]]],[11,"clone","","",9,[[],["osvalues",3]]],[11,"clone","","",10,[[]]],[11,"clone","","",1,[[],["argsettings",4]]],[11,"clone","","",11,[[],["subcommand",3]]],[11,"clone","","",2,[[],["shell",4]]],[11,"clone","","",4,[[],["errorkind",4]]],[11,"default","","",6,[[],["arg",3]]],[11,"default","","",7,[[]]],[11,"default","","",8,[[]]],[11,"default","","",9,[[]]],[11,"default","","",10,[[],["arggroup",3]]],[11,"eq","","",0,[[["appsettings",4]]]],[11,"eq","","",6,[[["arg",3]]]],[11,"eq","","",1,[[["argsettings",4]]]],[11,"eq","","",4,[[["errorkind",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"from_str","","",0,[[],["result",4]]],[11,"from_str","","",1,[[],["result",4]]],[11,"from_str","","",2,[[],["result",4]]],[11,"description","","",3,[[]]],[11,"new","","Creates a new instance of an application requiring a …",5,[[["into",8],["string",3]]]],[11,"get_name","","Get the name of the app",5,[[]]],[11,"get_bin_name","","Get the name of the binary",5,[[],["option",4]]],[11,"with_defaults","","Creates a new instance of an application requiring a …",5,[[["into",8],["string",3]]]],[11,"author","","Sets a string of author(s) that will be displayed to the …",5,[[["into",8]]]],[11,"bin_name","","Overrides the system-determined binary name. This should …",5,[[["into",8],["string",3]]]],[11,"about","","Sets a string describing what the program does. This will …",5,[[["into",8]]]],[11,"long_about","","Sets a string describing what the program does. This will …",5,[[["into",8]]]],[11,"name","","Sets the program\'s name. This will be displayed when …",5,[[["into",8],["string",3]]]],[11,"after_help","","Adds additional help information to be displayed in …",5,[[["into",8]]]],[11,"before_help","","Adds additional help information to be displayed in …",5,[[["into",8]]]],[11,"version","","Sets a string of the version number to be displayed when …",5,[[["into",8]]]],[11,"long_version","","Sets a string of the version number to be displayed when …",5,[[["into",8]]]],[11,"usage","","Sets a custom usage string to override the auto-generated …",5,[[["into",8]]]],[11,"help","","Sets a custom help message and overrides the …",5,[[["into",8]]]],[11,"help_short","","Sets the <code>short</code> for the auto-generated <code>help</code> argument.",5,[[["asref",8]]]],[11,"version_short","","Sets the <code>short</code> for the auto-generated <code>version</code> argument.",5,[[["asref",8]]]],[11,"help_message","","Sets the help text for the auto-generated <code>help</code> argument.",5,[[["into",8]]]],[11,"version_message","","Sets the help text for the auto-generated <code>version</code> …",5,[[["into",8]]]],[11,"template","","Sets the help template to be used, overriding the default …",5,[[["into",8]]]],[11,"setting","","Enables a single command, or <code>SubCommand</code>, level settings.",5,[[["appsettings",4]]]],[11,"settings","","Enables multiple command, or <code>SubCommand</code>, level settings",5,[[]]],[11,"global_setting","","Enables a single setting that is propagated down through …",5,[[["appsettings",4]]]],[11,"global_settings","","Enables multiple settings which are propagated <em>down</em> …",5,[[]]],[11,"unset_setting","","Disables a single command, or <code>SubCommand</code>, level setting.",5,[[["appsettings",4]]]],[11,"unset_settings","","Disables multiple command, or <code>SubCommand</code>, level settings.",5,[[]]],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. …",5,[[]]],[11,"max_term_width","","Sets the max terminal width at which to wrap help …",5,[[]]],[11,"arg","","Adds an argument to the list of valid possibilities.",5,[[["into",8],["arg",3]]]],[11,"args","","Adds multiple arguments to the list of valid possibilities",5,[[]]],[11,"arg_from_usage","","A convenience method for adding a single argument from a …",5,[[]]],[11,"args_from_usage","","Adds multiple arguments at once from a usage string, one …",5,[[]]],[11,"alias","","Allows adding a <code>SubCommand</code> alias, which function as …",5,[[["into",8]]]],[11,"aliases","","Allows adding <code>SubCommand</code> aliases, which function as …",5,[[]]],[11,"visible_alias","","Allows adding a <code>SubCommand</code> alias that functions exactly …",5,[[["into",8]]]],[11,"visible_aliases","","Allows adding multiple <code>SubCommand</code> aliases that functions …",5,[[]]],[11,"group","","Adds an <code>ArgGroup</code> to the application. <code>ArgGroup</code>s are a …",5,[[["arggroup",3]]]],[11,"groups","","Adds multiple <code>ArgGroup</code>s to the <code>App</code> at once.",5,[[]]],[11,"subcommand","","Adds a <code>SubCommand</code> to the list of valid possibilities. …",5,[[["app",3]]]],[11,"subcommands","","Adds multiple subcommands to the list of valid …",5,[[]]],[11,"display_order","","Allows custom ordering of <code>SubCommand</code>s within the help …",5,[[]]],[11,"print_help","","Prints the full help message to <code>io::stdout()</code> using a …",5,[[],["clapresult",6]]],[11,"print_long_help","","Prints the full help message to <code>io::stdout()</code> using a …",5,[[],["clapresult",6]]],[11,"write_help","","Writes the full help message to the user to a <code>io::Write</code> …",5,[[],["clapresult",6]]],[11,"write_long_help","","Writes the full help message to the user to a <code>io::Write</code> …",5,[[],["clapresult",6]]],[11,"write_version","","Writes the version message to the user to a <code>io::Write</code> …",5,[[],["clapresult",6]]],[11,"write_long_version","","Writes the version message to the user to a <code>io::Write</code> …",5,[[],["clapresult",6]]],[11,"gen_completions","","Generate a completions file for a specified shell at …",5,[[["into",8],["into",8],["shell",4],["osstring",3],["string",3]]]],[11,"gen_completions_to","","Generate a completions file for a specified shell at …",5,[[["into",8],["shell",4],["string",3]]]],[11,"get_matches","","Starts the parsing process, upon a failed parse an error …",5,[[],["argmatches",3]]],[11,"get_matches_safe","","Starts the parsing process. This method will return a …",5,[[],[["argmatches",3],["clapresult",6]]]],[11,"get_matches_from","","Starts the parsing process. Like <code>App::get_matches</code> this …",5,[[],["argmatches",3]]],[11,"get_matches_from_safe","","Starts the parsing process. A combination of …",5,[[],[["argmatches",3],["clapresult",6]]]],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the <code>App</code> …",5,[[],[["argmatches",3],["clapresult",6]]]],[11,"with_name","","Creates a new instance of <code>Arg</code> using a unique string name. …",6,[[]]],[11,"from_usage","","Creates a new instance of <code>Arg</code> from a usage string. Allows …",6,[[]]],[11,"short","","Sets the short version of the argument without the …",6,[[["asref",8]]]],[11,"long","","Sets the long version of the argument without the …",6,[[]]],[11,"alias","","Allows adding a <code>Arg</code> alias, which function as \\\"hidden\\\" …",6,[[["into",8]]]],[11,"aliases","","Allows adding <code>Arg</code> aliases, which function as \\\"hidden\\\" …",6,[[]]],[11,"visible_alias","","Allows adding a <code>Arg</code> alias that functions exactly like …",6,[[["into",8]]]],[11,"visible_aliases","","Allows adding multiple <code>Arg</code> aliases that functions exactly …",6,[[]]],[11,"help","","Sets the short help text of the argument that will be …",6,[[]]],[11,"long_help","","Sets the long help text of the argument that will be …",6,[[]]],[11,"last","","Specifies that this arg is the last, or final, positional …",6,[[]]],[11,"required","","Sets whether or not the argument is required by default. …",6,[[]]],[11,"require_equals","","Requires that options use the <code>--option=val</code> syntax (i.e. …",6,[[]]],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (<code>-</code>)",6,[[]]],[11,"required_unless","","Sets an arg that override this arg\'s required setting. …",6,[[]]],[11,"required_unless_all","","Sets args that override this arg\'s required setting. …",6,[[]]],[11,"required_unless_one","","Sets args that override this arg\'s required setting. …",6,[[]]],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this …",6,[[]]],[11,"conflicts_with_all","","The same as <code>Arg::conflicts_with</code> but allows specifying …",6,[[]]],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument …",6,[[]]],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. …",6,[[]]],[11,"requires","","Sets an argument by name that is required when this one …",6,[[]]],[11,"requires_if","","Allows a conditional requirement. The requirement will …",6,[[]]],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement …",6,[[]]],[11,"required_if","","Allows specifying that an argument is required …",6,[[]]],[11,"required_ifs","","Allows specifying that an argument is required based on …",6,[[]]],[11,"requires_all","","Sets multiple arguments by names that are required when …",6,[[]]],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,[[]]],[11,"hide_possible_values","","Specifies if the possible values of an argument should be …",6,[[]]],[11,"hide_default_value","","Specifies if the default value of an argument should be …",6,[[]]],[11,"index","","Specifies the index of a positional argument <strong>starting at</strong> …",6,[[]]],[11,"multiple","","Specifies that the argument may appear more than once. …",6,[[]]],[11,"value_terminator","","Specifies a value that <em>stops</em> parsing multiple values of a …",6,[[]]],[11,"global","","Specifies that an argument can be matched to all child …",6,[[]]],[11,"empty_values","","Allows an argument to accept explicitly empty values. An …",6,[[]]],[11,"hidden","","Hides an argument from help message output.",6,[[]]],[11,"possible_values","","Specifies a list of possible values for this argument. At …",6,[[]]],[11,"possible_value","","Specifies a possible value for this argument, one at a …",6,[[]]],[11,"case_insensitive","","When used with [<code>Arg::possible_values</code>] it allows the …",6,[[]]],[11,"group","","Specifies the name of the <code>ArgGroup</code> the argument belongs …",6,[[]]],[11,"groups","","Specifies the names of multiple <code>ArgGroup</code>\'s the argument …",6,[[]]],[11,"number_of_values","","Specifies how many values are required to satisfy this …",6,[[]]],[11,"validator","","Allows one to perform a custom validation on the argument …",6,[[]]],[11,"validator_os","","Works identically to Validator but is intended to be used …",6,[[]]],[11,"max_values","","Specifies the <em>maximum</em> number of values are for this …",6,[[]]],[11,"min_values","","Specifies the <em>minimum</em> number of values for this argument. …",6,[[]]],[11,"use_delimiter","","Specifies whether or not an argument should allow …",6,[[]]],[11,"require_delimiter","","Specifies that <em>multiple values</em> may only be set using the …",6,[[]]],[11,"value_delimiter","","Specifies the separator to use when values are clumped …",6,[[]]],[11,"value_names","","Specify multiple names for values of option arguments. …",6,[[]]],[11,"value_name","","Specifies the name for value of option or positional …",6,[[]]],[11,"default_value","","Specifies the value of the argument when <em>not</em> specified at …",6,[[]]],[11,"default_value_os","","Provides a default value in the exact same manner as […",6,[[["osstr",3]]]],[11,"default_value_if","","Specifies the value of the argument if <code>arg</code> has been used …",6,[[["option",4]]]],[11,"default_value_if_os","","Provides a conditional default value in the exact same …",6,[[["option",4],["osstr",3]]]],[11,"default_value_ifs","","Specifies multiple values and conditions in the same …",6,[[]]],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact …",6,[[]]],[11,"env","","Specifies that if the value is not passed in as an …",6,[[]]],[11,"env_os","","Specifies that if the value is not passed in as an …",6,[[["osstr",3]]]],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,[[]]],[11,"next_line_help","","When set to <code>true</code> the help string will be displayed on the …",6,[[]]],[11,"display_order","","Allows custom ordering of args within the help message. …",6,[[]]],[11,"raw","","Indicates that all parameters passed after this should …",6,[[]]],[11,"hidden_short_help","","Hides an argument from short help message output.",6,[[]]],[11,"hidden_long_help","","Hides an argument from long help message output.",6,[[]]],[11,"is_set","","Checks if one of the <code>ArgSettings</code> settings is set for the …",6,[[["argsettings",4]]]],[11,"set","","Sets one of the <code>ArgSettings</code> settings for the argument.",6,[[["argsettings",4]]]],[11,"unset","","Unsets one of the <code>ArgSettings</code> settings for the argument.",6,[[["argsettings",4]]]],[11,"value_of","","Gets the value of a specific option or positional …",7,[[["asref",8]],["option",4]]],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the …",7,[[["asref",8]],[["cow",4],["option",4]]]],[11,"value_of_os","","Gets the OS version of a string value of a specific …",7,[[["asref",8]],[["osstr",3],["option",4]]]],[11,"values_of","","Gets a <code>Values</code> struct which implements <code>Iterator</code> for values …",7,[[["asref",8]],[["values",3],["option",4]]]],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the …",7,[[["asref",8]],[["option",4],["vec",3]]]],[11,"values_of_os","","Gets a [<code>OsValues</code>] struct which is implements [<code>Iterator</code>] …",7,[[["asref",8]],[["option",4],["osvalues",3]]]],[11,"is_present","","Returns <code>true</code> if an argument was present at runtime, …",7,[[["asref",8]]]],[11,"occurrences_of","","Returns the number of times an argument was used at …",7,[[["asref",8]]]],[11,"index_of","","Gets the starting index of the argument in respect to all …",7,[[["asref",8]],["option",4]]],[11,"indices_of","","Gets all indices of the argument in respect to all other …",7,[[["asref",8]],[["option",4],["indices",3]]]],[11,"subcommand_matches","","Because <code>Subcommand</code>s are essentially \\\"sub-<code>App</code>s\\\" they have …",7,[[["asref",8]],[["option",4],["argmatches",3]]]],[11,"subcommand_name","","Because <code>Subcommand</code>s are essentially \\\"sub-<code>App</code>s\\\" they have …",7,[[],["option",4]]],[11,"subcommand","","This brings together <code>ArgMatches::subcommand_matches</code> and …",7,[[]]],[11,"usage","","Returns a string slice of the usage statement for the <code>App</code> …",7,[[]]],[11,"with_name","","Creates a new instance of <code>ArgGroup</code> using a unique string …",10,[[]]],[11,"arg","","Adds an argument to this group by name",10,[[]]],[11,"args","","Adds multiple arguments to this group by name",10,[[]]],[11,"multiple","","Allows more than one of the \'Arg\'s in this group to be …",10,[[]]],[11,"required","","Sets the group as required or not. A required group will …",10,[[]]],[11,"requires","","Sets the requirement rules of this group. This is not to …",10,[[]]],[11,"requires_all","","Sets the requirement rules of this group. This is not to …",10,[[]]],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka …",10,[[]]],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules …",10,[[]]],[11,"with_name","","Creates a new instance of a subcommand requiring a name. …",11,[[],["app",3]]],[11,"variants","","A list of possible variants in <code>&\'static str</code> form",2,[[]]],[11,"use_stderr","","Should the message be written to <code>stdout</code> or not",3,[[]]],[11,"exit","","Prints the error to <code>stderr</code> and exits with a status of <code>1</code>",3,[[]]],[11,"with_description","","Create an error with a custom description.",3,[[["errorkind",4]]]]],"p":[[4,"AppSettings"],[4,"ArgSettings"],[4,"Shell"],[3,"Error"],[4,"ErrorKind"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"ArgGroup"],[3,"SubCommand"]]},\
"combine":{"doc":"This crate contains parser combinators, roughly based on …","i":[[0,"easy","combine","Stream wrapper which provides an informative and easy to …",null,null],[4,"Info","combine::easy","Enum holding error information. Variants are defined for …",null,null],[13,"Token","","",0,null],[13,"Range","","",0,null],[13,"Owned","","",0,null],[13,"Borrowed","","",0,null],[4,"Error","","Enum used to store information about an error that has …",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered …",1,null],[13,"Expected","","Error indicating that the parser expected something else",1,null],[13,"Message","","Generic message",1,null],[13,"Other","","Variant for containing other types of errors",1,null],[6,"ParseError","","Convenience alias over <code>Errors</code> for <code>StreamOnce</code> types which …",null,null],[3,"Errors","","Struct which hold information about an error that …",null,null],[12,"position","","The position where the error occurred",2,null],[12,"errors","","A vector containing specific information on what errors …",2,null],[3,"Stream","","",null,null],[12,"0","","",3,null],[0,"error","combine","Error types and traits which define what kind of errors …",null,null],[4,"Info","combine::error","",null,null],[13,"Token","","",4,null],[13,"Range","","",4,null],[13,"Borrowed","","",4,null],[4,"Consumed","","Enum used to indicate if a parser consumed any items of …",null,null],[13,"Consumed","","Constructor indicating that the parser has consumed …",5,null],[13,"Empty","","Constructor indicating that the parser did not consume …",5,null],[11,"is_empty","","Returns true if <code>self</code> is empty.",5,[[]]],[11,"into_inner","","Extracts the contained value.",5,[[]]],[11,"into_consumed","","Converts <code>self</code> into the <code>Consumed</code> state.",5,[[],["consumed",4]]],[11,"into_empty","","Converts <code>self</code> into the <code>Empty</code> state.",5,[[],["consumed",4]]],[11,"map","","Maps over the contained value without changing the …",5,[[],["consumed",4]]],[11,"merge","","",5,[[["consumed",4]],["consumed",4]]],[11,"combine","","Combines the <code>Consumed</code> flags from <code>self</code> and the result of <code>f</code>.",5,[[],["parseresult2",6]]],[11,"combine_consumed","","",5,[[],["fastresult",4]]],[6,"ParseResult","","A type alias over the specific <code>Result</code> type used by …",null,null],[6,"ParseResult2","","",null,null],[8,"StreamError","","<code>StreamError</code> represents a single error returned from a …",null,null],[10,"unexpected_token","","",6,[[]]],[10,"unexpected_range","","",6,[[]]],[10,"unexpected_message","","",6,[[]]],[11,"unexpected","","",6,[[["info",4]]]],[11,"unexpected_static_message","","",6,[[]]],[10,"expected_token","","",6,[[]]],[10,"expected_range","","",6,[[]]],[10,"expected_message","","",6,[[]]],[11,"expected","","",6,[[["info",4]]]],[11,"expected_static_message","","",6,[[]]],[10,"message_token","","",6,[[]]],[10,"message_range","","",6,[[]]],[10,"message_message","","",6,[[]]],[11,"message_static_message","","",6,[[]]],[11,"message","","",6,[[["info",4]]]],[11,"other","","",6,[[]]],[11,"end_of_input","","",6,[[]]],[10,"into_other","","Converts <code>self</code> into a different <code>StreamError</code> type.",6,[[]]],[8,"ParseError","","Trait which defines a combine parse error.",null,null],[16,"StreamError","","",7,null],[10,"empty","","Constructs an empty error.",7,[[]]],[10,"from_error","","Creates a <code>ParseError</code> from a single <code>Self::StreamError</code>",7,[[]]],[10,"set_position","","Sets the position of this <code>ParseError</code>",7,[[]]],[11,"merge","","Merges two errors. If they exist at the same position the …",7,[[]]],[10,"add","","Adds a <code>StreamError</code> to <code>self</code>.",7,[[]]],[11,"add_expected","","",7,[[["info",4]]]],[11,"add_unexpected","","",7,[[["info",4]]]],[11,"add_message","","",7,[[["info",4]]]],[10,"set_expected","","Sets <code>info</code> as the <em>only</em> <code>Expected</code> error of <code>self</code>",7,[[["tracked",3]]]],[11,"clear_expected","","Removes any expected errors currently in <code>self</code>",7,[[]]],[10,"is_unexpected_end_of_input","","",7,[[]]],[10,"into_other","","Does a best-effort conversion of <code>self</code> into another …",7,[[]]],[4,"UnexpectedParse","","",null,null],[13,"Eoi","","",8,null],[13,"Unexpected","","",8,null],[4,"StringStreamError","","",null,null],[13,"UnexpectedParse","","",9,null],[13,"Eoi","","",9,null],[13,"CharacterBoundary","","",9,null],[3,"Tracked","","Error wrapper which lets parsers track which parser in a …",null,null],[12,"error","","The error returned",10,null],[4,"FastResult","","",null,null],[13,"ConsumedOk","","",11,null],[13,"EmptyOk","","",11,null],[13,"ConsumedErr","","",11,null],[13,"EmptyErr","","",11,null],[11,"is_ok","","",11,[[]]],[11,"as_ref","","",11,[[],["fastresult",4]]],[11,"and_then","","",11,[[]]],[11,"map_err","","",11,[[],["fastresult",4]]],[11,"map","","",11,[[],["fastresult",4]]],[6,"ConsumedResult","","A <code>Result</code> type which has the consumed status flattened …",null,null],[0,"stream","combine","Traits and implementations of arbitrary data streams.",null,null],[0,"buffered","combine::stream","",null,null],[3,"BufferedStream","combine::stream::buffered","<code>Stream</code> which buffers items from an instance of <code>StreamOnce</code> …",null,null],[11,"new","","Constructs a new <code>BufferedStream</code> from a <code>StreamOnce</code> …",12,[[],["bufferedstream",3]]],[0,"easy","combine::stream","Stream wrapper which provides an informative and easy to …",null,null],[4,"Info","combine::stream::easy","Enum holding error information. Variants are defined for …",null,null],[13,"Token","","",0,null],[13,"Range","","",0,null],[13,"Owned","","",0,null],[13,"Borrowed","","",0,null],[11,"map_token","","",0,[[],["info",4]]],[11,"map_range","","",0,[[],["info",4]]],[4,"Error","","Enum used to store information about an error that has …",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered …",1,null],[13,"Expected","","Error indicating that the parser expected something else",1,null],[13,"Message","","Generic message",1,null],[13,"Other","","Variant for containing other types of errors",1,null],[11,"map_token","","",1,[[],["error",4]]],[11,"map_range","","",1,[[],["error",4]]],[11,"end_of_input","","Returns the <code>end_of_input</code> error.",1,[[],["error",4]]],[11,"fmt_errors","","Formats a slice of errors in a human readable way.",1,[[["formatter",3]],["result",6]]],[6,"ParseError","","Convenience alias over <code>Errors</code> for <code>StreamOnce</code> types which …",null,null],[3,"Errors","","Struct which hold information about an error that …",null,null],[12,"position","","The position where the error occurred",2,null],[12,"errors","","A vector containing specific information on what errors …",2,null],[11,"new","","Constructs a new <code>ParseError</code> which occurred at <code>position</code>.",2,[[["error",4]],["errors",3]]],[11,"empty","","Constructs an error with no other information than the …",2,[[],["errors",3]]],[11,"from_errors","","Constructs a <code>ParseError</code> with multiple causes.",2,[[["error",4],["vec",3]],["errors",3]]],[11,"end_of_input","","Constructs an end of input error. Should be returned by …",2,[[],["errors",3]]],[11,"add_error","","Adds an error if <code>error</code> does not exist in this <code>ParseError</code> …",2,[[["error",4]]]],[11,"set_expected","","Removes all <code>Expected</code> errors in <code>self</code> and adds <code>info</code> instead.",2,[[["info",4]]]],[11,"merge","","Merges two <code>ParseError</code>s. If they exist at the same …",2,[[["errors",3]],["errors",3]]],[11,"map_position","","Maps the position to a new value",2,[[],["errors",3]]],[11,"map_token","","Maps all token variants to a new value",2,[[],["errors",3]]],[11,"map_range","","Maps all range variants to a new value.",2,[[],["errors",3]]],[3,"Stream","","",null,null],[12,"0","","",3,null],[0,"state","combine::stream","Stateful stream wrappers.",null,null],[8,"Positioner","combine::stream::state","Trait for tracking the current position of a <code>Stream</code>.",null,null],[16,"Position","","The type which keeps track of the position",13,null],[10,"position","","Returns the current position",13,[[]]],[10,"update","","Updates the position given that <code>item</code> has been taken from …",13,[[]]],[8,"RangePositioner","","Trait for tracking the current position of a <code>RangeStream</code>.",null,null],[10,"update_range","","Updates the position given that <code>range</code> has been taken from …",14,[[]]],[8,"DefaultPositioned","","Defines a default <code>Positioner</code> type for a particular <code>Stream</code> …",null,null],[16,"Positioner","","",15,null],[3,"State","","The <code>State<I></code> struct maintains the current position in the …",null,null],[12,"input","","The input stream used when items are requested",16,null],[12,"positioner","","The positioner used to update the current position",16,null],[11,"with_positioner","","Creates a new <code>State<I, X></code> from an input stream and a …",16,[[],["state",3]]],[11,"new","","Creates a new <code>State<I, X></code> from an input stream and its …",16,[[],["state",3]]],[3,"IndexPositioner","","The <code>IndexPositioner<Item, Range></code> struct maintains the …",null,null],[11,"new","","",17,[[],["indexpositioner",3]]],[11,"new_with_position","","",17,[[],["indexpositioner",3]]],[3,"SourcePosition","","Struct which represents a position in a source file.",null,null],[12,"line","","Current line of the input",18,null],[12,"column","","Current column of the input",18,null],[11,"new","","",18,[[]]],[8,"Positioned","combine::stream","A type which has a position.",null,null],[10,"position","","Returns the current position of the stream.",19,[[]]],[6,"StreamErrorFor","","Convenience alias over the <code>StreamError</code> for the input …",null,null],[8,"StreamOnce","","<code>StreamOnce</code> represents a sequence of items that can be …",null,null],[16,"Item","","The type of items which is yielded from this stream.",20,null],[16,"Range","","The type of a range of items yielded from this stream. …",20,null],[16,"Position","","Type which represents the position in a stream. <code>Ord</code> is …",20,null],[16,"Error","","",20,null],[10,"uncons","","Takes a stream and removes its first item, yielding the …",20,[[],[["result",4],["streamerrorfor",6]]]],[11,"is_partial","","Returns <code>true</code> if this stream only contains partial input.",20,[[]]],[8,"Resetable","","",null,null],[16,"Checkpoint","","",21,null],[10,"checkpoint","","",21,[[]]],[10,"reset","","",21,[[]]],[8,"Stream","","A stream of tokens which can be duplicated",null,null],[5,"uncons","","",null,[[],[["consumedresult",6],["sized",8]]]],[8,"RangeStreamOnce","","A <code>RangeStream</code> is an extension of <code>StreamOnce</code> which allows …",null,null],[10,"uncons_range","","Takes <code>size</code> elements from the stream. Fails if the length …",22,[[],[["result",4],["streamerrorfor",6]]]],[10,"uncons_while","","Takes items from stream, testing each one with <code>predicate</code>. …",22,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons_while1","","Takes items from stream, testing each one with <code>predicate</code> …",22,[[],[["fastresult",4],["streamerrorfor",6]]]],[10,"distance","","Returns the distance between <code>self</code> and <code>end</code>. The returned …",22,[[]]],[8,"RangeStream","","A <code>RangeStream</code> is an extension of <code>Stream</code> which allows for …",null,null],[8,"FullRangeStream","","A <code>RangeStream</code> which is capable of providing it\'s entire …",null,null],[10,"range","","Returns the entire range of <code>self</code>",23,[[]]],[5,"uncons_range","","",null,[[],[["consumedresult",6],["sized",8]]]],[5,"uncons_while","","Removes items from the input while <code>predicate</code> returns <code>true</code>.",null,[[],[["consumedresult",6],["sized",8]]]],[5,"uncons_while1","","Takes items from stream, testing each one with <code>predicate</code> …",null,[[],[["consumedresult",6],["sized",8]]]],[8,"Range","","Trait representing a range of elements.",null,null],[10,"len","","Returns the remaining length of <code>self</code>. The returned length …",24,[[]]],[11,"is_empty","","Returns <code>true</code> if the range does not contain any elements (…",24,[[]]],[3,"PartialStream","","Stream type which indicates that the stream is partial if …",null,null],[12,"0","","",25,null],[3,"SliceStream","","Newtype for constructing a stream from a slice where the …",null,null],[12,"0","","",26,null],[3,"IteratorStream","","Wrapper around iterators which allows them to be treated …",null,null],[11,"new","","Converts an <code>Iterator</code> into a stream.",27,[[],["iteratorstream",3]]],[3,"ReadStream","","",null,null],[11,"new","","Creates a <code>StreamOnce</code> instance from a value implementing …",28,[[],["readstream",3]]],[3,"PointerOffset","","Newtype around a pointer offset into a slice stream (<code>&[T]</code>/…",null,null],[12,"0","","",29,null],[11,"translate_position","","Converts the pointer-based position into an indexed …",29,[[]]],[5,"decode","","Decodes <code>input</code> using <code>parser</code>.",null,[[],["result",4]]],[0,"parser","combine","A collection of both concrete parsers as well as parser …",null,null],[0,"byte","combine::parser","Module containing parsers specialized on byte streams.",null,null],[0,"num","combine::parser::byte","Parsers for decoding numbers in big-endian or …",null,null],[3,"U16","combine::parser::byte::num","",null,null],[5,"u16","","Reads a u16 out of the byte stream with the specified …",null,[[],["u16",3]]],[5,"be_u16","","Reads a u16 out of the byte stream with the specified …",null,[[],[["u16",3],["be",6]]]],[5,"le_u16","","Reads a u16 out of the byte stream with the specified …",null,[[],[["u16",3],["le",6]]]],[3,"U32","","",null,null],[5,"u32","","Reads a u32 out of the byte stream with the specified …",null,[[],["u32",3]]],[5,"be_u32","","Reads a u32 out of the byte stream with the specified …",null,[[],[["u32",3],["be",6]]]],[5,"le_u32","","Reads a u32 out of the byte stream with the specified …",null,[[],[["u32",3],["le",6]]]],[3,"U64","","",null,null],[5,"u64","","Reads a u64 out of the byte stream with the specified …",null,[[],["u64",3]]],[5,"be_u64","","Reads a u64 out of the byte stream with the specified …",null,[[],[["u64",3],["be",6]]]],[5,"le_u64","","Reads a u64 out of the byte stream with the specified …",null,[[],[["u64",3],["le",6]]]],[3,"I16","","",null,null],[5,"i16","","Reads a i16 out of the byte stream with the specified …",null,[[],["i16",3]]],[5,"be_i16","","Reads a i16 out of the byte stream with the specified …",null,[[],[["be",6],["i16",3]]]],[5,"le_i16","","Reads a i16 out of the byte stream with the specified …",null,[[],[["i16",3],["le",6]]]],[3,"I32","","",null,null],[5,"i32","","Reads a i32 out of the byte stream with the specified …",null,[[],["i32",3]]],[5,"be_i32","","Reads a i32 out of the byte stream with the specified …",null,[[],[["i32",3],["be",6]]]],[5,"le_i32","","Reads a i32 out of the byte stream with the specified …",null,[[],[["i32",3],["le",6]]]],[3,"I64","","",null,null],[5,"i64","","Reads a i64 out of the byte stream with the specified …",null,[[],["i64",3]]],[5,"be_i64","","Reads a i64 out of the byte stream with the specified …",null,[[],[["i64",3],["be",6]]]],[5,"le_i64","","Reads a i64 out of the byte stream with the specified …",null,[[],[["i64",3],["le",6]]]],[3,"F32","","",null,null],[5,"f32","","Reads a i32 out of the byte stream with the specified …",null,[[],["f32",3]]],[5,"be_f32","","Reads a i32 out of the byte stream with the specified …",null,[[],[["f32",3],["be",6]]]],[5,"le_f32","","Reads a i32 out of the byte stream with the specified …",null,[[],[["f32",3],["le",6]]]],[3,"F64","","",null,null],[5,"f64","","Reads a i64 out of the byte stream with the specified …",null,[[],["f64",3]]],[5,"be_f64","","Reads a i64 out of the byte stream with the specified …",null,[[],[["f64",3],["be",6]]]],[5,"le_f64","","Reads a i64 out of the byte stream with the specified …",null,[[],[["f64",3],["le",6]]]],[5,"byte","combine::parser::byte","Parses a byte and succeeds if the byte is equal to <code>c</code>.",null,[[],["token",3]]],[3,"Digit","","",null,null],[5,"digit","","Parses a base-10 digit (0–9).",null,[[],["digit",3]]],[3,"Space","","",null,null],[5,"space","","Parses a <code>b\' \'</code>, <code>b\'\\\\t\'</code>, <code>b\'\\\\n\'</code> or <code>\'b\\\\\'r\'</code>.",null,[[],["space",3]]],[3,"Spaces","","",null,null],[5,"spaces","","Skips over <code>space</code> zero or more times",null,[[],["spaces",3]]],[3,"Newline","","",null,null],[5,"newline","","Parses a newline byte (<code>b\'\\\\n\'</code>).",null,[[],["newline",3]]],[3,"CrLf","","",null,null],[5,"crlf","","Parses carriage return and newline (<code>&b\\\"\\\\r\\\\n\\\"</code>), returning …",null,[[],["crlf",3]]],[3,"Tab","","",null,null],[5,"tab","","Parses a tab byte (<code>b\'\\\\t\'</code>).",null,[[],["tab",3]]],[3,"Upper","","",null,null],[5,"upper","","Parses an uppercase ASCII letter (A–Z).",null,[[],["upper",3]]],[3,"Lower","","",null,null],[5,"lower","","Parses an lowercase ASCII letter (a–z).",null,[[],["lower",3]]],[3,"AlphaNum","","",null,null],[5,"alpha_num","","Parses either an ASCII alphabet letter or digit (a–z, …",null,[[],["alphanum",3]]],[3,"Letter","","",null,null],[5,"letter","","Parses an ASCII alphabet letter (a–z, A–Z).",null,[[],["letter",3]]],[3,"OctDigit","","",null,null],[5,"oct_digit","","Parses an octal digit.",null,[[],["octdigit",3]]],[3,"HexDigit","","",null,null],[5,"hex_digit","","Parses an ASCII hexdecimal digit (accepts both uppercase …",null,[[],["hexdigit",3]]],[3,"Bytes","","",null,null],[5,"bytes","","Parses the bytes <code>s</code>.",null,[[],["bytes",3]]],[3,"BytesCmp","","",null,null],[5,"bytes_cmp","","Parses the bytes <code>s</code> using <code>cmp</code> to compare each token.",null,[[],["bytescmp",3]]],[3,"TakeUntilByte","","",null,null],[12,"a","","",30,null],[5,"take_until_byte","","Zero-copy parser which reads a range of 0 or more tokens …",null,[[],["takeuntilbyte",3]]],[3,"TakeUntilByte2","","",null,null],[12,"a","","",31,null],[12,"b","","",31,null],[5,"take_until_byte2","","Zero-copy parser which reads a range of 0 or more tokens …",null,[[],["takeuntilbyte2",3]]],[3,"TakeUntilByte3","","",null,null],[12,"a","","",32,null],[12,"b","","",32,null],[12,"c","","",32,null],[5,"take_until_byte3","","Zero-copy parser which reads a range of 0 or more tokens …",null,[[],["takeuntilbyte3",3]]],[3,"take_until_bytes","","",null,null],[12,"needle","","",33,null],[5,"take_until_bytes","","Zero-copy parser which reads a range of 0 or more tokens …",null,[[],["take_until_bytes",3]]],[0,"char","combine::parser","Module containing parsers specialized on character …",null,null],[5,"char","combine::parser::char","Parses a character and succeeds if the character is equal …",null,[[],["token",3]]],[3,"Digit","","",null,null],[5,"digit","","Parses a base-10 digit.",null,[[],["digit",3]]],[3,"Space","","",null,null],[5,"space","","Parse a single whitespace according to …",null,[[],["space",3]]],[3,"Spaces","","",null,null],[5,"spaces","","Skips over zero or more spaces according to …",null,[[],["spaces",3]]],[3,"Newline","","",null,null],[5,"newline","","Parses a newline character (<code>\'\\\\n\'</code>).",null,[[],["newline",3]]],[3,"CrLf","","",null,null],[5,"crlf","","Parses carriage return and newline (<code>\\\"\\\\r\\\\n\\\"</code>), returning …",null,[[],["crlf",3]]],[3,"Tab","","",null,null],[5,"tab","","Parses a tab character (<code>\'\\\\t\'</code>).",null,[[],["tab",3]]],[3,"Upper","","",null,null],[5,"upper","","Parses an uppercase letter according to …",null,[[],["upper",3]]],[3,"Lower","","",null,null],[5,"lower","","Parses an lowercase letter according to …",null,[[],["lower",3]]],[3,"AlphaNum","","",null,null],[5,"alpha_num","","Parses either an alphabet letter or digit according to …",null,[[],["alphanum",3]]],[3,"Letter","","",null,null],[5,"letter","","Parses an alphabet letter according to …",null,[[],["letter",3]]],[3,"OctDigit","","",null,null],[5,"oct_digit","","Parses an octal digit.",null,[[],["octdigit",3]]],[3,"HexDigit","","",null,null],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase.",null,[[],["hexdigit",3]]],[3,"Str","","",null,null],[5,"string","","Parses the string <code>s</code>.",null,[[],["str",3]]],[3,"StrCmp","","",null,null],[5,"string_cmp","","Parses the string <code>s</code>, using <code>cmp</code> to compare each character.",null,[[],["strcmp",3]]],[0,"choice","combine::parser","Combinators which take one or more parsers and attempts …",null,null],[8,"ChoiceParser","combine::parser::choice","<code>ChoiceParser</code> represents a parser which may parse one of …",null,null],[16,"Input","","",34,null],[16,"Output","","",34,null],[16,"PartialState","","",34,null],[10,"parse_first","","",34,[[],["consumedresult",6]]],[10,"parse_partial","","",34,[[],["consumedresult",6]]],[10,"parse_mode_choice","","",34,[[],["consumedresult",6]]],[10,"add_error_choice","","",34,[[["tracked",3]]]],[3,"Choice","","",null,null],[5,"choice","","Takes a tuple, a slice or an array of parsers and tries …",null,[[],["choice",3]]],[3,"Or","","",null,null],[5,"or","","Equivalent to <code>p1.or(p2)</code>.",null,[[],["or",3]]],[3,"Optional","","",null,null],[5,"optional","","Parses <code>parser</code> and outputs <code>Some(value)</code> if it succeeds, <code>None</code>…",null,[[],["optional",3]]],[0,"combinator","combine::parser","Various combinators which do not fit anywhere else.",null,null],[3,"NotFollowedBy","combine::parser::combinator","",null,null],[5,"not_followed_by","","Succeeds only if <code>parser</code> fails. Never consumes any input.",null,[[],["notfollowedby",3]]],[3,"Try","","",null,null],[5,"try","","<code>try(p)</code> behaves as <code>p</code> except it acts as if the parser …",null,[[],["try",3]]],[5,"attempt","","<code>attempt(p)</code> behaves as <code>p</code> except it acts as if the parser …",null,[[],["try",3]]],[3,"LookAhead","","",null,null],[5,"look_ahead","","<code>look_ahead(p)</code> acts as <code>p</code> but doesn\'t consume input on …",null,[[],["lookahead",3]]],[3,"Map","","",null,null],[5,"map","","Equivalent to <code>p.map(f)</code>.",null,[[],["map",3]]],[3,"FlatMap","","",null,null],[5,"flat_map","","Equivalent to <code>p.flat_map(f)</code>.",null,[[],["flatmap",3]]],[3,"AndThen","","",null,null],[5,"and_then","","Equivalent to <code>p.and_then(f)</code>.",null,[[],["andthen",3]]],[3,"Recognize","","",null,null],[5,"recognize","","Constructs a parser which returns the tokens parsed by …",null,[[],["recognize",3]]],[3,"NoPartial","","",null,null],[5,"no_partial","","",null,[[],["nopartial",3]]],[3,"Ignore","","",null,null],[3,"AnyPartialState","","",null,null],[3,"AnyPartialStateParser","","",null,null],[5,"any_partial_state","","Returns a parser where <code>P::PartialState</code> is boxed. Useful …",null,[[],["anypartialstateparser",3]]],[3,"AnySendPartialState","","",null,null],[3,"AnySendPartialStateParser","","",null,null],[5,"any_send_partial_state","","Returns a parser where <code>P::PartialState</code> is boxed. Useful …",null,[[],["anysendpartialstateparser",3]]],[3,"Lazy","","",null,null],[5,"lazy","","Constructs the parser lazily on each <code>parse_*</code> call. Can be …",null,[[],["lazy",3]]],[3,"Factory","","",null,null],[5,"factory","","Constructs the parser lazily on each <code>parse_*</code> call. This …",null,[[],["factory",3]]],[8,"StrLike","","",null,null],[10,"from_utf8","","",35,[[],["result",4]]],[3,"FromStr","","",null,null],[12,"parser","","",36,null],[5,"from_str","","Takes a parser that outputs a string like value (<code>&str</code>, …",null,[[],["fromstr",3]]],[3,"Opaque","","",null,null],[6,"FnOpaque","","Alias over <code>Opaque</code> where the function can be a plain …",null,null],[5,"opaque","","Creates a parser from a function which takes a function …",null,[[],["opaque",3]]],[0,"error","combine::parser","Parsers which cause errors or modifies the returned error …",null,null],[3,"Unexpected","combine::parser::error","",null,null],[5,"unexpected","","Always fails with <code>message</code> as an unexpected error. Never …",null,[[],["unexpected",3]]],[5,"unexpected_any","","Always fails with <code>message</code> as an unexpected error. Never …",null,[[],["unexpected",3]]],[3,"Message","","",null,null],[5,"message","","Equivalent to <code>p1.message(msg)</code>.",null,[[["info",4]],["message",3]]],[3,"Expected","","",null,null],[5,"expected","","Equivalent to <code>p.expected(info)</code>.",null,[[["info",4]],["expected",3]]],[3,"Silent","","",null,null],[5,"silent","","Equivalent to <code>p.silent()</code>.",null,[[],["silent",3]]],[0,"function","combine::parser","Parsers constructor from regular functions",null,null],[3,"FnParser","combine::parser::function","",null,null],[5,"parser","","Wraps a function, turning it into a parser.",null,[[],["fnparser",3]]],[3,"EnvParser","","",null,null],[5,"env_parser","","Constructs a parser out of an environment and a function …",null,[[],["envparser",3]]],[0,"item","combine::parser","Parsers working with single stream items.",null,null],[5,"item","combine::parser::item","Parses a character and succeeds if the character is equal …",null,[[],["token",3]]],[3,"Any","","",null,null],[5,"any","","Parses any token.",null,[[],["any",3]]],[3,"Satisfy","","",null,null],[5,"satisfy","","Parses a token and succeeds depending on the result of …",null,[[],["satisfy",3]]],[3,"SatisfyMap","","",null,null],[5,"satisfy_map","","Parses a token and passes it to <code>predicate</code>. If <code>predicate</code> …",null,[[],["satisfymap",3]]],[3,"Token","","",null,null],[5,"token","","Parses a character and succeeds if the character is equal …",null,[[],["token",3]]],[3,"Tokens","","",null,null],[5,"tokens","","Parses multiple tokens.",null,[[["info",4]],["tokens",3]]],[3,"Tokens2","","",null,null],[5,"tokens2","","Parses multiple tokens.",null,[[],["tokens2",3]]],[3,"Position","","",null,null],[5,"position","","Parser which just returns the current position in the …",null,[[],["position",3]]],[3,"OneOf","","",null,null],[5,"one_of","","Extract one token and succeeds if it is part of <code>tokens</code>.",null,[[],["oneof",3]]],[3,"NoneOf","","",null,null],[5,"none_of","","Extract one token and succeeds if it is not part of <code>tokens</code>…",null,[[],["noneof",3]]],[3,"Value","","",null,null],[5,"value","","Always returns the value <code>v</code> without consuming any input.",null,[[],["value",3]]],[3,"Eof","","",null,null],[5,"eof","","Succeeds only if the stream is at end of input, fails …",null,[[],["eof",3]]],[0,"range","combine::parser","Module containing zero-copy parsers.",null,null],[3,"Range","combine::parser::range","",null,null],[3,"Recognize","","",null,null],[12,"parser","","",37,null],[5,"recognize","","Zero-copy parser which returns consumed input range.",null,[[],["recognize",3]]],[3,"RecognizeWithValue","","",null,null],[5,"recognize_with_value","","Zero-copy parser which returns a pair: (consumed input …",null,[[],["recognizewithvalue",3]]],[5,"range","","Zero-copy parser which reads a range of length <code>i.len()</code> …",null,[[],["range",3]]],[3,"Take","","",null,null],[5,"take","","Zero-copy parser which reads a range of length <code>n</code>.",null,[[],["take",3]]],[3,"TakeWhile","","",null,null],[5,"take_while","","Zero-copy parser which reads a range of 0 or more tokens …",null,[[],["takewhile",3]]],[3,"TakeWhile1","","",null,null],[5,"take_while1","","Zero-copy parser which reads a range of 1 or more tokens …",null,[[],["takewhile1",3]]],[3,"TakeUntilRange","","",null,null],[5,"take_until_range","","Zero-copy parser which reads a range of 0 or more tokens …",null,[[],["takeuntilrange",3]]],[4,"TakeRange","","",null,null],[13,"Found","","Found the pattern at this offset",38,null],[13,"NotFound","","Did not find the pattern but the parser can skip ahead to …",38,null],[3,"TakeFn","","",null,null],[5,"take_fn","","Searches the entire range using <code>searcher</code> and then …",null,[[],["takefn",3]]],[0,"repeat","combine::parser","Combinators which take one or more parsers and applies …",null,null],[3,"Count","combine::parser::repeat","",null,null],[12,"count","","",39,null],[12,"parser","","",39,null],[5,"count","","Parses <code>parser</code> from zero up to <code>count</code> times.",null,[[],["count",3]]],[3,"SkipCount","","",null,null],[12,"count","","",40,null],[12,"parser","","",40,null],[5,"skip_count","","Parses <code>parser</code> from zero up to <code>count</code> times skipping the …",null,[[],["skipcount",3]]],[3,"CountMinMax","","",null,null],[5,"count_min_max","","Parses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>…",null,[[],["countminmax",3]]],[3,"SkipCountMinMax","","",null,null],[12,"min","","",41,null],[12,"max","","",41,null],[12,"parser","","",41,null],[5,"skip_count_min_max","","Parses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>…",null,[[],["skipcountminmax",3]]],[3,"Iter","","",null,null],[11,"new","","",42,[[]]],[11,"into_result","","Converts the iterator to a <code>ParseResult</code>, returning <code>Ok</code> if …",42,[[],["parseresult",6]]],[3,"Many","","",null,null],[5,"many","","Parses <code>p</code> zero or more times returning a collection with …",null,[[],["many",3]]],[3,"Many1","","",null,null],[5,"many1","","Parses <code>p</code> one or more times returning a collection with …",null,[[],["many1",3]]],[3,"SkipMany","","",null,null],[5,"skip_many","","Parses <code>p</code> zero or more times ignoring the result.",null,[[],["skipmany",3]]],[3,"SkipMany1","","",null,null],[5,"skip_many1","","Parses <code>p</code> one or more times ignoring the result.",null,[[],["skipmany1",3]]],[3,"SepBy","","",null,null],[5,"sep_by","","Parses <code>parser</code> zero or more time separated by <code>separator</code>, …",null,[[],["sepby",3]]],[3,"SepBy1","","",null,null],[5,"sep_by1","","Parses <code>parser</code> one or more time separated by <code>separator</code>, …",null,[[],["sepby1",3]]],[3,"SepEndBy","","",null,null],[5,"sep_end_by","","Parses <code>parser</code> zero or more times separated and ended by …",null,[[],["sependby",3]]],[3,"SepEndBy1","","",null,null],[5,"sep_end_by1","","Parses <code>parser</code> one or more times separated and ended by …",null,[[],["sependby1",3]]],[3,"Chainl1","","",null,null],[5,"chainl1","","Parses <code>p</code> 1 or more times separated by <code>op</code>. The value …",null,[[],["chainl1",3]]],[3,"Chainr1","","",null,null],[5,"chainr1","","Parses <code>p</code> one or more times separated by <code>op</code>. The value …",null,[[],["chainr1",3]]],[3,"TakeUntil","","",null,null],[5,"take_until","","Takes input until <code>end</code> is encountered or <code>end</code> indicates …",null,[[],["takeuntil",3]]],[3,"SkipUntil","","",null,null],[12,"end","","",43,null],[5,"skip_until","","Skips input until <code>end</code> is encountered or <code>end</code> indicates …",null,[[],["skipuntil",3]]],[3,"EscapedState","","",null,null],[3,"Escaped","","",null,null],[5,"escaped","","Parses an escaped string by first applying <code>parser</code> which …",null,[[],["escaped",3]]],[0,"sequence","combine::parser","Combinators which take multiple parsers and applies them …",null,null],[3,"PartialState1","combine::parser::sequence","",null,null],[12,"A","","",44,null],[3,"PartialState2","","",null,null],[12,"A","","",45,null],[12,"B","","",45,null],[3,"PartialState3","","",null,null],[12,"A","","",46,null],[12,"B","","",46,null],[12,"C","","",46,null],[3,"PartialState4","","",null,null],[12,"A","","",47,null],[12,"B","","",47,null],[12,"C","","",47,null],[12,"D","","",47,null],[3,"PartialState5","","",null,null],[12,"A","","",48,null],[12,"B","","",48,null],[12,"C","","",48,null],[12,"D","","",48,null],[12,"E","","",48,null],[3,"PartialState6","","",null,null],[12,"A","","",49,null],[12,"B","","",49,null],[12,"C","","",49,null],[12,"D","","",49,null],[12,"E","","",49,null],[12,"F","","",49,null],[3,"PartialState7","","",null,null],[12,"A","","",50,null],[12,"B","","",50,null],[12,"C","","",50,null],[12,"D","","",50,null],[12,"E","","",50,null],[12,"F","","",50,null],[12,"G","","",50,null],[3,"PartialState8","","",null,null],[12,"A","","",51,null],[12,"B","","",51,null],[12,"C","","",51,null],[12,"D","","",51,null],[12,"E","","",51,null],[12,"F","","",51,null],[12,"G","","",51,null],[12,"H","","",51,null],[3,"PartialState9","","",null,null],[12,"A","","",52,null],[12,"B","","",52,null],[12,"C","","",52,null],[12,"D","","",52,null],[12,"E","","",52,null],[12,"F","","",52,null],[12,"G","","",52,null],[12,"H","","",52,null],[12,"I","","",52,null],[3,"PartialState10","","",null,null],[12,"A","","",53,null],[12,"B","","",53,null],[12,"C","","",53,null],[12,"D","","",53,null],[12,"E","","",53,null],[12,"F","","",53,null],[12,"G","","",53,null],[12,"H","","",53,null],[12,"I","","",53,null],[12,"J","","",53,null],[3,"PartialState11","","",null,null],[12,"A","","",54,null],[12,"B","","",54,null],[12,"C","","",54,null],[12,"D","","",54,null],[12,"E","","",54,null],[12,"F","","",54,null],[12,"G","","",54,null],[12,"H","","",54,null],[12,"I","","",54,null],[12,"J","","",54,null],[12,"K","","",54,null],[3,"PartialState12","","",null,null],[12,"A","","",55,null],[12,"B","","",55,null],[12,"C","","",55,null],[12,"D","","",55,null],[12,"E","","",55,null],[12,"F","","",55,null],[12,"G","","",55,null],[12,"H","","",55,null],[12,"I","","",55,null],[12,"J","","",55,null],[12,"K","","",55,null],[12,"L","","",55,null],[3,"With","","",null,null],[5,"with","","Equivalent to <code>p1.with(p2)</code>.",null,[[],["with",3]]],[3,"Skip","","",null,null],[5,"skip","","",null,[[],["skip",3]]],[3,"Between","","",null,null],[5,"between","","Parses <code>open</code> followed by <code>parser</code> followed by <code>close</code>. Returns …",null,[[],["between",3]]],[3,"Then","","",null,null],[5,"then","","Equivalent to <code>p.then(f)</code>.",null,[[],["then",3]]],[3,"ThenPartial","","",null,null],[5,"then_partial","","Equivalent to <code>p.then_partial(f)</code>.",null,[[],["thenpartial",3]]],[8,"Parser","combine::parser","By implementing the <code>Parser</code> trait a type says that it can …",null,null],[16,"Input","","The type which is taken as input for the parser. The type …",56,null],[16,"Output","","The type which is returned if the parser is successful.",56,null],[16,"PartialState","","Determines the state necessary to resume parsing after …",56,null],[11,"easy_parse","","Entry point of the parser. Takes some input and tries to …",56,[[],[["result",4],["parseerror",6]]]],[11,"parse","","Entry point of the parser. Takes some input and tries to …",56,[[],["result",4]]],[11,"parse_with_state","","Entry point of the parser when using partial parsing. …",56,[[],["result",4]]],[11,"parse_stream","","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …",56,[[],["parseresult",6]]],[11,"parse_stream_consumed","","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …",56,[[],["consumedresult",6]]],[11,"parse_stream_consumed_partial","","",56,[[],["consumedresult",6]]],[11,"parse_lazy","","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …",56,[[],["consumedresult",6]]],[11,"parse_first","","Parses using the stream <code>input</code> and allows itself to be …",56,[[],["consumedresult",6]]],[11,"parse_partial","","Parses using the stream <code>input</code> and allows itself to be …",56,[[],["consumedresult",6]]],[11,"add_error","","Adds the first error that would normally be returned by …",56,[[["tracked",3]]]],[11,"by_ref","","Borrows a parser instead of consuming it.",56,[[]]],[11,"with","","Discards the value of the <code>self</code> parser and returns the …",56,[[],["with",3]]],[11,"skip","","Discards the value of the <code>p</code> parser and returns the value …",56,[[],["skip",3]]],[11,"and","","Parses with <code>self</code> followed by <code>p</code>. Succeeds if both parsers …",56,[[]]],[11,"or","","Returns a parser which attempts to parse using <code>self</code>. If …",56,[[],["or",3]]],[11,"then","","Parses using <code>self</code> and then passes the value to <code>f</code> which …",56,[[],["then",3]]],[11,"then_partial","","Variant of <code>then</code> which parses using <code>self</code> and then passes …",56,[[],["thenpartial",3]]],[11,"map","","Uses <code>f</code> to map over the parsed value.",56,[[],["map",3]]],[11,"flat_map","","Uses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an …",56,[[],["flatmap",3]]],[11,"message","","Parses with <code>self</code> and if it fails, adds the message <code>msg</code> to …",56,[[],["message",3]]],[11,"expected","","Parses with <code>self</code> and if it fails without consuming any …",56,[[],["expected",3]]],[11,"silent","","Parses with <code>self</code>, if it fails without consuming any input …",56,[[],["silent",3]]],[11,"and_then","","Parses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> …",56,[[],["andthen",3]]],[11,"iter","","Creates an iterator from a parser and a state. Can be …",56,[[],[["iter",3],["firstmode",3]]]],[11,"partial_iter","","Creates an iterator from a parser and a state. Can be …",56,[[],["iter",3]]],[11,"boxed","","Turns the parser into a trait object by putting it in a …",56,[[],[["box",3],["parser",8]]]],[11,"left","","Wraps the parser into the <code>Either</code> enum which allows …",56,[[],["either",4]]],[11,"right","","Wraps the parser into the <code>Either</code> enum which allows …",56,[[],["either",4]]],[6,"ConsumedResult","combine","A <code>Result</code> type which has the consumed status flattened …",null,null],[8,"ParseError","","Trait which defines a combine parse error.",null,null],[16,"StreamError","","",7,null],[10,"empty","","Constructs an empty error.",7,[[]]],[10,"from_error","","Creates a <code>ParseError</code> from a single <code>Self::StreamError</code>",7,[[]]],[10,"set_position","","Sets the position of this <code>ParseError</code>",7,[[]]],[11,"merge","","Merges two errors. If they exist at the same position the …",7,[[]]],[10,"add","","Adds a <code>StreamError</code> to <code>self</code>.",7,[[]]],[11,"add_expected","","",7,[[["info",4]]]],[11,"add_unexpected","","",7,[[["info",4]]]],[11,"add_message","","",7,[[["info",4]]]],[10,"set_expected","","Sets <code>info</code> as the <em>only</em> <code>Expected</code> error of <code>self</code>",7,[[["tracked",3]]]],[11,"clear_expected","","Removes any expected errors currently in <code>self</code>",7,[[]]],[10,"is_unexpected_end_of_input","","",7,[[]]],[10,"into_other","","Does a best-effort conversion of <code>self</code> into another …",7,[[]]],[6,"ParseResult","","A type alias over the specific <code>Result</code> type used by …",null,null],[8,"Parser","","By implementing the <code>Parser</code> trait a type says that it can …",null,null],[16,"Input","","The type which is taken as input for the parser. The type …",56,null],[16,"Output","","The type which is returned if the parser is successful.",56,null],[16,"PartialState","","Determines the state necessary to resume parsing after …",56,null],[11,"easy_parse","","Entry point of the parser. Takes some input and tries to …",56,[[],[["result",4],["parseerror",6]]]],[11,"parse","","Entry point of the parser. Takes some input and tries to …",56,[[],["result",4]]],[11,"parse_with_state","","Entry point of the parser when using partial parsing. …",56,[[],["result",4]]],[11,"parse_stream","","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …",56,[[],["parseresult",6]]],[11,"parse_stream_consumed","","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …",56,[[],["consumedresult",6]]],[11,"parse_stream_consumed_partial","","",56,[[],["consumedresult",6]]],[11,"parse_lazy","","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …",56,[[],["consumedresult",6]]],[11,"parse_first","","Parses using the stream <code>input</code> and allows itself to be …",56,[[],["consumedresult",6]]],[11,"parse_partial","","Parses using the stream <code>input</code> and allows itself to be …",56,[[],["consumedresult",6]]],[11,"add_error","","Adds the first error that would normally be returned by …",56,[[["tracked",3]]]],[11,"by_ref","","Borrows a parser instead of consuming it.",56,[[]]],[11,"with","","Discards the value of the <code>self</code> parser and returns the …",56,[[],["with",3]]],[11,"skip","","Discards the value of the <code>p</code> parser and returns the value …",56,[[],["skip",3]]],[11,"and","","Parses with <code>self</code> followed by <code>p</code>. Succeeds if both parsers …",56,[[]]],[11,"or","","Returns a parser which attempts to parse using <code>self</code>. If …",56,[[],["or",3]]],[11,"then","","Parses using <code>self</code> and then passes the value to <code>f</code> which …",56,[[],["then",3]]],[11,"then_partial","","Variant of <code>then</code> which parses using <code>self</code> and then passes …",56,[[],["thenpartial",3]]],[11,"map","","Uses <code>f</code> to map over the parsed value.",56,[[],["map",3]]],[11,"flat_map","","Uses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an …",56,[[],["flatmap",3]]],[11,"message","","Parses with <code>self</code> and if it fails, adds the message <code>msg</code> to …",56,[[],["message",3]]],[11,"expected","","Parses with <code>self</code> and if it fails without consuming any …",56,[[],["expected",3]]],[11,"silent","","Parses with <code>self</code>, if it fails without consuming any input …",56,[[],["silent",3]]],[11,"and_then","","Parses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> …",56,[[],["andthen",3]]],[11,"iter","","Creates an iterator from a parser and a state. Can be …",56,[[],[["iter",3],["firstmode",3]]]],[11,"partial_iter","","Creates an iterator from a parser and a state. Can be …",56,[[],["iter",3]]],[11,"boxed","","Turns the parser into a trait object by putting it in a …",56,[[],[["box",3],["parser",8]]]],[11,"left","","Wraps the parser into the <code>Either</code> enum which allows …",56,[[],["either",4]]],[11,"right","","Wraps the parser into the <code>Either</code> enum which allows …",56,[[],["either",4]]],[8,"Positioned","","A type which has a position.",null,null],[10,"position","","Returns the current position of the stream.",19,[[]]],[8,"RangeStream","","A <code>RangeStream</code> is an extension of <code>Stream</code> which allows for …",null,null],[8,"RangeStreamOnce","","A <code>RangeStream</code> is an extension of <code>StreamOnce</code> which allows …",null,null],[10,"uncons_range","","Takes <code>size</code> elements from the stream. Fails if the length …",22,[[],[["result",4],["streamerrorfor",6]]]],[10,"uncons_while","","Takes items from stream, testing each one with <code>predicate</code>. …",22,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons_while1","","Takes items from stream, testing each one with <code>predicate</code> …",22,[[],[["fastresult",4],["streamerrorfor",6]]]],[10,"distance","","Returns the distance between <code>self</code> and <code>end</code>. The returned …",22,[[]]],[8,"Stream","","A stream of tokens which can be duplicated",null,null],[8,"StreamOnce","","<code>StreamOnce</code> represents a sequence of items that can be …",null,null],[16,"Item","","The type of items which is yielded from this stream.",20,null],[16,"Range","","The type of a range of items yielded from this stream. …",20,null],[16,"Position","","Type which represents the position in a stream. <code>Ord</code> is …",20,null],[16,"Error","","",20,null],[10,"uncons","","Takes a stream and removes its first item, yielding the …",20,[[],[["result",4],["streamerrorfor",6]]]],[11,"is_partial","","Returns <code>true</code> if this stream only contains partial input.",20,[[]]],[5,"any","","Parses any token.",null,[[],["any",3]]],[5,"attempt","","<code>attempt(p)</code> behaves as <code>p</code> except it acts as if the parser …",null,[[],["try",3]]],[5,"between","","Parses <code>open</code> followed by <code>parser</code> followed by <code>close</code>. Returns …",null,[[],["between",3]]],[5,"chainl1","","Parses <code>p</code> 1 or more times separated by <code>op</code>. The value …",null,[[],["chainl1",3]]],[5,"chainr1","","Parses <code>p</code> one or more times separated by <code>op</code>. The value …",null,[[],["chainr1",3]]],[5,"count","","Parses <code>parser</code> from zero up to <code>count</code> times.",null,[[],["count",3]]],[5,"count_min_max","","Parses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>…",null,[[],["countminmax",3]]],[5,"env_parser","","Constructs a parser out of an environment and a function …",null,[[],["envparser",3]]],[5,"eof","","Succeeds only if the stream is at end of input, fails …",null,[[],["eof",3]]],[5,"look_ahead","","<code>look_ahead(p)</code> acts as <code>p</code> but doesn\'t consume input on …",null,[[],["lookahead",3]]],[5,"many","","Parses <code>p</code> zero or more times returning a collection with …",null,[[],["many",3]]],[5,"many1","","Parses <code>p</code> one or more times returning a collection with …",null,[[],["many1",3]]],[5,"none_of","","Extract one token and succeeds if it is not part of <code>tokens</code>…",null,[[],["noneof",3]]],[5,"not_followed_by","","Succeeds only if <code>parser</code> fails. Never consumes any input.",null,[[],["notfollowedby",3]]],[5,"one_of","","Extract one token and succeeds if it is part of <code>tokens</code>.",null,[[],["oneof",3]]],[5,"optional","","Parses <code>parser</code> and outputs <code>Some(value)</code> if it succeeds, <code>None</code>…",null,[[],["optional",3]]],[5,"parser","","Wraps a function, turning it into a parser.",null,[[],["fnparser",3]]],[5,"position","","Parser which just returns the current position in the …",null,[[],["position",3]]],[5,"satisfy","","Parses a token and succeeds depending on the result of …",null,[[],["satisfy",3]]],[5,"satisfy_map","","Parses a token and passes it to <code>predicate</code>. If <code>predicate</code> …",null,[[],["satisfymap",3]]],[5,"sep_by","","Parses <code>parser</code> zero or more time separated by <code>separator</code>, …",null,[[],["sepby",3]]],[5,"sep_by1","","Parses <code>parser</code> one or more time separated by <code>separator</code>, …",null,[[],["sepby1",3]]],[5,"sep_end_by","","Parses <code>parser</code> zero or more times separated and ended by …",null,[[],["sependby",3]]],[5,"sep_end_by1","","Parses <code>parser</code> one or more times separated and ended by …",null,[[],["sependby1",3]]],[5,"skip_count","","Parses <code>parser</code> from zero up to <code>count</code> times skipping the …",null,[[],["skipcount",3]]],[5,"skip_count_min_max","","Parses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>…",null,[[],["skipcountminmax",3]]],[5,"skip_many","","Parses <code>p</code> zero or more times ignoring the result.",null,[[],["skipmany",3]]],[5,"skip_many1","","Parses <code>p</code> one or more times ignoring the result.",null,[[],["skipmany1",3]]],[5,"token","","Parses a character and succeeds if the character is equal …",null,[[],["token",3]]],[5,"tokens","","Parses multiple tokens.",null,[[["info",4]],["tokens",3]]],[5,"try","","<code>try(p)</code> behaves as <code>p</code> except it acts as if the parser …",null,[[],["try",3]]],[5,"unexpected","","Always fails with <code>message</code> as an unexpected error. Never …",null,[[],["unexpected",3]]],[5,"unexpected_any","","Always fails with <code>message</code> as an unexpected error. Never …",null,[[],["unexpected",3]]],[5,"value","","Always returns the value <code>v</code> without consuming any input.",null,[[],["value",3]]],[5,"choice","","Takes a tuple, a slice or an array of parsers and tries …",null,[[],["choice",3]]],[5,"from_str","","Takes a parser that outputs a string like value (<code>&str</code>, …",null,[[],["fromstr",3]]],[5,"tokens2","","Parses multiple tokens.",null,[[],["tokens2",3]]],[14,"parser","","Declares a named parser which can easily be reused.",null,null],[14,"choice","","Takes a number of parsers and tries to apply them each in …",null,null],[14,"opaque","","Convenience macro over <code>opaque</code>.",null,null],[14,"struct_parser","","Sequences multiple parsers and builds a struct out of …",null,null],[11,"from","combine::stream::easy","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","combine::error","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","combine::stream::buffered","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","combine::stream::state","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","combine::stream","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","combine::parser::byte::num","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","combine::parser::byte","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","combine::parser::char","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","combine::parser::choice","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","combine::parser::combinator","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","combine::parser::error","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","combine::parser::function","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","combine::parser::item","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","combine::parser::range","",129,[[]]],[11,"into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","combine::parser::repeat","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"to_owned","","",145,[[]]],[11,"clone_into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"to_owned","","",147,[[]]],[11,"clone_into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"from","combine::parser::sequence","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"to_owned","","",153,[[]]],[11,"clone_into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"to_owned","","",154,[[]]],[11,"clone_into","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"unexpected_token","combine::error","",8,[[]]],[11,"unexpected_range","","",8,[[]]],[11,"unexpected_message","","",8,[[]]],[11,"expected_token","","",8,[[]]],[11,"expected_range","","",8,[[]]],[11,"expected_message","","",8,[[]]],[11,"message_message","","",8,[[]]],[11,"message_token","","",8,[[]]],[11,"message_range","","",8,[[]]],[11,"end_of_input","","",8,[[]]],[11,"into_other","","",8,[[]]],[11,"unexpected_token","","",9,[[]]],[11,"unexpected_range","","",9,[[]]],[11,"unexpected_message","","",9,[[]]],[11,"expected_token","","",9,[[]]],[11,"expected_range","","",9,[[]]],[11,"expected_message","","",9,[[]]],[11,"message_message","","",9,[[]]],[11,"message_token","","",9,[[]]],[11,"message_range","","",9,[[]]],[11,"message_static_message","","",9,[[]]],[11,"end_of_input","","",9,[[]]],[11,"into_other","","",9,[[]]],[11,"unexpected_token","combine::stream::easy","",1,[[]]],[11,"unexpected_range","","",1,[[]]],[11,"unexpected_message","","",1,[[]]],[11,"unexpected_static_message","","",1,[[]]],[11,"expected_token","","",1,[[]]],[11,"expected_range","","",1,[[]]],[11,"expected_message","","",1,[[]]],[11,"expected_static_message","","",1,[[]]],[11,"message_message","","",1,[[]]],[11,"message_static_message","","",1,[[]]],[11,"message_token","","",1,[[]]],[11,"message_range","","",1,[[]]],[11,"other","","",1,[[]]],[11,"into_other","","",1,[[]]],[11,"empty","combine::error","",8,[[]]],[11,"from_error","","",8,[[]]],[11,"set_position","","",8,[[]]],[11,"add","","",8,[[]]],[11,"set_expected","","",8,[[["tracked",3]]]],[11,"is_unexpected_end_of_input","","",8,[[]]],[11,"into_other","","",8,[[]]],[11,"empty","","",9,[[]]],[11,"from_error","","",9,[[]]],[11,"set_position","","",9,[[]]],[11,"add","","",9,[[]]],[11,"set_expected","","",9,[[["tracked",3]]]],[11,"is_unexpected_end_of_input","","",9,[[]]],[11,"into_other","","",9,[[]]],[11,"empty","combine::stream::easy","",1,[[]]],[11,"from_error","","",1,[[]]],[11,"set_position","","",1,[[]]],[11,"add","","",1,[[]]],[11,"set_expected","","",1,[[["tracked",3]]]],[11,"is_unexpected_end_of_input","","",1,[[]]],[11,"into_other","","",1,[[]]],[11,"empty","","",2,[[]]],[11,"from_error","","",2,[[]]],[11,"set_position","","",2,[[]]],[11,"merge","","",2,[[]]],[11,"add","","",2,[[]]],[11,"set_expected","","",2,[[["tracked",3]]]],[11,"clear_expected","","",2,[[]]],[11,"is_unexpected_end_of_input","","",2,[[]]],[11,"into_other","","",2,[[]]],[11,"position","combine::stream::state","",17,[[]]],[11,"update","","",17,[[]]],[11,"position","","",18,[[],["sourceposition",3]]],[11,"update","","",18,[[]]],[11,"update_range","","",17,[[]]],[11,"update_range","","",18,[[]]],[11,"position","combine::stream::buffered","",12,[[]]],[11,"position","combine::stream::easy","",3,[[]]],[11,"position","combine::stream::state","",16,[[]]],[11,"position","combine::stream","",25,[[]]],[11,"position","","",26,[[]]],[11,"uncons","combine::stream::buffered","",12,[[],[["result",4],["streamerrorfor",6]]]],[11,"is_partial","","",12,[[]]],[11,"uncons","combine::stream::easy","",3,[[],[["result",4],["streamerrorfor",6]]]],[11,"is_partial","","",3,[[]]],[11,"uncons","combine::stream::state","",16,[[],[["result",4],["streamerrorfor",6]]]],[11,"is_partial","","",16,[[]]],[11,"uncons","combine::stream","",25,[[],[["result",4],["streamerrorfor",6]]]],[11,"is_partial","","",25,[[]]],[11,"uncons","","",26,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons","","",27,[[],[["streamerrorfor",6],["result",4]]]],[11,"uncons","","",28,[[],[["result",4],["streamerrorfor",6]]]],[11,"checkpoint","combine::stream::buffered","",12,[[]]],[11,"reset","","",12,[[]]],[11,"checkpoint","combine::stream::easy","",3,[[]]],[11,"reset","","",3,[[]]],[11,"checkpoint","combine::stream::state","",17,[[]]],[11,"reset","","",17,[[]]],[11,"checkpoint","","",18,[[]]],[11,"reset","","",18,[[]]],[11,"checkpoint","","",16,[[]]],[11,"reset","","",16,[[]]],[11,"checkpoint","combine::stream","",26,[[]]],[11,"reset","","",26,[[]]],[11,"checkpoint","","",27,[[]]],[11,"reset","","",27,[[]]],[11,"checkpoint","","",25,[[]]],[11,"reset","","",25,[[]]],[11,"uncons_range","combine::stream::easy","",3,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons_while","","",3,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons_while1","","",3,[[],[["fastresult",4],["streamerrorfor",6]]]],[11,"distance","","",3,[[]]],[11,"uncons_range","combine::stream::state","",16,[[],[["streamerrorfor",6],["result",4]]]],[11,"uncons_while","","",16,[[],[["streamerrorfor",6],["result",4]]]],[11,"uncons_while1","","",16,[[],[["fastresult",4],["streamerrorfor",6]]]],[11,"distance","","",16,[[]]],[11,"uncons_range","combine::stream","",25,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons_while","","",25,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons_while1","","",25,[[],[["fastresult",4],["streamerrorfor",6]]]],[11,"distance","","",25,[[]]],[11,"uncons_range","","",26,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons_while","","",26,[[],[["result",4],["streamerrorfor",6]]]],[11,"uncons_while1","","",26,[[],[["fastresult",4],["streamerrorfor",6]]]],[11,"distance","","",26,[[]]],[11,"range","combine::stream::easy","",3,[[]]],[11,"range","combine::stream::state","",16,[[]]],[11,"range","combine::stream","",25,[[]]],[11,"range","","",26,[[]]],[11,"parse_lazy","combine::parser::byte","",65,[[],["consumedresult",6]]],[11,"parse_first","","",65,[[],["consumedresult",6]]],[11,"parse_partial","","",65,[[],["consumedresult",6]]],[11,"add_error","","",65,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",65,[[["tracked",3]]]],[11,"parser_count","","",65,[[],["erroroffset",3]]],[11,"parse_lazy","","",66,[[],["consumedresult",6]]],[11,"parse_first","","",66,[[],["consumedresult",6]]],[11,"parse_partial","","",66,[[],["consumedresult",6]]],[11,"add_error","","",66,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",66,[[["tracked",3]]]],[11,"parser_count","","",66,[[],["erroroffset",3]]],[11,"parse_lazy","","",67,[[],["consumedresult",6]]],[11,"parse_first","","",67,[[],["consumedresult",6]]],[11,"parse_partial","","",67,[[],["consumedresult",6]]],[11,"add_error","","",67,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",67,[[["tracked",3]]]],[11,"parser_count","","",67,[[],["erroroffset",3]]],[11,"parse_lazy","","",68,[[],["consumedresult",6]]],[11,"parse_first","","",68,[[],["consumedresult",6]]],[11,"parse_partial","","",68,[[],["consumedresult",6]]],[11,"add_error","","",68,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",68,[[["tracked",3]]]],[11,"parser_count","","",68,[[],["erroroffset",3]]],[11,"parse_lazy","","",69,[[],["consumedresult",6]]],[11,"parse_first","","",69,[[],["consumedresult",6]]],[11,"parse_partial","","",69,[[],["consumedresult",6]]],[11,"add_error","","",69,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",69,[[["tracked",3]]]],[11,"parser_count","","",69,[[],["erroroffset",3]]],[11,"parse_lazy","","",70,[[],["consumedresult",6]]],[11,"parse_first","","",70,[[],["consumedresult",6]]],[11,"parse_partial","","",70,[[],["consumedresult",6]]],[11,"add_error","","",70,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",70,[[["tracked",3]]]],[11,"parser_count","","",70,[[],["erroroffset",3]]],[11,"parse_lazy","","",71,[[],["consumedresult",6]]],[11,"parse_first","","",71,[[],["consumedresult",6]]],[11,"parse_partial","","",71,[[],["consumedresult",6]]],[11,"add_error","","",71,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",71,[[["tracked",3]]]],[11,"parser_count","","",71,[[],["erroroffset",3]]],[11,"parse_lazy","","",72,[[],["consumedresult",6]]],[11,"parse_first","","",72,[[],["consumedresult",6]]],[11,"parse_partial","","",72,[[],["consumedresult",6]]],[11,"add_error","","",72,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",72,[[["tracked",3]]]],[11,"parser_count","","",72,[[],["erroroffset",3]]],[11,"parse_lazy","","",73,[[],["consumedresult",6]]],[11,"parse_first","","",73,[[],["consumedresult",6]]],[11,"parse_partial","","",73,[[],["consumedresult",6]]],[11,"add_error","","",73,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",73,[[["tracked",3]]]],[11,"parser_count","","",73,[[],["erroroffset",3]]],[11,"parse_lazy","","",74,[[],["consumedresult",6]]],[11,"parse_first","","",74,[[],["consumedresult",6]]],[11,"parse_partial","","",74,[[],["consumedresult",6]]],[11,"add_error","","",74,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",74,[[["tracked",3]]]],[11,"parser_count","","",74,[[],["erroroffset",3]]],[11,"parse_lazy","","",75,[[],["consumedresult",6]]],[11,"parse_first","","",75,[[],["consumedresult",6]]],[11,"parse_partial","","",75,[[],["consumedresult",6]]],[11,"add_error","","",75,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",75,[[["tracked",3]]]],[11,"parser_count","","",75,[[],["erroroffset",3]]],[11,"parse_lazy","","",76,[[],["consumedresult",6]]],[11,"parse_first","","",76,[[],["consumedresult",6]]],[11,"parse_partial","","",76,[[],["consumedresult",6]]],[11,"add_error","","",76,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",76,[[["tracked",3]]]],[11,"parser_count","","",76,[[],["erroroffset",3]]],[11,"parse_lazy","","",77,[[],["consumedresult",6]]],[11,"add_error","","",77,[[["tracked",3]]]],[11,"parse_lazy","","",78,[[],["consumedresult",6]]],[11,"add_error","","",78,[[["tracked",3]]]],[11,"parse_partial","","",30,[[],["consumedresult",6]]],[11,"parse_first","","",30,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",30,[[],["consumedresult",6]]],[11,"add_error","","",30,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",30,[[["tracked",3]]]],[11,"parse_partial","","",31,[[],["consumedresult",6]]],[11,"parse_first","","",31,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",31,[[],["consumedresult",6]]],[11,"add_error","","",31,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",31,[[["tracked",3]]]],[11,"parse_partial","","",32,[[],["consumedresult",6]]],[11,"parse_first","","",32,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",32,[[],["consumedresult",6]]],[11,"add_error","","",32,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",32,[[["tracked",3]]]],[11,"parse_partial","","",33,[[],["consumedresult",6]]],[11,"parse_first","","",33,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",33,[[],["consumedresult",6]]],[11,"add_error","","",33,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",33,[[["tracked",3]]]],[11,"parse_lazy","combine::parser::byte::num","",57,[[],["consumedresult",6]]],[11,"parse_lazy","","",58,[[],["consumedresult",6]]],[11,"parse_lazy","","",59,[[],["consumedresult",6]]],[11,"parse_lazy","","",60,[[],["consumedresult",6]]],[11,"parse_lazy","","",61,[[],["consumedresult",6]]],[11,"parse_lazy","","",62,[[],["consumedresult",6]]],[11,"parse_lazy","","",63,[[],["consumedresult",6]]],[11,"parse_lazy","","",64,[[],["consumedresult",6]]],[11,"parse_partial","combine::parser::char","",79,[[],["consumedresult",6]]],[11,"parse_first","","",79,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",79,[[],["consumedresult",6]]],[11,"add_error","","",79,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",79,[[["tracked",3]]]],[11,"parse_lazy","","",80,[[],["consumedresult",6]]],[11,"parse_first","","",80,[[],["consumedresult",6]]],[11,"parse_partial","","",80,[[],["consumedresult",6]]],[11,"add_error","","",80,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",80,[[["tracked",3]]]],[11,"parser_count","","",80,[[],["erroroffset",3]]],[11,"parse_lazy","","",81,[[],["consumedresult",6]]],[11,"parse_first","","",81,[[],["consumedresult",6]]],[11,"parse_partial","","",81,[[],["consumedresult",6]]],[11,"add_error","","",81,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",81,[[["tracked",3]]]],[11,"parser_count","","",81,[[],["erroroffset",3]]],[11,"parse_lazy","","",82,[[],["consumedresult",6]]],[11,"parse_first","","",82,[[],["consumedresult",6]]],[11,"parse_partial","","",82,[[],["consumedresult",6]]],[11,"add_error","","",82,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",82,[[["tracked",3]]]],[11,"parser_count","","",82,[[],["erroroffset",3]]],[11,"parse_lazy","","",83,[[],["consumedresult",6]]],[11,"parse_first","","",83,[[],["consumedresult",6]]],[11,"parse_partial","","",83,[[],["consumedresult",6]]],[11,"add_error","","",83,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",83,[[["tracked",3]]]],[11,"parser_count","","",83,[[],["erroroffset",3]]],[11,"parse_lazy","","",84,[[],["consumedresult",6]]],[11,"parse_first","","",84,[[],["consumedresult",6]]],[11,"parse_partial","","",84,[[],["consumedresult",6]]],[11,"add_error","","",84,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",84,[[["tracked",3]]]],[11,"parser_count","","",84,[[],["erroroffset",3]]],[11,"parse_lazy","","",85,[[],["consumedresult",6]]],[11,"parse_first","","",85,[[],["consumedresult",6]]],[11,"parse_partial","","",85,[[],["consumedresult",6]]],[11,"add_error","","",85,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",85,[[["tracked",3]]]],[11,"parser_count","","",85,[[],["erroroffset",3]]],[11,"parse_lazy","","",86,[[],["consumedresult",6]]],[11,"parse_first","","",86,[[],["consumedresult",6]]],[11,"parse_partial","","",86,[[],["consumedresult",6]]],[11,"add_error","","",86,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",86,[[["tracked",3]]]],[11,"parser_count","","",86,[[],["erroroffset",3]]],[11,"parse_lazy","","",87,[[],["consumedresult",6]]],[11,"parse_first","","",87,[[],["consumedresult",6]]],[11,"parse_partial","","",87,[[],["consumedresult",6]]],[11,"add_error","","",87,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",87,[[["tracked",3]]]],[11,"parser_count","","",87,[[],["erroroffset",3]]],[11,"parse_lazy","","",88,[[],["consumedresult",6]]],[11,"parse_first","","",88,[[],["consumedresult",6]]],[11,"parse_partial","","",88,[[],["consumedresult",6]]],[11,"add_error","","",88,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",88,[[["tracked",3]]]],[11,"parser_count","","",88,[[],["erroroffset",3]]],[11,"parse_lazy","","",89,[[],["consumedresult",6]]],[11,"parse_first","","",89,[[],["consumedresult",6]]],[11,"parse_partial","","",89,[[],["consumedresult",6]]],[11,"add_error","","",89,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",89,[[["tracked",3]]]],[11,"parser_count","","",89,[[],["erroroffset",3]]],[11,"parse_lazy","","",90,[[],["consumedresult",6]]],[11,"parse_first","","",90,[[],["consumedresult",6]]],[11,"parse_partial","","",90,[[],["consumedresult",6]]],[11,"add_error","","",90,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",90,[[["tracked",3]]]],[11,"parser_count","","",90,[[],["erroroffset",3]]],[11,"parse_lazy","","",91,[[],["consumedresult",6]]],[11,"add_error","","",91,[[["tracked",3]]]],[11,"parse_lazy","","",92,[[],["consumedresult",6]]],[11,"add_error","","",92,[[["tracked",3]]]],[11,"parse_partial","combine::parser::choice","",93,[[],["consumedresult",6]]],[11,"parse_first","","",93,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",93,[[],["consumedresult",6]]],[11,"add_error","","",93,[[["tracked",3]]]],[11,"parse_partial","","",94,[[],["consumedresult",6]]],[11,"parse_first","","",94,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",94,[[],["consumedresult",6]]],[11,"add_error","","",94,[[["tracked",3]]]],[11,"parse_partial","","",95,[[],["consumedresult",6]]],[11,"parse_first","","",95,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",95,[[],["consumedresult",6]]],[11,"add_error","","",95,[[["tracked",3]]]],[11,"parser_count","","",95,[[],["erroroffset",3]]],[11,"parse_partial","combine::parser::combinator","",96,[[],["consumedresult",6]]],[11,"parse_first","","",96,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",96,[[],["consumedresult",6]]],[11,"add_error","","",96,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",96,[[["tracked",3]]]],[11,"parser_count","","",96,[[],["erroroffset",3]]],[11,"parse_stream_consumed","","",97,[[],["consumedresult",6]]],[11,"parse_partial","","",97,[[],["consumedresult",6]]],[11,"parse_first","","",97,[[],["consumedresult",6]]],[11,"parse_consumed_mode","","",97,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",97,[[],["consumedresult",6]]],[11,"add_error","","",97,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",97,[[["tracked",3]]]],[11,"parser_count","","",97,[[],["erroroffset",3]]],[11,"parse_lazy","","",98,[[],["consumedresult",6]]],[11,"add_error","","",98,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",98,[[["tracked",3]]]],[11,"parser_count","","",98,[[],["erroroffset",3]]],[11,"parse_partial","","",99,[[],["consumedresult",6]]],[11,"parse_first","","",99,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",99,[[],["consumedresult",6]]],[11,"add_error","","",99,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",99,[[["tracked",3]]]],[11,"parser_count","","",99,[[],["erroroffset",3]]],[11,"parse_partial","","",100,[[],["consumedresult",6]]],[11,"parse_first","","",100,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",100,[[],["consumedresult",6]]],[11,"add_error","","",100,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",100,[[["tracked",3]]]],[11,"parser_count","","",100,[[],["erroroffset",3]]],[11,"parse_partial","","",101,[[],["consumedresult",6]]],[11,"parse_first","","",101,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",101,[[],["consumedresult",6]]],[11,"add_error","","",101,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",101,[[["tracked",3]]]],[11,"parser_count","","",101,[[],["erroroffset",3]]],[11,"parse_partial","","",102,[[],["consumedresult",6]]],[11,"parse_first","","",102,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",102,[[],["consumedresult",6]]],[11,"add_error","","",102,[[["tracked",3]]]],[11,"parse_lazy","","",103,[[],["consumedresult",6]]],[11,"parse_partial","","",103,[[],["consumedresult",6]]],[11,"parse_first","","",103,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",103,[[],["consumedresult",6]]],[11,"add_error","","",103,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",103,[[["tracked",3]]]],[11,"parser_count","","",103,[[],["erroroffset",3]]],[11,"parse_lazy","","",104,[[],["consumedresult",6]]],[11,"parse_partial","","",104,[[],["consumedresult",6]]],[11,"parse_first","","",104,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",104,[[],["consumedresult",6]]],[11,"add_error","","",104,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",104,[[["tracked",3]]]],[11,"parser_count","","",104,[[],["erroroffset",3]]],[11,"parse_lazy","","",106,[[],["consumedresult",6]]],[11,"parse_partial","","",106,[[],["consumedresult",6]]],[11,"parse_first","","",106,[[],["consumedresult",6]]],[11,"parse_mode","","",106,[[],["consumedresult",6]]],[11,"add_error","","",106,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",106,[[["tracked",3]]]],[11,"parser_count","","",106,[[],["erroroffset",3]]],[11,"parse_lazy","","",108,[[],["consumedresult",6]]],[11,"parse_partial","","",108,[[],["consumedresult",6]]],[11,"parse_first","","",108,[[],["consumedresult",6]]],[11,"parse_mode","","",108,[[],["consumedresult",6]]],[11,"add_error","","",108,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",108,[[["tracked",3]]]],[11,"parser_count","","",108,[[],["erroroffset",3]]],[11,"parse_stream_consumed","","",109,[[],["consumedresult",6]]],[11,"parse_lazy","","",109,[[],["consumedresult",6]]],[11,"parse_partial","","",109,[[],["consumedresult",6]]],[11,"parse_first","","",109,[[],["consumedresult",6]]],[11,"parse_consumed_mode","","",109,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",109,[[],["consumedresult",6]]],[11,"add_error","","",109,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",109,[[["tracked",3]]]],[11,"parse_partial","","",110,[[],["consumedresult",6]]],[11,"parse_first","","",110,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",110,[[],["consumedresult",6]]],[11,"add_error","","",110,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",110,[[["tracked",3]]]],[11,"parse_partial","","",36,[[],["consumedresult",6]]],[11,"parse_first","","",36,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",36,[[],["consumedresult",6]]],[11,"add_error","","",36,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",36,[[["tracked",3]]]],[11,"parse_stream_consumed","","",111,[[],["consumedresult",6]]],[11,"parse_lazy","","",111,[[],["consumedresult",6]]],[11,"parse_partial","","",111,[[],["consumedresult",6]]],[11,"parse_first","","",111,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",111,[[],["consumedresult",6]]],[11,"add_error","","",111,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",111,[[["tracked",3]]]],[11,"parse_lazy","combine::parser::error","",112,[[],["consumedresult",6]]],[11,"add_error","","",112,[[["tracked",3]]]],[11,"parse_partial","","",113,[[],["consumedresult",6]]],[11,"parse_first","","",113,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",113,[[],["consumedresult",6]]],[11,"add_error","","",113,[[["tracked",3]]]],[11,"parser_count","","",113,[[],["erroroffset",3]]],[11,"add_consumed_expected_error","","",113,[[["tracked",3]]]],[11,"parse_partial","","",114,[[],["consumedresult",6]]],[11,"parse_first","","",114,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",114,[[],["consumedresult",6]]],[11,"add_error","","",114,[[["tracked",3]]]],[11,"parser_count","","",114,[[],["erroroffset",3]]],[11,"add_consumed_expected_error","","",114,[[["tracked",3]]]],[11,"parse_partial","","",115,[[],["consumedresult",6]]],[11,"parse_first","","",115,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",115,[[],["consumedresult",6]]],[11,"add_error","","",115,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",115,[[["tracked",3]]]],[11,"parser_count","","",115,[[],["erroroffset",3]]],[11,"parse_lazy","combine::parser::function","",116,[[],["consumedresult",6]]],[11,"parse_lazy","","",117,[[],["consumedresult",6]]],[11,"parse_lazy","combine::parser::item","",118,[[],["consumedresult",6]]],[11,"parse_lazy","","",119,[[],["consumedresult",6]]],[11,"parse_lazy","","",120,[[],["consumedresult",6]]],[11,"parse_lazy","","",121,[[],["consumedresult",6]]],[11,"add_error","","",121,[[["tracked",3]]]],[11,"parse_lazy","","",122,[[],["consumedresult",6]]],[11,"add_error","","",122,[[["tracked",3]]]],[11,"parse_lazy","","",123,[[],["consumedresult",6]]],[11,"parse_lazy","","",124,[[],["consumedresult",6]]],[11,"parse_lazy","","",125,[[],["consumedresult",6]]],[11,"add_error","","",125,[[["tracked",3]]]],[11,"parse_lazy","","",126,[[],["consumedresult",6]]],[11,"parse_lazy","","",127,[[],["consumedresult",6]]],[11,"parse_lazy","","",128,[[],["consumedresult",6]]],[11,"add_error","","",128,[[["tracked",3]]]],[11,"parse_lazy","combine::parser::range","",129,[[],["consumedresult",6]]],[11,"add_error","","",129,[[["tracked",3]]]],[11,"parse_partial","","",37,[[],["consumedresult",6]]],[11,"parse_first","","",37,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",37,[[],["consumedresult",6]]],[11,"add_error","","",37,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",37,[[["tracked",3]]]],[11,"parse_partial","","",130,[[],["consumedresult",6]]],[11,"parse_first","","",130,[[],["consumedresult",6]]],[11,"parse_mode","","",130,[[],["consumedresult",6]]],[11,"add_error","","",130,[[["tracked",3]]]],[11,"parse_lazy","","",131,[[],["consumedresult",6]]],[11,"parse_partial","","",132,[[],["consumedresult",6]]],[11,"parse_first","","",132,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",132,[[],["consumedresult",6]]],[11,"parse_partial","","",133,[[],["consumedresult",6]]],[11,"parse_first","","",133,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",133,[[],["consumedresult",6]]],[11,"parse_partial","","",134,[[],["consumedresult",6]]],[11,"parse_partial","","",135,[[],["consumedresult",6]]],[11,"parse_first","","",135,[[],["consumedresult",6]]],[11,"parse_mode","","",135,[[],["consumedresult",6]]],[11,"parse_partial","combine::parser::repeat","",39,[[],["consumedresult",6]]],[11,"parse_first","","",39,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",39,[[],["consumedresult",6]]],[11,"add_error","","",39,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",39,[[["tracked",3]]]],[11,"parse_partial","","",40,[[],["consumedresult",6]]],[11,"parse_first","","",40,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",40,[[],["consumedresult",6]]],[11,"add_error","","",40,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",40,[[["tracked",3]]]],[11,"parse_partial","","",136,[[],["consumedresult",6]]],[11,"parse_first","","",136,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",136,[[],["consumedresult",6]]],[11,"add_error","","",136,[[["tracked",3]]]],[11,"parse_partial","","",41,[[],["consumedresult",6]]],[11,"parse_first","","",41,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",41,[[],["consumedresult",6]]],[11,"add_error","","",41,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",41,[[["tracked",3]]]],[11,"parse_partial","","",137,[[],["consumedresult",6]]],[11,"parse_first","","",137,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",137,[[],["consumedresult",6]]],[11,"add_error","","",137,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",137,[[["tracked",3]]]],[11,"parser_count","","",137,[[],["erroroffset",3]]],[11,"parse_partial","","",138,[[],["consumedresult",6]]],[11,"parse_first","","",138,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",138,[[],["consumedresult",6]]],[11,"add_consumed_expected_error","","",138,[[["tracked",3]]]],[11,"add_error","","",138,[[["tracked",3]]]],[11,"parser_count","","",138,[[],["erroroffset",3]]],[11,"parse_lazy","","",139,[[],["consumedresult",6]]],[11,"parse_first","","",139,[[],["consumedresult",6]]],[11,"parse_partial","","",139,[[],["consumedresult",6]]],[11,"add_error","","",139,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",139,[[["tracked",3]]]],[11,"parser_count","","",139,[[],["erroroffset",3]]],[11,"parse_lazy","","",140,[[],["consumedresult",6]]],[11,"parse_first","","",140,[[],["consumedresult",6]]],[11,"parse_partial","","",140,[[],["consumedresult",6]]],[11,"add_error","","",140,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",140,[[["tracked",3]]]],[11,"parser_count","","",140,[[],["erroroffset",3]]],[11,"parse_partial","","",141,[[],["consumedresult",6]]],[11,"parse_first","","",141,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",141,[[],["consumedresult",6]]],[11,"add_consumed_expected_error","","",141,[[["tracked",3]]]],[11,"add_error","","",141,[[["tracked",3]]]],[11,"parser_count","","",141,[[],["erroroffset",3]]],[11,"parse_partial","","",142,[[],["consumedresult",6]]],[11,"parse_first","","",142,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",142,[[],["consumedresult",6]]],[11,"add_consumed_expected_error","","",142,[[["tracked",3]]]],[11,"add_error","","",142,[[["tracked",3]]]],[11,"parser_count","","",142,[[],["erroroffset",3]]],[11,"parse_partial","","",143,[[],["consumedresult",6]]],[11,"parse_first","","",143,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",143,[[],["consumedresult",6]]],[11,"add_error","","",143,[[["tracked",3]]]],[11,"parse_partial","","",144,[[],["consumedresult",6]]],[11,"parse_first","","",144,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",144,[[],["consumedresult",6]]],[11,"add_error","","",144,[[["tracked",3]]]],[11,"parse_partial","","",145,[[],["consumedresult",6]]],[11,"parse_first","","",145,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",145,[[],["consumedresult",6]]],[11,"add_error","","",145,[[["tracked",3]]]],[11,"parse_lazy","","",146,[[],["consumedresult",6]]],[11,"add_error","","",146,[[["tracked",3]]]],[11,"parse_partial","","",147,[[],["consumedresult",6]]],[11,"parse_first","","",147,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",147,[[],["consumedresult",6]]],[11,"parse_partial","","",43,[[],["consumedresult",6]]],[11,"parse_first","","",43,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",43,[[],["consumedresult",6]]],[11,"add_error","","",43,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",43,[[["tracked",3]]]],[11,"parse_lazy","","",149,[[],["consumedresult",6]]],[11,"add_error","","",149,[[["tracked",3]]]],[11,"parse_lazy","combine::parser::sequence","",150,[[],["consumedresult",6]]],[11,"parse_partial","","",150,[[],["consumedresult",6]]],[11,"parse_first","","",150,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",150,[[],["consumedresult",6]]],[11,"add_error","","",150,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",150,[[["tracked",3]]]],[11,"parser_count","","",150,[[],["erroroffset",3]]],[11,"parse_partial","","",151,[[],["consumedresult",6]]],[11,"parse_first","","",151,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",151,[[],["consumedresult",6]]],[11,"add_error","","",151,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",151,[[["tracked",3]]]],[11,"parser_count","","",151,[[],["erroroffset",3]]],[11,"parse_lazy","","",152,[[],["consumedresult",6]]],[11,"parse_first","","",152,[[],["consumedresult",6]]],[11,"parse_partial","","",152,[[],["consumedresult",6]]],[11,"add_error","","",152,[[["tracked",3]]]],[11,"add_consumed_expected_error","","",152,[[["tracked",3]]]],[11,"parser_count","","",152,[[],["erroroffset",3]]],[11,"parse_partial","","",153,[[],["consumedresult",6]]],[11,"parse_first","","",153,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",153,[[],["consumedresult",6]]],[11,"add_error","","",153,[[["tracked",3]]]],[11,"parse_partial","","",154,[[],["consumedresult",6]]],[11,"parse_first","","",154,[[],["consumedresult",6]]],[11,"parse_mode_impl","","",154,[[],["consumedresult",6]]],[11,"add_error","","",154,[[["tracked",3]]]],[11,"as_mut","combine::error","",5,[[]]],[11,"as_ref","","",5,[[]]],[11,"from","","",4,[[],["info",4]]],[11,"from","","",4,[[],["info",4]]],[11,"from","","",4,[[],["info",4]]],[11,"from","","",10,[[]]],[11,"from","","",11,[[["parseresult2",6]],["fastresult",4]]],[11,"from","combine::stream::easy","",0,[[["primitiveinfo",4]]]],[11,"from","","",0,[[],["info",4]]],[11,"from","","",0,[[["string",3]],["info",4]]],[11,"from","","",0,[[],["info",4]]],[11,"from","","",0,[[],["info",4]]],[11,"from","","",1,[[],["error",4]]],[11,"from","combine::parser::range","",38,[[["option",4]],["takerange",4]]],[11,"into","combine::error","",11,[[],[["result",4],["consumed",4],["consumed",4]]]],[11,"into","","",11,[[],["parseresult2",6]]],[11,"next","combine::stream","",27,[[],["option",4]]],[11,"next","combine::parser::repeat","",42,[[],["option",4]]],[11,"clone","combine::error","",4,[[],["info",4]]],[11,"clone","","",5,[[],["consumed",4]]],[11,"clone","","",8,[[],["unexpectedparse",4]]],[11,"clone","","",9,[[],["stringstreamerror",4]]],[11,"clone","","",10,[[],["tracked",3]]],[11,"clone","","",11,[[],["fastresult",4]]],[11,"clone","combine::stream::easy","",0,[[],["info",4]]],[11,"clone","","",3,[[],["stream",3]]],[11,"clone","combine::stream::state","",16,[[],["state",3]]],[11,"clone","","",17,[[],["indexpositioner",3]]],[11,"clone","","",18,[[],["sourceposition",3]]],[11,"clone","combine::stream","",25,[[],["partialstream",3]]],[11,"clone","","",26,[[],["slicestream",3]]],[11,"clone","","",27,[[],["iteratorstream",3]]],[11,"clone","","",29,[[],["pointeroffset",3]]],[11,"clone","combine::parser::byte","",65,[[],["digit",3]]],[11,"clone","","",66,[[],["space",3]]],[11,"clone","","",67,[[],["spaces",3]]],[11,"clone","","",68,[[],["newline",3]]],[11,"clone","","",69,[[],["crlf",3]]],[11,"clone","","",70,[[],["tab",3]]],[11,"clone","","",71,[[],["upper",3]]],[11,"clone","","",72,[[],["lower",3]]],[11,"clone","","",73,[[],["alphanum",3]]],[11,"clone","","",74,[[],["letter",3]]],[11,"clone","","",75,[[],["octdigit",3]]],[11,"clone","","",76,[[],["hexdigit",3]]],[11,"clone","","",77,[[],["bytes",3]]],[11,"clone","","",78,[[],["bytescmp",3]]],[11,"clone","","",30,[[],["takeuntilbyte",3]]],[11,"clone","","",31,[[],["takeuntilbyte2",3]]],[11,"clone","","",32,[[],["takeuntilbyte3",3]]],[11,"clone","combine::parser::byte::num","",57,[[],["u16",3]]],[11,"clone","","",58,[[],["u32",3]]],[11,"clone","","",59,[[],["u64",3]]],[11,"clone","","",60,[[],["i16",3]]],[11,"clone","","",61,[[],["i32",3]]],[11,"clone","","",62,[[],["i64",3]]],[11,"clone","","",63,[[],["f32",3]]],[11,"clone","","",64,[[],["f64",3]]],[11,"clone","combine::parser::char","",79,[[],["digit",3]]],[11,"clone","","",80,[[],["space",3]]],[11,"clone","","",81,[[],["spaces",3]]],[11,"clone","","",82,[[],["newline",3]]],[11,"clone","","",83,[[],["crlf",3]]],[11,"clone","","",84,[[],["tab",3]]],[11,"clone","","",85,[[],["upper",3]]],[11,"clone","","",86,[[],["lower",3]]],[11,"clone","","",87,[[],["alphanum",3]]],[11,"clone","","",88,[[],["letter",3]]],[11,"clone","","",89,[[],["octdigit",3]]],[11,"clone","","",90,[[],["hexdigit",3]]],[11,"clone","","",91,[[],["str",3]]],[11,"clone","","",92,[[],["strcmp",3]]],[11,"clone","combine::parser::choice","",93,[[],["choice",3]]],[11,"clone","","",94,[[],["or",3]]],[11,"clone","","",95,[[],["optional",3]]],[11,"clone","combine::parser::combinator","",96,[[],["notfollowedby",3]]],[11,"clone","","",97,[[],["try",3]]],[11,"clone","","",98,[[],["lookahead",3]]],[11,"clone","","",99,[[],["map",3]]],[11,"clone","","",100,[[],["flatmap",3]]],[11,"clone","","",101,[[],["andthen",3]]],[11,"clone","","",102,[[],["recognize",3]]],[11,"clone","","",104,[[],["ignore",3]]],[11,"clone","","",109,[[],["lazy",3]]],[11,"clone","","",110,[[],["factory",3]]],[11,"clone","","",111,[[],["opaque",3]]],[11,"clone","combine::parser::error","",112,[[],["unexpected",3]]],[11,"clone","","",113,[[],["message",3]]],[11,"clone","","",114,[[],["expected",3]]],[11,"clone","","",115,[[],["silent",3]]],[11,"clone","combine::parser::function","",116,[[],["fnparser",3]]],[11,"clone","","",117,[[]]],[11,"clone","combine::parser::item","",118,[[],["any",3]]],[11,"clone","","",119,[[],["satisfy",3]]],[11,"clone","","",120,[[],["satisfymap",3]]],[11,"clone","","",121,[[],["token",3]]],[11,"clone","","",122,[[],["tokens",3]]],[11,"clone","","",123,[[],["tokens2",3]]],[11,"clone","","",124,[[],["position",3]]],[11,"clone","","",125,[[],["oneof",3]]],[11,"clone","","",126,[[],["noneof",3]]],[11,"clone","","",127,[[],["value",3]]],[11,"clone","","",128,[[],["eof",3]]],[11,"clone","combine::parser::range","",37,[[],["recognize",3]]],[11,"clone","","",130,[[],["recognizewithvalue",3]]],[11,"clone","combine::parser::repeat","",39,[[],["count",3]]],[11,"clone","","",40,[[],["skipcount",3]]],[11,"clone","","",136,[[],["countminmax",3]]],[11,"clone","","",41,[[],["skipcountminmax",3]]],[11,"clone","","",137,[[],["many",3]]],[11,"clone","","",138,[[],["many1",3]]],[11,"clone","","",139,[[],["skipmany",3]]],[11,"clone","","",140,[[],["skipmany1",3]]],[11,"clone","","",141,[[],["sepby",3]]],[11,"clone","","",142,[[],["sepby1",3]]],[11,"clone","","",143,[[],["sependby",3]]],[11,"clone","","",144,[[],["sependby1",3]]],[11,"clone","","",145,[[],["chainl1",3]]],[11,"clone","","",146,[[],["chainr1",3]]],[11,"clone","","",147,[[],["takeuntil",3]]],[11,"clone","","",43,[[],["skipuntil",3]]],[11,"clone","combine::parser::sequence","",150,[[],["with",3]]],[11,"clone","","",151,[[],["skip",3]]],[11,"clone","","",152,[[],["between",3]]],[11,"clone","","",153,[[],["then",3]]],[11,"clone","","",154,[[],["thenpartial",3]]],[11,"default","combine::stream::state","",17,[[],["indexpositioner",3]]],[11,"default","","",18,[[]]],[11,"default","combine::stream","",29,[[],["pointeroffset",3]]],[11,"default","combine::parser::combinator","",105,[[],["anypartialstate",3]]],[11,"default","","",107,[[],["anysendpartialstate",3]]],[11,"default","combine::parser::repeat","",148,[[],["escapedstate",3]]],[11,"default","combine::parser::sequence","",44,[[],["partialstate1",3]]],[11,"default","","",45,[[],["partialstate2",3]]],[11,"default","","",46,[[],["partialstate3",3]]],[11,"default","","",47,[[],["partialstate4",3]]],[11,"default","","",48,[[],["partialstate5",3]]],[11,"default","","",49,[[],["partialstate6",3]]],[11,"default","","",50,[[],["partialstate7",3]]],[11,"default","","",51,[[],["partialstate8",3]]],[11,"default","","",52,[[],["partialstate9",3]]],[11,"default","","",53,[[],["partialstate10",3]]],[11,"default","","",54,[[],["partialstate11",3]]],[11,"default","","",55,[[],["partialstate12",3]]],[11,"cmp","combine::stream::state","",18,[[["sourceposition",3]],["ordering",4]]],[11,"cmp","combine::stream","",25,[[["partialstream",3]],["ordering",4]]],[11,"cmp","","",26,[[["slicestream",3]],["ordering",4]]],[11,"cmp","","",29,[[["pointeroffset",3]],["ordering",4]]],[11,"eq","combine::error","",5,[[["consumed",4]]]],[11,"ne","","",5,[[["consumed",4]]]],[11,"eq","","",8,[[["unexpectedparse",4]]]],[11,"eq","","",9,[[["stringstreamerror",4]]]],[11,"eq","","",10,[[["tracked",3]]]],[11,"ne","","",10,[[["tracked",3]]]],[11,"eq","","",11,[[["fastresult",4]]]],[11,"ne","","",11,[[["fastresult",4]]]],[11,"eq","combine::stream::buffered","",12,[[["bufferedstream",3]]]],[11,"ne","","",12,[[["bufferedstream",3]]]],[11,"eq","combine::stream::easy","",0,[[["info",4]]]],[11,"eq","","",1,[[["error",4]]]],[11,"eq","","",2,[[["errors",3]]]],[11,"ne","","",2,[[["errors",3]]]],[11,"eq","combine::stream::state","",16,[[["state",3]]]],[11,"ne","","",16,[[["state",3]]]],[11,"eq","","",17,[[["indexpositioner",3]]]],[11,"ne","","",17,[[["indexpositioner",3]]]],[11,"eq","","",18,[[["sourceposition",3]]]],[11,"ne","","",18,[[["sourceposition",3]]]],[11,"eq","combine::stream","",25,[[["partialstream",3]]]],[11,"ne","","",25,[[["partialstream",3]]]],[11,"eq","","",26,[[["slicestream",3]]]],[11,"ne","","",26,[[["slicestream",3]]]],[11,"eq","","",29,[[["pointeroffset",3]]]],[11,"ne","","",29,[[["pointeroffset",3]]]],[11,"eq","combine::parser::range","",38,[[["takerange",4]]]],[11,"ne","","",38,[[["takerange",4]]]],[11,"partial_cmp","combine::stream::state","",18,[[["sourceposition",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["sourceposition",3]]]],[11,"le","","",18,[[["sourceposition",3]]]],[11,"gt","","",18,[[["sourceposition",3]]]],[11,"ge","","",18,[[["sourceposition",3]]]],[11,"partial_cmp","combine::stream","",25,[[["partialstream",3]],[["option",4],["ordering",4]]]],[11,"lt","","",25,[[["partialstream",3]]]],[11,"le","","",25,[[["partialstream",3]]]],[11,"gt","","",25,[[["partialstream",3]]]],[11,"ge","","",25,[[["partialstream",3]]]],[11,"partial_cmp","","",26,[[["slicestream",3]],[["option",4],["ordering",4]]]],[11,"lt","","",26,[[["slicestream",3]]]],[11,"le","","",26,[[["slicestream",3]]]],[11,"gt","","",26,[[["slicestream",3]]]],[11,"ge","","",26,[[["slicestream",3]]]],[11,"partial_cmp","","",29,[[["pointeroffset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",29,[[["pointeroffset",3]]]],[11,"le","","",29,[[["pointeroffset",3]]]],[11,"gt","","",29,[[["pointeroffset",3]]]],[11,"ge","","",29,[[["pointeroffset",3]]]],[11,"fmt","combine::error","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","combine::stream::buffered","",12,[[["formatter",3]],["result",6]]],[11,"fmt","combine::stream::easy","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","combine::stream::state","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","combine::stream","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","combine::parser::range","",38,[[["formatter",3]],["result",6]]],[11,"fmt","combine::error","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","combine::stream::easy","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","combine::stream::state","",18,[[["formatter",3]],["result",6]]],[11,"fmt","combine::stream","",29,[[["formatter",3]],["result",6]]],[11,"description","combine::stream::easy","",2,[[]]]],"p":[[4,"Info"],[4,"Error"],[3,"Errors"],[3,"Stream"],[4,"Info"],[4,"Consumed"],[8,"StreamError"],[8,"ParseError"],[4,"UnexpectedParse"],[4,"StringStreamError"],[3,"Tracked"],[4,"FastResult"],[3,"BufferedStream"],[8,"Positioner"],[8,"RangePositioner"],[8,"DefaultPositioned"],[3,"State"],[3,"IndexPositioner"],[3,"SourcePosition"],[8,"Positioned"],[8,"StreamOnce"],[8,"Resetable"],[8,"RangeStreamOnce"],[8,"FullRangeStream"],[8,"Range"],[3,"PartialStream"],[3,"SliceStream"],[3,"IteratorStream"],[3,"ReadStream"],[3,"PointerOffset"],[3,"TakeUntilByte"],[3,"TakeUntilByte2"],[3,"TakeUntilByte3"],[3,"take_until_bytes"],[8,"ChoiceParser"],[8,"StrLike"],[3,"FromStr"],[3,"Recognize"],[4,"TakeRange"],[3,"Count"],[3,"SkipCount"],[3,"SkipCountMinMax"],[3,"Iter"],[3,"SkipUntil"],[3,"PartialState1"],[3,"PartialState2"],[3,"PartialState3"],[3,"PartialState4"],[3,"PartialState5"],[3,"PartialState6"],[3,"PartialState7"],[3,"PartialState8"],[3,"PartialState9"],[3,"PartialState10"],[3,"PartialState11"],[3,"PartialState12"],[8,"Parser"],[3,"U16"],[3,"U32"],[3,"U64"],[3,"I16"],[3,"I32"],[3,"I64"],[3,"F32"],[3,"F64"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Bytes"],[3,"BytesCmp"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Str"],[3,"StrCmp"],[3,"Choice"],[3,"Or"],[3,"Optional"],[3,"NotFollowedBy"],[3,"Try"],[3,"LookAhead"],[3,"Map"],[3,"FlatMap"],[3,"AndThen"],[3,"Recognize"],[3,"NoPartial"],[3,"Ignore"],[3,"AnyPartialState"],[3,"AnyPartialStateParser"],[3,"AnySendPartialState"],[3,"AnySendPartialStateParser"],[3,"Lazy"],[3,"Factory"],[3,"Opaque"],[3,"Unexpected"],[3,"Message"],[3,"Expected"],[3,"Silent"],[3,"FnParser"],[3,"EnvParser"],[3,"Any"],[3,"Satisfy"],[3,"SatisfyMap"],[3,"Token"],[3,"Tokens"],[3,"Tokens2"],[3,"Position"],[3,"OneOf"],[3,"NoneOf"],[3,"Value"],[3,"Eof"],[3,"Range"],[3,"RecognizeWithValue"],[3,"Take"],[3,"TakeWhile"],[3,"TakeWhile1"],[3,"TakeUntilRange"],[3,"TakeFn"],[3,"CountMinMax"],[3,"Many"],[3,"Many1"],[3,"SkipMany"],[3,"SkipMany1"],[3,"SepBy"],[3,"SepBy1"],[3,"SepEndBy"],[3,"SepEndBy1"],[3,"Chainl1"],[3,"Chainr1"],[3,"TakeUntil"],[3,"EscapedState"],[3,"Escaped"],[3,"With"],[3,"Skip"],[3,"Between"],[3,"Then"],[3,"ThenPartial"]]},\
"console":{"doc":"console is a library for Rust that provides access to …","i":[[4,"Key","console","Key mapping",null,null],[13,"Unknown","","",0,null],[13,"UnknownEscSeq","","Unrecognized sequence containing Esc and a list of chars",0,null],[13,"ArrowLeft","","",0,null],[13,"ArrowRight","","",0,null],[13,"ArrowUp","","",0,null],[13,"ArrowDown","","",0,null],[13,"Enter","","",0,null],[13,"Escape","","",0,null],[13,"Backspace","","",0,null],[13,"Home","","",0,null],[13,"End","","",0,null],[13,"Tab","","",0,null],[13,"BackTab","","",0,null],[13,"Del","","",0,null],[13,"Insert","","",0,null],[13,"PageUp","","",0,null],[13,"PageDown","","",0,null],[13,"Char","","",0,null],[5,"user_attended","","A fast way to check if the application has a user …",null,[[]]],[5,"user_attended_stderr","","A fast way to check if the application has a user …",null,[[]]],[3,"Term","","Abstraction around a terminal.",null,null],[4,"TermFamily","","The family of the terminal.",null,null],[13,"File","","Redirected to a file or file like thing.",1,null],[13,"UnixTerm","","A standard unix terminal.",1,null],[13,"WindowsConsole","","A cmd.exe like windows console.",1,null],[13,"Dummy","","A dummy terminal (for instance on wasm)",1,null],[3,"TermFeatures","","Gives access to the terminal features.",null,null],[4,"TermTarget","","Where the term is writing.",null,null],[13,"Stdout","","",2,null],[13,"Stderr","","",2,null],[5,"colors_enabled","","Returns <code>true</code> if colors should be enabled for stdout.",null,[[]]],[5,"colors_enabled_stderr","","Returns <code>true</code> if colors should be enabled for stderr.",null,[[]]],[5,"measure_text_width","","Measure the width of a string in terminal characters.",null,[[]]],[5,"pad_str","","Pads a string to fill a certain number of characters.",null,[[["option",4],["alignment",4]],["cow",4]]],[5,"set_colors_enabled","","Forces colorization on or off for stdout.",null,[[]]],[5,"set_colors_enabled_stderr","","Forces colorization on or off for stderr.",null,[[]]],[5,"style","","Wraps an object for formatting for styling.",null,[[],["styledobject",3]]],[5,"truncate_str","","Truncates a string to a certain number of characters.",null,[[],["cow",4]]],[4,"Alignment","","Defines the alignment for padding operations.",null,null],[13,"Left","","",3,null],[13,"Center","","",3,null],[13,"Right","","",3,null],[4,"Attribute","","A terminal style attribute.",null,null],[13,"Bold","","",4,null],[13,"Dim","","",4,null],[13,"Italic","","",4,null],[13,"Underlined","","",4,null],[13,"Blink","","",4,null],[13,"Reverse","","",4,null],[13,"Hidden","","",4,null],[4,"Color","","A terminal color.",null,null],[13,"Black","","",5,null],[13,"Red","","",5,null],[13,"Green","","",5,null],[13,"Yellow","","",5,null],[13,"Blue","","",5,null],[13,"Magenta","","",5,null],[13,"Cyan","","",5,null],[13,"White","","",5,null],[13,"Color256","","",5,null],[3,"Emoji","","\\\"Intelligent\\\" emoji formatter.",null,null],[12,"0","","",6,null],[12,"1","","",6,null],[3,"Style","","A stored style that can be applied.",null,null],[3,"StyledObject","","A formatting wrapper that can be styled for a terminal.",null,null],[5,"strip_ansi_codes","","Helper function to strip ansi codes.",null,[[],["cow",4]]],[3,"AnsiCodeIterator","","An iterator over ansi codes in a string.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"into_iter","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"next","","",11,[[],["option",4]]],[11,"clone","","",0,[[],["key",4]]],[11,"clone","","",2,[[],["termtarget",4]]],[11,"clone","","",1,[[],["termfamily",4]]],[11,"clone","","",7,[[],["termfeatures",3]]],[11,"clone","","",8,[[],["term",3]]],[11,"clone","","",5,[[],["color",4]]],[11,"clone","","",4,[[],["attribute",4]]],[11,"clone","","",3,[[],["alignment",4]]],[11,"clone","","",9,[[],["style",3]]],[11,"clone","","",10,[[],["styledobject",3]]],[11,"clone","","",6,[[],["emoji",3]]],[11,"default","","",9,[[],["style",3]]],[11,"cmp","","",4,[[["attribute",4]],["ordering",4]]],[11,"eq","","",0,[[["key",4]]]],[11,"ne","","",0,[[["key",4]]]],[11,"eq","","",2,[[["termtarget",4]]]],[11,"eq","","",1,[[["termfamily",4]]]],[11,"eq","","",5,[[["color",4]]]],[11,"ne","","",5,[[["color",4]]]],[11,"eq","","",4,[[["attribute",4]]]],[11,"eq","","",3,[[["alignment",4]]]],[11,"eq","","",9,[[["style",3]]]],[11,"ne","","",9,[[["style",3]]]],[11,"partial_cmp","","",4,[[["attribute",4]],[["option",4],["ordering",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"read","","",8,[[],["result",6]]],[11,"write","","",8,[[],["result",6]]],[11,"flush","","",8,[[],["result",6]]],[11,"as_raw_fd","","",8,[[],["rawfd",6]]],[11,"is_attended","","Checks if this is a real user attended terminal (<code>isatty</code>)",7,[[]]],[11,"colors_supported","","Checks if colors are supported by this terminal.",7,[[]]],[11,"is_msys_tty","","Checks if this terminal is an msys terminal.",7,[[]]],[11,"wants_emoji","","Checks if this terminal wants emojis.",7,[[]]],[11,"family","","Returns the family of the terminal.",7,[[],["termfamily",4]]],[11,"stdout","","Return a new unbuffered terminal",8,[[],["term",3]]],[11,"stderr","","Return a new unbuffered terminal to stderr",8,[[],["term",3]]],[11,"buffered_stdout","","Return a new buffered terminal",8,[[],["term",3]]],[11,"buffered_stderr","","Return a new buffered terminal to stderr",8,[[],["term",3]]],[11,"style","","Returns the style for the term",8,[[],["style",3]]],[11,"target","","Returns the target",8,[[],["termtarget",4]]],[11,"write_line","","Writes a string to the terminal and adds a newline.",8,[[],["result",6]]],[11,"read_char","","Read a single character from the terminal",8,[[],["result",6]]],[11,"read_key","","Read a single key form the terminal.",8,[[],[["key",4],["result",6]]]],[11,"read_line","","Read one line of input.",8,[[],[["result",6],["string",3]]]],[11,"read_line_initial_text","","Read one line of input with initial text.",8,[[],[["result",6],["string",3]]]],[11,"read_secure_line","","Read securely a line of input.",8,[[],[["result",6],["string",3]]]],[11,"flush","","Flushes internal buffers.",8,[[],["result",6]]],[11,"is_term","","Checks if the terminal is indeed a terminal.",8,[[]]],[11,"features","","Checks for common terminal features.",8,[[],["termfeatures",3]]],[11,"size","","Returns the terminal size in rows and columns or gets …",8,[[]]],[11,"size_checked","","Returns the terminal size in rows and columns.",8,[[],["option",4]]],[11,"move_cursor_to","","Moves the cursor to <code>x</code> and <code>y</code>",8,[[],["result",6]]],[11,"move_cursor_up","","Moves the cursor up <code>n</code> lines",8,[[],["result",6]]],[11,"move_cursor_down","","Moves the cursor down <code>n</code> lines",8,[[],["result",6]]],[11,"move_cursor_left","","Moves the cursor left <code>n</code> lines",8,[[],["result",6]]],[11,"move_cursor_right","","Moves the cursor down <code>n</code> lines",8,[[],["result",6]]],[11,"clear_line","","Clears the current line.",8,[[],["result",6]]],[11,"clear_last_lines","","Clear the last <code>n</code> lines.",8,[[],["result",6]]],[11,"clear_screen","","Clears the entire screen.",8,[[],["result",6]]],[11,"clear_to_end_of_screen","","Clears the entire screen.",8,[[],["result",6]]],[11,"clear_chars","","Clears the last char in the the current line.",8,[[],["result",6]]],[11,"set_title","","Set the terminal title",8,[[["display",8]]]],[11,"show_cursor","","Makes cursor visible again",8,[[],["result",6]]],[11,"hide_cursor","","Hides cursor",8,[[],["result",6]]],[11,"new","","Returns an empty default style.",9,[[],["style",3]]],[11,"from_dotted_str","","Creates a style from a dotted string.",9,[[],["style",3]]],[11,"apply_to","","Apply the style to something that can be displayed.",9,[[],["styledobject",3]]],[11,"force_styling","","Forces styling on or off.",9,[[],["style",3]]],[11,"for_stderr","","Specifies that style is applying to something being …",9,[[],["style",3]]],[11,"for_stdout","","Specifies that style is applying to something being …",9,[[],["style",3]]],[11,"fg","","Sets a foreground color.",9,[[["color",4]],["style",3]]],[11,"bg","","Sets a background color.",9,[[["color",4]],["style",3]]],[11,"attr","","Adds a attr.",9,[[["attribute",4]],["style",3]]],[11,"black","","",9,[[],["style",3]]],[11,"red","","",9,[[],["style",3]]],[11,"green","","",9,[[],["style",3]]],[11,"yellow","","",9,[[],["style",3]]],[11,"blue","","",9,[[],["style",3]]],[11,"magenta","","",9,[[],["style",3]]],[11,"cyan","","",9,[[],["style",3]]],[11,"white","","",9,[[],["style",3]]],[11,"color256","","",9,[[],["style",3]]],[11,"bright","","",9,[[],["style",3]]],[11,"on_black","","",9,[[],["style",3]]],[11,"on_red","","",9,[[],["style",3]]],[11,"on_green","","",9,[[],["style",3]]],[11,"on_yellow","","",9,[[],["style",3]]],[11,"on_blue","","",9,[[],["style",3]]],[11,"on_magenta","","",9,[[],["style",3]]],[11,"on_cyan","","",9,[[],["style",3]]],[11,"on_white","","",9,[[],["style",3]]],[11,"on_color256","","",9,[[],["style",3]]],[11,"on_bright","","",9,[[],["style",3]]],[11,"bold","","",9,[[],["style",3]]],[11,"dim","","",9,[[],["style",3]]],[11,"italic","","",9,[[],["style",3]]],[11,"underlined","","",9,[[],["style",3]]],[11,"blink","","",9,[[],["style",3]]],[11,"reverse","","",9,[[],["style",3]]],[11,"hidden","","",9,[[],["style",3]]],[11,"force_styling","","Forces styling on or off.",10,[[],["styledobject",3]]],[11,"for_stderr","","Specifies that style is applying to something being …",10,[[],["styledobject",3]]],[11,"for_stdout","","Specifies that style is applying to something being …",10,[[],["styledobject",3]]],[11,"fg","","Sets a foreground color.",10,[[["color",4]],["styledobject",3]]],[11,"bg","","Sets a background color.",10,[[["color",4]],["styledobject",3]]],[11,"attr","","Adds a attr.",10,[[["attribute",4]],["styledobject",3]]],[11,"black","","",10,[[],["styledobject",3]]],[11,"red","","",10,[[],["styledobject",3]]],[11,"green","","",10,[[],["styledobject",3]]],[11,"yellow","","",10,[[],["styledobject",3]]],[11,"blue","","",10,[[],["styledobject",3]]],[11,"magenta","","",10,[[],["styledobject",3]]],[11,"cyan","","",10,[[],["styledobject",3]]],[11,"white","","",10,[[],["styledobject",3]]],[11,"color256","","",10,[[],["styledobject",3]]],[11,"bright","","",10,[[],["styledobject",3]]],[11,"on_black","","",10,[[],["styledobject",3]]],[11,"on_red","","",10,[[],["styledobject",3]]],[11,"on_green","","",10,[[],["styledobject",3]]],[11,"on_yellow","","",10,[[],["styledobject",3]]],[11,"on_blue","","",10,[[],["styledobject",3]]],[11,"on_magenta","","",10,[[],["styledobject",3]]],[11,"on_cyan","","",10,[[],["styledobject",3]]],[11,"on_white","","",10,[[],["styledobject",3]]],[11,"on_color256","","",10,[[],["styledobject",3]]],[11,"on_bright","","",10,[[],["styledobject",3]]],[11,"bold","","",10,[[],["styledobject",3]]],[11,"dim","","",10,[[],["styledobject",3]]],[11,"italic","","",10,[[],["styledobject",3]]],[11,"underlined","","",10,[[],["styledobject",3]]],[11,"blink","","",10,[[],["styledobject",3]]],[11,"reverse","","",10,[[],["styledobject",3]]],[11,"hidden","","",10,[[],["styledobject",3]]],[11,"new","","",6,[[],["emoji",3]]],[11,"new","","Creates a new ansi code iterator.",11,[[],["ansicodeiterator",3]]],[11,"current_slice","","Returns the string slice up to the current match.",11,[[]]],[11,"rest_slice","","Returns the string slice from the current match to the …",11,[[]]]],"p":[[4,"Key"],[4,"TermFamily"],[4,"TermTarget"],[4,"Alignment"],[4,"Attribute"],[4,"Color"],[3,"Emoji"],[3,"TermFeatures"],[3,"Term"],[3,"Style"],[3,"StyledObject"],[3,"AnsiCodeIterator"]]},\
"crossbeam_channel":{"doc":"Multi-producer multi-consumer channels for message …","i":[[5,"after","crossbeam_channel","Creates a receiver that delivers a message after a …",null,[[["duration",3]],[["instant",3],["receiver",3]]]],[5,"at","","Creates a receiver that delivers a message at a certain …",null,[[["instant",3]],[["instant",3],["receiver",3]]]],[5,"never","","Creates a receiver that never delivers messages.",null,[[],["receiver",3]]],[5,"tick","","Creates a receiver that delivers messages periodically.",null,[[["duration",3]],[["instant",3],["receiver",3]]]],[5,"bounded","","Creates a channel of bounded capacity.",null,[[]]],[5,"unbounded","","Creates a channel of unbounded capacity.",null,[[]]],[3,"IntoIter","","A blocking iterator over messages in a channel.",null,null],[3,"Iter","","A blocking iterator over messages in a channel.",null,null],[3,"TryIter","","A non-blocking iterator over messages in a channel.",null,null],[3,"Receiver","","The receiving side of a channel.",null,null],[3,"Sender","","The sending side of a channel.",null,null],[3,"Select","","Selects from a set of channel operations.",null,null],[3,"SelectedOperation","","A selected operation that needs to be completed.",null,null],[3,"ReadyTimeoutError","","An error returned from the <code>ready_timeout</code> method.",null,null],[3,"SelectTimeoutError","","An error returned from the <code>select_timeout</code> method.",null,null],[3,"TryReadyError","","An error returned from the <code>try_ready</code> method.",null,null],[3,"TrySelectError","","An error returned from the <code>try_select</code> method.",null,null],[3,"RecvError","","An error returned from the <code>recv</code> method.",null,null],[4,"RecvTimeoutError","","An error returned from the <code>recv_timeout</code> method.",null,null],[13,"Timeout","","A message could not be received because the channel is …",0,null],[13,"Disconnected","","The message could not be received because the channel is …",0,null],[4,"TryRecvError","","An error returned from the <code>try_recv</code> method.",null,null],[13,"Empty","","A message could not be received because the channel is …",1,null],[13,"Disconnected","","The message could not be received because the channel is …",1,null],[3,"SendError","","An error returned from the <code>send</code> method.",null,null],[12,"0","","",2,null],[4,"SendTimeoutError","","An error returned from the <code>send_timeout</code> method.",null,null],[13,"Timeout","","The message could not be sent because the channel is full …",3,null],[13,"Disconnected","","The message could not be sent because the channel is …",3,null],[4,"TrySendError","","An error returned from the <code>try_send</code> method.",null,null],[13,"Full","","The message could not be sent because the channel is full.",4,null],[13,"Disconnected","","The message could not be sent because the channel is …",4,null],[14,"select","","Selects from a set of channel operations.",null,null],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"drop","","",5,[[]]],[11,"drop","","",6,[[]]],[11,"drop","","",16,[[]]],[11,"from","","",4,[[["senderror",3]],["trysenderror",4]]],[11,"from","","",3,[[["senderror",3]],["sendtimeouterror",4]]],[11,"from","","",1,[[["recverror",3]],["tryrecverror",4]]],[11,"from","","",0,[[["recverror",3]],["recvtimeouterror",4]]],[11,"into_iter","","",6,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"next","","",8,[[],["option",4]]],[11,"next","","",9,[[],["option",4]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[]]],[11,"clone","","",2,[[],["senderror",3]]],[11,"clone","","",4,[[],["trysenderror",4]]],[11,"clone","","",3,[[],["sendtimeouterror",4]]],[11,"clone","","",10,[[],["recverror",3]]],[11,"clone","","",1,[[],["tryrecverror",4]]],[11,"clone","","",0,[[],["recvtimeouterror",4]]],[11,"clone","","",11,[[],["tryselecterror",3]]],[11,"clone","","",12,[[],["selecttimeouterror",3]]],[11,"clone","","",13,[[],["tryreadyerror",3]]],[11,"clone","","",14,[[],["readytimeouterror",3]]],[11,"clone","","",15,[[],["select",3]]],[11,"default","","",15,[[],["select",3]]],[11,"eq","","",2,[[["senderror",3]]]],[11,"ne","","",2,[[["senderror",3]]]],[11,"eq","","",4,[[["trysenderror",4]]]],[11,"ne","","",4,[[["trysenderror",4]]]],[11,"eq","","",3,[[["sendtimeouterror",4]]]],[11,"ne","","",3,[[["sendtimeouterror",4]]]],[11,"eq","","",10,[[["recverror",3]]]],[11,"eq","","",1,[[["tryrecverror",4]]]],[11,"eq","","",0,[[["recvtimeouterror",4]]]],[11,"eq","","",11,[[["tryselecterror",3]]]],[11,"eq","","",12,[[["selecttimeouterror",3]]]],[11,"eq","","",13,[[["tryreadyerror",3]]]],[11,"eq","","",14,[[["readytimeouterror",3]]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"try_send","","Attempts to send a message into the channel without …",5,[[],[["trysenderror",4],["result",4]]]],[11,"send","","Blocks the current thread until a message is sent or the …",5,[[],[["result",4],["senderror",3]]]],[11,"send_timeout","","Waits for a message to be sent into the channel, but only …",5,[[["duration",3]],[["sendtimeouterror",4],["result",4]]]],[11,"send_deadline","","Waits for a message to be sent into the channel, but only …",5,[[["instant",3]],[["sendtimeouterror",4],["result",4]]]],[11,"is_empty","","Returns <code>true</code> if the channel is empty.",5,[[]]],[11,"is_full","","Returns <code>true</code> if the channel is full.",5,[[]]],[11,"len","","Returns the number of messages in the channel.",5,[[]]],[11,"capacity","","If the channel is bounded, returns its capacity.",5,[[],["option",4]]],[11,"same_channel","","Returns <code>true</code> if senders belong to the same channel.",5,[[["sender",3]]]],[11,"try_recv","","Attempts to receive a message from the channel without …",6,[[],[["result",4],["tryrecverror",4]]]],[11,"recv","","Blocks the current thread until a message is received or …",6,[[],[["recverror",3],["result",4]]]],[11,"recv_timeout","","Waits for a message to be received from the channel, but …",6,[[["duration",3]],[["result",4],["recvtimeouterror",4]]]],[11,"recv_deadline","","Waits for a message to be received from the channel, but …",6,[[["instant",3]],[["result",4],["recvtimeouterror",4]]]],[11,"is_empty","","Returns <code>true</code> if the channel is empty.",6,[[]]],[11,"is_full","","Returns <code>true</code> if the channel is full.",6,[[]]],[11,"len","","Returns the number of messages in the channel.",6,[[]]],[11,"capacity","","If the channel is bounded, returns its capacity.",6,[[],["option",4]]],[11,"iter","","A blocking iterator over messages in the channel.",6,[[],["iter",3]]],[11,"try_iter","","A non-blocking iterator over messages in the channel.",6,[[],["tryiter",3]]],[11,"same_channel","","Returns <code>true</code> if receivers belong to the same channel.",6,[[["receiver",3]]]],[11,"into_inner","","Unwraps the message.",2,[[]]],[11,"into_inner","","Unwraps the message.",4,[[]]],[11,"is_full","","Returns <code>true</code> if the send operation failed because the …",4,[[]]],[11,"is_disconnected","","Returns <code>true</code> if the send operation failed because the …",4,[[]]],[11,"into_inner","","Unwraps the message.",3,[[]]],[11,"is_timeout","","Returns <code>true</code> if the send operation timed out.",3,[[]]],[11,"is_disconnected","","Returns <code>true</code> if the send operation failed because the …",3,[[]]],[11,"is_empty","","Returns <code>true</code> if the receive operation failed because the …",1,[[]]],[11,"is_disconnected","","Returns <code>true</code> if the receive operation failed because the …",1,[[]]],[11,"is_timeout","","Returns <code>true</code> if the receive operation timed out.",0,[[]]],[11,"is_disconnected","","Returns <code>true</code> if the receive operation failed because the …",0,[[]]],[11,"new","","Creates an empty list of channel operations for selection.",15,[[],["select",3]]],[11,"send","","Adds a send operation.",15,[[["sender",3]]]],[11,"recv","","Adds a receive operation.",15,[[["receiver",3]]]],[11,"remove","","Removes a previously added operation.",15,[[]]],[11,"try_select","","Attempts to select one of the operations without blocking.",15,[[],[["tryselecterror",3],["selectedoperation",3],["result",4]]]],[11,"select","","Blocks until one of the operations becomes ready and …",15,[[],["selectedoperation",3]]],[11,"select_timeout","","Blocks for a limited time until one of the operations …",15,[[["duration",3]],[["selecttimeouterror",3],["result",4],["selectedoperation",3]]]],[11,"select_deadline","","Blocks until a given deadline, or until one of the …",15,[[["instant",3]],[["selecttimeouterror",3],["result",4],["selectedoperation",3]]]],[11,"try_ready","","Attempts to find a ready operation without blocking.",15,[[],[["result",4],["tryreadyerror",3]]]],[11,"ready","","Blocks until one of the operations becomes ready.",15,[[]]],[11,"ready_timeout","","Blocks for a limited time until one of the operations …",15,[[["duration",3]],[["readytimeouterror",3],["result",4]]]],[11,"ready_deadline","","Blocks until a given deadline, or until one of the …",15,[[["instant",3]],[["readytimeouterror",3],["result",4]]]],[11,"index","","Returns the index of the selected operation.",16,[[]]],[11,"send","","Completes the send operation.",16,[[["sender",3]],[["result",4],["senderror",3]]]],[11,"recv","","Completes the receive operation.",16,[[["receiver",3]],[["recverror",3],["result",4]]]]],"p":[[4,"RecvTimeoutError"],[4,"TryRecvError"],[3,"SendError"],[4,"SendTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"Receiver"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"],[3,"Select"],[3,"SelectedOperation"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","i":[[3,"Injector","crossbeam_deque","An injector queue.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The queue was empty at the time of stealing.",0,null],[13,"Success","","At least one task was successfully stolen.",0,null],[13,"Retry","","The steal operation needs to be retried.",0,null],[3,"Stealer","","A stealer handle of a worker queue.",null,null],[3,"Worker","","A worker queue.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"drop","","",3,[[]]],[11,"clone","","",2,[[],["stealer",3]]],[11,"clone","","",0,[[],["steal",4]]],[11,"default","","",3,[[]]],[11,"eq","","",0,[[["steal",4]]]],[11,"ne","","",0,[[["steal",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"from_iter","","Consumes items until a <code>Success</code> is found and returns it.",0,[[],["steal",4]]],[11,"new_fifo","","Creates a FIFO worker queue.",1,[[],["worker",3]]],[11,"new_lifo","","Creates a LIFO worker queue.",1,[[],["worker",3]]],[11,"stealer","","Creates a stealer for this queue.",1,[[],["stealer",3]]],[11,"is_empty","","Returns <code>true</code> if the queue is empty.",1,[[]]],[11,"len","","Returns the number of tasks in the deque.",1,[[]]],[11,"push","","Pushes a task into the queue.",1,[[]]],[11,"pop","","Pops a task from the queue.",1,[[],["option",4]]],[11,"is_empty","","Returns <code>true</code> if the queue is empty.",2,[[]]],[11,"steal","","Steals a task from the queue.",2,[[],["steal",4]]],[11,"steal_batch","","Steals a batch of tasks and pushes them into another …",2,[[["worker",3]],["steal",4]]],[11,"steal_batch_and_pop","","Steals a batch of tasks, pushes them into another worker, …",2,[[["worker",3]],["steal",4]]],[11,"new","","Creates a new injector queue.",3,[[],["injector",3]]],[11,"push","","Pushes a task into the queue.",3,[[]]],[11,"steal","","Steals a task from the queue.",3,[[],["steal",4]]],[11,"steal_batch","","Steals a batch of tasks and pushes them into a worker.",3,[[["worker",3]],["steal",4]]],[11,"steal_batch_and_pop","","Steals a batch of tasks, pushes them into a worker, and …",3,[[["worker",3]],["steal",4]]],[11,"is_empty","","Returns <code>true</code> if the queue is empty.",3,[[]]],[11,"len","","Returns the number of tasks in the queue.",3,[[]]],[11,"is_empty","","Returns <code>true</code> if the queue was empty at the time of …",0,[[]]],[11,"is_success","","Returns <code>true</code> if at least one task was stolen.",0,[[]]],[11,"is_retry","","Returns <code>true</code> if the steal operation needs to be retried.",0,[[]]],[11,"success","","Returns the result of the operation, if successful.",0,[[],["option",4]]],[11,"or_else","","If no task was stolen, attempts another steal operation.",0,[[],["steal",4]]]],"p":[[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"Injector"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","i":[[8,"Pointable","crossbeam_epoch","Types that are pointed to by a single word.",null,null],[18,"ALIGN","","The alignment of pointer.",0,null],[16,"Init","","The type for initializers.",0,null],[10,"init","","Initializes a with the given initializer.",0,[[]]],[10,"deref","","Dereferences the given pointer.",0,[[]]],[10,"deref_mut","","Mutably dereferences the given pointer.",0,[[]]],[10,"drop","","Drops the object pointed to by the given pointer.",0,[[]]],[3,"Atomic","","An atomic pointer that can be safely shared between …",null,null],[3,"CompareExchangeError","","The error returned on failed compare-and-swap operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed …",1,null],[12,"new","","The new value, which the operation failed to store.",1,null],[3,"Owned","","An owned heap-allocated object.",null,null],[8,"Pointer","","A trait for either <code>Owned</code> or <code>Shared</code> pointers.",null,null],[10,"into_usize","","Returns the machine representation of the pointer.",2,[[]]],[10,"from_usize","","Returns a new pointer pointing to the tagged pointer <code>data</code>.",2,[[]]],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"LocalHandle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows …",null,[[],["guard",3]]],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[6,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",3,[[],["ordering",4]]],[10,"failure","","The ordering of the operation when it fails.",3,[[],["ordering",4]]],[5,"default_collector","","Returns the default global collector.",null,[[],["collector",3]]],[5,"is_pinned","","Returns <code>true</code> if the current thread is pinned.",null,[[]]],[5,"pin","","Pins the current thread.",null,[[],["guard",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"into_usize","","",5,[[]]],[11,"from_usize","","Returns a new pointer pointing to the tagged pointer <code>data</code>.",5,[[]]],[11,"into_usize","","",6,[[]]],[11,"from_usize","","",6,[[]]],[11,"drop","","",5,[[]]],[11,"drop","","",8,[[]]],[11,"drop","","",9,[[]]],[11,"as_mut","","",5,[[]]],[11,"as_ref","","",5,[[]]],[11,"from","","Returns a new atomic pointer pointing to <code>owned</code>.",4,[[["owned",3]]]],[11,"from","","",4,[[["box",3]]]],[11,"from","","",4,[[]]],[11,"from","","Returns a new atomic pointer pointing to <code>ptr</code>.",4,[[["shared",3]]]],[11,"from","","Returns a new atomic pointer pointing to <code>raw</code>.",4,[[]]],[11,"from","","",5,[[]]],[11,"from","","Returns a new owned pointer pointing to <code>b</code>.",5,[[["box",3]]]],[11,"from","","Returns a new pointer pointing to <code>raw</code>.",6,[[]]],[11,"clone","","Returns a copy of the atomic value.",4,[[]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[]]],[11,"clone","","Creates another reference to the same garbage collector.",7,[[]]],[11,"default","","",4,[[]]],[11,"default","","",6,[[]]],[11,"default","","",7,[[]]],[11,"cmp","","",6,[[],["ordering",4]]],[11,"eq","","",6,[[]]],[11,"eq","","Checks if both handles point to the same collector.",7,[[["collector",3]]]],[11,"partial_cmp","","",6,[[],[["ordering",4],["option",4]]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[18,"ALIGN","","The alignment of pointer.",0,null],[11,"new","","Allocates <code>value</code> on the heap and returns a new atomic …",4,[[],["atomic",3]]],[11,"init","","Allocates <code>value</code> on the heap and returns a new atomic …",4,[[],["atomic",3]]],[11,"null","","Returns a new null atomic pointer.",4,[[],["atomic",3]]],[11,"load","","Loads a <code>Shared</code> from the atomic pointer.",4,[[["guard",3],["ordering",4]],["shared",3]]],[11,"load_consume","","Loads a <code>Shared</code> from the atomic pointer using a \\\"consume\\\" …",4,[[["guard",3]],["shared",3]]],[11,"store","","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.",4,[[["pointer",8],["ordering",4]]]],[11,"swap","","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …",4,[[["guard",3],["pointer",8],["ordering",4]],["shared",3]]],[11,"compare_exchange","","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …",4,[[["shared",3],["guard",3],["ordering",4]],[["result",4],["shared",3],["compareexchangeerror",3]]]],[11,"compare_exchange_weak","","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …",4,[[["shared",3],["guard",3],["ordering",4]],[["result",4],["shared",3],["compareexchangeerror",3]]]],[11,"compare_and_set","","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …",4,[[["shared",3],["guard",3]],[["shared",3],["result",4],["compareandseterror",6]]]],[11,"compare_and_set_weak","","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …",4,[[["shared",3],["guard",3]],[["shared",3],["result",4],["compareandseterror",6]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current tag.",4,[[["guard",3],["ordering",4]],["shared",3]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current tag.",4,[[["guard",3],["ordering",4]],["shared",3]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current tag.",4,[[["guard",3],["ordering",4]],["shared",3]]],[11,"into_owned","","Takes ownership of the pointee.",4,[[],["owned",3]]],[11,"from_raw","","Returns a new owned pointer pointing to <code>raw</code>.",5,[[],["owned",3]]],[11,"into_box","","Converts the owned pointer into a <code>Box</code>.",5,[[],["box",3]]],[11,"new","","Allocates <code>value</code> on the heap and returns a new owned …",5,[[],["owned",3]]],[11,"init","","Allocates <code>value</code> on the heap and returns a new owned …",5,[[],["owned",3]]],[11,"into_shared","","Converts the owned pointer into a [<code>Shared</code>].",5,[[["guard",3]],["shared",3]]],[11,"tag","","Returns the tag stored within the pointer.",5,[[]]],[11,"with_tag","","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …",5,[[],["owned",3]]],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",6,[[]]],[11,"null","","Returns a new null pointer.",6,[[],["shared",3]]],[11,"is_null","","Returns <code>true</code> if the pointer is null.",6,[[]]],[11,"deref","","Dereferences the pointer.",6,[[]]],[11,"deref_mut","","Dereferences the pointer.",6,[[]]],[11,"as_ref","","Converts the pointer to a reference.",6,[[],["option",4]]],[11,"into_owned","","Takes ownership of the pointee.",6,[[],["owned",3]]],[11,"tag","","Returns the tag stored within the pointer.",6,[[]]],[11,"with_tag","","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …",6,[[],["shared",3]]],[11,"new","","Creates a new collector.",7,[[]]],[11,"register","","Registers a new handle for the collector.",7,[[],["localhandle",3]]],[11,"pin","","Pins the handle.",8,[[],["guard",3]]],[11,"is_pinned","","Returns <code>true</code> if the handle is pinned.",8,[[]]],[11,"collector","","Returns the <code>Collector</code> associated with this handle.",8,[[],["collector",3]]],[11,"defer","","Stores a function so that it can be executed at some …",9,[[]]],[11,"defer_unchecked","","Stores a function so that it can be executed at some …",9,[[]]],[11,"defer_destroy","","Stores a destructor for an object so that it can be …",9,[[["shared",3]]]],[11,"flush","","Clears up the thread-local cache of deferred functions by …",9,[[]]],[11,"repin","","Unpins and then immediately re-pins the thread.",9,[[]]],[11,"repin_after","","Temporarily unpins the thread, executes the given …",9,[[]]],[11,"collector","","Returns the <code>Collector</code> associated with this guard.",9,[[],[["option",4],["collector",3]]]]],"p":[[8,"Pointable"],[3,"CompareExchangeError"],[8,"Pointer"],[8,"CompareAndSetOrdering"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"LocalHandle"],[3,"Guard"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","i":[[0,"atomic","crossbeam_utils","Atomic types.",null,null],[3,"AtomicCell","crossbeam_utils::atomic","A thread-safe mutable memory location.",null,null],[8,"AtomicConsume","","Trait which allows reading from primitive atomic types …",null,null],[16,"Val","","Type returned by <code>load_consume</code>.",0,null],[10,"load_consume","","Loads a value from the atomic using a \\\"consume\\\" memory …",0,[[]]],[0,"sync","crossbeam_utils","Thread synchronization primitives.",null,null],[3,"Parker","crossbeam_utils::sync","A thread parking primitive.",null,null],[3,"Unparker","","Unparks a thread parked by the associated [<code>Parker</code>].",null,null],[3,"ShardedLock","","A sharded reader-writer lock.",null,null],[3,"ShardedLockReadGuard","","A guard used to release the shared read access of a […",null,null],[3,"ShardedLockWriteGuard","","A guard used to release the exclusive write access of a […",null,null],[3,"WaitGroup","","Enables threads to synchronize the beginning or end of …",null,null],[0,"thread","crossbeam_utils","Threads that can borrow variables from the stack.",null,null],[5,"scope","crossbeam_utils::thread","Creates a new scope for spawning threads.",null,[[],["result",6]]],[3,"Scope","","A scope for spawning threads.",null,null],[11,"spawn","","Spawns a scoped thread.",1,[[],["scopedjoinhandle",3]]],[11,"builder","","Creates a builder that can configure a thread before …",1,[[],["scopedthreadbuilder",3]]],[3,"ScopedThreadBuilder","","Configures the properties of a new thread.",null,null],[11,"name","","Sets the name for the new thread.",2,[[["string",3]],["scopedthreadbuilder",3]]],[11,"stack_size","","Sets the size of the stack for the new thread.",2,[[],["scopedthreadbuilder",3]]],[11,"spawn","","Spawns a scoped thread with this configuration.",2,[[],[["result",6],["scopedjoinhandle",3]]]],[3,"ScopedJoinHandle","","A handle that can be used to join its scoped thread.",null,null],[11,"join","","Waits for the thread to finish and returns its result.",3,[[],["result",6]]],[11,"thread","","Returns a handle to the underlying thread.",3,[[],["thread",3]]],[3,"CachePadded","crossbeam_utils","Pads and aligns a value to the length of a cache line.",null,null],[3,"Backoff","","Performs exponential backoff in spin loops.",null,null],[11,"from","crossbeam_utils::atomic","",4,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","crossbeam_utils","",5,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","crossbeam_utils::sync","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","crossbeam_utils::thread","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"drop","crossbeam_utils::sync","",11,[[]]],[11,"drop","","",12,[[]]],[11,"from","crossbeam_utils::atomic","",4,[[],["atomiccell",3]]],[11,"from","crossbeam_utils","",5,[[]]],[11,"from","crossbeam_utils::sync","",9,[[]]],[11,"clone","crossbeam_utils","",5,[[],["cachepadded",3]]],[11,"clone","crossbeam_utils::sync","",8,[[],["unparker",3]]],[11,"clone","","",12,[[],["waitgroup",3]]],[11,"default","crossbeam_utils::atomic","",4,[[],["atomiccell",3]]],[11,"default","crossbeam_utils","",5,[[],["cachepadded",3]]],[11,"default","","",6,[[],["backoff",3]]],[11,"default","crossbeam_utils::sync","",7,[[]]],[11,"default","","",9,[[],["shardedlock",3]]],[11,"default","","",12,[[]]],[11,"eq","crossbeam_utils","",5,[[["cachepadded",3]]]],[11,"ne","","",5,[[["cachepadded",3]]]],[11,"deref","","",5,[[]]],[11,"deref","crossbeam_utils::sync","",10,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","crossbeam_utils","",5,[[]]],[11,"deref_mut","crossbeam_utils::sync","",11,[[]]],[11,"fmt","crossbeam_utils::atomic","",4,[[["formatter",3]],["result",6]]],[11,"fmt","crossbeam_utils","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","crossbeam_utils::sync","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","crossbeam_utils::thread","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","crossbeam_utils::sync","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"hash","crossbeam_utils","",5,[[]]],[11,"as_pthread_t","crossbeam_utils::thread","",3,[[],["rawpthread",6]]],[11,"into_pthread_t","","",3,[[],["rawpthread",6]]],[11,"new","crossbeam_utils::atomic","Creates a new atomic cell initialized with <code>val</code>.",4,[[],["atomiccell",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",4,[[]]],[11,"is_lock_free","","Returns <code>true</code> if operations on values of this type are …",4,[[]]],[11,"store","","Stores <code>val</code> into the atomic cell.",4,[[]]],[11,"swap","","Stores <code>val</code> into the atomic cell and returns the previous …",4,[[]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this …",4,[[]]],[11,"take","","Takes the value of the atomic cell, leaving …",4,[[]]],[11,"load","","Loads a value from the atomic cell.",4,[[]]],[11,"compare_and_swap","","If the current value equals <code>current</code>, stores <code>new</code> into the …",4,[[]]],[11,"compare_exchange","","If the current value equals <code>current</code>, stores <code>new</code> into the …",4,[[],["result",4]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_add","","Increments the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_sub","","Decrements the current value by <code>val</code> and returns the …",4,[[]]],[11,"fetch_and","","Applies bitwise \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies bitwise \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies bitwise \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"fetch_and","","Applies logical \\\"and\\\" to the current value and returns …",4,[[]]],[11,"fetch_or","","Applies logical \\\"or\\\" to the current value and returns the …",4,[[]]],[11,"fetch_xor","","Applies logical \\\"xor\\\" to the current value and returns …",4,[[]]],[11,"new","crossbeam_utils","Pads and aligns a value to the length of a cache line.",5,[[],["cachepadded",3]]],[11,"into_inner","","Returns the inner value.",5,[[]]],[11,"new","","Creates a new <code>Backoff</code>.",6,[[]]],[11,"reset","","Resets the <code>Backoff</code>.",6,[[]]],[11,"spin","","Backs off in a lock-free loop.",6,[[]]],[11,"snooze","","Backs off in a blocking loop.",6,[[]]],[11,"is_completed","","Returns <code>true</code> if exponential backoff has completed and …",6,[[]]],[11,"new","crossbeam_utils::sync","Creates a new <code>Parker</code>.",7,[[],["parker",3]]],[11,"park","","Blocks the current thread until the token is made …",7,[[]]],[11,"park_timeout","","Blocks the current thread until the token is made …",7,[[["duration",3]]]],[11,"park_deadline","","Blocks the current thread until the token is made …",7,[[["instant",3]]]],[11,"unparker","","Returns a reference to an associated [<code>Unparker</code>].",7,[[],["unparker",3]]],[11,"into_raw","","Converts a <code>Parker</code> into a raw pointer.",7,[[["parker",3]]]],[11,"from_raw","","Converts a raw pointer into a <code>Parker</code>.",7,[[],["parker",3]]],[11,"unpark","","Atomically makes the token available if it is not already.",8,[[]]],[11,"into_raw","","Converts an <code>Unparker</code> into a raw pointer.",8,[[["unparker",3]]]],[11,"from_raw","","Converts a raw pointer into an <code>Unparker</code>.",8,[[],["unparker",3]]],[11,"new","","Creates a new sharded reader-writer lock.",9,[[],["shardedlock",3]]],[11,"into_inner","","Consumes this lock, returning the underlying data.",9,[[],["lockresult",6]]],[11,"is_poisoned","","Returns <code>true</code> if the lock is poisoned.",9,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",9,[[],["lockresult",6]]],[11,"try_read","","Attempts to acquire this lock with shared read access.",9,[[],[["trylockresult",6],["shardedlockreadguard",3]]]],[11,"read","","Locks with shared read access, blocking the current …",9,[[],[["lockresult",6],["shardedlockreadguard",3]]]],[11,"try_write","","Attempts to acquire this lock with exclusive write access.",9,[[],[["trylockresult",6],["shardedlockwriteguard",3]]]],[11,"write","","Locks with exclusive write access, blocking the current …",9,[[],[["lockresult",6],["shardedlockwriteguard",3]]]],[11,"new","","Creates a new wait group and returns the single reference …",12,[[]]],[11,"wait","","Drops this reference and waits until all other references …",12,[[]]]],"p":[[8,"AtomicConsume"],[3,"Scope"],[3,"ScopedThreadBuilder"],[3,"ScopedJoinHandle"],[3,"AtomicCell"],[3,"CachePadded"],[3,"Backoff"],[3,"Parker"],[3,"Unparker"],[3,"ShardedLock"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[3,"WaitGroup"]]},\
"determinator":{"doc":"Figure out what packages in a Rust workspace changed …","i":[[0,"errors","determinator","Error types returned by the determinator.",null,null],[3,"RulesError","determinator::errors","An error that occurred while resolving a set of …",null,null],[11,"rule_index","","Returns the index of the determinator rule that failed to …",0,[[],["ruleindex",4]]],[11,"kind","","Returns the kind of error that occurred.",0,[[],["ruleserrorkind",4]]],[4,"RulesErrorKind","","The kind of error that occurred while parsing a set of …",null,null],[13,"ResolveRef","","An error occurred while resolving a reference in guppy.",1,null],[13,"GlobParse","","An error occurred while parsing a glob.",1,null],[12,"glob","determinator::errors::RulesErrorKind","The glob that failed to parse, if one was present.",2,null],[12,"err","","The error that occurred while parsing the glob.",2,null],[0,"rules","determinator","Custom rules for the target determinator.",null,null],[3,"DeterminatorRules","determinator::rules","Rules for the target determinator.",null,null],[12,"path_rules","","A list of rules that each changed file path is matched …",3,null],[12,"package_rules","","A list of rules that each affected package is matched …",3,null],[11,"parse","","Deserializes determinator rules from the given TOML …",3,[[],[["result",4],["error",3]]]],[18,"DEFAULT_RULES_TOML","","Contains the default rules in a TOML file format.",3,null],[11,"default_rules","","Returns the default rules.",3,[[],["determinatorrules",3]]],[3,"PathRule","","Path-based rules for the determinator.",null,null],[12,"globs","","The globs to match against.",4,null],[12,"mark_changed","","The set of packages to mark as changed.",4,null],[12,"post_rule","","The operation to perform after applying the rule. Set to …",4,null],[4,"DeterminatorPostRule","","The operation to perform after applying the rule.",null,null],[13,"Skip","","Skip all further processing of this path.",5,null],[13,"SkipRules","","Skip rule processing but continue attempting to match the …",5,null],[13,"Fallthrough","","Continue to apply further rules.",5,null],[3,"PackageRule","","Package-based rules for the determinator.",null,null],[12,"on_affected","","The package names to match against.",6,null],[12,"mark_changed","","The set of packages to mark as changed.",6,null],[4,"DeterminatorMarkChanged","","The set of packages to mark as changed.",null,null],[13,"Packages","","Mark the workspace packages with the given names as …",7,null],[13,"All","","Mark the entire tree as changed. Skip over all further …",7,null],[4,"PathMatch","","The result of matching a file path against a determinator.",null,null],[13,"RuleMatchedAll","","The path matched a rule, causing everything to be rebuilt.",8,null],[13,"RuleMatched","","The path matched a rule and ancestor-based matching was …",8,null],[13,"AncestorMatched","","The path was matched to a package through inspecting the …",8,null],[13,"NoMatches","","The path wasn\'t matched to a rule or a nearby package, …",8,null],[4,"RuleIndex","","The index of a rule.",null,null],[13,"CustomPath","","The custom path rule at this index.",9,null],[13,"DefaultPath","","The default path rule at this index.",9,null],[13,"Package","","The package rule at this index.",9,null],[3,"Determinator","determinator","Determine target dependencies from changed files and …",null,null],[3,"DeterminatorSet","","The result of a <code>Determinator</code> computation.",null,null],[12,"affected_set","","The packages that were affected, directly or indirectly. …",10,null],[12,"path_changed_set","","The packages that were marked changed because a file …",10,null],[12,"summary_changed_set","","The packages that were marked changed becuase a simulated …",10,null],[3,"Utf8Paths0","","A store for null-separated paths.",null,null],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"borrow_replacement","","",11,[[]]],[11,"clone_boxed","","",11,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",11,[[]]],[11,"clone_boxed","","",11,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",11,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"borrow_replacement","","",10,[[]]],[11,"clone_boxed","","",10,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",10,[[]]],[11,"clone_boxed","","",10,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",10,[[]]],[11,"from","determinator::errors","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"borrow_replacement","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"borrow_replacement","","",1,[[]]],[11,"from","determinator","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"equivalent","","",12,[[]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"borrow_replacement","","",12,[[]]],[11,"clone_boxed","","",12,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",12,[[]]],[11,"clone_boxed","","",12,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",12,[[]]],[11,"from","determinator::rules","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"borrow_replacement","","",3,[[]]],[11,"clone_boxed","","",3,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",3,[[]]],[11,"clone_boxed","","",3,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"equivalent","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"borrow_replacement","","",4,[[]]],[11,"clone_boxed","","",4,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",4,[[]]],[11,"clone_boxed","","",4,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"equivalent","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"borrow_replacement","","",5,[[]]],[11,"clone_boxed","","",5,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",5,[[]]],[11,"clone_boxed","","",5,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"equivalent","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"borrow_replacement","","",6,[[]]],[11,"clone_boxed","","",6,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",6,[[]]],[11,"clone_boxed","","",6,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"equivalent","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"borrow_replacement","","",7,[[]]],[11,"clone_boxed","","",7,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",7,[[]]],[11,"clone_boxed","","",7,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"borrow_replacement","","",8,[[]]],[11,"clone_boxed","","",8,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",8,[[]]],[11,"clone_boxed","","",8,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"equivalent","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"borrow_replacement","","",9,[[]]],[11,"clone_boxed","","",9,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",9,[[]]],[11,"clone_boxed","","",9,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",9,[[]]],[11,"clone","determinator","",11,[[],["determinator",3]]],[11,"clone","","",10,[[],["determinatorset",3]]],[11,"clone","","",12,[[],["utf8paths0",3]]],[11,"clone","determinator::rules","",3,[[],["determinatorrules",3]]],[11,"clone","","",4,[[],["pathrule",3]]],[11,"clone","","",5,[[],["determinatorpostrule",4]]],[11,"clone","","",6,[[],["packagerule",3]]],[11,"clone","","",7,[[],["determinatormarkchanged",4]]],[11,"clone","","",8,[[],["pathmatch",4]]],[11,"clone","","",9,[[],["ruleindex",4]]],[11,"default","","",3,[[]]],[11,"default","","",5,[[]]],[11,"cmp","determinator","",12,[[["utf8paths0",3]],["ordering",4]]],[11,"cmp","determinator::rules","",9,[[["ruleindex",4]],["ordering",4]]],[11,"eq","determinator","",12,[[["utf8paths0",3]]]],[11,"ne","","",12,[[["utf8paths0",3]]]],[11,"eq","determinator::rules","",3,[[["determinatorrules",3]]]],[11,"ne","","",3,[[["determinatorrules",3]]]],[11,"eq","","",4,[[["pathrule",3]]]],[11,"ne","","",4,[[["pathrule",3]]]],[11,"eq","","",5,[[["determinatorpostrule",4]]]],[11,"eq","","",6,[[["packagerule",3]]]],[11,"ne","","",6,[[["packagerule",3]]]],[11,"eq","","",7,[[["determinatormarkchanged",4]]]],[11,"ne","","",7,[[["determinatormarkchanged",4]]]],[11,"eq","","",8,[[["pathmatch",4]]]],[11,"ne","","",8,[[["pathmatch",4]]]],[11,"eq","","",9,[[["ruleindex",4]]]],[11,"ne","","",9,[[["ruleindex",4]]]],[11,"partial_cmp","determinator","",12,[[["utf8paths0",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["utf8paths0",3]]]],[11,"le","","",12,[[["utf8paths0",3]]]],[11,"gt","","",12,[[["utf8paths0",3]]]],[11,"ge","","",12,[[["utf8paths0",3]]]],[11,"partial_cmp","determinator::rules","",9,[[["ruleindex",4]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["ruleindex",4]]]],[11,"le","","",9,[[["ruleindex",4]]]],[11,"gt","","",9,[[["ruleindex",4]]]],[11,"ge","","",9,[[["ruleindex",4]]]],[11,"fmt","determinator","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","determinator::errors","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","determinator","",12,[[["formatter",3]],["result",6]]],[11,"fmt","determinator::rules","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","determinator::errors","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","determinator::rules","",9,[[["formatter",3]],["result",6]]],[11,"hash","","",9,[[]]],[11,"source","determinator::errors","",0,[[],[["option",4],["error",8]]]],[11,"serialize","determinator::rules","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"new","determinator","Creates a new instance of <code>Determinator</code> with old and new …",11,[[["packagegraph",3],["packagegraph",3]]]],[11,"add_changed_paths","","Adds a list of changed paths. This list is used as a …",11,[[]]],[11,"match_path","","Returns what <em>would</em> happen if a given path was added to …",11,[[],["pathmatch",4]]],[11,"set_rules","","Processes and configures determinator rules.",11,[[["determinatorrules",3]],[["ruleserror",3],["result",4]]]],[11,"set_cargo_options","","Configures Cargo options.",11,[[["cargooptions",3]]]],[11,"default_cargo_options","","Returns the default Cargo options used by the …",11,[[],["cargooptions",3]]],[11,"set_features_only","","Configures features-only packages that are used in build …",11,[[["standardfeatures",4]],[["result",4],["error",4]]]],[11,"compute","","Uses the old and new sets and the list of changed files …",11,[[],["determinatorset",3]]],[11,"new","","Creates a new instance of <code>Utf8Paths0</code> from a string with …",12,[[]]],[11,"from_bytes","","Creates a new instance of <code>Utf8Paths0</code> from a <code>Vec<u8></code>, …",12,[[],["result",4]]],[11,"new_forward_slashes","","Creates a new instance of <code>Utf8Paths0</code>, converting <code>/</code> to <code>\\\\</code> …",12,[[]]],[11,"iter","","Iterates over the paths in this buffer.",12,[[],[["iterator",8],["box",3]]]]],"p":[[3,"RulesError"],[4,"RulesErrorKind"],[13,"GlobParse"],[3,"DeterminatorRules"],[3,"PathRule"],[4,"DeterminatorPostRule"],[3,"PackageRule"],[4,"DeterminatorMarkChanged"],[4,"PathMatch"],[4,"RuleIndex"],[3,"DeterminatorSet"],[3,"Determinator"],[3,"Utf8Paths0"]]},\
"dialoguer":{"doc":"dialoguer is a library for Rust that helps you build …","i":[[0,"theme","dialoguer","Customizes the rendering of the elements.",null,null],[8,"Theme","dialoguer::theme","Implements a theme for dialoguer.",null,null],[11,"format_prompt","","Formats a prompt.",0,[[["write",8]],["result",6]]],[11,"format_error","","Formats out an error.",0,[[["write",8]],["result",6]]],[11,"format_confirm_prompt","","Formats a confirm prompt.",0,[[["write",8],["option",4]],["result",6]]],[11,"format_confirm_prompt_selection","","Formats a confirm prompt after selection.",0,[[["write",8],["option",4]],["result",6]]],[11,"format_input_prompt","","Formats an input prompt.",0,[[["write",8],["option",4]],["result",6]]],[11,"format_input_prompt_selection","","Formats an input prompt after selection.",0,[[["write",8]],["result",6]]],[11,"format_password_prompt","","Formats a password prompt.",0,[[["write",8]],["result",6]]],[11,"format_password_prompt_selection","","Formats a password prompt after selection.",0,[[["write",8]],["result",6]]],[11,"format_select_prompt","","Formats a select prompt.",0,[[["write",8]],["result",6]]],[11,"format_select_prompt_selection","","Formats a select prompt after selection.",0,[[["write",8]],["result",6]]],[11,"format_multi_select_prompt","","Formats a multi select prompt.",0,[[["write",8]],["result",6]]],[11,"format_sort_prompt","","Formats a sort prompt.",0,[[["write",8]],["result",6]]],[11,"format_multi_select_prompt_selection","","Formats a multi_select prompt after selection.",0,[[["write",8]],["result",6]]],[11,"format_sort_prompt_selection","","Formats a sort prompt after selection.",0,[[["write",8]],["result",6]]],[11,"format_select_prompt_item","","Formats a select prompt item.",0,[[["write",8]],["result",6]]],[11,"format_multi_select_prompt_item","","Formats a multi select prompt item.",0,[[["write",8]],["result",6]]],[11,"format_sort_prompt_item","","Formats a sort prompt item.",0,[[["write",8]],["result",6]]],[3,"SimpleTheme","","The default theme.",null,null],[3,"ColorfulTheme","","A colorful theme",null,null],[12,"defaults_style","","The style for default values",1,null],[12,"prompt_style","","The style for prompt",1,null],[12,"prompt_prefix","","Prompt prefix value and style",1,null],[12,"prompt_suffix","","Prompt suffix value and style",1,null],[12,"success_prefix","","Prompt on success prefix value and style",1,null],[12,"success_suffix","","Prompt on success suffix value and style",1,null],[12,"error_prefix","","Error prefix value and style",1,null],[12,"error_style","","The style for error message",1,null],[12,"hint_style","","The style for hints",1,null],[12,"values_style","","The style for values on prompt success",1,null],[12,"active_item_style","","The style for active items",1,null],[12,"inactive_item_style","","The style for inactive items",1,null],[12,"active_item_prefix","","Active item in select prefix value and style",1,null],[12,"inactive_item_prefix","","Inctive item in select prefix value and style",1,null],[12,"checked_item_prefix","","Checked item in multi select prefix value and style",1,null],[12,"unchecked_item_prefix","","Unchecked item in multi select prefix value and style",1,null],[12,"picked_item_prefix","","Picked item in sort prefix value and style",1,null],[12,"unpicked_item_prefix","","Unpicked item in sort prefix value and style",1,null],[12,"inline_selections","","Show the selections from certain prompts inline",1,null],[3,"Editor","dialoguer","Launches the default editor to edit a string.",null,null],[3,"Confirm","","Renders a confirm prompt.",null,null],[3,"Input","","Renders an input prompt.",null,null],[3,"MultiSelect","","Renders a multi select prompt.",null,null],[3,"Password","","Renders a password input prompt.",null,null],[3,"Select","","Renders a select prompt.",null,null],[3,"Sort","","Renders a sort prompt.",null,null],[8,"Validator","","Trait for input validators.",null,null],[16,"Err","","",2,null],[10,"validate","","Invoked with the value to validate.",2,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","dialoguer::theme","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"format_prompt","","Formats a prompt.",1,[[["write",8]],["result",6]]],[11,"format_error","","Formats an error",1,[[["write",8]],["result",6]]],[11,"format_input_prompt","","Formats an input prompt.",1,[[["write",8],["option",4]],["result",6]]],[11,"format_confirm_prompt","","Formats a confirm prompt.",1,[[["write",8],["option",4]],["result",6]]],[11,"format_confirm_prompt_selection","","Formats a confirm prompt after selection.",1,[[["write",8],["option",4]],["result",6]]],[11,"format_input_prompt_selection","","Formats an input prompt after selection.",1,[[["write",8]],["result",6]]],[11,"format_password_prompt_selection","","Formats a password prompt after selection.",1,[[["write",8]],["result",6]]],[11,"format_multi_select_prompt_selection","","Formats a multi select prompt after selection.",1,[[["write",8]],["result",6]]],[11,"format_select_prompt_item","","Formats a select prompt item.",1,[[["write",8]],["result",6]]],[11,"format_multi_select_prompt_item","","Formats a multi select prompt item.",1,[[["write",8]],["result",6]]],[11,"format_sort_prompt_item","","Formats a sort prompt item.",1,[[["write",8]],["result",6]]],[11,"default","dialoguer","",3,[[],["editor",3]]],[11,"default","","",4,[[],["confirm",3]]],[11,"default","","",5,[[],["input",3]]],[11,"default","","",6,[[],["multiselect",3]]],[11,"default","","",7,[[],["password",3]]],[11,"default","","",8,[[],["select",3]]],[11,"default","","",9,[[],["sort",3]]],[11,"default","dialoguer::theme","",1,[[],["colorfultheme",3]]],[11,"new","dialoguer","Creates a new editor.",3,[[],["editor",3]]],[11,"executable","","Sets a specific editor executable.",3,[[["asref",8],["osstr",3]],["editor",3]]],[11,"extension","","Sets a specific extension",3,[[],["editor",3]]],[11,"require_save","","Enables or disables the save requirement.",3,[[],["editor",3]]],[11,"trim_newlines","","Enables or disables trailing newline stripping.",3,[[],["editor",3]]],[11,"edit","","Launches the editor to edit a string.",3,[[],[["option",4],["result",6]]]],[11,"new","","Creates a confirm prompt.",4,[[],["confirm",3]]],[11,"with_theme","","Creates a confirm prompt with a specific theme.",4,[[["theme",8]],["confirm",3]]],[11,"with_prompt","","Sets the confirm prompt.",4,[[["string",3],["into",8]],["confirm",3]]],[11,"with_text","","",4,[[],["confirm",3]]],[11,"wait_for_newline","","Sets when to react to user input.",4,[[],["confirm",3]]],[11,"default","","Sets a default.",4,[[],["confirm",3]]],[11,"show_default","","Disables or enables the default value display.",4,[[],["confirm",3]]],[11,"interact","","Enables user interaction and returns the result.",4,[[],["result",6]]],[11,"interact_opt","","Enables user interaction and returns the result.",4,[[],[["option",4],["result",6]]]],[11,"interact_on","","Like interact but allows a specific terminal to be set.",4,[[["term",3]],["result",6]]],[11,"interact_on_opt","","Like interact_opt but allows a specific terminal to be …",4,[[["term",3]],[["option",4],["result",6]]]],[11,"new","","Creates an input prompt.",5,[[],["input",3]]],[11,"with_theme","","Creates an input prompt with a specific theme.",5,[[["theme",8]],["input",3]]],[11,"with_prompt","","Sets the input prompt.",5,[[["string",3],["into",8]],["input",3]]],[11,"with_initial_text","","Sets initial text that user can accept or erase.",5,[[["string",3],["into",8]],["input",3]]],[11,"default","","Sets a default.",5,[[],["input",3]]],[11,"allow_empty","","Enables or disables an empty input",5,[[],["input",3]]],[11,"show_default","","Disables or enables the default value display.",5,[[],["input",3]]],[11,"validate_with","","Registers a validator.",5,[[],["input",3]]],[11,"interact_text","","Enables the user to enter a printable ascii sequence and …",5,[[],["result",6]]],[11,"interact_text_on","","Like <code>interact_text</code> but allows a specific terminal to be …",5,[[["term",3]],["result",6]]],[11,"interact","","Enables user interaction and returns the result.",5,[[],["result",6]]],[11,"interact_on","","Like <code>interact</code> but allows a specific terminal to be set.",5,[[["term",3]],["result",6]]],[11,"new","","Creates a multi select prompt.",6,[[],["multiselect",3]]],[11,"with_theme","","Creates a multi select prompt with a specific theme.",6,[[["theme",8]],["multiselect",3]]],[11,"paged","","Enables or disables paging",6,[[],["multiselect",3]]],[11,"clear","","Sets the clear behavior of the menu.",6,[[],["multiselect",3]]],[11,"defaults","","Sets a defaults for the menu.",6,[[],["multiselect",3]]],[11,"item","","Add a single item to the selector.",6,[[["tostring",8]],["multiselect",3]]],[11,"item_checked","","Add a single item to the selector with a default checked …",6,[[["tostring",8]],["multiselect",3]]],[11,"items","","Adds multiple items to the selector.",6,[[],["multiselect",3]]],[11,"items_checked","","Adds multiple items to the selector with checked state",6,[[],["multiselect",3]]],[11,"with_prompt","","Prefaces the menu with a prompt.",6,[[["string",3],["into",8]],["multiselect",3]]],[11,"interact","","Enables user interaction and returns the result.",6,[[],[["vec",3],["result",6]]]],[11,"interact_on","","Like interact but allows a specific terminal to be set.",6,[[["term",3]],[["vec",3],["result",6]]]],[11,"new","","Creates a password input prompt.",7,[[],["password",3]]],[11,"with_theme","","Creates a password input prompt with a specific theme.",7,[[["theme",8]],["password",3]]],[11,"with_prompt","","Sets the password input prompt.",7,[[["string",3],["into",8]],["password",3]]],[11,"with_confirmation","","Enables confirmation prompting.",7,[[],["password",3]]],[11,"allow_empty_password","","Allows/Disables empty password.",7,[[],["password",3]]],[11,"interact","","Enables user interaction and returns the result.",7,[[],[["result",6],["string",3]]]],[11,"interact_on","","Like <code>interact</code> but allows a specific terminal to be set.",7,[[["term",3]],[["result",6],["string",3]]]],[11,"new","","Creates a select prompt builder with default theme.",8,[[],["select",3]]],[11,"with_theme","","Creates a select prompt builder with a specific theme.",8,[[["theme",8]],["select",3]]],[11,"paged","","Enables or disables paging",8,[[],["select",3]]],[11,"clear","","Indicates whether select menu should be erased from the …",8,[[],["select",3]]],[11,"default","","Sets initial selected element when select menu is rendered",8,[[],["select",3]]],[11,"item","","Add a single item to the selector.",8,[[["tostring",8]],["select",3]]],[11,"items","","Adds multiple items to the selector.",8,[[],["select",3]]],[11,"with_prompt","","Sets the select prompt.",8,[[["string",3],["into",8]],["select",3]]],[11,"interact","","Enables user interaction and returns the result.",8,[[],["result",6]]],[11,"interact_opt","","Enables user interaction and returns the result.",8,[[],[["option",4],["result",6]]]],[11,"interact_on","","Like interact but allows a specific terminal to be set.",8,[[["term",3]],["result",6]]],[11,"interact_on_opt","","Like interact_opt but allows a specific terminal to be …",8,[[["term",3]],[["option",4],["result",6]]]],[11,"new","","Creates a sort prompt.",9,[[],["sort",3]]],[11,"with_theme","","Creates a sort prompt with a specific theme.",9,[[["theme",8]],["sort",3]]],[11,"paged","","Enables or disables paging",9,[[],["sort",3]]],[11,"clear","","Sets the clear behavior of the menu.",9,[[],["sort",3]]],[11,"item","","Add a single item to the selector.",9,[[["tostring",8]],["sort",3]]],[11,"items","","Adds multiple items to the selector.",9,[[],["sort",3]]],[11,"with_prompt","","Prefaces the menu with a prompt.",9,[[["string",3],["into",8]],["sort",3]]],[11,"interact","","Enables user interaction and returns the result.",9,[[],[["vec",3],["result",6]]]],[11,"interact_on","","Like interact but allows a specific terminal to be set.",9,[[["term",3]],[["vec",3],["result",6]]]]],"p":[[8,"Theme"],[3,"ColorfulTheme"],[8,"Validator"],[3,"Editor"],[3,"Confirm"],[3,"Input"],[3,"MultiSelect"],[3,"Password"],[3,"Select"],[3,"Sort"],[3,"SimpleTheme"]]},\
"diff":{"doc":"","i":[[4,"Result","diff","A fragment of a computed diff.",null,null],[13,"Left","","",0,null],[13,"Both","","",0,null],[13,"Right","","",0,null],[5,"slice","","Computes the diff between two slices.",null,[[],[["result",4],["vec",3]]]],[5,"lines","","Computes the diff between the lines of two strings.",null,[[],[["vec",3],["result",4]]]],[5,"chars","","Computes the diff between the chars of two strings.",null,[[],[["vec",3],["result",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[],["result",4]]],[11,"eq","","",0,[[["result",4]]]],[11,"ne","","",0,[[["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"Result"]]},\
"diffus":{"doc":"","i":[[0,"diffable_impls","diffus","",null,null],[0,"borrow","diffus::diffable_impls","",null,null],[0,"collection","","",null,null],[0,"map","","",null,null],[0,"option","","",null,null],[0,"primitives","","",null,null],[0,"set","","",null,null],[0,"string","","",null,null],[0,"edit","diffus","",null,null],[0,"collection","diffus::edit","",null,null],[4,"Edit","diffus::edit::collection","",null,null],[13,"Copy","","",0,null],[13,"Insert","","",0,null],[13,"Remove","","",0,null],[13,"Change","","",0,null],[11,"is_copy","","",0,[[]]],[11,"is_insert","","",0,[[]]],[11,"is_remove","","",0,[[]]],[11,"is_change","","",0,[[]]],[11,"copy","","",0,[[],["option",4]]],[11,"insert","","",0,[[],["option",4]]],[11,"remove","","",0,[[],["option",4]]],[11,"change","","",0,[[],["option",4]]],[0,"enm","diffus::edit","",null,null],[4,"Edit","diffus::edit::enm","",null,null],[13,"Copy","","",1,null],[13,"VariantChanged","","",1,null],[13,"AssociatedChanged","","",1,null],[11,"is_copy","","",1,[[]]],[11,"is_variant_changed","","",1,[[]]],[11,"is_associated_changed","","",1,[[]]],[11,"variant_changed","","",1,[[],["option",4]]],[11,"associated_change","","",1,[[],["option",4]]],[0,"map","diffus::edit","",null,null],[4,"Edit","diffus::edit::map","",null,null],[13,"Copy","","",2,null],[13,"Insert","","",2,null],[13,"Remove","","",2,null],[13,"Change","","",2,null],[11,"is_insert","","",2,[[]]],[11,"is_remove","","",2,[[]]],[11,"is_copy","","",2,[[]]],[11,"is_change","","",2,[[]]],[11,"insert","","",2,[[],["option",4]]],[11,"remove","","",2,[[],["option",4]]],[11,"change","","",2,[[],["option",4]]],[11,"copy","","",2,[[],["option",4]]],[0,"set","diffus::edit","",null,null],[4,"Edit","diffus::edit::set","",null,null],[13,"Copy","","",3,null],[13,"Insert","","",3,null],[13,"Remove","","",3,null],[11,"is_copy","","",3,[[]]],[11,"is_insert","","",3,[[]]],[11,"is_remove","","",3,[[]]],[11,"copy","","",3,[[],["option",4]]],[11,"insert","","",3,[[],["option",4]]],[11,"remove","","",3,[[],["option",4]]],[0,"string","diffus::edit","",null,null],[4,"Edit","diffus::edit::string","",null,null],[13,"Copy","","",4,null],[13,"Insert","","",4,null],[13,"Remove","","",4,null],[11,"is_copy","","",4,[[]]],[11,"is_insert","","",4,[[]]],[11,"is_remove","","",4,[[]]],[11,"copy","","",4,[[],["option",4]]],[11,"insert","","",4,[[],["option",4]]],[11,"remove","","",4,[[],["option",4]]],[4,"Edit","diffus::edit","",null,null],[13,"Copy","","",5,null],[13,"Change","","",5,null],[11,"is_copy","","",5,[[]]],[11,"copy","","",5,[[],["option",4]]],[11,"is_change","","",5,[[]]],[11,"change","","",5,[[],["option",4]]],[0,"same","diffus","",null,null],[8,"Diffable","","",null,null],[16,"Diff","","",6,null],[10,"diff","","",6,[[],["edit",4]]],[8,"Same","","",null,null],[10,"same","","",7,[[]]],[11,"from","diffus::edit::collection","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","diffus::edit::enm","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","diffus::edit::map","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","diffus::edit::set","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","diffus::edit::string","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","diffus::edit","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into","","",5,[[],["edit",4]]],[11,"clone","diffus::edit::string","",4,[[],["edit",4]]],[11,"eq","diffus::edit::collection","",0,[[["edit",4]]]],[11,"ne","","",0,[[["edit",4]]]],[11,"eq","diffus::edit::enm","",1,[[["edit",4]]]],[11,"ne","","",1,[[["edit",4]]]],[11,"eq","diffus::edit::map","",2,[[["edit",4]]]],[11,"ne","","",2,[[["edit",4]]]],[11,"eq","diffus::edit::set","",3,[[["edit",4]]]],[11,"ne","","",3,[[["edit",4]]]],[11,"eq","diffus::edit::string","",4,[[["edit",4]]]],[11,"ne","","",4,[[["edit",4]]]],[11,"eq","diffus::edit","",5,[[["edit",4]]]],[11,"ne","","",5,[[["edit",4]]]],[11,"fmt","diffus::edit::collection","",0,[[["formatter",3]],["result",6]]],[11,"fmt","diffus::edit::enm","",1,[[["formatter",3]],["result",6]]],[11,"fmt","diffus::edit::map","",2,[[["formatter",3]],["result",6]]],[11,"fmt","diffus::edit::set","",3,[[["formatter",3]],["result",6]]],[11,"fmt","diffus::edit::string","",4,[[["formatter",3]],["result",6]]],[11,"fmt","diffus::edit","",5,[[["formatter",3]],["result",6]]]],"p":[[4,"Edit"],[4,"Edit"],[4,"Edit"],[4,"Edit"],[4,"Edit"],[4,"Edit"],[8,"Diffable"],[8,"Same"]]},\
"diffy":{"doc":"Tools for finding and manipulating differences between …","i":[[5,"apply","diffy","Apply a <code>Patch</code> to a base image",null,[[["patch",3]],[["result",4],["string",3],["applyerror",3]]]],[5,"apply_bytes","","Apply a non-utf8 <code>Patch</code> to a base image",null,[[["patch",3]],[["vec",3],["result",4],["applyerror",3]]]],[3,"ApplyError","","An error returned when <code>apply</code>ing a <code>Patch</code> fails",null,null],[5,"create_patch","","Create a patch between two texts.",null,[[],["patch",3]]],[5,"create_patch_bytes","","Create a patch between two potentially non-utf8 texts",null,[[],["patch",3]]],[3,"DiffOptions","","A collection of options for modifying the way a diff is …",null,null],[5,"merge","","Merge two files given a common ancestor.",null,[[],[["result",4],["string",3]]]],[5,"merge_bytes","","Perform a 3-way merge between potentially non-utf8 texts",null,[[],[["vec",3],["result",4]]]],[4,"ConflictStyle","","Style used when rendering a conflict",null,null],[13,"Merge","","Renders conflicting lines from both files, separated by …",0,null],[13,"Diff3","","Renders conflicting lines from both files including lines …",0,null],[3,"MergeOptions","","A collection of options for modifying the way a merge is …",null,null],[3,"Hunk","","Represents a group of differing lines between two files",null,null],[3,"HunkRange","","The range of lines in a file for a particular <code>Hunk</code>.",null,null],[4,"Line","","A line in either the old file, new file, or both.",null,null],[13,"Context","","A line providing context in the diff which is present in …",1,null],[13,"Delete","","A line deleted from the old file",1,null],[13,"Insert","","A line inserted to the new file",1,null],[3,"ParsePatchError","","An error returned when parsing a <code>Patch</code> using …",null,null],[3,"Patch","","Representation of all the differences between two files",null,null],[3,"PatchFormatter","","Struct used to adjust the formatting of a <code>Patch</code>",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","","",0,[[],["conflictstyle",4]]],[11,"clone","","",7,[[]]],[11,"clone","","",8,[[]]],[11,"clone","","",9,[[],["hunkrange",3]]],[11,"clone","","",1,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[]]],[11,"default","","",5,[[]]],[11,"eq","","",7,[[["patch",3]]]],[11,"ne","","",7,[[["patch",3]]]],[11,"eq","","",8,[[["hunk",3]]]],[11,"ne","","",8,[[["hunk",3]]]],[11,"eq","","",9,[[["hunkrange",3]]]],[11,"ne","","",9,[[["hunkrange",3]]]],[11,"eq","","",1,[[["line",4]]]],[11,"ne","","",1,[[["line",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"new","","Construct a new <code>DiffOptions</code> with default settings",3,[[]]],[11,"set_context_len","","Set the number of context lines that should be used when …",3,[[]]],[11,"create_patch","","Produce a Patch between two texts based on the configured …",3,[[],["patch",3]]],[11,"create_patch_bytes","","Create a patch between two potentially non-utf8 texts",3,[[],["patch",3]]],[11,"new","","Constructs a new <code>MergeOptions</code> with default settings",4,[[]]],[11,"set_conflict_marker_length","","Set the length of the conflict markers used when …",4,[[]]],[11,"set_conflict_style","","Set the conflict style used when displaying a merge …",4,[[["conflictstyle",4]]]],[11,"merge","","Merge two files, given a common ancestor, based on the …",4,[[],[["result",4],["string",3]]]],[11,"merge_bytes","","Perform a 3-way merge between potentially non-utf8 texts",4,[[],[["vec",3],["result",4]]]],[11,"new","","Construct a new formatter",5,[[]]],[11,"with_color","","Enable formatting a patch with color",5,[[]]],[11,"fmt_patch","","Returns a <code>Display</code> impl which can be used to print a Patch",5,[[["patch",3]]]],[11,"write_patch_into","","",5,[[["write",8],["patch",3]],["result",6]]],[11,"original","","Return the name of the old file",7,[[],["option",4]]],[11,"modified","","Return the name of the new file",7,[[],["option",4]]],[11,"hunks","","Returns the hunks in the patch",7,[[]]],[11,"to_bytes","","Convert a <code>Patch</code> into bytes",7,[[],["vec",3]]],[11,"from_str","","Parse a <code>Patch</code> from a string",7,[[],[["result",4],["parsepatcherror",3],["patch",3]]]],[11,"from_bytes","","Parse a <code>Patch</code> from bytes",7,[[],[["parsepatcherror",3],["patch",3],["result",4]]]],[11,"old_range","","Returns the corresponding range for the old file in the …",8,[[],["hunkrange",3]]],[11,"new_range","","Returns the corresponding range for the new file in the …",8,[[],["hunkrange",3]]],[11,"function_context","","Returns the function context (if any) for the hunk",8,[[],["option",4]]],[11,"lines","","Returns the lines in the hunk",8,[[]]],[11,"range","","Returns the range as a <code>ops::Range</code>",9,[[],["range",3]]],[11,"start","","Returns the starting line number of the range (inclusive)",9,[[]]],[11,"end","","Returns the ending line number of the range (exclusive)",9,[[]]],[11,"len","","Returns the number of lines in the range",9,[[]]],[11,"is_empty","","Returns <code>true</code> if the range is empty (has a length of <code>0</code>)",9,[[]]]],"p":[[4,"ConflictStyle"],[4,"Line"],[3,"ApplyError"],[3,"DiffOptions"],[3,"MergeOptions"],[3,"PatchFormatter"],[3,"ParsePatchError"],[3,"Patch"],[3,"Hunk"],[3,"HunkRange"]]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","i":[[4,"Either","either","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …",null,null],[13,"Left","","A value of type <code>L</code>.",0,null],[13,"Right","","A value of type <code>R</code>.",0,null],[11,"is_left","","Return true if the value is the <code>Left</code> variant.",0,[[]]],[11,"is_right","","Return true if the value is the <code>Right</code> variant.",0,[[]]],[11,"left","","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.",0,[[],["option",4]]],[11,"right","","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.",0,[[],["option",4]]],[11,"as_ref","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.",0,[[],["either",4]]],[11,"as_mut","","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.",0,[[],["either",4]]],[11,"flip","","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.",0,[[],["either",4]]],[11,"map_left","","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …",0,[[],["either",4]]],[11,"map_right","","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …",0,[[],["either",4]]],[11,"either","","Apply one of two functions depending on contents, …",0,[[]]],[11,"either_with","","Like <code>either</code>, but provide some context to whichever of the …",0,[[]]],[11,"left_and_then","","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …",0,[[],["either",4]]],[11,"right_and_then","","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …",0,[[],["either",4]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[],["either",4]]],[11,"left_or","","Return left value or given value",0,[[]]],[11,"left_or_default","","Return left or a default",0,[[]]],[11,"left_or_else","","Returns left value or computes it from a closure",0,[[]]],[11,"right_or","","Return right value or given value",0,[[]]],[11,"right_or_default","","Return right or a default",0,[[]]],[11,"right_or_else","","Returns right value or computes it from a closure",0,[[]]],[11,"unwrap_left","","Returns the left value",0,[[]]],[11,"unwrap_right","","Returns the right value",0,[[]]],[11,"expect_left","","Returns the left value",0,[[]]],[11,"expect_right","","Returns the right value",0,[[]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[]]],[11,"map","","Map <code>f</code> over the contained value and return the result in …",0,[[],["either",4]]],[14,"try_left","","Macro for unwrapping the left side of an <code>Either</code>, which …",null,null],[14,"try_right","","Dual to <code>try_left!</code>, see its documentation for more …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[],["path",3]]],[11,"as_mut","","",0,[[],["osstr",3]]],[11,"as_mut","","",0,[[],["cstr",3]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[],["path",3]]],[11,"as_ref","","",0,[[],["osstr",3]]],[11,"as_ref","","",0,[[],["cstr",3]]],[11,"as_ref","","",0,[[]]],[11,"from","","",0,[[["result",4]]]],[11,"into","","",0,[[],["result",4]]],[11,"next_back","","",0,[[],["option",4]]],[11,"extend","","",0,[[]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"fold","","",0,[[]]],[11,"count","","",0,[[]]],[11,"last","","",0,[[],["option",4]]],[11,"nth","","",0,[[],["option",4]]],[11,"collect","","",0,[[]]],[11,"all","","",0,[[]]],[11,"clone","","",0,[[],["either",4]]],[11,"cmp","","",0,[[["either",4]],["ordering",4]]],[11,"eq","","",0,[[["either",4]]]],[11,"ne","","",0,[[["either",4]]]],[11,"partial_cmp","","",0,[[["either",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["either",4]]]],[11,"le","","",0,[[["either",4]]]],[11,"gt","","",0,[[["either",4]]]],[11,"ge","","",0,[[["either",4]]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"description","","",0,[[]]],[11,"cause","","",0,[[],[["error",8],["option",4]]]],[11,"fill_buf","","",0,[[],["result",6]]],[11,"consume","","",0,[[]]],[11,"read","","",0,[[],["result",6]]],[11,"read_to_end","","",0,[[["vec",3]],["result",6]]],[11,"write","","",0,[[],["result",6]]],[11,"flush","","",0,[[],["result",6]]]],"p":[[4,"Either"]]},\
"fixedbitset":{"doc":"<code>FixedBitSet</code> is a simple fixed size set of bits.","i":[[8,"IndexRange","fixedbitset","<strong>IndexRange</strong> is implemented by Rust\'s built-in range types, …",null,null],[11,"start","","Start index (inclusive)",0,[[],["option",4]]],[11,"end","","End index (exclusive)",0,[[],["option",4]]],[3,"FixedBitSet","","<code>FixedBitSet</code> is a simple fixed size set of bits that each …",null,null],[11,"with_capacity","","Create a new <strong>FixedBitSet</strong> with a specific number of bits, …",1,[[]]],[11,"grow","","Grow capacity to <strong>bits</strong>, all new bits initialized to zero",1,[[]]],[11,"len","","Return the length of the <code>FixedBitSet</code> in bits.",1,[[]]],[11,"contains","","Return <strong>true</strong> if the bit is enabled in the <strong>FixedBitSet</strong>, <strong>…",1,[[]]],[11,"clear","","Clear all bits.",1,[[]]],[11,"insert","","Enable <code>bit</code>.",1,[[]]],[11,"put","","Enable <code>bit</code>, and return its previous value.",1,[[]]],[11,"toggle","","Toggle <code>bit</code> (inverting its state).",1,[[]]],[11,"set","","<strong>Panics</strong> if <strong>bit</strong> is out of bounds.",1,[[]]],[11,"copy_bit","","Copies boolean value from specified bit to the specified …",1,[[]]],[11,"count_ones","","Count the number of set bits in the given bit range.",1,[[["indexrange",8]]]],[11,"set_range","","Sets every bit in the given range to the given state (…",1,[[["indexrange",8]]]],[11,"insert_range","","Enables every bit in the given range.",1,[[["indexrange",8]]]],[11,"as_slice","","View the bitset as a slice of <code>u32</code> blocks",1,[[]]],[11,"as_mut_slice","","View the bitset as a mutable slice of <code>u32</code> blocks. Writing …",1,[[]]],[11,"ones","","Iterates over all enabled bits.",1,[[],["ones",3]]],[11,"intersection","","Returns a lazy iterator over the intersection of two …",1,[[["fixedbitset",3]],["intersection",3]]],[11,"union","","Returns a lazy iterator over the union of two <code>FixedBitSet</code>…",1,[[["fixedbitset",3]],["union",3]]],[11,"difference","","Returns a lazy iterator over the difference of two …",1,[[["fixedbitset",3]],["difference",3]]],[11,"symmetric_difference","","Returns a lazy iterator over the symmetric difference of …",1,[[["fixedbitset",3]],["symmetricdifference",3]]],[11,"union_with","","In-place union of two <code>FixedBitSet</code>s.",1,[[["fixedbitset",3]]]],[11,"intersect_with","","In-place intersection of two <code>FixedBitSet</code>s.",1,[[["fixedbitset",3]]]],[11,"symmetric_difference_with","","In-place symmetric difference of two <code>FixedBitSet</code>s.",1,[[["fixedbitset",3]]]],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>…",1,[[["fixedbitset",3]]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code>…",1,[[["fixedbitset",3]]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another, i.e. …",1,[[["fixedbitset",3]]]],[3,"Difference","","An iterator producing elements in the difference of two …",null,null],[3,"SymmetricDifference","","An iterator producing elements in the symmetric …",null,null],[3,"Intersection","","An iterator producing elements in the intersection of two …",null,null],[3,"Union","","An iterator producing elements in the union of two sets.",null,null],[3,"Ones","","An  iterator producing the indices of the set bit in a …",null,null],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[["fixedbitset",3]]]],[11,"ne","","",1,[[["fixedbitset",3]]]],[11,"cmp","","",1,[[["fixedbitset",3]],["ordering",4]]],[11,"partial_cmp","","",1,[[["fixedbitset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["fixedbitset",3]]]],[11,"le","","",1,[[["fixedbitset",3]]]],[11,"gt","","",1,[[["fixedbitset",3]]]],[11,"ge","","",1,[[["fixedbitset",3]]]],[11,"bitand_assign","","",1,[[]]],[11,"bitor_assign","","",1,[[]]],[11,"bitxor_assign","","",1,[[]]],[11,"index","","",1,[[]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",4,[[],["option",4]]],[11,"next","","",5,[[],["option",4]]],[11,"next","","",6,[[],["option",4]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"clone","","",1,[[]]],[11,"default","","",1,[[],["fixedbitset",3]]],[11,"start","","Start index (inclusive)",0,[[],["option",4]]],[11,"end","","End index (exclusive)",0,[[],["option",4]]]],"p":[[8,"IndexRange"],[3,"FixedBitSet"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Ones"]]},\
"fixture_manager":{"doc":"","i":[[0,"context","fixture_manager","",null,null],[8,"ContextImpl","fixture_manager::context","",null,null],[16,"IterArgs","","",0,null],[16,"IterItem","","",0,null],[16,"Existing","","",0,null],[10,"dir_name","","",0,[[["jsonfixture",3]],["utf8pathbuf",3]]],[10,"file_name","","",0,[[["jsonfixture",3]],["string",3]]],[10,"iter","","",0,[[["jsonfixture",3]],[["iterator",8],["box",3]]]],[10,"parse_existing","","",0,[[["utf8path",3],["string",3]],["result",6]]],[10,"is_changed","","",0,[[]]],[10,"diff","","",0,[[["option",4],["jsonfixture",3]],["string",3]]],[10,"write_to_string","","",0,[[["string",3],["jsonfixture",3]],["result",6]]],[8,"ContextDiff","","",null,null],[3,"GenerateContext","","",null,null],[11,"new","","",1,[[["jsonfixture",3]],["result",6]]],[3,"ContextItem","","",null,null],[11,"path","","",2,[[],["utf8path",3]]],[11,"is_changed","","",2,[[]]],[11,"diff","","",2,[[],["string",3]]],[11,"write_to_path","","",2,[[],["result",6]]],[0,"hakari_toml","fixture_manager","",null,null],[3,"HakariTomlContext","fixture_manager::hakari_toml","",null,null],[3,"HakariTomlItem","","",null,null],[0,"summaries","fixture_manager","",null,null],[3,"SummaryContext","fixture_manager::summaries","",null,null],[3,"FixtureManager","fixture_manager","",null,null],[11,"exec","","",3,[[],["result",6]]],[5,"list","","",null,[[],["result",6]]],[3,"GenerateSummariesOpts","","",null,null],[12,"count","","Number of summaries to generate",4,null],[12,"generate_opts","","",4,null],[18,"DEFAULT_COUNT_STR","","The default value of the <code>count</code> field, as a string.",4,null],[11,"default_count","","The default value of the <code>count</code> field.",4,[[]]],[3,"GenerateHakariOpts","","",null,null],[12,"count","","Number of options to generate",5,null],[12,"generate_opts","","",5,null],[18,"DEFAULT_COUNT_STR","","The default value of the <code>count</code> field, as a string.",5,null],[11,"default_count","","The default value of the <code>count</code> field.",5,[[]]],[3,"GenerateOpts","","",null,null],[12,"mode","","Execution mode (check, force or generate)",6,null],[12,"fixtures","","Only generate outputs for these fixtures",6,null],[4,"GenerateMode","","",null,null],[13,"Generate","","",7,null],[13,"Check","","",7,null],[13,"Force","","",7,null],[11,"variants","","",7,[[]]],[11,"exec","","",4,[[],["result",6]]],[11,"exec","","",5,[[],["result",6]]],[11,"exec","","",6,[[],["result",6]]],[11,"from","fixture_manager::context","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"borrow_replacement","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"borrow_replacement","","",2,[[]]],[11,"from","fixture_manager::hakari_toml","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"borrow_replacement","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"borrow_replacement","","",9,[[]]],[11,"from","fixture_manager::summaries","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"borrow_replacement","","",10,[[]]],[11,"from","fixture_manager","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"borrow_replacement","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"borrow_replacement","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"borrow_replacement","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"borrow_replacement","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"equivalent","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"borrow_replacement","","",7,[[]]],[11,"clone_boxed","","",7,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",7,[[]]],[11,"clone_boxed","","",7,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",7,[[]]],[11,"dir_name","fixture_manager::hakari_toml","",8,[[["jsonfixture",3]],["utf8pathbuf",3]]],[11,"file_name","","",8,[[["jsonfixture",3]],["string",3]]],[11,"iter","","",8,[[["jsonfixture",3]],[["iterator",8],["box",3]]]],[11,"parse_existing","","",8,[[["utf8path",3],["string",3]],["result",6]]],[11,"is_changed","","",8,[[]]],[11,"diff","","",8,[[["option",4],["jsonfixture",3]],["string",3]]],[11,"write_to_string","","",8,[[["string",3],["jsonfixture",3]],["result",6]]],[11,"dir_name","fixture_manager::summaries","",10,[[["jsonfixture",3]],["utf8pathbuf",3]]],[11,"file_name","","",10,[[["jsonfixture",3]],["string",3]]],[11,"iter","","",10,[[["jsonfixture",3]],[["iterator",8],["box",3]]]],[11,"parse_existing","","",10,[[["utf8path",3],["string",3]],["result",6]]],[11,"is_changed","","",10,[[]]],[11,"diff","","",10,[[["option",4],["jsonfixture",3]],["string",3]]],[11,"write_to_string","","",10,[[["string",3],["jsonfixture",3]],["result",6]]],[11,"next","fixture_manager::context","",1,[[],["option",4]]],[11,"clone","fixture_manager","",7,[[],["generatemode",4]]],[11,"eq","","",7,[[["generatemode",4]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"hash","","",7,[[]]],[11,"from_str","","",7,[[],["result",4]]],[11,"clap","","",3,[[],["app",3]]],[11,"from_clap","","",3,[[["argmatches",3]]]],[11,"clap","","",4,[[],["app",3]]],[11,"from_clap","","",4,[[["argmatches",3]]]],[11,"clap","","",5,[[],["app",3]]],[11,"from_clap","","",5,[[["argmatches",3]]]],[11,"clap","","",6,[[],["app",3]]],[11,"from_clap","","",6,[[["argmatches",3]]]],[11,"augment_clap","","",3,[[["app",3]],["app",3]]],[11,"is_subcommand","","",3,[[]]],[11,"augment_clap","","",4,[[["app",3]],["app",3]]],[11,"is_subcommand","","",4,[[]]],[11,"augment_clap","","",5,[[["app",3]],["app",3]]],[11,"is_subcommand","","",5,[[]]],[11,"augment_clap","","",6,[[["app",3]],["app",3]]],[11,"is_subcommand","","",6,[[]]]],"p":[[8,"ContextImpl"],[3,"GenerateContext"],[3,"ContextItem"],[3,"FixtureManager"],[3,"GenerateSummariesOpts"],[3,"GenerateHakariOpts"],[3,"GenerateOpts"],[4,"GenerateMode"],[3,"HakariTomlContext"],[3,"HakariTomlItem"],[3,"SummaryContext"]]},\
"fixtures":{"doc":"Test fixtures for guppy.","i":[[0,"dep_helpers","fixtures","",null,null],[3,"DirectionDesc","fixtures::dep_helpers","Some of the messages are different based on whether we\'re …",null,null],[8,"GraphAssert","","",null,null],[16,"Id","","",0,null],[16,"Metadata","","",0,null],[16,"Query","","",0,null],[16,"Set","","",0,null],[18,"NAME","","",0,null],[10,"depends_on","","",0,[[],[["result",4],["error",4]]]],[10,"directly_depends_on","","",0,[[],[["result",4],["error",4]]]],[10,"is_cyclic","","",0,[[],[["result",4],["error",4]]]],[10,"query","","",0,[[["dependencydirection",4]]]],[11,"resolve","","",0,[[["dependencydirection",4]]]],[11,"ids","","",0,[[["dependencydirection",4]],["vec",3]]],[11,"root_ids","","",0,[[["dependencydirection",4]],["vec",3]]],[11,"root_metadatas","","",0,[[["dependencydirection",4]],["vec",3]]],[11,"assert_topo_order","","",0,[[["dependencydirection",4]]]],[11,"assert_depends_on_any","","",0,[[["dependencydirection",4]]]],[11,"assert_depends_on","","",0,[[["dependencydirection",4]]]],[11,"assert_not_depends_on","","",0,[[["dependencydirection",4]]]],[11,"assert_directly_depends_on","","",0,[[["dependencydirection",4]]]],[8,"GraphMetadata","","",null,null],[16,"Id","","",1,null],[10,"id","","",1,[[]]],[8,"GraphQuery","","",null,null],[16,"Id","","",2,null],[16,"Set","","",2,null],[10,"direction","","",2,[[],["dependencydirection",4]]],[10,"starts_from","","",2,[[]]],[10,"resolve","","",2,[[]]],[8,"GraphSet","","",null,null],[16,"Id","","",3,null],[16,"Metadata","","",3,null],[10,"len","","",3,[[]]],[11,"is_empty","","",3,[[]]],[10,"contains","","",3,[[]]],[10,"union","","",3,[[]]],[10,"intersection","","",3,[[]]],[10,"difference","","",3,[[]]],[10,"symmetric_difference","","",3,[[]]],[10,"ids","","",3,[[["dependencydirection",4]],["vec",3]]],[10,"metadatas","","",3,[[["dependencydirection",4]],["vec",3]]],[10,"root_ids","","",3,[[["dependencydirection",4]],["vec",3]]],[10,"root_metadatas","","",3,[[["dependencydirection",4]],["vec",3]]],[5,"assert_link_order","","Assert that links are presented in the expected order.",null,[[]]],[0,"details","fixtures","",null,null],[3,"FixtureDetails","fixtures::details","This captures metadata fields that are relevant for …",null,null],[11,"new","","",4,[[["hashmap",3],["packagedetails",3],["packageid",3]]]],[11,"with_workspace_members","","",4,[[]]],[11,"with_link_details","","",4,[[["hashmap",3],["linkdetails",3]]]],[11,"with_feature_graph_warnings","","",4,[[["featuregraphwarning",4],["vec",3]]]],[11,"with_cycles","","",4,[[["vec",3],["vec",3]]]],[11,"known_ids","","",4,[[]]],[11,"assert_workspace","","",4,[[["workspace",3]]]],[11,"assert_topo","","",4,[[["packagegraph",3]]]],[11,"assert_metadata","","",4,[[["packageid",3],["packagemetadata",3]]]],[11,"has_build_targets","","",4,[[["packageid",3]]]],[11,"assert_build_targets","","",4,[[["packagemetadata",3]]]],[11,"has_deps","","Returns true if the deps for this package are available …",4,[[["packageid",3]]]],[11,"assert_deps","","",4,[[["packageid",3],["packagegraph",3]]]],[11,"has_reverse_deps","","Returns true if the reverse deps for this package are …",4,[[["packageid",3]]]],[11,"assert_reverse_deps","","",4,[[["packageid",3],["packagegraph",3]]]],[11,"has_transitive_deps","","Returns true if the transitive deps for this package are …",4,[[["packageid",3]]]],[11,"assert_transitive_deps","","",4,[[["packageid",3],["packagegraph",3]]]],[11,"has_transitive_reverse_deps","","Returns true if the transitive reverse deps for this …",4,[[["packageid",3]]]],[11,"assert_transitive_reverse_deps","","",4,[[["packageid",3],["packagegraph",3]]]],[11,"assert_link_details","","",4,[[["packagegraph",3]]]],[11,"has_named_features","","",4,[[["packageid",3]]]],[11,"assert_named_features","","",4,[[["packageid",3],["packagegraph",3]]]],[11,"assert_feature_graph_warnings","","",4,[[["packagegraph",3]]]],[11,"assert_cycles","","",4,[[["packagegraph",3]]]],[3,"PackageDetails","","",null,null],[11,"new","","",5,[[["vec",3],["option",4]]]],[11,"with_workspace_path","","",5,[[]]],[11,"with_local_path","","",5,[[]]],[11,"with_crates_io","","",5,[[]]],[11,"with_external_source","","",5,[[]]],[11,"with_build_targets","","",5,[[["vec",3]]]],[11,"with_deps","","",5,[[["vec",3]]]],[11,"with_reverse_deps","","",5,[[["vec",3]]]],[11,"with_transitive_deps","","",5,[[["vec",3]]]],[11,"with_transitive_reverse_deps","","",5,[[["vec",3]]]],[11,"with_named_features","","",5,[[["vec",3]]]],[11,"insert_into","","",5,[[["hashmap",3]]]],[11,"id","","",5,[[],["packageid",3]]],[11,"deps","","",5,[[["dependencydirection",4]],["option",4]]],[11,"transitive_deps","","",5,[[["dependencydirection",4]],["option",4]]],[11,"assert_metadata","","",5,[[["packagemetadata",3]]]],[3,"LinkDetails","","",null,null],[11,"new","","",6,[[["packageid",3]]]],[11,"with_platform_status","","",6,[[["dependencykind",4],["platform",3],["platformresults",3]]]],[11,"with_features","","",6,[[["vec",3],["dependencykind",4]]]],[11,"insert_into","","",6,[[["hashmap",3]]]],[11,"assert_metadata","","",6,[[["packagelink",3]]]],[3,"PlatformResults","","",null,null],[11,"new","","",7,[[]]],[11,"with_feature_status","","",7,[[]]],[0,"json","fixtures","",null,null],[7,"METADATA1_PATH","fixtures::json","",null,null],[7,"METADATA1_TESTCRATE","","",null,null],[7,"METADATA1_DATATEST","","",null,null],[7,"METADATA1_REGION","","",null,null],[7,"METADATA1_DTOA","","",null,null],[7,"METADATA2_PATH","","",null,null],[7,"METADATA2_TESTCRATE","","",null,null],[7,"METADATA2_WALKDIR","","",null,null],[7,"METADATA2_QUOTE","","",null,null],[7,"METADATA_DUPS_PATH","","",null,null],[7,"METADATA_DUPS_TESTCRATE","","",null,null],[7,"METADATA_DUPS_LAZY_STATIC_1","","",null,null],[7,"METADATA_DUPS_LAZY_STATIC_02","","",null,null],[7,"METADATA_DUPS_BYTES_03","","",null,null],[7,"METADATA_DUPS_BYTES_05","","",null,null],[7,"METADATA_CYCLE1_PATH","","",null,null],[7,"METADATA_CYCLE1_BASE","","",null,null],[7,"METADATA_CYCLE1_HELPER","","",null,null],[7,"METADATA_CYCLE2_PATH","","",null,null],[7,"METADATA_CYCLE2_UPPER_A","","",null,null],[7,"METADATA_CYCLE2_UPPER_B","","",null,null],[7,"METADATA_CYCLE2_LOWER_A","","",null,null],[7,"METADATA_CYCLE2_LOWER_B","","",null,null],[7,"METADATA_CYCLE_FEATURES_PATH","","",null,null],[7,"METADATA_CYCLE_FEATURES_BASE","","",null,null],[7,"METADATA_CYCLE_FEATURES_HELPER","","",null,null],[7,"METADATA_TARGETS1_PATH","","",null,null],[7,"METADATA_TARGETS1_TESTCRATE","","",null,null],[7,"METADATA_TARGETS1_LAZY_STATIC_1","","",null,null],[7,"METADATA_TARGETS1_LAZY_STATIC_02","","",null,null],[7,"METADATA_TARGETS1_LAZY_STATIC_01","","",null,null],[7,"METADATA_TARGETS1_BYTES","","",null,null],[7,"METADATA_TARGETS1_DEP_A","","",null,null],[7,"METADATA_BUILD_TARGETS1_PATH","","",null,null],[7,"METADATA_BUILD_TARGETS1_TESTCRATE","","",null,null],[7,"METADATA_PROC_MACRO1_PATH","","",null,null],[7,"METADATA_PROC_MACRO1_MACRO","","",null,null],[7,"METADATA_PROC_MACRO1_NORMAL_USER","","",null,null],[7,"METADATA_PROC_MACRO1_BUILD_USER","","",null,null],[7,"METADATA_PROC_MACRO1_DEV_USER","","",null,null],[7,"METADATA_LIBRA_PATH","","",null,null],[7,"METADATA_LIBRA_ADMISSION_CONTROL_SERVICE","","",null,null],[7,"METADATA_LIBRA_COMPILER","","",null,null],[7,"METADATA_LIBRA_E2E_TESTS","","",null,null],[7,"METADATA_LIBRA_EXECUTOR","","",null,null],[7,"METADATA_LIBRA_EXECUTOR_UTILS","","",null,null],[7,"METADATA_LIBRA_COST_SYNTHESIS","","",null,null],[7,"METADATA_LIBRA_FUNCTIONAL_TESTS","","",null,null],[7,"METADATA_LIBRA_FUNCTIONAL_HYPHEN_TESTS","","",null,null],[7,"METADATA_LIBRA_LIBRA_VM","","",null,null],[7,"METADATA_LIBRA_MOVE_LANG","","",null,null],[7,"METADATA_LIBRA_MOVE_LANG_STDLIB","","",null,null],[7,"METADATA_LIBRA_MOVE_VM_RUNTIME","","",null,null],[7,"METADATA_LIBRA_STDLIB","","",null,null],[7,"METADATA_LIBRA_TEST_GENERATION","","",null,null],[7,"METADATA_LIBRA_TRANSACTION_BUILDER","","",null,null],[7,"METADATA_LIBRA_VM_GENESIS","","",null,null],[7,"METADATA_LIBRA_LANGUAGE_BENCHMARKS","","",null,null],[7,"METADATA_LIBRA_TREE_HEAP","","",null,null],[7,"METADATA_LIBRA_LAZY_STATIC","","",null,null],[7,"METADATA_LIBRA_BACKTRACE","","",null,null],[7,"METADATA_LIBRA_CFG_IF","","",null,null],[7,"METADATA_LIBRA_F0091A4_PATH","","",null,null],[7,"METADATA_LIBRA_9FFD93B_PATH","","",null,null],[7,"METADATA_GUPPY_78CB7E8_PATH","","",null,null],[7,"METADATA_GUPPY_869476C_PATH","","",null,null],[7,"METADATA_GUPPY_C9B4F76_PATH","","",null,null],[7,"FAKE_AUTHOR","","",null,null],[3,"JsonFixture","","",null,null],[11,"by_name","","Lookup a fixture by name, or <code>None</code> if the name wasn\'t …",8,[[],["option",4]]],[11,"name","","Returns the name of this fixture.",8,[[]]],[11,"abs_path","","Returns the absolute path of this fixture.",8,[[],["utf8path",3]]],[11,"workspace_path","","Returns the path of this fixture, relative to the …",8,[[],["utf8path",3]]],[11,"json","","Returns the unparsed JSON string for this fixture.",8,[[]]],[11,"graph","","Returns the package graph for this fixture.",8,[[],["packagegraph",3]]],[11,"details","","Returns the test details for this fixture.",8,[[],["fixturedetails",3]]],[11,"verify","","Verifies that the parsed metadata matches known details.",8,[[]]],[5,"package_id","fixtures","Helper for creating <code>PackageId</code> instances in test code.",null,[[],["packageid",3]]],[11,"from","fixtures::dep_helpers","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"borrow_replacement","","",9,[[]]],[11,"clone_boxed","","",9,[[],[["defaultfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",9,[[]]],[11,"clone_boxed","","",9,[[],[["nonsyncfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",9,[[]]],[11,"from","fixtures::details","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"borrow_replacement","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"borrow_replacement","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"borrow_replacement","","",6,[[]]],[11,"clone_boxed","","",6,[[],[["defaultfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",6,[[]]],[11,"clone_boxed","","",6,[[],[["nonsyncfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"borrow_replacement","","",7,[[]]],[11,"clone_boxed","","",7,[[],[["defaultfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",7,[[]]],[11,"clone_boxed","","",7,[[],[["nonsyncfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",7,[[]]],[11,"from","fixtures::json","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"borrow_replacement","","",8,[[]]],[11,"from","fixtures::dep_helpers","",9,[[["dependencydirection",4]]]],[11,"clone","","",9,[[],["directiondesc",3]]],[11,"clone","fixtures::details","",6,[[],["linkdetails",3]]],[11,"clone","","",7,[[],["platformresults",3]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"all_fixtures","fixtures::json","",8,[[],["btreemap",3]]],[11,"metadata1","","",8,[[]]],[11,"metadata2","","",8,[[]]],[11,"metadata_dups","","",8,[[]]],[11,"metadata_cycle1","","",8,[[]]],[11,"metadata_cycle2","","",8,[[]]],[11,"metadata_cycle_features","","",8,[[]]],[11,"metadata_targets1","","",8,[[]]],[11,"metadata_build_targets1","","",8,[[]]],[11,"metadata_proc_macro1","","",8,[[]]],[11,"metadata_libra","","",8,[[]]],[11,"metadata_libra_f0091a4","","",8,[[]]],[11,"metadata_libra_9ffd93b","","",8,[[]]],[11,"metadata_guppy_78cb7e8","","",8,[[]]],[11,"metadata_guppy_869476c","","",8,[[]]],[11,"metadata_guppy_c9b4f76","","",8,[[]]]],"p":[[8,"GraphAssert"],[8,"GraphMetadata"],[8,"GraphQuery"],[8,"GraphSet"],[3,"FixtureDetails"],[3,"PackageDetails"],[3,"LinkDetails"],[3,"PlatformResults"],[3,"JsonFixture"],[3,"DirectionDesc"]]},\
"fnv":{"doc":"An implementation of the [Fowler–Noll–Vo hash function…","i":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[11,"with_key","","Create an FNV hasher starting with a state corresponding …",0,[[],["fnvhasher",3]]],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A <code>HashMap</code> using a default FNV hasher.",null,null],[6,"FnvHashSet","","A <code>HashSet</code> using a default FNV hasher.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"default","","",0,[[],["fnvhasher",3]]],[11,"finish","","",0,[[]]],[11,"write","","",0,[[]]]],"p":[[3,"FnvHasher"]]},\
"getrandom":{"doc":"Interface to the operating system\'s random number …","i":[[3,"Error","getrandom","A small and <code>no_std</code> compatible error type",null,null],[5,"getrandom","","Fill <code>dest</code> with random bytes from the system\'s preferred …",null,[[],[["result",4],["error",3]]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",0,[[["nonzerou32",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["error",3]]]],[11,"ne","","",0,[[["error",3]]]],[11,"clone","","",0,[[],["error",3]]],[18,"UNSUPPORTED","","This target/platform is not supported by <code>getrandom</code>.",0,null],[18,"ERRNO_NOT_POSITIVE","","The platform-specific <code>errno</code> returned a non-positive value.",0,null],[18,"IOS_SEC_RANDOM","","Call to iOS <code>SecRandomCopyBytes</code> failed.",0,null],[18,"WINDOWS_RTL_GEN_RANDOM","","Call to Windows <code>RtlGenRandom</code> failed.",0,null],[18,"FAILED_RDRAND","","RDRAND instruction failed due to a hardware issue.",0,null],[18,"NO_RDRAND","","RDRAND instruction unsupported on this target.",0,null],[18,"WEB_CRYPTO","","The browser does not have support for <code>self.crypto</code>.",0,null],[18,"WEB_GET_RANDOM_VALUES","","The browser does not have support for …",0,null],[18,"VXWORKS_RAND_SECURE","","On VxWorks, call to <code>randSecure</code> failed (random number …",0,null],[18,"NODE_CRYPTO","","NodeJS does not have support for the <code>crypto</code> module.",0,null],[18,"NODE_RANDOM_FILL_SYNC","","NodeJS does not have support for <code>crypto.randomFillSync</code>.",0,null],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive …",0,null],[18,"CUSTOM_START","","Codes at or above this point can be used by users to …",0,null],[11,"raw_os_error","","Extract the raw OS error code (if this error came from …",0,[[],["option",4]]],[11,"code","","Extract the bare error code.",0,[[],["nonzerou32",3]]]],"p":[[3,"Error"]]},\
"globset":{"doc":"The globset crate provides cross platform single glob and …","i":[[3,"Glob","globset","Glob represents a successfully parsed shell glob pattern.",null,null],[3,"GlobBuilder","","A builder for a pattern.",null,null],[3,"GlobMatcher","","A matcher for a single pattern.",null,null],[3,"Error","","Represents an error that can occur when parsing a glob …",null,null],[4,"ErrorKind","","The kind of error that can occur when parsing a glob …",null,null],[13,"InvalidRecursive","","<strong>DEPRECATED</strong>.",0,null],[13,"UnclosedClass","","Occurs when a character class (e.g., <code>[abc]</code>) is not closed.",0,null],[13,"InvalidRange","","Occurs when a range in a character (e.g., <code>[a-z]</code>) is …",0,null],[13,"UnopenedAlternates","","Occurs when a <code>}</code> is found without a matching <code>{</code>.",0,null],[13,"UnclosedAlternates","","Occurs when a <code>{</code> is found without a matching <code>}</code>.",0,null],[13,"NestedAlternates","","Occurs when an alternating group is nested inside another …",0,null],[13,"DanglingEscape","","Occurs when an unescaped \'\' is found at the end of a glob.",0,null],[13,"Regex","","An error associated with parsing or compiling a regex.",0,null],[11,"glob","","Return the glob that caused this error, if one exists.",1,[[],["option",4]]],[11,"kind","","Return the kind of this error.",1,[[],["errorkind",4]]],[3,"GlobSet","","GlobSet represents a group of globs that can be matched …",null,null],[11,"empty","","Create an empty <code>GlobSet</code>. An empty set matches nothing.",2,[[],["globset",3]]],[11,"is_empty","","Returns true if this set is empty, and therefore matches …",2,[[]]],[11,"len","","Returns the number of globs in this set.",2,[[]]],[11,"is_match","","Returns true if any glob in this set matches the path …",2,[[["path",3],["asref",8]]]],[11,"is_match_candidate","","Returns true if any glob in this set matches the path …",2,[[["candidate",3]]]],[11,"matches","","Returns the sequence number of every glob pattern that …",2,[[["path",3],["asref",8]],["vec",3]]],[11,"matches_candidate","","Returns the sequence number of every glob pattern that …",2,[[["candidate",3]],["vec",3]]],[11,"matches_into","","Adds the sequence number of every glob pattern that …",2,[[["path",3],["asref",8],["vec",3]]]],[11,"matches_candidate_into","","Adds the sequence number of every glob pattern that …",2,[[["vec",3],["candidate",3]]]],[3,"GlobSetBuilder","","GlobSetBuilder builds a group of patterns that can be …",null,null],[11,"new","","Create a new GlobSetBuilder. A GlobSetBuilder can be used …",3,[[],["globsetbuilder",3]]],[11,"build","","Builds a new matcher from all of the glob patterns added …",3,[[],[["result",4],["globset",3],["error",3]]]],[11,"add","","Add a new pattern to this set.",3,[[["glob",3]],["globsetbuilder",3]]],[3,"Candidate","","A candidate path for matching.",null,null],[11,"new","","Create a new candidate for matching from the given path.",4,[[],["candidate",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"clone","","",5,[[],["glob",3]]],[11,"clone","","",6,[[],["globmatcher",3]]],[11,"clone","","",7,[[],["globbuilder",3]]],[11,"clone","","",1,[[],["error",3]]],[11,"clone","","",0,[[],["errorkind",4]]],[11,"clone","","",2,[[],["globset",3]]],[11,"clone","","",3,[[],["globsetbuilder",3]]],[11,"clone","","",4,[[],["candidate",3]]],[11,"eq","","",5,[[["glob",3]]]],[11,"eq","","",1,[[["error",3]]]],[11,"ne","","",1,[[["error",3]]]],[11,"eq","","",0,[[["errorkind",4]]]],[11,"ne","","",0,[[["errorkind",4]]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",5,[[]]],[11,"from_str","","",5,[[],["result",4]]],[11,"description","","",1,[[]]],[11,"is_match","","Tests whether the given path matches this pattern or not.",6,[[["path",3],["asref",8]]]],[11,"is_match_candidate","","Tests whether the given path matches this pattern or not.",6,[[["candidate",3]]]],[11,"glob","","Returns the <code>Glob</code> used to compile this matcher.",6,[[],["glob",3]]],[11,"new","","Builds a new pattern with default options.",5,[[],[["error",3],["glob",3],["result",4]]]],[11,"compile_matcher","","Returns a matcher for this pattern.",5,[[],["globmatcher",3]]],[11,"glob","","Returns the original glob pattern used to build this …",5,[[]]],[11,"regex","","Returns the regular expression string for this glob.",5,[[]]],[11,"new","","Create a new builder for the pattern given.",7,[[],["globbuilder",3]]],[11,"build","","Parses and builds the pattern.",7,[[],[["error",3],["glob",3],["result",4]]]],[11,"case_insensitive","","Toggle whether the pattern matches case insensitively or …",7,[[],["globbuilder",3]]],[11,"literal_separator","","Toggle whether a literal <code>/</code> is required to match a path …",7,[[],["globbuilder",3]]],[11,"backslash_escape","","When enabled, a back slash (<code>\\\\</code>) may be used to escape …",7,[[],["globbuilder",3]]]],"p":[[4,"ErrorKind"],[3,"Error"],[3,"GlobSet"],[3,"GlobSetBuilder"],[3,"Candidate"],[3,"Glob"],[3,"GlobMatcher"],[3,"GlobBuilder"]]},\
"guppy":{"doc":"Track and query Cargo dependency graphs.","i":[[4,"TargetSpecError","guppy","An error that happened during <code>target-spec</code> parsing or …",null,null],[13,"InvalidCfg","","A <code>cfg()</code> expression was invalid and could not be parsed.",0,null],[13,"UnknownTargetTriple","","The provided target triple (in the position that a <code>cfg()</code> …",0,null],[13,"UnknownPlatformTriple","","The provided platform triple was unknown.",0,null],[13,"UnknownPredicate","","The provided <code>cfg()</code> expression parsed correctly, but it …",0,null],[13,"CustomPlatformSummary","","Attempt to generate summary from custom platform.",0,null],[3,"Platform","","A platform to evaluate target specs against.",null,null],[4,"TargetFeatures","","A set of target features to match.",null,null],[13,"Unknown","","The target features are unknown.",1,null],[13,"Features","","Only match the specified features.",1,null],[13,"All","","Match all features.",1,null],[0,"debug_ignore","","Contains <code>DebugIgnore</code>, a newtype wrapper that causes a …",null,null],[3,"DebugIgnore","guppy::debug_ignore","A newtype wrapper that causes this field to be ignored …",null,null],[12,"0","","",2,null],[0,"errors","guppy","Contains types that describe errors and warnings that …",null,null],[4,"TargetSpecError","guppy::errors","An error that happened during <code>target-spec</code> parsing or …",null,null],[13,"InvalidCfg","","A <code>cfg()</code> expression was invalid and could not be parsed.",0,null],[13,"UnknownTargetTriple","","The provided target triple (in the position that a <code>cfg()</code> …",0,null],[13,"UnknownPlatformTriple","","The provided platform triple was unknown.",0,null],[13,"UnknownPredicate","","The provided <code>cfg()</code> expression parsed correctly, but it …",0,null],[13,"CustomPlatformSummary","","Attempt to generate summary from custom platform.",0,null],[4,"Error","","Error type describing the sorts of errors <code>guppy</code> can …",null,null],[13,"CommandError","","An error occurred while executing <code>cargo metadata</code>.",3,null],[13,"MetadataParseError","","An error occurred while parsing <code>cargo metadata</code> JSON.",3,null],[13,"MetadataSerializeError","","An error occurred while serializing <code>cargo metadata</code> JSON.",3,null],[13,"PackageGraphConstructError","","An error occurred while constructing a <code>PackageGraph</code> from …",3,null],[13,"UnknownPackageId","","A package ID was unknown to this <code>PackageGraph</code>.",3,null],[13,"UnknownFeatureId","","A feature ID was unknown to this <code>FeatureGraph</code>.",3,null],[13,"UnknownWorkspacePath","","A package specified by path was unknown to this workspace.",3,null],[13,"UnknownWorkspaceName","","A package specified by name was unknown to this workspace.",3,null],[13,"TargetSpecError","","An error was returned by <code>target-spec</code>.",3,null],[13,"PackageGraphInternalError","","An internal error occurred within this <code>PackageGraph</code>.",3,null],[13,"FeatureGraphInternalError","","An internal error occurred within this <code>FeatureGraph</code>.",3,null],[13,"UnknownSummaryId","","A summary ID was unknown to this <code>PackageGraph</code>.",3,null],[4,"FeatureGraphWarning","","Describes warnings emitted during feature graph …",null,null],[13,"MissingFeature","","A feature that was requested is missing from a package.",4,null],[12,"stage","guppy::errors::FeatureGraphWarning","The stage of building the feature graph where the warning …",5,null],[12,"package_id","","The package ID for which the feature was requested.",5,null],[12,"feature_name","","The name of the feature.",5,null],[4,"FeatureBuildStage","guppy::errors","Describes the stage of construction at which a feature …",null,null],[13,"AddNamedFeatureEdges","","The warning occurred while adding edges for the <code>[features]</code>…",6,null],[12,"package_id","guppy::errors::FeatureBuildStage","The package ID for which edges were being added.",7,null],[12,"from_feature","","The feature name from which edges were being added.",7,null],[13,"AddDependencyEdges","guppy::errors","The warning occurred while adding dependency edges.",6,null],[12,"package_id","guppy::errors::FeatureBuildStage","The package ID for which edges were being added.",8,null],[12,"dep_name","","The name of the dependency.",8,null],[0,"graph","guppy","Entry point for analyzing Cargo dependency graphs.",null,null],[0,"cargo","guppy::graph","Simulations of Cargo behavior.",null,null],[3,"CargoOptions","guppy::graph::cargo","Options for queries which simulate what Cargo does.",null,null],[4,"CargoResolverVersion","","The version of Cargo\'s feature resolver to use.",null,null],[13,"V1","","The default \\\"classic\\\" feature resolver in Rust.",9,null],[13,"V1Install","","The \\\"classic\\\" feature resolver in Rust, as used by …",9,null],[13,"V2","","The new feature resolver. This feature resolver does not …",9,null],[4,"InitialsPlatform","","For a given Cargo build simulation, what platform to …",null,null],[13,"Host","","Assume that the initials are being built on the host …",10,null],[13,"Standard","","Assume a standard build.",10,null],[13,"ProcMacrosOnTarget","","Perform a standard build, and also build proc-macros on …",10,null],[3,"CargoSet","","A set of packages and features, as would be built by …",null,null],[4,"BuildPlatform","","Either the target or the host platform.",null,null],[13,"Target","","The target platform.",11,null],[13,"Host","","The host platform.",11,null],[0,"feature","guppy::graph","Graph analysis for individual features within a package.",null,null],[0,"feature_list","guppy::graph::feature","A sorted, deduplicated list of features from a single …",null,null],[3,"FeatureList","guppy::graph::feature::feature_list","A sorted, deduplicated list of features from a single …",null,null],[11,"new","","Creates a new <code>FeatureList</code> from a package and an iterator …",12,[[["packagemetadata",3]]]],[11,"package","","Returns the package corresponding to this feature list.",12,[[],["packagemetadata",3]]],[11,"contains","","Returns true if this feature list contains this feature.",12,[[]]],[11,"has_base","","Returns true if this feature list contains the \\\"base\\\" …",12,[[]]],[11,"features","","Returns the list of features as a slice.",12,[[]]],[11,"iter","","Returns a borrowed iterator over feature IDs.",12,[[],["iter",3]]],[11,"display_features","","Returns a pretty-printer over the list of features.",12,[[],["displayfeatures",3]]],[11,"into_features","","Returns a vector of feature names.",12,[[],["vec",3]]],[3,"IntoIter","","An owned iterator over a <code>FeatureList</code>.",null,null],[11,"new","","Creates a new iterator.",13,[[["featurelist",3]]]],[3,"Iter","","A borrowed iterator over a <code>FeatureList</code>.",null,null],[11,"new","","Creates a new iterator.",14,[[["featurelist",3]]]],[3,"DisplayFeatures","","A pretty-printer for a list of features.",null,null],[3,"Cycles","guppy::graph::feature","Contains information about dependency cycles in feature …",null,null],[3,"FeatureGraph","","A derived graph representing every feature of every …",null,null],[3,"FeatureId","","An identifier for a (package, feature) pair in a feature …",null,null],[3,"FeatureMetadata","","Metadata for a feature within a package.",null,null],[3,"CrossLink","","A feature dependency across packages.",null,null],[4,"FeatureType","","The type of a particular feature within a package.",null,null],[13,"NamedFeature","","This is a named feature in the <code>[features]</code> section.",15,null],[13,"OptionalDep","","This is an optional dependency.",15,null],[13,"BasePackage","","This is the \\\"base\\\" package with no features enabled.",15,null],[8,"FeatureFilter","","Trait representing whether a feature within a package …",null,null],[10,"accept","","Returns true if this feature ID should be selected in the …",16,[[["featuregraph",3],["featureid",3]]]],[3,"FeatureFilterFn","","A <code>FeatureFilter</code> which calls the function that\'s passed in.",null,null],[4,"StandardFeatures","","Describes one of the standard sets of features recognized …",null,null],[13,"None","","No features. Equivalent to a build with …",17,null],[13,"Default","","Default features. Equivalent to a standard <code>cargo build</code>.",17,null],[13,"All","","All features. Equivalent to <code>cargo build --all-features</code>.",17,null],[5,"feature_filter","","Returns a <code>FeatureFilter</code> that selects everything from the …",null,[[]]],[5,"feature_id_filter","","Returns a <code>FeatureFilter</code> that selects everything from the …",null,[[]]],[3,"FeatureQuery","","A query over a feature graph.",null,null],[8,"FeatureResolver","","Represents whether a particular link within a feature …",null,null],[10,"accept","","Returns true if this cross-package link should be …",18,[[["crosslink",3],["featurequery",3]]]],[3,"FeatureSet","","A set of resolved feature IDs in a feature graph.",null,null],[0,"summaries","guppy::graph","Generate build summaries from <code>CargoSet</code> instances.",null,null],[0,"diff","guppy::graph::summaries","Compare and diff summaries.",null,null],[3,"SummaryDiff","guppy::graph::summaries::diff","A diff of two package summaries.",null,null],[12,"target_packages","","Diff of target packages.",19,null],[12,"host_packages","","Diff of host packages.",19,null],[6,"UnchangedInfo","","Type alias for list entries in the <code>PackageDiff::unchanged</code> …",null,null],[3,"PackageDiff","","A diff from a particular section of a summary.",null,null],[12,"changed","","Changed packages.",20,null],[12,"unchanged","","Unchanged packages, keyed by name.",20,null],[4,"SummaryDiffStatus","","The diff status for a particular summary ID and source.",null,null],[13,"Added","","This package was added.",21,null],[12,"info","guppy::graph::summaries::diff::SummaryDiffStatus","The information for this package.",22,null],[13,"Removed","guppy::graph::summaries::diff","This package was removed.",21,null],[12,"old_info","guppy::graph::summaries::diff::SummaryDiffStatus","The information this package used to have.",23,null],[13,"Modified","guppy::graph::summaries::diff","Some details about the package changed:",21,null],[12,"old_version","guppy::graph::summaries::diff::SummaryDiffStatus","The old version of this package, if the version changed.",24,null],[12,"old_source","","The old source of this package, if the source changed.",24,null],[12,"old_status","","The old status of this package, if the status changed.",24,null],[12,"new_status","","The current status of this package.",24,null],[12,"added_features","","The set of features added to the package.",24,null],[12,"removed_features","","The set of features removed from the package.",24,null],[12,"unchanged_features","","The set of features which were enabled both in both the …",24,null],[4,"SummaryDiffTag","guppy::graph::summaries::diff","A tag representing <code>SummaryDiffStatus</code> except with no data …",null,null],[13,"Added","","This package was added.",25,null],[13,"Modified","","This package was modified.",25,null],[13,"Removed","","This package was removed.",25,null],[3,"SummaryReport","","A report of a diff between two summaries.",null,null],[3,"PackageInfo","guppy::graph::summaries","Information about a package in a summary that isn\'t part …",null,null],[12,"status","","Where this package lies in the dependency graph.",26,null],[12,"features","","The features built for this package.",26,null],[6,"PackageMap","","A type representing a package map as used in <code>Summary</code> …",null,null],[4,"PackageStatus","","The status of a package in a summary, such as whether it …",null,null],[13,"Initial","","This package is part of the requested build set.",27,null],[13,"Workspace","","This is a workspace package that isn\'t part of the …",27,null],[13,"Direct","","This package is a direct non-workspace dependency.",27,null],[13,"Transitive","","This package is a transitive non-workspace dependency.",27,null],[3,"SummaryId","","A unique identifier for a package in a build summary.",null,null],[12,"name","","The name of the package.",28,null],[12,"version","","The version number of the package.",28,null],[12,"source","","The source for this package.",28,null],[4,"SummarySource","","The location of a package.",null,null],[13,"Workspace","","A workspace path.",29,null],[12,"workspace_path","guppy::graph::summaries::SummarySource","The path of this package, relative to the workspace root.",30,null],[13,"Path","guppy::graph::summaries","A non-workspace path.",29,null],[12,"path","guppy::graph::summaries::SummarySource","The path of this package, relative to the workspace root.",31,null],[13,"CratesIo","guppy::graph::summaries","The <code>crates.io</code> registry.",29,null],[13,"External","","An external source that\'s not the <code>crates.io</code> registry, …",29,null],[12,"source","guppy::graph::summaries::SummarySource","The external source.",32,null],[3,"SummaryWithMetadata","guppy::graph::summaries","An in-memory representation of a build summary.",null,null],[12,"metadata","","Extra metadata associated with the summary.",33,null],[12,"target_packages","","The packages and features built on the target platform.",33,null],[12,"host_packages","","The packages and features built on the host platform.",33,null],[3,"PlatformSummary","","An owned, serializable version of <code>Platform</code>.",null,null],[12,"triple","","The platform triple.",34,null],[12,"target_features","","The target features used.",34,null],[12,"flags","","The flags enabled.",34,null],[6,"Summary","","A type alias for build summaries generated by <code>guppy</code>.",null,null],[11,"to_summary","guppy::graph::cargo","Creates a build summary with the given options.",35,[[["cargooptions",3]],[["error",4],["summary",6],["result",4]]]],[3,"CargoOptionsSummary","guppy::graph::summaries","A summary of Cargo options used to build a <code>CargoSet</code>.",null,null],[12,"version","","The version of resolver used.",36,null],[12,"include_dev","","Whether dev-dependencies are included.",36,null],[12,"initials_platform","","The platform for which the initials are specified.",36,null],[12,"host_platform","","The host platform.",36,null],[12,"target_platform","","The target platform.",36,null],[12,"omitted_packages","","The set of packages omitted from computations.",36,null],[12,"features_only","","The packages that formed the features-only set.",36,null],[11,"new","","Creates a new <code>CargoOptionsSummary</code> from the given Cargo …",36,[[["packagegraph",3],["featureset",3],["cargooptions",3]],[["error",4],["result",4]]]],[11,"to_cargo_options","","Creates a new <code>CargoOptions</code> from this summary.",36,[[["packagegraph",3]],[["error",4],["cargooptions",3],["result",4]]]],[4,"InitialsPlatformSummary","","Summary information for <code>InitialsPlatform</code>.",null,null],[13,"V1","","The first version of this option, which only allowed …",37,null],[12,"proc_macros_on_target","guppy::graph::summaries::InitialsPlatformSummary","If set to true, this is treated as …",38,null],[13,"V2","guppy::graph::summaries","The second and current version of this option.",37,null],[12,"initials_platform","guppy::graph::summaries::InitialsPlatformSummary","The configuration value.",39,null],[3,"FeaturesOnlySummary","guppy::graph::summaries","Summary information for a features-only package.",null,null],[12,"summary_id","","The summary ID for this feature.",40,null],[12,"features","","The features built for this package.",40,null],[3,"DotWrite","guppy::graph","A write target for <code>Dot</code> graphs. Use with the <code>write!</code> macro.",null,null],[3,"BuildTarget","","A build target in a package.",null,null],[4,"BuildTargetId","","An identifier for a build target within a package.",null,null],[13,"Library","","A library target.",41,null],[13,"BuildScript","","A build script.",41,null],[13,"Binary","","A binary target with its name.",41,null],[13,"Example","","An example target with its name.",41,null],[13,"Test","","A test target with its name.",41,null],[13,"Benchmark","","A benchmark target with its name.",41,null],[4,"BuildTargetKind","","The type of build target (library or binary).",null,null],[13,"LibraryOrExample","","This build target is a library or example, with the …",42,null],[13,"ProcMacro","","This build target is a procedural macro.",42,null],[13,"Binary","","This build target is a binary target.",42,null],[3,"Cycles","","Contains information about dependency cycles.",null,null],[3,"PackageGraph","","A graph of packages and dependencies between them, parsed …",null,null],[3,"DependsCache","","An optional cache used to speed up <code>depends_on</code> queries.",null,null],[3,"Workspace","","Information about a workspace, parsed from metadata …",null,null],[3,"PackageMetadata","","Information about a specific package in a <code>PackageGraph</code>.",null,null],[4,"PackageSource","","The source of a package.",null,null],[13,"Workspace","","This package is in the workspace.",43,null],[13,"Path","","This package is a path dependency that isn\'t in the …",43,null],[13,"External","","This package is an external dependency.",43,null],[4,"ExternalSource","","More information about an external source.",null,null],[13,"Registry","","This is a registry source, e.g. …",44,null],[13,"Git","","This is a Git source.",44,null],[12,"repository","guppy::graph::ExternalSource","The repository for this Git source. For the above …",45,null],[12,"req","","The revision requested in <code>Cargo.toml</code>. This may be a tag, …",45,null],[12,"resolved","","The resolved revision, as specified in <code>Cargo.lock</code>.",45,null],[4,"GitReq","guppy::graph","A <code>Cargo.toml</code> specification for a Git branch, tag, or …",null,null],[13,"Branch","","A branch, e.g. <code>\\\"main\\\"</code>.",46,null],[13,"Tag","","A tag, e.g. <code>\\\"guppy-0.5.0\\\"</code>.",46,null],[13,"Rev","","A revision (commit hash), e.g. …",46,null],[13,"Default","","Not specified in <code>Cargo.toml</code>. Cargo treats this as the …",46,null],[4,"PackagePublish","","Locations that a package can be published to.",null,null],[13,"Unrestricted","","Publication of this package is unrestricted.",47,null],[13,"Registries","","This package can only be published to the listed package …",47,null],[3,"PackageLink","","Represents a dependency from one package to another.",null,null],[3,"DependencyReq","","Information about a specific kind of dependency (normal, …",null,null],[3,"EnabledStatus","","Whether a dependency or feature is required, optional, or …",null,null],[4,"PlatformStatus","","The status of a dependency or feature, which is possibly …",null,null],[13,"Never","","This dependency or feature is never enabled on any …",48,null],[13,"Always","","This dependency or feature is always enabled on all …",48,null],[13,"PlatformDependent","","The status is platform-dependent.",48,null],[12,"eval","guppy::graph::PlatformStatus","An evaluator to run queries against.",49,null],[4,"EnabledTernary","guppy::graph","Whether a dependency or feature is enabled on a specific …",null,null],[13,"Disabled","","The dependency is disabled on this platform.",50,null],[13,"Unknown","","The status of this dependency is unknown on this platform.",50,null],[13,"Enabled","","The dependency is enabled on this platform.",50,null],[3,"PlatformEval","","An evaluator for platform-specific dependencies.",null,null],[3,"Prop010Resolver","","A randomly generated package resolver.",null,null],[3,"PackageQuery","","A query over a package graph.",null,null],[3,"PackageSet","","A set of resolved packages in a package graph.",null,null],[8,"PackageResolver","","Represents whether a particular link within a package …",null,null],[10,"accept","","Returns true if this link should be followed during a …",51,[[["packagequery",3],["packagelink",3]]]],[8,"PackageDotVisitor","","A visitor used for formatting <code>dot</code> graphs.",null,null],[10,"visit_package","","Visits this package. The implementation may output a …",52,[[["packagemetadata",3],["dotwrite",3]],["result",6]]],[10,"visit_link","","Visits this dependency link. The implementation may …",52,[[["packagelink",3],["dotwrite",3]],["result",6]]],[4,"DependencyDirection","","The direction in which to follow dependencies.",null,null],[13,"Forward","","Dependencies from this package to other packages.",53,null],[13,"Reverse","","Reverse dependencies from other packages to this one.",53,null],[11,"opposite","","Returns the opposite direction to this one.",53,[[]]],[11,"set_escape_backslashes","","Sets a config option for whether backslashes should be …",54,[[]]],[11,"write_fmt","","Glue for usage of the <code>write!</code> macro.",54,[[["arguments",3]],["result",6]]],[4,"DependencyKind","guppy","A descriptor for the kind of dependency.",null,null],[13,"Normal","","Normal dependencies.",55,null],[13,"Development","","Dependencies used for development only.",55,null],[13,"Build","","Dependencies used for build scripts.",55,null],[3,"MetadataCommand","","A builder for configuring <code>cargo metadata</code> invocations.",null,null],[3,"CargoMetadata","","Deserialized Cargo metadata.",null,null],[3,"Obs","","Represents an owned, borrowed or shared instance of <code>T</code>.",null,null],[3,"PackageId","","An \\\"opaque\\\" identifier for a package.",null,null],[11,"from","guppy::errors","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"borrow_replacement","","",0,[[]]],[11,"from","guppy","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"equivalent","","",56,[[]]],[11,"init","","",56,[[]]],[11,"deref","","",56,[[]]],[11,"deref_mut","","",56,[[]]],[11,"drop","","",56,[[]]],[11,"borrow_replacement","","",56,[[]]],[11,"clone_boxed","","",56,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",56,[[]]],[11,"clone_boxed","","",56,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",56,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"borrow_replacement","","",1,[[]]],[11,"clone_boxed","","",1,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",1,[[]]],[11,"clone_boxed","","",1,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",1,[[]]],[11,"from","guppy::debug_ignore","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"equivalent","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"borrow_replacement","","",2,[[]]],[11,"clone_boxed","","",2,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",2,[[]]],[11,"clone_boxed","","",2,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",2,[[]]],[11,"from","guppy","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"to_string","","",55,[[],["string",3]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"equivalent","","",55,[[]]],[11,"init","","",55,[[]]],[11,"deref","","",55,[[]]],[11,"deref_mut","","",55,[[]]],[11,"drop","","",55,[[]]],[11,"borrow_replacement","","",55,[[]]],[11,"clone_boxed","","",55,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",55,[[]]],[11,"clone_boxed","","",55,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",55,[[]]],[11,"from","guppy::errors","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"borrow_replacement","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"equivalent","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"borrow_replacement","","",4,[[]]],[11,"clone_boxed","","",4,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",4,[[]]],[11,"clone_boxed","","",4,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",4,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"equivalent","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"borrow_replacement","","",6,[[]]],[11,"clone_boxed","","",6,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",6,[[]]],[11,"clone_boxed","","",6,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",6,[[]]],[11,"from","guppy::graph","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"init","","",57,[[]]],[11,"deref","","",57,[[]]],[11,"deref_mut","","",57,[[]]],[11,"drop","","",57,[[]]],[11,"borrow_replacement","","",57,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"equivalent","","",41,[[]]],[11,"init","","",41,[[]]],[11,"deref","","",41,[[]]],[11,"deref_mut","","",41,[[]]],[11,"drop","","",41,[[]]],[11,"borrow_replacement","","",41,[[]]],[11,"clone_boxed","","",41,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",41,[[]]],[11,"clone_boxed","","",41,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"equivalent","","",42,[[]]],[11,"init","","",42,[[]]],[11,"deref","","",42,[[]]],[11,"deref_mut","","",42,[[]]],[11,"drop","","",42,[[]]],[11,"borrow_replacement","","",42,[[]]],[11,"clone_boxed","","",42,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",42,[[]]],[11,"clone_boxed","","",42,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",42,[[]]],[11,"from","guppy::graph::cargo","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"init","","",58,[[]]],[11,"deref","","",58,[[]]],[11,"deref_mut","","",58,[[]]],[11,"drop","","",58,[[]]],[11,"borrow_replacement","","",58,[[]]],[11,"clone_boxed","","",58,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",58,[[]]],[11,"clone_boxed","","",58,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",58,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"equivalent","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"borrow_replacement","","",9,[[]]],[11,"clone_boxed","","",9,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",9,[[]]],[11,"clone_boxed","","",9,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"equivalent","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"borrow_replacement","","",10,[[]]],[11,"clone_boxed","","",10,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",10,[[]]],[11,"clone_boxed","","",10,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",10,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"init","","",35,[[]]],[11,"deref","","",35,[[]]],[11,"deref_mut","","",35,[[]]],[11,"drop","","",35,[[]]],[11,"borrow_replacement","","",35,[[]]],[11,"clone_boxed","","",35,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",35,[[]]],[11,"clone_boxed","","",35,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",35,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"equivalent","","",11,[[]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"borrow_replacement","","",11,[[]]],[11,"clone_boxed","","",11,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",11,[[]]],[11,"clone_boxed","","",11,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",11,[[]]],[11,"from","guppy::graph","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"init","","",59,[[]]],[11,"deref","","",59,[[]]],[11,"deref_mut","","",59,[[]]],[11,"drop","","",59,[[]]],[11,"borrow_replacement","","",59,[[]]],[11,"from","guppy::graph::feature","",60,[[]]],[11,"into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"init","","",60,[[]]],[11,"deref","","",60,[[]]],[11,"deref_mut","","",60,[[]]],[11,"drop","","",60,[[]]],[11,"borrow_replacement","","",60,[[]]],[11,"from","guppy::graph::feature::feature_list","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"equivalent","","",12,[[]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"borrow_replacement","","",12,[[]]],[11,"clone_boxed","","",12,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",12,[[]]],[11,"clone_boxed","","",12,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"borrow_replacement","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"borrow_replacement","","",14,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"to_string","","",61,[[],["string",3]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"init","","",61,[[]]],[11,"deref","","",61,[[]]],[11,"deref_mut","","",61,[[]]],[11,"drop","","",61,[[]]],[11,"borrow_replacement","","",61,[[]]],[11,"clone_boxed","","",61,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",61,[[]]],[11,"clone_boxed","","",61,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",61,[[]]],[11,"from","guppy::graph::feature","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"init","","",62,[[]]],[11,"deref","","",62,[[]]],[11,"deref_mut","","",62,[[]]],[11,"drop","","",62,[[]]],[11,"borrow_replacement","","",62,[[]]],[11,"clone_boxed","","",62,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",62,[[]]],[11,"clone_boxed","","",62,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",62,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"to_string","","",63,[[],["string",3]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"equivalent","","",63,[[]]],[11,"init","","",63,[[]]],[11,"deref","","",63,[[]]],[11,"deref_mut","","",63,[[]]],[11,"drop","","",63,[[]]],[11,"borrow_replacement","","",63,[[]]],[11,"clone_boxed","","",63,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",63,[[]]],[11,"clone_boxed","","",63,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"init","","",64,[[]]],[11,"deref","","",64,[[]]],[11,"deref_mut","","",64,[[]]],[11,"drop","","",64,[[]]],[11,"borrow_replacement","","",64,[[]]],[11,"clone_boxed","","",64,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",64,[[]]],[11,"clone_boxed","","",64,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"init","","",65,[[]]],[11,"deref","","",65,[[]]],[11,"deref_mut","","",65,[[]]],[11,"drop","","",65,[[]]],[11,"borrow_replacement","","",65,[[]]],[11,"clone_boxed","","",65,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",65,[[]]],[11,"clone_boxed","","",65,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",65,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"equivalent","","",15,[[]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"borrow_replacement","","",15,[[]]],[11,"clone_boxed","","",15,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",15,[[]]],[11,"clone_boxed","","",15,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",15,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"init","","",66,[[]]],[11,"deref","","",66,[[]]],[11,"deref_mut","","",66,[[]]],[11,"drop","","",66,[[]]],[11,"borrow_replacement","","",66,[[]]],[11,"clone_boxed","","",66,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",66,[[]]],[11,"clone_boxed","","",66,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",66,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"equivalent","","",17,[[]]],[11,"init","","",17,[[]]],[11,"deref","","",17,[[]]],[11,"deref_mut","","",17,[[]]],[11,"drop","","",17,[[]]],[11,"borrow_replacement","","",17,[[]]],[11,"clone_boxed","","",17,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",17,[[]]],[11,"clone_boxed","","",17,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",17,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"init","","",67,[[]]],[11,"deref","","",67,[[]]],[11,"deref_mut","","",67,[[]]],[11,"drop","","",67,[[]]],[11,"borrow_replacement","","",67,[[]]],[11,"clone_boxed","","",67,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",67,[[]]],[11,"clone_boxed","","",67,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"equivalent","","",68,[[]]],[11,"init","","",68,[[]]],[11,"deref","","",68,[[]]],[11,"deref_mut","","",68,[[]]],[11,"drop","","",68,[[]]],[11,"borrow_replacement","","",68,[[]]],[11,"clone_boxed","","",68,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",68,[[]]],[11,"clone_boxed","","",68,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",68,[[]]],[11,"from","guppy::graph","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"init","","",69,[[]]],[11,"deref","","",69,[[]]],[11,"deref_mut","","",69,[[]]],[11,"drop","","",69,[[]]],[11,"borrow_replacement","","",69,[[]]],[11,"clone_boxed","","",69,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",69,[[]]],[11,"clone_boxed","","",69,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"init","","",70,[[]]],[11,"deref","","",70,[[]]],[11,"deref_mut","","",70,[[]]],[11,"drop","","",70,[[]]],[11,"borrow_replacement","","",70,[[]]],[11,"clone_boxed","","",70,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",70,[[]]],[11,"clone_boxed","","",70,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"init","","",71,[[]]],[11,"deref","","",71,[[]]],[11,"deref_mut","","",71,[[]]],[11,"drop","","",71,[[]]],[11,"borrow_replacement","","",71,[[]]],[11,"clone_boxed","","",71,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",71,[[]]],[11,"clone_boxed","","",71,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"equivalent","","",72,[[]]],[11,"init","","",72,[[]]],[11,"deref","","",72,[[]]],[11,"deref_mut","","",72,[[]]],[11,"drop","","",72,[[]]],[11,"borrow_replacement","","",72,[[]]],[11,"clone_boxed","","",72,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",72,[[]]],[11,"clone_boxed","","",72,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",72,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"to_string","","",43,[[],["string",3]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"equivalent","","",43,[[]]],[11,"init","","",43,[[]]],[11,"deref","","",43,[[]]],[11,"deref_mut","","",43,[[]]],[11,"drop","","",43,[[]]],[11,"borrow_replacement","","",43,[[]]],[11,"clone_boxed","","",43,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",43,[[]]],[11,"clone_boxed","","",43,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"to_string","","",44,[[],["string",3]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"equivalent","","",44,[[]]],[11,"init","","",44,[[]]],[11,"deref","","",44,[[]]],[11,"deref_mut","","",44,[[]]],[11,"drop","","",44,[[]]],[11,"borrow_replacement","","",44,[[]]],[11,"clone_boxed","","",44,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",44,[[]]],[11,"clone_boxed","","",44,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",44,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"equivalent","","",46,[[]]],[11,"init","","",46,[[]]],[11,"deref","","",46,[[]]],[11,"deref_mut","","",46,[[]]],[11,"drop","","",46,[[]]],[11,"borrow_replacement","","",46,[[]]],[11,"clone_boxed","","",46,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",46,[[]]],[11,"clone_boxed","","",46,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"equivalent","","",47,[[]]],[11,"init","","",47,[[]]],[11,"deref","","",47,[[]]],[11,"deref_mut","","",47,[[]]],[11,"drop","","",47,[[]]],[11,"borrow_replacement","","",47,[[]]],[11,"clone_boxed","","",47,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",47,[[]]],[11,"clone_boxed","","",47,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",47,[[]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"init","","",73,[[]]],[11,"deref","","",73,[[]]],[11,"deref_mut","","",73,[[]]],[11,"drop","","",73,[[]]],[11,"borrow_replacement","","",73,[[]]],[11,"clone_boxed","","",73,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",73,[[]]],[11,"clone_boxed","","",73,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",73,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"init","","",74,[[]]],[11,"deref","","",74,[[]]],[11,"deref_mut","","",74,[[]]],[11,"drop","","",74,[[]]],[11,"borrow_replacement","","",74,[[]]],[11,"clone_boxed","","",74,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",74,[[]]],[11,"clone_boxed","","",74,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",74,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"init","","",75,[[]]],[11,"deref","","",75,[[]]],[11,"deref_mut","","",75,[[]]],[11,"drop","","",75,[[]]],[11,"borrow_replacement","","",75,[[]]],[11,"clone_boxed","","",75,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",75,[[]]],[11,"clone_boxed","","",75,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",75,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"init","","",48,[[]]],[11,"deref","","",48,[[]]],[11,"deref_mut","","",48,[[]]],[11,"drop","","",48,[[]]],[11,"borrow_replacement","","",48,[[]]],[11,"clone_boxed","","",48,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",48,[[]]],[11,"clone_boxed","","",48,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",48,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"equivalent","","",50,[[]]],[11,"init","","",50,[[]]],[11,"deref","","",50,[[]]],[11,"deref_mut","","",50,[[]]],[11,"drop","","",50,[[]]],[11,"borrow_replacement","","",50,[[]]],[11,"clone_boxed","","",50,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",50,[[]]],[11,"clone_boxed","","",50,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",50,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"init","","",76,[[]]],[11,"deref","","",76,[[]]],[11,"deref_mut","","",76,[[]]],[11,"drop","","",76,[[]]],[11,"borrow_replacement","","",76,[[]]],[11,"clone_boxed","","",76,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",76,[[]]],[11,"clone_boxed","","",76,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"init","","",77,[[]]],[11,"deref","","",77,[[]]],[11,"deref_mut","","",77,[[]]],[11,"drop","","",77,[[]]],[11,"borrow_replacement","","",77,[[]]],[11,"clone_boxed","","",77,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",77,[[]]],[11,"clone_boxed","","",77,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"init","","",78,[[]]],[11,"deref","","",78,[[]]],[11,"deref_mut","","",78,[[]]],[11,"drop","","",78,[[]]],[11,"borrow_replacement","","",78,[[]]],[11,"clone_boxed","","",78,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",78,[[]]],[11,"clone_boxed","","",78,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"equivalent","","",79,[[]]],[11,"init","","",79,[[]]],[11,"deref","","",79,[[]]],[11,"deref_mut","","",79,[[]]],[11,"drop","","",79,[[]]],[11,"borrow_replacement","","",79,[[]]],[11,"clone_boxed","","",79,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",79,[[]]],[11,"clone_boxed","","",79,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",79,[[]]],[11,"from","guppy::graph::summaries::diff","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"equivalent","","",19,[[]]],[11,"init","","",19,[[]]],[11,"deref","","",19,[[]]],[11,"deref_mut","","",19,[[]]],[11,"drop","","",19,[[]]],[11,"borrow_replacement","","",19,[[]]],[11,"clone_boxed","","",19,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",19,[[]]],[11,"clone_boxed","","",19,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"equivalent","","",20,[[]]],[11,"init","","",20,[[]]],[11,"deref","","",20,[[]]],[11,"deref_mut","","",20,[[]]],[11,"drop","","",20,[[]]],[11,"borrow_replacement","","",20,[[]]],[11,"clone_boxed","","",20,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",20,[[]]],[11,"clone_boxed","","",20,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"equivalent","","",21,[[]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"borrow_replacement","","",21,[[]]],[11,"clone_boxed","","",21,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",21,[[]]],[11,"clone_boxed","","",21,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",21,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"equivalent","","",25,[[]]],[11,"init","","",25,[[]]],[11,"deref","","",25,[[]]],[11,"deref_mut","","",25,[[]]],[11,"drop","","",25,[[]]],[11,"borrow_replacement","","",25,[[]]],[11,"clone_boxed","","",25,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",25,[[]]],[11,"clone_boxed","","",25,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",25,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"to_string","","",80,[[],["string",3]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"init","","",80,[[]]],[11,"deref","","",80,[[]]],[11,"deref_mut","","",80,[[]]],[11,"drop","","",80,[[]]],[11,"borrow_replacement","","",80,[[]]],[11,"clone_boxed","","",80,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",80,[[]]],[11,"clone_boxed","","",80,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",80,[[]]],[11,"from","guppy::graph::summaries","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"equivalent","","",26,[[]]],[11,"init","","",26,[[]]],[11,"deref","","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"drop","","",26,[[]]],[11,"borrow_replacement","","",26,[[]]],[11,"clone_boxed","","",26,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",26,[[]]],[11,"clone_boxed","","",26,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"equivalent","","",27,[[]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"borrow_replacement","","",27,[[]]],[11,"clone_boxed","","",27,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",27,[[]]],[11,"clone_boxed","","",27,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"equivalent","","",28,[[]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"borrow_replacement","","",28,[[]]],[11,"clone_boxed","","",28,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",28,[[]]],[11,"clone_boxed","","",28,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"equivalent","","",29,[[]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"borrow_replacement","","",29,[[]]],[11,"clone_boxed","","",29,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",29,[[]]],[11,"clone_boxed","","",29,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",29,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"equivalent","","",33,[[]]],[11,"init","","",33,[[]]],[11,"deref","","",33,[[]]],[11,"deref_mut","","",33,[[]]],[11,"drop","","",33,[[]]],[11,"borrow_replacement","","",33,[[]]],[11,"clone_boxed","","",33,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",33,[[]]],[11,"clone_boxed","","",33,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"equivalent","","",34,[[]]],[11,"init","","",34,[[]]],[11,"deref","","",34,[[]]],[11,"deref_mut","","",34,[[]]],[11,"drop","","",34,[[]]],[11,"borrow_replacement","","",34,[[]]],[11,"clone_boxed","","",34,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",34,[[]]],[11,"clone_boxed","","",34,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",34,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"equivalent","","",36,[[]]],[11,"init","","",36,[[]]],[11,"deref","","",36,[[]]],[11,"deref_mut","","",36,[[]]],[11,"drop","","",36,[[]]],[11,"borrow_replacement","","",36,[[]]],[11,"clone_boxed","","",36,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",36,[[]]],[11,"clone_boxed","","",36,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"equivalent","","",37,[[]]],[11,"init","","",37,[[]]],[11,"deref","","",37,[[]]],[11,"deref_mut","","",37,[[]]],[11,"drop","","",37,[[]]],[11,"borrow_replacement","","",37,[[]]],[11,"clone_boxed","","",37,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",37,[[]]],[11,"clone_boxed","","",37,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",37,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"equivalent","","",40,[[]]],[11,"init","","",40,[[]]],[11,"deref","","",40,[[]]],[11,"deref_mut","","",40,[[]]],[11,"drop","","",40,[[]]],[11,"borrow_replacement","","",40,[[]]],[11,"clone_boxed","","",40,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",40,[[]]],[11,"clone_boxed","","",40,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",40,[[]]],[11,"from","guppy::graph","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"init","","",54,[[]]],[11,"deref","","",54,[[]]],[11,"deref_mut","","",54,[[]]],[11,"drop","","",54,[[]]],[11,"borrow_replacement","","",54,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"equivalent","","",53,[[]]],[11,"init","","",53,[[]]],[11,"deref","","",53,[[]]],[11,"deref_mut","","",53,[[]]],[11,"drop","","",53,[[]]],[11,"borrow_replacement","","",53,[[]]],[11,"clone_boxed","","",53,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",53,[[]]],[11,"clone_boxed","","",53,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",53,[[]]],[11,"from","guppy","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"init","","",81,[[]]],[11,"deref","","",81,[[]]],[11,"deref_mut","","",81,[[]]],[11,"drop","","",81,[[]]],[11,"borrow_replacement","","",81,[[]]],[11,"clone_boxed","","",81,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",81,[[]]],[11,"clone_boxed","","",81,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",81,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"init","","",82,[[]]],[11,"deref","","",82,[[]]],[11,"deref_mut","","",82,[[]]],[11,"drop","","",82,[[]]],[11,"borrow_replacement","","",82,[[]]],[11,"clone_boxed","","",82,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",82,[[]]],[11,"clone_boxed","","",82,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",82,[[]]],[11,"from","","",83,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"init","","",83,[[]]],[11,"deref","","",83,[[]]],[11,"deref_mut","","",83,[[]]],[11,"drop","","",83,[[]]],[11,"borrow_replacement","","",83,[[]]],[11,"clone_boxed","","",83,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",83,[[]]],[11,"clone_boxed","","",83,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",83,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"to_string","","",84,[[],["string",3]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"equivalent","","",84,[[]]],[11,"init","","",84,[[]]],[11,"deref","","",84,[[]]],[11,"deref_mut","","",84,[[]]],[11,"drop","","",84,[[]]],[11,"borrow_replacement","","",84,[[]]],[11,"clone_boxed","","",84,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",84,[[]]],[11,"clone_boxed","","",84,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",84,[[]]],[11,"fmt","guppy::errors","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","guppy","",1,[[["targetfeatures",4]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["targetfeatures",4]]]],[11,"le","","",1,[[["targetfeatures",4]]]],[11,"gt","","",1,[[["targetfeatures",4]]]],[11,"ge","","",1,[[["targetfeatures",4]]]],[11,"partial_cmp","","",56,[[["platform",3]],[["ordering",4],["option",4]]]],[11,"lt","","",56,[[["platform",3]]]],[11,"le","","",56,[[["platform",3]]]],[11,"gt","","",56,[[["platform",3]]]],[11,"ge","","",56,[[["platform",3]]]],[11,"serialize","guppy::graph::summaries","",34,[[],["result",4]]],[11,"hash","guppy","",56,[[]]],[11,"hash","","",1,[[]]],[11,"source","guppy::errors","",0,[[],[["error",8],["option",4]]]],[11,"clone","guppy","",56,[[],["platform",3]]],[11,"clone","","",1,[[],["targetfeatures",4]]],[11,"clone","guppy::graph::summaries","",34,[[],["platformsummary",3]]],[11,"deserialize","","",34,[[],[["result",4],["platformsummary",3]]]],[11,"cmp","guppy","",1,[[["targetfeatures",4]],["ordering",4]]],[11,"cmp","","",56,[[["platform",3]],["ordering",4]]],[11,"eq","","",1,[[["targetfeatures",4]]]],[11,"ne","","",1,[[["targetfeatures",4]]]],[11,"eq","guppy::graph::summaries","",34,[[["platformsummary",3]]]],[11,"ne","","",34,[[["platformsummary",3]]]],[11,"eq","guppy","",56,[[["platform",3]]]],[11,"ne","","",56,[[["platform",3]]]],[11,"eq","guppy::errors","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"arbitrary_with","guppy","",1,[[]]],[11,"fmt","guppy::errors","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy","",56,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy::graph::summaries","",34,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy::graph::summaries::diff","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy::graph::summaries","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",27,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy::graph::summaries::diff","",80,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","guppy::graph::summaries","",28,[[["summaryid",3]],[["ordering",4],["option",4]]]],[11,"lt","","",28,[[["summaryid",3]]]],[11,"le","","",28,[[["summaryid",3]]]],[11,"gt","","",28,[[["summaryid",3]]]],[11,"ge","","",28,[[["summaryid",3]]]],[11,"partial_cmp","","",29,[[["summarysource",4]],[["ordering",4],["option",4]]]],[11,"lt","","",29,[[["summarysource",4]]]],[11,"le","","",29,[[["summarysource",4]]]],[11,"gt","","",29,[[["summarysource",4]]]],[11,"ge","","",29,[[["summarysource",4]]]],[11,"partial_cmp","guppy::graph::summaries::diff","",25,[[["summarydifftag",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","guppy::graph::summaries","",27,[[["packagestatus",4]],[["ordering",4],["option",4]]]],[11,"hash","","",27,[[]]],[11,"hash","","",33,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",29,[[]]],[11,"default","","",33,[[],["summarywithmetadata",3]]],[11,"diff","","",27,[[["packagestatus",4]],[["packagestatus",4],["edit",4]]]],[11,"diff","","",26,[[["packageinfo",3]],[["edit",4],["packageinfo",3]]]],[11,"clone","guppy::graph::summaries::diff","",20,[[],["packagediff",3]]],[11,"clone","guppy::graph::summaries","",26,[[],["packageinfo",3]]],[11,"clone","guppy::graph::summaries::diff","",25,[[],["summarydifftag",4]]],[11,"clone","","",21,[[],["summarydiffstatus",4]]],[11,"clone","guppy::graph::summaries","",33,[[],["summarywithmetadata",3]]],[11,"clone","","",27,[[],["packagestatus",4]]],[11,"clone","","",28,[[],["summaryid",3]]],[11,"clone","guppy::graph::summaries::diff","",19,[[],["summarydiff",3]]],[11,"clone","","",80,[[],["summaryreport",3]]],[11,"clone","guppy::graph::summaries","",29,[[],["summarysource",4]]],[11,"cmp","","",28,[[["summaryid",3]],["ordering",4]]],[11,"cmp","","",27,[[["packagestatus",4]],["ordering",4]]],[11,"cmp","guppy::graph::summaries::diff","",25,[[["summarydifftag",4]],["ordering",4]]],[11,"cmp","guppy::graph::summaries","",29,[[["summarysource",4]],["ordering",4]]],[11,"eq","","",28,[[["summaryid",3]]]],[11,"ne","","",28,[[["summaryid",3]]]],[11,"eq","guppy::graph::summaries::diff","",19,[[["summarydiff",3]]]],[11,"ne","","",19,[[["summarydiff",3]]]],[11,"eq","guppy::graph::summaries","",29,[[["summarysource",4]]]],[11,"ne","","",29,[[["summarysource",4]]]],[11,"eq","","",27,[[["packagestatus",4]]]],[11,"eq","","",26,[[["packageinfo",3]]]],[11,"ne","","",26,[[["packageinfo",3]]]],[11,"eq","guppy::graph::summaries::diff","",20,[[["packagediff",3]]]],[11,"ne","","",20,[[["packagediff",3]]]],[11,"eq","guppy::graph::summaries","",33,[[["summarywithmetadata",3]]]],[11,"ne","","",33,[[["summarywithmetadata",3]]]],[11,"eq","guppy::graph::summaries::diff","",21,[[["summarydiffstatus",4]]]],[11,"ne","","",21,[[["summarydiffstatus",4]]]],[11,"eq","","",25,[[["summarydifftag",4]]]],[11,"fmt","","",20,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy::graph::summaries","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy::graph::summaries::diff","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy::graph::summaries","",33,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",27,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",28,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","guppy::graph::summaries::diff","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",80,[[["formatter",3]],[["result",4],["error",3]]]],[11,"serialize","guppy::graph::summaries","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","guppy::graph::summaries::diff","",19,[[],["result",4]]],[11,"serialize","guppy::graph::summaries","",29,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","guppy::graph::summaries::diff","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","guppy::graph::summaries","",26,[[],["result",4]]],[11,"deserialize","","",33,[[],[["result",4],["summarywithmetadata",3]]]],[11,"deserialize","","",28,[[],[["summaryid",3],["result",4]]]],[11,"deserialize","","",26,[[],[["packageinfo",3],["result",4]]]],[11,"deserialize","","",27,[[],[["packagestatus",4],["result",4]]]],[11,"deserialize","","",29,[[],[["result",4],["summarysource",4]]]],[11,"accept","guppy::graph::feature","",66,[[["featuregraph",3],["featureid",3]]]],[11,"accept","","",17,[[["featuregraph",3],["featureid",3]]]],[11,"accept","guppy::graph","",77,[[["packagequery",3],["packagelink",3]]]],[11,"from","guppy::graph::feature","",63,[[]]],[11,"from","","",63,[[]]],[11,"from","guppy::graph::cargo","",10,[[["initialsplatformsummary",4]]]],[11,"from","guppy::graph","",53,[[["direction",4]]]],[11,"from","guppy","",83,[[],["obs",3]]],[11,"from","","",83,[[],["obs",3]]],[11,"from","","",83,[[["arc",3]],["obs",3]]],[11,"into_iter","guppy::graph::feature::feature_list","",12,[[]]],[11,"next","","",13,[[],["option",4]]],[11,"next","","",14,[[],["option",4]]],[11,"clone","guppy::debug_ignore","",2,[[],["debugignore",3]]],[11,"clone","guppy","",55,[[],["dependencykind",4]]],[11,"clone","guppy::errors","",4,[[],["featuregraphwarning",4]]],[11,"clone","","",6,[[],["featurebuildstage",4]]],[11,"clone","guppy::graph","",41,[[],["buildtargetid",4]]],[11,"clone","","",42,[[],["buildtargetkind",4]]],[11,"clone","guppy::graph::cargo","",58,[[],["cargooptions",3]]],[11,"clone","","",9,[[],["cargoresolverversion",4]]],[11,"clone","","",10,[[],["initialsplatform",4]]],[11,"clone","","",35,[[],["cargoset",3]]],[11,"clone","","",11,[[],["buildplatform",4]]],[11,"clone","guppy::graph::feature::feature_list","",12,[[],["featurelist",3]]],[11,"clone","","",61,[[],["displayfeatures",3]]],[11,"clone","guppy::graph::feature","",62,[[],["featuregraph",3]]],[11,"clone","","",63,[[],["featureid",3]]],[11,"clone","","",64,[[],["featuremetadata",3]]],[11,"clone","","",65,[[],["crosslink",3]]],[11,"clone","","",15,[[],["featuretype",4]]],[11,"clone","","",66,[[],["featurefilterfn",3]]],[11,"clone","","",17,[[],["standardfeatures",4]]],[11,"clone","","",67,[[],["featurequery",3]]],[11,"clone","","",68,[[],["featureset",3]]],[11,"clone","guppy::graph","",69,[[],["packagegraph",3]]],[11,"clone","","",70,[[],["dependscache",3]]],[11,"clone","","",71,[[],["workspace",3]]],[11,"clone","","",72,[[],["packagemetadata",3]]],[11,"clone","","",43,[[],["packagesource",4]]],[11,"clone","","",44,[[],["externalsource",4]]],[11,"clone","","",46,[[],["gitreq",4]]],[11,"clone","","",47,[[],["packagepublish",4]]],[11,"clone","","",73,[[],["packagelink",3]]],[11,"clone","","",74,[[],["dependencyreq",3]]],[11,"clone","","",75,[[],["enabledstatus",3]]],[11,"clone","","",48,[[],["platformstatus",4]]],[11,"clone","","",50,[[],["enabledternary",4]]],[11,"clone","","",76,[[],["platformeval",3]]],[11,"clone","","",77,[[],["prop010resolver",3]]],[11,"clone","","",78,[[],["packagequery",3]]],[11,"clone","","",79,[[],["packageset",3]]],[11,"clone","guppy::graph::summaries","",36,[[],["cargooptionssummary",3]]],[11,"clone","","",37,[[],["initialsplatformsummary",4]]],[11,"clone","","",40,[[],["featuresonlysummary",3]]],[11,"clone","guppy::graph","",53,[[],["dependencydirection",4]]],[11,"clone","guppy","",81,[[],["metadatacommand",3]]],[11,"clone","","",82,[[],["cargometadata",3]]],[11,"clone","","",83,[[],["obs",3]]],[11,"clone","","",84,[[],["packageid",3]]],[11,"default","guppy::graph::cargo","",58,[[]]],[11,"default","","",10,[[]]],[11,"default","guppy","",81,[[],["metadatacommand",3]]],[11,"cmp","guppy::debug_ignore","",2,[[["debugignore",3]],["ordering",4]]],[11,"cmp","guppy::errors","",4,[[["featuregraphwarning",4]],["ordering",4]]],[11,"cmp","","",6,[[["featurebuildstage",4]],["ordering",4]]],[11,"cmp","guppy::graph","",41,[[["buildtargetid",4]],["ordering",4]]],[11,"cmp","","",42,[[["buildtargetkind",4]],["ordering",4]]],[11,"cmp","guppy::graph::cargo","",11,[[["buildplatform",4]],["ordering",4]]],[11,"cmp","guppy::graph::feature","",63,[[["featureid",3]],["ordering",4]]],[11,"cmp","","",15,[[["featuretype",4]],["ordering",4]]],[11,"cmp","","",17,[[["standardfeatures",4]],["ordering",4]]],[11,"cmp","guppy::graph","",50,[[["enabledternary",4]],["ordering",4]]],[11,"cmp","guppy::graph::summaries","",40,[[["featuresonlysummary",3]],["ordering",4]]],[11,"cmp","guppy","",84,[[["packageid",3]],["ordering",4]]],[11,"eq","guppy::debug_ignore","",2,[[["debugignore",3]]]],[11,"ne","","",2,[[["debugignore",3]]]],[11,"eq","guppy","",55,[[["dependencykind",4]]]],[11,"eq","guppy::errors","",4,[[["featuregraphwarning",4]]]],[11,"ne","","",4,[[["featuregraphwarning",4]]]],[11,"eq","","",6,[[["featurebuildstage",4]]]],[11,"ne","","",6,[[["featurebuildstage",4]]]],[11,"eq","guppy::graph","",41,[[["buildtargetid",4]]]],[11,"ne","","",41,[[["buildtargetid",4]]]],[11,"eq","","",42,[[["buildtargetkind",4]]]],[11,"ne","","",42,[[["buildtargetkind",4]]]],[11,"eq","guppy::graph::cargo","",9,[[["cargoresolverversion",4]]]],[11,"eq","","",10,[[["initialsplatform",4]]]],[11,"eq","","",11,[[["buildplatform",4]]]],[11,"eq","guppy::graph::feature::feature_list","",12,[[["featurelist",3]]]],[11,"ne","","",12,[[["featurelist",3]]]],[11,"eq","guppy::graph::feature","",63,[[["featureid",3]]]],[11,"ne","","",63,[[["featureid",3]]]],[11,"eq","","",15,[[["featuretype",4]]]],[11,"eq","","",17,[[["standardfeatures",4]]]],[11,"eq","","",68,[[]]],[11,"eq","guppy::graph","",72,[[]]],[11,"eq","","",43,[[["packagesource",4]]]],[11,"ne","","",43,[[["packagesource",4]]]],[11,"eq","","",44,[[["externalsource",4]]]],[11,"ne","","",44,[[["externalsource",4]]]],[11,"eq","","",46,[[["gitreq",4]]]],[11,"ne","","",46,[[["gitreq",4]]]],[11,"eq","","",47,[[["packagepublish",4]]]],[11,"ne","","",47,[[["packagepublish",4]]]],[11,"eq","","",50,[[["enabledternary",4]]]],[11,"eq","","",79,[[]]],[11,"eq","guppy::graph::summaries","",36,[[["cargooptionssummary",3]]]],[11,"ne","","",36,[[["cargooptionssummary",3]]]],[11,"eq","","",37,[[["initialsplatformsummary",4]]]],[11,"ne","","",37,[[["initialsplatformsummary",4]]]],[11,"eq","","",40,[[["featuresonlysummary",3]]]],[11,"ne","","",40,[[["featuresonlysummary",3]]]],[11,"eq","guppy::graph","",43,[[["summarysource",4]]]],[11,"eq","","",53,[[["dependencydirection",4]]]],[11,"eq","guppy","",84,[[["packageid",3]]]],[11,"ne","","",84,[[["packageid",3]]]],[11,"eq","","",84,[[["packageid",3]]]],[11,"partial_cmp","guppy::debug_ignore","",2,[[["debugignore",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["debugignore",3]]]],[11,"le","","",2,[[["debugignore",3]]]],[11,"gt","","",2,[[["debugignore",3]]]],[11,"ge","","",2,[[["debugignore",3]]]],[11,"partial_cmp","guppy::errors","",4,[[["featuregraphwarning",4]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["featuregraphwarning",4]]]],[11,"le","","",4,[[["featuregraphwarning",4]]]],[11,"gt","","",4,[[["featuregraphwarning",4]]]],[11,"ge","","",4,[[["featuregraphwarning",4]]]],[11,"partial_cmp","","",6,[[["featurebuildstage",4]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["featurebuildstage",4]]]],[11,"le","","",6,[[["featurebuildstage",4]]]],[11,"gt","","",6,[[["featurebuildstage",4]]]],[11,"ge","","",6,[[["featurebuildstage",4]]]],[11,"partial_cmp","guppy::graph","",41,[[["buildtargetid",4]],[["option",4],["ordering",4]]]],[11,"lt","","",41,[[["buildtargetid",4]]]],[11,"le","","",41,[[["buildtargetid",4]]]],[11,"gt","","",41,[[["buildtargetid",4]]]],[11,"ge","","",41,[[["buildtargetid",4]]]],[11,"partial_cmp","","",42,[[["buildtargetkind",4]],[["option",4],["ordering",4]]]],[11,"lt","","",42,[[["buildtargetkind",4]]]],[11,"le","","",42,[[["buildtargetkind",4]]]],[11,"gt","","",42,[[["buildtargetkind",4]]]],[11,"ge","","",42,[[["buildtargetkind",4]]]],[11,"partial_cmp","guppy::graph::cargo","",11,[[["buildplatform",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","guppy::graph::feature","",63,[[["featureid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",63,[[["featureid",3]]]],[11,"le","","",63,[[["featureid",3]]]],[11,"gt","","",63,[[["featureid",3]]]],[11,"ge","","",63,[[["featureid",3]]]],[11,"partial_cmp","","",15,[[["featuretype",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",17,[[["standardfeatures",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","guppy::graph","",50,[[["enabledternary",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","guppy::graph::summaries","",40,[[["featuresonlysummary",3]],[["option",4],["ordering",4]]]],[11,"lt","","",40,[[["featuresonlysummary",3]]]],[11,"le","","",40,[[["featuresonlysummary",3]]]],[11,"gt","","",40,[[["featuresonlysummary",3]]]],[11,"ge","","",40,[[["featuresonlysummary",3]]]],[11,"partial_cmp","guppy","",84,[[["packageid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",84,[[["packageid",3]]]],[11,"le","","",84,[[["packageid",3]]]],[11,"gt","","",84,[[["packageid",3]]]],[11,"ge","","",84,[[["packageid",3]]]],[11,"deref","guppy::debug_ignore","",2,[[]]],[11,"deref","guppy","",83,[[]]],[11,"deref_mut","guppy::debug_ignore","",2,[[]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","guppy","",55,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::errors","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph::cargo","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph::feature::feature_list","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph::feature","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph::summaries","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph","",53,[[["formatter",3]],["result",6]]],[11,"fmt","guppy","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::errors","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph::feature::feature_list","",61,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph::feature","",63,[[["formatter",3]],["result",6]]],[11,"fmt","guppy::graph","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","guppy","",84,[[["formatter",3]],["result",6]]],[11,"hash","guppy::debug_ignore","",2,[[]]],[11,"hash","guppy","",55,[[]]],[11,"hash","guppy::graph","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","guppy::graph::cargo","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","guppy::graph::feature","",63,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",17,[[]]],[11,"hash","guppy::graph","",43,[[]]],[11,"hash","","",44,[[]]],[11,"hash","","",46,[[]]],[11,"hash","","",47,[[]]],[11,"hash","","",50,[[]]],[11,"hash","","",53,[[]]],[11,"hash","guppy","",84,[[]]],[11,"try_from","guppy::graph","",69,[[["metadatacommand",3]],["result",4]]],[11,"try_from","","",69,[[["metadatacommand",3]],["result",4]]],[11,"try_from","","",69,[[["cargometadata",3]],["result",4]]],[11,"write_str","","",54,[[],["result",6]]],[11,"write_char","","",54,[[],["result",6]]],[11,"source","guppy::errors","",3,[[],[["error",8],["option",4]]]],[11,"serialize","guppy::graph::cargo","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","guppy::graph::summaries","",36,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","","",40,[[],["result",4]]],[11,"serialize","guppy","",82,[[],["result",4]]],[11,"deserialize","guppy::graph::cargo","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","guppy::graph::summaries","",36,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","","",40,[[],["result",4]]],[11,"deserialize","guppy","",82,[[],["result",4]]],[11,"arbitrary_with","guppy::graph::cargo","",9,[[]]],[11,"arbitrary_with","","",10,[[]]],[11,"arbitrary_with","guppy::graph","",53,[[]]],[11,"new","guppy","Creates a new <code>Platform</code> from the given built-in triple and …",56,[[["targetfeatures",4]],[["platform",3],["result",4],["error",4]]]],[11,"custom","","Creates a new, custom platform from a <code>TargetInfo</code> and …",56,[[["targetinfo",3],["targetfeatures",4]],["platform",3]]],[11,"add_flags","","Adds a set of flags to accept.",56,[[]]],[11,"triple","","Returns the target triple for this platform.",56,[[]]],[11,"flags","","Returns the set of flags enabled for this platform.",56,[[]]],[11,"has_flag","","Returns true if this flag was set with <code>add_flags</code>.",56,[[]]],[11,"target_info","","Returns the underlying <code>TargetInfo</code>.",56,[[],["targetinfo",3]]],[11,"target_features","","Returns the set of target features for this platform.",56,[[],["targetfeatures",4]]],[11,"is_custom","","Returns true if this is a custom platform, created by …",56,[[]]],[11,"current","","Returns the current platform, as detected at build time.",56,[[],[["option",4],["platform",3]]]],[11,"strategy","","Given a way to generate <code>TargetFeatures</code> instances, this …",56,[[]]],[11,"filtered_strategy","","A version of <code>strategy</code> that allows target triples to be …",56,[[]]],[11,"features","","Creates a new <code>TargetFeatures</code> which matches some features.",1,[[],["targetfeatures",4]]],[11,"none","","Creates a new <code>TargetFeatures</code> which doesn\'t match any …",1,[[],["targetfeatures",4]]],[11,"matches","","Returns <code>Some(true)</code> if this feature is a match, <code>Some(false)</code>…",1,[[],["option",4]]],[18,"VALUES","","A list of all the possible values of <code>DependencyKind</code>.",55,null],[11,"to_str","","Returns a string representing the kind of dependency this …",55,[[]]],[11,"id","guppy::graph","Returns the unique identifier for this build target.",57,[[],["buildtargetid",4]]],[11,"name","","Returns the name of this build target.",57,[[]]],[11,"kind","","Returns the kind of this build target.",57,[[],["buildtargetkind",4]]],[11,"required_features","","Returns the features required for this build target.",57,[[]]],[11,"path","","Returns the absolute path of the location where the …",57,[[],["utf8path",3]]],[11,"edition","","Returns the Rust edition for this build target.",57,[[]]],[11,"doc_tests","","Returns true if documentation tests are enabled for this …",57,[[]]],[11,"name","","Returns the name embedded in this identifier, or <code>None</code> if …",41,[[],["option",4]]],[11,"new","guppy::graph::cargo","Creates a new <code>CargoOptions</code> with this resolver version and …",58,[[]]],[11,"set_version","","Sets the Cargo feature resolver version.",58,[[["cargoresolverversion",4]]]],[11,"set_include_dev","","If set to true, causes dev-dependencies of the initial …",58,[[]]],[11,"set_initials_platform","","Configures the way initials are treated on the target and …",58,[[["initialsplatform",4]]]],[11,"set_platform","","Sets both the target and host platforms to the provided …",58,[[["option",4]]]],[11,"set_target_platform","","Sets the target platform to the provided one, or to …",58,[[["option",4]]]],[11,"set_host_platform","","Sets the host platform to the provided one, or to …",58,[[["option",4]]]],[11,"add_omitted_packages","","Omits edges into the given packages.",58,[[]]],[11,"new","","Simulates a Cargo build of this feature set, with the …",35,[[["featureset",3],["cargooptions",3]],[["error",4],["result",4]]]],[11,"feature_graph","","Returns the feature graph for this <code>CargoSet</code> instance.",35,[[],["featuregraph",3]]],[11,"package_graph","","Returns the package graph for this <code>CargoSet</code> instance.",35,[[],["packagegraph",3]]],[11,"initials","","Returns the initial packages and features from which the …",35,[[],["featureset",3]]],[11,"features_only","","Returns the packages and features that took part in …",35,[[],["featureset",3]]],[11,"target_features","","Returns the feature set enabled on the target platform.",35,[[],["featureset",3]]],[11,"host_features","","Returns the feature set enabled on the host platform.",35,[[],["featureset",3]]],[11,"platform_features","","Returns the feature set enabled on the specified build …",35,[[["buildplatform",4]],["featureset",3]]],[11,"all_features","","Returns the feature sets across the target and host build …",35,[[]]],[11,"target_direct_deps","","Returns the set of workspace and direct dependency …",35,[[],["packageset",3]]],[11,"host_direct_deps","","Returns the set of workspace and direct dependency …",35,[[],["packageset",3]]],[11,"platform_direct_deps","","Returns the set of workspace and direct dependency …",35,[[["buildplatform",4]],["packageset",3]]],[11,"all_direct_deps","","Returns the set of workspace and direct dependency …",35,[[]]],[11,"proc_macro_links","","Returns <code>PackageLink</code> instances for procedural macro …",35,[[]]],[11,"build_dep_links","","Returns <code>PackageLink</code> instances for build dependencies from …",35,[[]]],[18,"VALUES","","A list of all possible variants of <code>BuildPlatform</code>.",11,null],[11,"flip","","Returns the build platform that\'s not <code>self</code>.",11,[[]]],[11,"is_cyclic","guppy::graph","Returns true if these two IDs are in the same cycle.",59,[[["packageid",3]],[["error",4],["result",4]]]],[11,"all_cycles","","Returns all the cycles of 2 or more elements in this …",59,[[]]],[11,"is_cyclic","guppy::graph::feature","Returns true if these two IDs are in the same cycle.",60,[[],[["error",4],["result",4]]]],[11,"all_cycles","","Returns all the cycles of 2 or more elements in this …",60,[[]]],[11,"feature_graph","guppy::graph","Returns a derived graph representing every feature of …",69,[[],["featuregraph",3]]],[11,"build_warnings","guppy::graph::feature","Returns any non-fatal warnings encountered while …",62,[[]]],[11,"package_graph","","Returns the <code>PackageGraph</code> from which this feature graph …",62,[[],["packagegraph",3]]],[11,"feature_count","","Returns the total number of (package ID, feature) …",62,[[]]],[11,"link_count","","Returns the number of links in this graph.",62,[[]]],[11,"metadata","","Returns metadata for the given feature ID, or <code>None</code> if the …",62,[[],[["result",4],["featuremetadata",3],["error",4]]]],[11,"all_features_for","","Returns all known features for a package.",62,[[["packageid",3]],[["error",4],["result",4],["featurelist",3]]]],[11,"is_default_feature","","Returns true if this feature is included in a package\'s …",62,[[],[["error",4],["result",4]]]],[11,"depends_on","","Returns true if <code>feature_a</code> depends (directly or …",62,[[],[["error",4],["result",4]]]],[11,"directly_depends_on","","Returns true if <code>feature_a</code> directly depends on <code>feature_b</code>.",62,[[],[["error",4],["result",4]]]],[11,"cycles","","Returns information about dependency cycles.",62,[[],["cycles",3]]],[11,"new","","Creates a new <code>FeatureId</code>.",63,[[["packageid",3]]]],[11,"base","","Creates a new <code>FeatureId</code> representing the \\\"base\\\" feature …",63,[[["packageid",3]]]],[11,"package_id","","Returns the package ID.",63,[[],["packageid",3]]],[11,"feature","","Returns the name of the feature, or <code>None</code> if this is the …",63,[[],["option",4]]],[11,"is_base","","Returns true if this is the \\\"base\\\" feature for the …",63,[[]]],[11,"feature_id","","Returns the feature ID corresponding to this metadata.",64,[[],["featureid",3]]],[11,"package_id","","Returns the package ID corresponding to this metadata.",64,[[],["packageid",3]]],[11,"package","","Returns the package metadata corresponding to this …",64,[[],["packagemetadata",3]]],[11,"feature_type","","Returns the type of this feature.",64,[[],["featuretype",4]]],[11,"from","","Returns the feature which depends on the <code>to</code> feature.",65,[[],["featuremetadata",3]]],[11,"to","","Returns the feature which is depended on by the <code>from</code> …",65,[[],["featuremetadata",3]]],[11,"endpoints","","Returns the endpoints as a pair of features <code>(from, to)</code>.",65,[[]]],[11,"normal","","Returns details about this feature dependency from the …",65,[[],["platformstatus",4]]],[11,"build","","Returns details about this feature dependency from the …",65,[[],["platformstatus",4]]],[11,"dev","","Returns details about this feature dependency from the …",65,[[],["platformstatus",4]]],[11,"status_for_kind","","Returns details about this feature dependency from the …",65,[[["dependencykind",4]],["platformstatus",4]]],[11,"dev_only","","Returns true if this edge is dev-only, i.e. code from …",65,[[]]],[11,"package_link","","Returns the <code>PackageLink</code> from which this <code>CrossLink</code> was …",65,[[],["packagelink",3]]],[11,"prop010_id_strategy","","Returns a <code>Strategy</code> that generates random feature IDs from …",62,[[]]],[11,"prop010_set_strategy","","Returns a <code>Strategy</code> that generates random feature sets …",62,[[]]],[11,"new","","Returns a new instance of this wrapper.",66,[[]]],[18,"VALUES","","A list of all the possible values of <code>StandardFeatures</code>.",17,null],[11,"query_workspace","","Creates a new query over the entire workspace.",62,[[],["featurequery",3]]],[11,"query_directed","","Creates a new query that returns transitive dependencies …",62,[[["dependencydirection",4]],[["result",4],["featurequery",3],["error",4]]]],[11,"query_forward","","Creates a new query that returns transitive dependencies …",62,[[],[["result",4],["featurequery",3],["error",4]]]],[11,"query_reverse","","Creates a new query that returns transitive reverse …",62,[[],[["result",4],["featurequery",3],["error",4]]]],[11,"graph","","Returns the feature graph the query is going to be …",67,[[],["featuregraph",3]]],[11,"direction","","Returns the direction the query is happening in.",67,[[],["dependencydirection",4]]],[11,"initials","","Returns the list of initial features specified in the …",67,[[]]],[11,"initial_packages","","Returns the list of initial packages specified in the …",67,[[]]],[11,"starts_from_package","","Returns true if the query starts from the given package.",67,[[["packageid",3]],[["error",4],["result",4]]]],[11,"starts_from","","Returns true if the query starts from the given feature …",67,[[],[["error",4],["result",4]]]],[11,"resolve","","Resolves this query into a set of known feature IDs.",67,[[],["featureset",3]]],[11,"resolve_with","","Resolves this query into a set of known feature IDs, …",67,[[],["featureset",3]]],[11,"resolve_with_fn","","Resolves this query into a set of known feature IDs, …",67,[[],["featureset",3]]],[11,"resolve_all","","Creates a new <code>FeatureSet</code> consisting of all members of …",62,[[],["featureset",3]]],[11,"resolve_none","","Creates a new, empty <code>FeatureSet</code> associated with this …",62,[[],["featureset",3]]],[11,"resolve_ids","","Creates a new <code>FeatureSet</code> consisting of the specified …",62,[[],[["error",4],["result",4],["featureset",3]]]],[11,"graph","","Returns the <code>FeatureGraph</code> that this feature set was …",68,[[],["featuregraph",3]]],[11,"len","","Returns the number of feature IDs in this set.",68,[[]]],[11,"is_empty","","Returns true if no feature IDs were resolved in this set.",68,[[]]],[11,"contains","","Returns true if this set contains the given feature ID.",68,[[],[["error",4],["result",4]]]],[11,"contains_package","","Returns true if this set contains this package.",68,[[["packageid",3]],[["error",4],["result",4]]]],[11,"to_feature_query","","Creates a new <code>FeatureQuery</code> from this set in the specified …",68,[[["dependencydirection",4]],["featurequery",3]]],[11,"union","","Returns a <code>FeatureSet</code> that contains all packages present …",68,[[]]],[11,"intersection","","Returns a <code>FeatureSet</code> that contains all packages present …",68,[[]]],[11,"difference","","Returns a <code>FeatureSet</code> that contains all packages present …",68,[[]]],[11,"symmetric_difference","","Returns a <code>FeatureSet</code> that contains all packages present …",68,[[]]],[11,"features_for","","Returns a list of features present for this package, or …",68,[[["packageid",3]],[["error",4],["option",4],["result",4]]]],[11,"to_package_set","","Converts this <code>FeatureSet</code> into a <code>PackageSet</code> containing all …",68,[[],["packageset",3]]],[11,"into_cargo_set","","Converts this feature set into a Cargo set, simulating a …",68,[[["cargooptions",3]],[["cargoset",3],["error",4],["result",4]]]],[11,"feature_ids","","Iterates over feature IDs, in topological order in the …",68,[[["dependencydirection",4]]]],[11,"features","","Iterates over feature metadatas, in topological order in …",68,[[["dependencydirection",4]]]],[11,"packages_with_features","","Iterates over package metadatas and their corresponding …",68,[[["dependencydirection",4]]]],[11,"root_ids","","Returns the set of \\\"root feature\\\" IDs in the specified …",68,[[["dependencydirection",4]]]],[11,"root_features","","Returns the set of \\\"root feature\\\" metadatas in the …",68,[[["dependencydirection",4]]]],[11,"cross_links","","Creates an iterator over <code>CrossLink</code> instances in the …",68,[[["dependencydirection",4]]]],[11,"par_iter","guppy::graph","Returns a parallel iterator over package metadatas, …",71,[[]]],[11,"par_iter_by_path","","Returns a parallel iterator over workspace paths and …",71,[[]]],[11,"par_iter_by_name","","Returns a parallel iterator over workspace names and …",71,[[]]],[11,"from_command","","Executes the given <code>MetadataCommand</code> and constructs a …",69,[[["metadatacommand",3]],[["error",4],["result",4]]]],[11,"from_metadata","","Parses the given <code>Metadata</code> and constructs a <code>PackageGraph</code> …",69,[[["cargometadata",3]],[["error",4],["result",4]]]],[11,"from_json","","Constructs a package graph from the given JSON output of …",69,[[],[["error",4],["result",4]]]],[11,"workspace","","Returns information about the workspace.",69,[[],["workspace",3]]],[11,"package_ids","","Returns an iterator over all the package IDs in this …",69,[[]]],[11,"packages","","Returns an iterator over all the packages in this graph.",69,[[]]],[11,"metadata","","Returns the metadata for the given package ID.",69,[[["packageid",3]],[["error",4],["result",4],["packagemetadata",3]]]],[11,"package_count","","Returns the number of packages in this graph.",69,[[]]],[11,"link_count","","Returns the number of links in this graph.",69,[[]]],[11,"new_depends_cache","","Creates a new cache for <code>depends_on</code> queries.",69,[[],["dependscache",3]]],[11,"depends_on","","Returns true if <code>package_a</code> depends (directly or …",69,[[["packageid",3]],[["error",4],["result",4]]]],[11,"directly_depends_on","","Returns true if <code>package_a</code> directly depends on <code>package_b</code>.",69,[[["packageid",3]],[["error",4],["result",4]]]],[11,"cycles","","Returns information about dependency cycles in this graph.",69,[[],["cycles",3]]],[11,"new","","Creates a new cache for <code>depends_on</code> queries for this …",70,[[["packagegraph",3]]]],[11,"depends_on","","Returns true if <code>package_a</code> depends (directly or …",70,[[["packageid",3]],[["error",4],["result",4]]]],[11,"root","","Returns the workspace root.",71,[[],["utf8path",3]]],[11,"member_count","","Returns the number of packages in this workspace.",71,[[]]],[11,"contains_name","","Returns true if the workspace contains a package by the …",71,[[]]],[11,"contains_path","","Returns true if the workspace contains a package by the …",71,[[]]],[11,"iter","","Returns an iterator over package metadatas, sorted by the …",71,[[]]],[11,"iter_by_path","","Returns an iterator over workspace paths and package …",71,[[]]],[11,"iter_by_name","","Returns an iterator over workspace names and package …",71,[[]]],[11,"member_ids","","Returns an iterator over package IDs for workspace …",71,[[]]],[11,"member_by_path","","Maps the given path to the corresponding workspace member.",71,[[],[["result",4],["packagemetadata",3],["error",4]]]],[11,"members_by_paths","","Maps the given paths to their corresponding workspace …",71,[[],[["error",4],["result",4]]]],[11,"member_by_name","","Maps the given name to the corresponding workspace member.",71,[[],[["result",4],["packagemetadata",3],["error",4]]]],[11,"members_by_names","","Maps the given names to their corresponding workspace …",71,[[],[["error",4],["result",4]]]],[11,"id","","Returns the unique identifier for this package.",72,[[],["packageid",3]]],[11,"to_package_query","","Creates a <code>PackageQuery</code> consisting of this package, in the …",72,[[["dependencydirection",4]],["packagequery",3]]],[11,"to_package_set","","Creates a <code>PackageSet</code> consisting of just this package.",72,[[],["packageset",3]]],[11,"direct_links_directed","","Returns <code>PackageLink</code> instances corresponding to the direct …",72,[[["dependencydirection",4]]]],[11,"direct_links","","Returns <code>PackageLink</code> instances corresponding to the direct …",72,[[]]],[11,"reverse_direct_links","","Returns <code>PackageLink</code> instances corresponding to the …",72,[[]]],[11,"name","","Returns the name of this package.",72,[[]]],[11,"version","","Returns the version of this package as resolved by Cargo.",72,[[],["version",3]]],[11,"authors","","Returns the authors of this package.",72,[[]]],[11,"description","","Returns a short description for this package.",72,[[],["option",4]]],[11,"license","","Returns an SPDX 2.1 license expression for this package, …",72,[[],["option",4]]],[11,"license_file","","Returns the path to a license file for this package, if …",72,[[],[["utf8path",3],["option",4]]]],[11,"source","","Returns the source from which this package was retrieved.",72,[[],["packagesource",4]]],[11,"in_workspace","","Returns true if this package is in the workspace.",72,[[]]],[11,"manifest_path","","Returns the full path to the <code>Cargo.toml</code> for this package.",72,[[],["utf8path",3]]],[11,"categories","","Returns categories for this package.",72,[[]]],[11,"keywords","","Returns keywords for this package.",72,[[]]],[11,"readme","","Returns a path to the README for this package, if …",72,[[],[["utf8path",3],["option",4]]]],[11,"repository","","Returns the source code repository for this package, if …",72,[[],["option",4]]],[11,"edition","","Returns the Rust edition this package is written against.",72,[[]]],[11,"metadata_table","","Returns the freeform metadata table for this package.",72,[[],["jsonvalue",4]]],[11,"links","","Returns the name of a native library this package links …",72,[[],["option",4]]],[11,"publish","","Returns the registries to which this package may be …",72,[[],["packagepublish",4]]],[11,"build_targets","","Returns all the build targets for this package.",72,[[]]],[11,"build_target","","Looks up a build target by identifier.",72,[[["buildtargetid",4]],[["option",4],["buildtarget",3]]]],[11,"is_proc_macro","","Returns true if this package is a procedural macro.",72,[[]]],[11,"has_build_script","","Returns true if this package has a build script.",72,[[]]],[11,"has_default_feature","","Returns true if this package has a named feature named …",72,[[]]],[11,"default_feature_id","","Returns the <code>FeatureId</code> corresponding to the default …",72,[[],["featureid",3]]],[11,"named_features","","Returns the list of named features available for this …",72,[[]]],[18,"CRATES_IO_REGISTRY","","The path to the crates.io registry.",43,null],[11,"is_workspace","","Returns true if this package source represents a …",43,[[]]],[11,"is_path","","Returns true if this package source represents a path …",43,[[]]],[11,"is_external","","Returns true if this package source represents an …",43,[[]]],[11,"is_crates_io","","Returns true if the source is <code>crates.io</code>.",43,[[]]],[11,"is_local","","Returns true if this package is a local dependency, i.e. …",43,[[]]],[11,"workspace_path","","Returns the path if this is a workspace dependency, or …",43,[[],[["utf8path",3],["option",4]]]],[11,"local_path","","Returns the local path if this is a local dependency, or …",43,[[],[["utf8path",3],["option",4]]]],[11,"external_source","","Returns the external source if this is an external …",43,[[],["option",4]]],[11,"parse_external","","Attempts to parse an external source.",43,[[],[["externalsource",4],["option",4]]]],[18,"REGISTRY_PLUS","","The string <code>\\\"registry+\\\"</code>.",44,null],[18,"GIT_PLUS","","The string <code>\\\"git+\\\"</code>.",44,null],[18,"BRANCH_EQ","","The string <code>\\\"?branch=\\\"</code>.",44,null],[18,"TAG_EQ","","The string <code>\\\"?tag=\\\"</code>.",44,null],[18,"REV_EQ","","The string <code>\\\"?rev=\\\"</code>.",44,null],[11,"new","","Attempts to parse the given string as an external source.",44,[[],["option",4]]],[18,"CRATES_IO","","The string <code>\\\"crates-io\\\"</code>, indicating that a package can be …",47,null],[11,"is_unrestricted","","Returns true if this package can be published to any …",47,[[]]],[11,"can_publish_to","","Returns true if a package can be published to the given …",47,[[]]],[11,"can_publish_to_crates_io","","Returns true if a package can be published to crates.io.",47,[[]]],[11,"is_never","","Returns true if a package cannot be published to any …",47,[[]]],[11,"from","","Returns the package which depends on the <code>to</code> package.",73,[[],["packagemetadata",3]]],[11,"to","","Returns the package which is depended on by the <code>from</code> …",73,[[],["packagemetadata",3]]],[11,"endpoints","","Returns the endpoints as a pair of packages <code>(from, to)</code>.",73,[[]]],[11,"dep_name","","Returns the name for this dependency edge. This can be …",73,[[]]],[11,"resolved_name","","Returns the resolved name for this dependency edge. This …",73,[[]]],[11,"version_req","","Returns the semver requirements specified for this …",73,[[],["versionreq",3]]],[11,"normal","","Returns details about this dependency from the …",73,[[],["dependencyreq",3]]],[11,"build","","Returns details about this dependency from the …",73,[[],["dependencyreq",3]]],[11,"dev","","Returns details about this dependency from the …",73,[[],["dependencyreq",3]]],[11,"req_for_kind","","Returns details about this dependency from the section …",73,[[["dependencykind",4]],["dependencyreq",3]]],[11,"dev_only","","Return true if this edge is dev-only, i.e. code from this …",73,[[]]],[11,"is_present","","Returns true if there is at least one <code>Cargo.toml</code> entry …",74,[[]]],[11,"status","","Returns the enabled status of this dependency.",74,[[],["enabledstatus",3]]],[11,"default_features","","Returns the enabled status of this dependency when …",74,[[],["enabledstatus",3]]],[11,"no_default_features","","Returns the enabled status of this dependency when …",74,[[],["enabledstatus",3]]],[11,"features","","Returns a list of all features possibly enabled by this …",74,[[]]],[11,"feature_status","","Returns the enabled status of this feature.",74,[[],["enabledstatus",3]]],[11,"is_always_required","","Returns true if this dependency is required on all …",75,[[]]],[11,"is_never","","Returns true if this dependency is never enabled on any …",75,[[]]],[11,"required_on","","Evaluates whether this dependency is required on the …",75,[[["platform",3]],["enabledternary",4]]],[11,"required_on_any","","Returns true if there are any platforms on which this …",75,[[]]],[11,"enabled_on","","Evaluates whether this dependency is enabled (required or …",75,[[["platform",3]],["enabledternary",4]]],[11,"enabled_on_any","","Returns true if there are any platforms on which this …",75,[[]]],[11,"required_status","","Returns the <code>PlatformStatus</code> corresponding to whether this …",75,[[],["platformstatus",4]]],[11,"optional_status","","Returns the <code>PlatformStatus</code> corresponding to whether this …",75,[[],["platformstatus",4]]],[11,"is_always","","Returns true if this dependency is always enabled on all …",48,[[]]],[11,"is_never","","Returns true if this dependency is never enabled on any …",48,[[]]],[11,"is_present","","Returns true if this dependency is possibly enabled on …",48,[[]]],[11,"enabled_on","","Evaluates whether this dependency is enabled on the given …",48,[[["platform",3]],["enabledternary",4]]],[11,"is_known","","Returns true if the status is known (either enabled or …",50,[[]]],[11,"eval","","Runs this evaluator against the given platform.",76,[[["platform",3]],["enabledternary",4]]],[11,"prop010_id_strategy","","Returns a <code>Strategy</code> that generates random package IDs from …",69,[[]]],[11,"prop010_link_strategy","","Returns a <code>Strategy</code> that generates random dependency links …",69,[[]]],[11,"prop010_resolver_strategy","","Returns a <code>Strategy</code> that generates a random <code>PackageResolver</code>…",69,[[]]],[11,"prop010_cargo_options_strategy","","Returns a <code>Strategy</code> that generates a random <code>CargoOptions</code> …",69,[[]]],[11,"prop010_name_strategy","","Returns a <code>Strategy</code> that generates random package names …",71,[[]]],[11,"prop010_id_strategy","","Returns a <code>Strategy</code> that generates random package IDs from …",71,[[]]],[11,"check_depends_on","","If called with true, this resolver will then verify that …",77,[[]]],[11,"accept_link","","Returns true if the given link is accepted by this …",77,[[["packagelink",3]]]],[11,"query_workspace","","Creates a new forward query over the entire workspace.",69,[[],["packagequery",3]]],[11,"query_workspace_paths","","Creates a new forward query over the specified workspace …",69,[[],[["error",4],["result",4],["packagequery",3]]]],[11,"query_workspace_names","","Creates a new forward query over the specified workspace …",69,[[],[["error",4],["result",4],["packagequery",3]]]],[11,"query_directed","","Creates a new query that returns transitive dependencies …",69,[[["dependencydirection",4]],[["result",4],["packagequery",3],["error",4]]]],[11,"query_forward","","Creates a new query that returns transitive dependencies …",69,[[],[["result",4],["packagequery",3],["error",4]]]],[11,"query_reverse","","Creates a new query that returns transitive reverse …",69,[[],[["result",4],["packagequery",3],["error",4]]]],[11,"graph","","Returns the package graph on which the query is going to …",78,[[],["packagegraph",3]]],[11,"direction","","Returns the direction the query is happening in.",78,[[],["dependencydirection",4]]],[11,"initials","","Returns the list of initial packages specified in the …",78,[[]]],[11,"starts_from","","Returns true if the query starts from the given package …",78,[[["packageid",3]],[["error",4],["result",4]]]],[11,"to_feature_query","","Converts this <code>PackageQuery</code> into a <code>FeatureQuery</code>, using the …",78,[[],["featurequery",3]]],[11,"resolve","","Resolves this query into a set of known packages, …",78,[[],["packageset",3]]],[11,"resolve_with","","Resolves this query into a set of known packages, using …",78,[[],["packageset",3]]],[11,"resolve_with_fn","","Resolves this query into a set of known packages, using …",78,[[],["packageset",3]]],[11,"resolve_all","","Creates a new <code>PackageSet</code> consisting of all members of …",69,[[],["packageset",3]]],[11,"resolve_none","","Creates a new, empty <code>PackageSet</code> associated with this …",69,[[],["packageset",3]]],[11,"resolve_ids","","Creates a new <code>PackageSet</code> consisting of the specified …",69,[[],[["error",4],["result",4],["packageset",3]]]],[11,"resolve_workspace","","Creates a new <code>PackageSet</code> consisting of all packages in …",69,[[],["packageset",3]]],[11,"resolve_workspace_paths","","Creates a new <code>PackageSet</code> consisting of the specified …",69,[[],[["error",4],["result",4],["packageset",3]]]],[11,"resolve_workspace_names","","Creates a new <code>PackageSet</code> consisting of the specified …",69,[[],[["error",4],["result",4],["packageset",3]]]],[11,"resolve_package_name","","Creates a new <code>PackageSet</code> consisting of packages with the …",69,[[],["packageset",3]]],[11,"len","","Returns the number of packages in this set.",79,[[]]],[11,"is_empty","","Returns true if no packages were resolved in this set.",79,[[]]],[11,"contains","","Returns true if this package ID is contained in this …",79,[[["packageid",3]],[["error",4],["result",4]]]],[11,"to_package_query","","Creates a new <code>PackageQuery</code> from this set in the specified …",79,[[["dependencydirection",4]],["packagequery",3]]],[11,"union","","Returns a <code>PackageSet</code> that contains all packages present …",79,[[]]],[11,"intersection","","Returns a <code>PackageSet</code> that contains all packages present …",79,[[]]],[11,"difference","","Returns a <code>PackageSet</code> that contains all packages present …",79,[[]]],[11,"symmetric_difference","","Returns a <code>PackageSet</code> that contains all packages present …",79,[[]]],[11,"to_feature_set","","Creates a new <code>FeatureSet</code> consisting of all packages in …",79,[[],["featureset",3]]],[11,"package_ids","","Iterates over package IDs, in topological order in the …",79,[[["dependencydirection",4]]]],[11,"packages","","Iterates over package metadatas, in topological order in …",79,[[["dependencydirection",4]]]],[11,"root_ids","","Returns the set of \\\"root package\\\" IDs in the specified …",79,[[["dependencydirection",4]]]],[11,"root_packages","","Returns the set of \\\"root package\\\" metadatas in the …",79,[[["dependencydirection",4]]]],[11,"links","","Creates an iterator over <code>PackageLink</code> instances.",79,[[["dependencydirection",4]]]],[11,"display_dot","","Constructs a representation of the selected packages in …",79,[[["packagedotvisitor",8]]]],[11,"new","guppy::graph::summaries::diff","Computes a diff between two summaries.",19,[[["summarywithmetadata",3],["summarywithmetadata",3]],["summarydiff",3]]],[11,"is_changed","","Returns true if there are any changes in this diff.",19,[[]]],[11,"is_unchanged","","Returns true if there are no changes in this diff.",19,[[]]],[11,"report","","Returns a report for this diff.",19,[[],["summaryreport",3]]],[11,"new","","Constructs a new <code>PackageDiff</code> from a pair of <code>PackageMap</code> …",20,[[["btreemap",3]],["packagediff",3]]],[11,"is_unchanged","","Returns true if there are no changes in this diff.",20,[[]]],[11,"tag","","Returns the tag for this status.",21,[[],["summarydifftag",4]]],[11,"latest_status","","Returns the new package status if available, otherwise …",21,[[],["packagestatus",4]]],[11,"new","","Creates a new <code>SummaryReport</code> that can be displayed.",80,[[["summarydiff",3]],["summaryreport",3]]],[11,"new","guppy::graph::summaries","Creates a new <code>SummaryId</code>.",28,[[["version",3],["summarysource",4]],["summaryid",3]]],[11,"workspace","","Creates a new <code>SummarySource</code> representing a workspace …",29,[[],["summarysource",4]]],[11,"path","","Creates a new <code>SummarySource</code> representing a non-workspace …",29,[[],["summarysource",4]]],[11,"crates_io","","Creates a new <code>SummarySource</code> representing the <code>crates.io</code> …",29,[[],["summarysource",4]]],[11,"external","","Creates a new <code>SummarySource</code> representing an external …",29,[[],["summarysource",4]]],[11,"parse","","Deserializes a summary from the given string, with …",33,[[],[["error",3],["result",4],["summarywithmetadata",3]]]],[11,"diff","","Perform a diff of this summary against another.",33,[[["summarywithmetadata",3]],["summarydiff",3]]],[11,"to_string","","Serializes this summary to a TOML string.",33,[[],[["error",4],["string",3],["result",4]]]],[11,"write_to_string","","Serializes this summary into the given TOML string, using …",33,[[["string",3]],[["error",4],["result",4]]]],[11,"new","","Creates a new <code>PlatformSummary</code> instance from a platform.",34,[[["platform",3]],[["error",4],["result",4],["platformsummary",3]]]],[11,"to_platform","","Converts <code>self</code> to a <code>Platform</code>.",34,[[],[["platform",3],["result",4],["error",4]]]],[11,"metadata_by_summary_id","guppy::graph","Converts this <code>SummaryId</code> to a <code>PackageMetadata</code>.",69,[[["summaryid",3]],[["error",4],["result",4],["packagemetadata",3]]]],[11,"to_summary_id","","Converts this metadata to a <code>SummaryId</code>.",72,[[],["summaryid",3]]],[11,"to_summary_source","","Converts a <code>PackageSource</code> into a <code>SummarySource</code>.",43,[[],["summarysource",4]]],[11,"new","guppy","Creates a default <code>cargo metadata</code> command builder.",81,[[]]],[11,"cargo_path","","Sets the path to the <code>cargo</code> executable.",81,[[]]],[11,"manifest_path","","Sets the path to <code>Cargo.toml</code>.",81,[[]]],[11,"current_dir","","Sets the current directory of the <code>cargo metadata</code> process.",81,[[]]],[11,"other_options","","Arbitrary flags to pass to <code>cargo metadata</code>. These will be …",81,[[]]],[11,"exec","","Runs the configured <code>cargo metadata</code> and returns a …",81,[[],[["cargometadata",3],["error",4],["result",4]]]],[11,"build_graph","","Runs the configured <code>cargo metadata</code> and returns a parsed …",81,[[],[["result",4],["packagegraph",3],["error",4]]]],[11,"parse_json","","Deserializes this JSON blob into a <code>CargoMetadata</code>.",82,[[],[["error",4],["result",4]]]],[11,"serialize","","Serializes this metadata into the given writer.",82,[[],[["result",4],["error",4]]]],[11,"build_graph","","Parses this metadata and builds a <code>PackageGraph</code> from it.",82,[[],[["result",4],["packagegraph",3],["error",4]]]],[11,"new","","Creates a new <code>PackageId</code>.",84,[[]]],[11,"repr","","Returns the inner representation of a package ID. This is …",84,[[]]]],"p":[[4,"TargetSpecError"],[4,"TargetFeatures"],[3,"DebugIgnore"],[4,"Error"],[4,"FeatureGraphWarning"],[13,"MissingFeature"],[4,"FeatureBuildStage"],[13,"AddNamedFeatureEdges"],[13,"AddDependencyEdges"],[4,"CargoResolverVersion"],[4,"InitialsPlatform"],[4,"BuildPlatform"],[3,"FeatureList"],[3,"IntoIter"],[3,"Iter"],[4,"FeatureType"],[8,"FeatureFilter"],[4,"StandardFeatures"],[8,"FeatureResolver"],[3,"SummaryDiff"],[3,"PackageDiff"],[4,"SummaryDiffStatus"],[13,"Added"],[13,"Removed"],[13,"Modified"],[4,"SummaryDiffTag"],[3,"PackageInfo"],[4,"PackageStatus"],[3,"SummaryId"],[4,"SummarySource"],[13,"Workspace"],[13,"Path"],[13,"External"],[3,"SummaryWithMetadata"],[3,"PlatformSummary"],[3,"CargoSet"],[3,"CargoOptionsSummary"],[4,"InitialsPlatformSummary"],[13,"V1"],[13,"V2"],[3,"FeaturesOnlySummary"],[4,"BuildTargetId"],[4,"BuildTargetKind"],[4,"PackageSource"],[4,"ExternalSource"],[13,"Git"],[4,"GitReq"],[4,"PackagePublish"],[4,"PlatformStatus"],[13,"PlatformDependent"],[4,"EnabledTernary"],[8,"PackageResolver"],[8,"PackageDotVisitor"],[4,"DependencyDirection"],[3,"DotWrite"],[4,"DependencyKind"],[3,"Platform"],[3,"BuildTarget"],[3,"CargoOptions"],[3,"Cycles"],[3,"Cycles"],[3,"DisplayFeatures"],[3,"FeatureGraph"],[3,"FeatureId"],[3,"FeatureMetadata"],[3,"CrossLink"],[3,"FeatureFilterFn"],[3,"FeatureQuery"],[3,"FeatureSet"],[3,"PackageGraph"],[3,"DependsCache"],[3,"Workspace"],[3,"PackageMetadata"],[3,"PackageLink"],[3,"DependencyReq"],[3,"EnabledStatus"],[3,"PlatformEval"],[3,"Prop010Resolver"],[3,"PackageQuery"],[3,"PackageSet"],[3,"SummaryReport"],[3,"MetadataCommand"],[3,"CargoMetadata"],[3,"Obs"],[3,"PackageId"]]},\
"guppy_cmdlib":{"doc":"Support for CLI operations with guppy, with structopt …","i":[[0,"proptest","guppy_cmdlib","Proptest support.",null,null],[5,"triple_strategy","guppy_cmdlib::proptest","Generates a random, known target triple that can be …",null,[[]]],[3,"PackagesAndFeatures","guppy_cmdlib","Support for packages and features.",null,null],[12,"packages","","Packages to start the query from (default: entire …",0,null],[12,"features_only","","Packages that take part in feature unification but aren\'t …",0,null],[12,"features","","List of features to activate across all packages",0,null],[12,"all_features","","Activate all available features",0,null],[12,"no_default_features","","Do not activate the <code>default</code> feature",0,null],[11,"make_feature_sets","","Evaluates this struct against the given graph, and …",0,[[["packagegraph",3]],["result",6]]],[3,"CargoResolverOpts","","Support for options like the Cargo resolver version.",null,null],[12,"include_dev","","Include dev-dependencies of initial packages (default: …",1,null],[12,"initials_platform","","Include initial proc-macros on target platform (default: …",1,null],[12,"resolver_version","","",1,null],[5,"parse_resolver_version","","Parses a named resolver version into a …",null,[[],[["result",6],["string",3],["cargoresolverversion",4]]]],[5,"parse_initials_platform","","Parses a named initials platform into an InitialsPlatform.",null,[[],[["result",6],["string",3],["initialsplatform",4]]]],[3,"CargoMetadataOptions","","Context for invoking the <code>cargo metadata</code> command.",null,null],[12,"manifest_path","","Path to Cargo.toml",2,null],[11,"current_dir","","Returns the current directory.",2,[[],[["pathbuf",3],["result",6]]]],[11,"abs_manifest_path","","Returns the absolute canonical manifest path.",2,[[],[["pathbuf",3],["result",6]]]],[11,"make_command","","Evaluates this struct and creates a <code>MetadataCommand</code>.",2,[[],["metadatacommand",3]]],[5,"triple_to_platform","","Parse a given triple, the string \\\"current\\\", or \\\"any\\\", …",null,[[["option",4]],[["option",4],["result",6]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"borrow_replacement","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"borrow_replacement","","",1,[[]]],[11,"clone_boxed","","",1,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",1,[[]]],[11,"clone_boxed","","",1,[[],[["global",3],["box",3],["nonsyncfeatures",8]]]],[11,"self_address_mut","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"borrow_replacement","","",2,[[]]],[11,"clone_boxed","","",2,[[],[["global",3],["box",3],["defaultfeatures",8]]]],[11,"self_address_mut","","",2,[[]]],[11,"clone_boxed","","",2,[[],[["global",3],["box",3],["nonsyncfeatures",8]]]],[11,"self_address_mut","","",2,[[]]],[11,"clone","","",1,[[],["cargoresolveropts",3]]],[11,"clone","","",2,[[],["cargometadataoptions",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"clap","","",2,[[],["app",3]]],[11,"from_clap","","",2,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"is_subcommand","","",0,[[]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[]]],[11,"augment_clap","","",2,[[["app",3]],["app",3]]],[11,"is_subcommand","","",2,[[]]],[11,"strategy","","",0,[[["packagegraph",3]]]]],"p":[[3,"PackagesAndFeatures"],[3,"CargoResolverOpts"],[3,"CargoMetadataOptions"]]},\
"guppy_summaries":{"doc":"Facilities to serialize, deserialize and compare build …","i":[[0,"diff","guppy_summaries","Compare and diff summaries.",null,null],[3,"SummaryReport","guppy_summaries::diff","A report of a diff between two summaries.",null,null],[3,"SummaryDiff","","A diff of two package summaries.",null,null],[12,"target_packages","","Diff of target packages.",0,null],[12,"host_packages","","Diff of host packages.",0,null],[11,"new","","Computes a diff between two summaries.",0,[[["summarywithmetadata",3],["summarywithmetadata",3]]]],[11,"is_changed","","Returns true if there are any changes in this diff.",0,[[]]],[11,"is_unchanged","","Returns true if there are no changes in this diff.",0,[[]]],[11,"report","","Returns a report for this diff.",0,[[],["summaryreport",3]]],[6,"UnchangedInfo","","Type alias for list entries in the <code>PackageDiff::unchanged</code> …",null,null],[3,"PackageDiff","","A diff from a particular section of a summary.",null,null],[12,"changed","","Changed packages.",1,null],[12,"unchanged","","Unchanged packages, keyed by name.",1,null],[11,"new","","Constructs a new <code>PackageDiff</code> from a pair of <code>PackageMap</code> …",1,[[["packagemap",6]]]],[11,"is_unchanged","","Returns true if there are no changes in this diff.",1,[[]]],[4,"SummaryDiffStatus","","The diff status for a particular summary ID and source.",null,null],[13,"Added","","This package was added.",2,null],[12,"info","guppy_summaries::diff::SummaryDiffStatus","The information for this package.",3,null],[13,"Removed","guppy_summaries::diff","This package was removed.",2,null],[12,"old_info","guppy_summaries::diff::SummaryDiffStatus","The information this package used to have.",4,null],[13,"Modified","guppy_summaries::diff","Some details about the package changed:",2,null],[12,"old_version","guppy_summaries::diff::SummaryDiffStatus","The old version of this package, if the version changed.",5,null],[12,"old_source","","The old source of this package, if the source changed.",5,null],[12,"old_status","","The old status of this package, if the status changed.",5,null],[12,"new_status","","The current status of this package.",5,null],[12,"added_features","","The set of features added to the package.",5,null],[12,"removed_features","","The set of features removed from the package.",5,null],[12,"unchanged_features","","The set of features which were enabled both in both the …",5,null],[11,"tag","guppy_summaries::diff","Returns the tag for this status.",2,[[],["summarydifftag",4]]],[11,"latest_status","","Returns the new package status if available, otherwise …",2,[[],["packagestatus",4]]],[4,"SummaryDiffTag","","A tag representing <code>SummaryDiffStatus</code> except with no data …",null,null],[13,"Added","","This package was added.",6,null],[13,"Modified","","This package was modified.",6,null],[13,"Removed","","This package was removed.",6,null],[11,"new","","Creates a new <code>SummaryReport</code> that can be displayed.",7,[[["summarydiff",3]]]],[6,"PackageMap","guppy_summaries","A type representing a package map as used in <code>Summary</code> …",null,null],[3,"SummaryWithMetadata","","An in-memory representation of a build summary.",null,null],[12,"metadata","","Extra metadata associated with the summary.",8,null],[12,"target_packages","","The packages and features built on the target platform.",8,null],[12,"host_packages","","The packages and features built on the host platform.",8,null],[3,"SummaryId","","A unique identifier for a package in a build summary.",null,null],[12,"name","","The name of the package.",9,null],[12,"version","","The version number of the package.",9,null],[12,"source","","The source for this package.",9,null],[4,"SummarySource","","The location of a package.",null,null],[13,"Workspace","","A workspace path.",10,null],[12,"workspace_path","guppy_summaries::SummarySource","The path of this package, relative to the workspace root.",11,null],[13,"Path","guppy_summaries","A non-workspace path.",10,null],[12,"path","guppy_summaries::SummarySource","The path of this package, relative to the workspace root.",12,null],[13,"CratesIo","guppy_summaries","The <code>crates.io</code> registry.",10,null],[13,"External","","An external source that\'s not the <code>crates.io</code> registry, …",10,null],[12,"source","guppy_summaries::SummarySource","The external source.",13,null],[3,"PackageInfo","guppy_summaries","Information about a package in a summary that isn\'t part …",null,null],[12,"status","","Where this package lies in the dependency graph.",14,null],[12,"features","","The features built for this package.",14,null],[4,"PackageStatus","","The status of a package in a summary, such as whether it …",null,null],[13,"Initial","","This package is part of the requested build set.",15,null],[13,"Workspace","","This is a workspace package that isn\'t part of the …",15,null],[13,"Direct","","This package is a direct non-workspace dependency.",15,null],[13,"Transitive","","This package is a transitive non-workspace dependency.",15,null],[11,"from","guppy_summaries::diff","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","guppy_summaries","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"clone","guppy_summaries::diff","",0,[[],["summarydiff",3]]],[11,"clone","","",1,[[],["packagediff",3]]],[11,"clone","","",2,[[],["summarydiffstatus",4]]],[11,"clone","","",6,[[],["summarydifftag",4]]],[11,"clone","","",7,[[],["summaryreport",3]]],[11,"clone","guppy_summaries","",8,[[],["summarywithmetadata",3]]],[11,"clone","","",9,[[],["summaryid",3]]],[11,"clone","","",10,[[],["summarysource",4]]],[11,"clone","","",14,[[],["packageinfo",3]]],[11,"clone","","",15,[[],["packagestatus",4]]],[11,"default","","",8,[[]]],[11,"cmp","guppy_summaries::diff","",6,[[["summarydifftag",4]],["ordering",4]]],[11,"cmp","guppy_summaries","",9,[[["summaryid",3]],["ordering",4]]],[11,"cmp","","",10,[[["summarysource",4]],["ordering",4]]],[11,"cmp","","",15,[[["packagestatus",4]],["ordering",4]]],[11,"eq","guppy_summaries::diff","",0,[[["summarydiff",3]]]],[11,"ne","","",0,[[["summarydiff",3]]]],[11,"eq","","",1,[[["packagediff",3]]]],[11,"ne","","",1,[[["packagediff",3]]]],[11,"eq","","",2,[[["summarydiffstatus",4]]]],[11,"ne","","",2,[[["summarydiffstatus",4]]]],[11,"eq","","",6,[[["summarydifftag",4]]]],[11,"eq","guppy_summaries","",8,[[["summarywithmetadata",3]]]],[11,"ne","","",8,[[["summarywithmetadata",3]]]],[11,"eq","","",9,[[["summaryid",3]]]],[11,"ne","","",9,[[["summaryid",3]]]],[11,"eq","","",10,[[["summarysource",4]]]],[11,"ne","","",10,[[["summarysource",4]]]],[11,"eq","","",14,[[["packageinfo",3]]]],[11,"ne","","",14,[[["packageinfo",3]]]],[11,"eq","","",15,[[["packagestatus",4]]]],[11,"partial_cmp","guppy_summaries::diff","",6,[[["summarydifftag",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","guppy_summaries","",9,[[["summaryid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["summaryid",3]]]],[11,"le","","",9,[[["summaryid",3]]]],[11,"gt","","",9,[[["summaryid",3]]]],[11,"ge","","",9,[[["summaryid",3]]]],[11,"partial_cmp","","",10,[[["summarysource",4]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["summarysource",4]]]],[11,"le","","",10,[[["summarysource",4]]]],[11,"gt","","",10,[[["summarysource",4]]]],[11,"ge","","",10,[[["summarysource",4]]]],[11,"partial_cmp","","",15,[[["packagestatus",4]],[["option",4],["ordering",4]]]],[11,"fmt","guppy_summaries::diff","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","guppy_summaries","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","guppy_summaries::diff","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","guppy_summaries","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"diff","","",14,[[],["edit",4]]],[11,"diff","","",15,[[],["edit",4]]],[11,"serialize","guppy_summaries::diff","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","guppy_summaries","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"parse","","Deserializes a summary from the given string, with …",8,[[],[["result",4],["error",3]]]],[11,"diff","","Perform a diff of this summary against another.",8,[[["summarywithmetadata",3]],["summarydiff",3]]],[11,"to_string","","Serializes this summary to a TOML string.",8,[[],[["result",4],["error",4],["string",3]]]],[11,"write_to_string","","Serializes this summary into the given TOML string, using …",8,[[["string",3]],[["result",4],["error",4]]]],[11,"new","","Creates a new <code>SummaryId</code>.",9,[[["summarysource",4],["version",3]]]],[11,"workspace","","Creates a new <code>SummarySource</code> representing a workspace …",10,[[]]],[11,"path","","Creates a new <code>SummarySource</code> representing a non-workspace …",10,[[]]],[11,"crates_io","","Creates a new <code>SummarySource</code> representing the <code>crates.io</code> …",10,[[]]],[11,"external","","Creates a new <code>SummarySource</code> representing an external …",10,[[]]]],"p":[[3,"SummaryDiff"],[3,"PackageDiff"],[4,"SummaryDiffStatus"],[13,"Added"],[13,"Removed"],[13,"Modified"],[4,"SummaryDiffTag"],[3,"SummaryReport"],[3,"SummaryWithMetadata"],[3,"SummaryId"],[4,"SummarySource"],[13,"Workspace"],[13,"Path"],[13,"External"],[3,"PackageInfo"],[4,"PackageStatus"]]},\
"hakari":{"doc":"<code>hakari</code> is a set of tools to manage <code>workspace-hack</code> …","i":[[0,"summaries","hakari","Generate summaries from <code>HakariBuilder</code> instances.",null,null],[3,"HakariBuilderSummary","hakari::summaries","A <code>HakariBuilder</code> in serializable form.",null,null],[12,"hakari_package","","The name of the Hakari package in the workspace.",0,null],[12,"version","","The resolver version used.",0,null],[12,"verify_mode","","Whether the builder was run in verify mode.",0,null],[12,"unify_target_host","","Unification across target and host.",0,null],[12,"unify_all","","Whether all dependencies were unified.",0,null],[12,"platforms","","The platforms used by the <code>HakariBuilder</code>.",0,null],[12,"omitted_packages","","The list of omitted packages.",0,null],[11,"new","","Creates a new <code>HakariBuilderSummary</code> from a builder.",0,[[["hakaribuilder",3]],[["targetspecerror",4],["result",4]]]],[11,"to_hakari_builder","","Creates a <code>HakariBuilder</code> from this summary and a …",0,[[["packagegraph",3]],[["result",4],["error",4],["hakaribuilder",3]]]],[11,"to_string","","Serializes this summary to a TOML string.",0,[[],[["result",4],["string",3],["error",4]]]],[11,"write_comment","","Serializes this summary to a TOML string, and adds <code>#</code> …",0,[[],[["result",4],["tomlouterror",4]]]],[11,"write_to_string","","Writes out the contents of this summary as TOML to the …",0,[[["string",3]],[["result",4],["error",4]]]],[0,"internals","hakari","Access to internal Hakari data structures.",null,null],[6,"ComputedInnerMap","hakari::internals","A target map or a host map in a <code>ComputedValue</code>.",null,null],[6,"ComputedMap","","The map of all build results computed by Hakari.",null,null],[3,"ComputedValue","","The values of a <code>ComputedMap</code>.",null,null],[12,"target_inner","","The feature sets built on the target platform.",1,null],[12,"host_inner","","The feature sets built on the host platform.",1,null],[3,"OutputKey","","A key representing a platform and host/target. Returned …",null,null],[12,"platform_idx","","The index of the build platform for this key, or <code>None</code> if …",2,null],[12,"build_platform","","The build platform: target or host.",2,null],[6,"OutputMap","","The map used by Hakari to generate output TOML.",null,null],[3,"HakariCargoToml","hakari","Support for maintaining <code>Cargo.toml</code> files that unify …",null,null],[4,"CargoTomlError","","An error that can occur while reading or writing a …",null,null],[13,"Io","","The contents of the <code>Cargo.toml</code> file could not be read or …",3,null],[12,"toml_path","hakari::CargoTomlError","The path that was attempted to be read.",4,null],[12,"error","","The error that occurred.",4,null],[13,"GeneratedSectionNotFound","hakari","The <code>Cargo.toml</code> was successfully read but …",3,null],[12,"toml_path","hakari::CargoTomlError","The path that was read.",5,null],[3,"Hakari","hakari","The result of a Hakari computation.",null,null],[12,"output_map","","The map built by Hakari of dependencies that need to be …",6,null],[12,"computed_map","","The complete map of dependency build results built by …",6,null],[3,"HakariBuilder","","Configures and constructs <code>Hakari</code> instances.",null,null],[4,"UnifyTargetHost","","Whether to unify feature sets for a given dependency …",null,null],[13,"None","","Perform no unification across the target and host feature …",7,null],[13,"UnifyOnBoth","","Perform unification across target and host feature sets, …",7,null],[13,"ReplicateTargetAsHost","","Perform unification across target and host feature sets, …",7,null],[3,"TomlOptions","","Options for Hakari TOML output.",null,null],[4,"TomlOutError","","An error that occurred while writing out TOML.",null,null],[13,"Platform","","An error occurred while serializing platform information.",8,null],[13,"Toml","","An error occurred while serializing TOML.",8,null],[12,"context","hakari::TomlOutError","A context string for the error.",9,null],[12,"err","","The underlying error.",9,null],[13,"FmtWrite","hakari","An error occurred while writing to a <code>fmt::Write</code> instance.",8,null],[13,"PathWithoutHakari","","Attempted to output a path dependency, but a Hakari …",8,null],[12,"package_id","hakari::TomlOutError","The package ID that Hakari tried to write out a …",10,null],[12,"rel_path","","The relative path to the package from the root of the …",10,null],[13,"UnrecognizedExternal","hakari","An external source wasn\'t recognized by guppy.",8,null],[12,"package_id","hakari::TomlOutError","The package ID that Hakari tried to write out a …",11,null],[12,"source","","The source string that wasn\'t recognized.",11,null],[11,"from","hakari","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"borrow_replacement","","",12,[[]]],[11,"clone_boxed","","",12,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",12,[[]]],[11,"clone_boxed","","",12,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",12,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"borrow_replacement","","",3,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"equivalent","","",13,[[]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"borrow_replacement","","",13,[[]]],[11,"clone_boxed","","",13,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",13,[[]]],[11,"clone_boxed","","",13,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",13,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"equivalent","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"borrow_replacement","","",7,[[]]],[11,"clone_boxed","","",7,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",7,[[]]],[11,"clone_boxed","","",7,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",7,[[]]],[11,"from","hakari::internals","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"equivalent","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"borrow_replacement","","",2,[[]]],[11,"clone_boxed","","",2,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",2,[[]]],[11,"clone_boxed","","",2,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",2,[[]]],[11,"from","hakari","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"borrow_replacement","","",6,[[]]],[11,"clone_boxed","","",6,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",6,[[]]],[11,"clone_boxed","","",6,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",6,[[]]],[11,"from","hakari::internals","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"borrow_replacement","","",1,[[]]],[11,"clone_boxed","","",1,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",1,[[]]],[11,"clone_boxed","","",1,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",1,[[]]],[11,"from","hakari::summaries","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"borrow_replacement","","",0,[[]]],[11,"clone_boxed","","",0,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",0,[[]]],[11,"clone_boxed","","",0,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",0,[[]]],[11,"from","hakari","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"borrow_replacement","","",14,[[]]],[11,"clone_boxed","","",14,[[],[["defaultfeatures",8],["global",3],["box",3]]]],[11,"self_address_mut","","",14,[[]]],[11,"clone_boxed","","",14,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",14,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"borrow_replacement","","",8,[[]]],[11,"from","","",8,[[["targetspecerror",4]]]],[11,"from","","",8,[[["error",3]]]],[11,"clone","","",12,[[],["hakaricargotoml",3]]],[11,"clone","","",13,[[],["hakaribuilder",3]]],[11,"clone","","",7,[[],["unifytargethost",4]]],[11,"clone","hakari::internals","",2,[[],["outputkey",3]]],[11,"clone","hakari","",6,[[],["hakari",3]]],[11,"clone","hakari::internals","",1,[[],["computedvalue",3]]],[11,"clone","hakari::summaries","",0,[[],["hakaribuildersummary",3]]],[11,"clone","hakari","",14,[[],["tomloptions",3]]],[11,"default","","",7,[[]]],[11,"default","hakari::internals","",1,[[],["computedvalue",3]]],[11,"default","hakari","",14,[[]]],[11,"cmp","","",7,[[["unifytargethost",4]],["ordering",4]]],[11,"cmp","hakari::internals","",2,[[["outputkey",3]],["ordering",4]]],[11,"eq","hakari","",13,[[]]],[11,"eq","","",7,[[["unifytargethost",4]]]],[11,"eq","hakari::internals","",2,[[["outputkey",3]]]],[11,"ne","","",2,[[["outputkey",3]]]],[11,"eq","hakari::summaries","",0,[[["hakaribuildersummary",3]]]],[11,"ne","","",0,[[["hakaribuildersummary",3]]]],[11,"partial_cmp","hakari","",7,[[["unifytargethost",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","hakari::internals","",2,[[["outputkey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["outputkey",3]]]],[11,"le","","",2,[[["outputkey",3]]]],[11,"gt","","",2,[[["outputkey",3]]]],[11,"ge","","",2,[[["outputkey",3]]]],[11,"fmt","hakari","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","hakari::internals","",2,[[["formatter",3]],["result",6]]],[11,"fmt","hakari","",6,[[["formatter",3]],["result",6]]],[11,"fmt","hakari::internals","",1,[[["formatter",3]],["result",6]]],[11,"fmt","hakari::summaries","",0,[[["formatter",3]],["result",6]]],[11,"fmt","hakari","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","","",7,[[]]],[11,"hash","hakari::internals","",2,[[]]],[11,"source","hakari","",3,[[],[["error",8],["option",4]]]],[11,"source","","",8,[[],[["error",8],["option",4]]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","hakari::summaries","",0,[[],["result",4]]],[11,"deserialize","hakari","",7,[[],["result",4]]],[11,"deserialize","hakari::summaries","",0,[[],["result",4]]],[11,"arbitrary_with","hakari","",7,[[]]],[18,"BEGIN_SECTION","","The string <code>\\\"\\\\n### BEGIN HAKARI SECTION\\\\n\\\"</code>. This string …",12,null],[18,"END_SECTION","","The string <code>\\\"\\\\n### END HAKARI SECTION\\\\n\\\"</code>. This string …",12,null],[11,"new","","Creates a new instance of <code>HakariCargoToml</code> with the …",12,[[],[["cargotomlerror",4],["result",4]]]],[11,"new_relative","","Creates a new instance of <code>HakariCargoToml</code> at the given …",12,[[],[["cargotomlerror",4],["result",4]]]],[11,"new_in_memory","","Creates a new instance of <code>HakariCargoToml</code> with the given …",12,[[["string",3]],[["cargotomlerror",4],["result",4]]]],[11,"toml_path","","Returns the toml path provided at construction time.",12,[[],["utf8path",3]]],[11,"contents","","Returns the contents of the file on disk as read at …",12,[[]]],[11,"generated_offsets","","Returns the start and end offsets of the part of the file …",12,[[]]],[11,"generated_contents","","Returns the part of the file that is treated as generated.",12,[[]]],[11,"is_changed","","Returns true if the contents on disk are different from …",12,[[]]],[11,"diff_toml","","Computes the diff between the contents on disk and the …",12,[[],["patch",3]]],[11,"write_to_file","","Writes out the provided TOML to the generated section of …",12,[[],[["cargotomlerror",4],["result",4]]]],[11,"write","","Writes out the full contents, including the provided …",12,[[],["result",6]]],[11,"write_to_fmt","","Writes out the full contents, including the provided …",12,[[],["result",6]]],[11,"from_summary","","Constructs a <code>HakariBuilder</code> from a <code>PackageGraph</code> and a …",13,[[["hakaribuildersummary",3],["packagegraph",3]],[["error",4],["result",4]]]],[11,"new","","Creates a new <code>HakariBuilder</code> instance from a <code>PackageGraph</code>.",13,[[["option",4],["packageid",3],["packagegraph",3]],[["error",4],["result",4]]]],[11,"graph","","Returns the <code>PackageGraph</code> used to construct this <code>Hakari</code> …",13,[[],["packagegraph",3]]],[11,"hakari_package","","Returns the Hakari package, or <code>None</code> if it wasn\'t passed …",13,[[],[["packagemetadata",3],["option",4]]]],[11,"read_toml","","Reads the existing TOML file for the Hakari package from …",13,[[],[["result",4],["option",4]]]],[11,"set_platforms","","Sets a list of platforms for <code>hakari</code> to use.",13,[[]]],[11,"platforms","","Returns the platforms set through <code>set_platforms</code>, or an …",13,[[]]],[11,"set_resolver_version","","Sets the Cargo resolver version.",13,[[["cargoresolverversion",4]]]],[11,"resolver_version","","Returns the current Cargo resolver version.",13,[[],["cargoresolverversion",4]]],[11,"add_omitted_packages","","Adds packages to not consider while performing …",13,[[],[["result",4],["error",4]]]],[11,"omitted_packages","","Returns the currently omitted packages.",13,[[]]],[11,"omits_package","","Returns true if a package ID is currently omitted from …",13,[[["packageid",3]],[["result",4],["error",4]]]],[11,"set_verify_mode","","If set to true, runs Hakari in verify mode.",13,[[]]],[11,"verify_mode","","Returns the current value of <code>verify_mode</code>.",13,[[]]],[11,"set_unify_target_host","","Whether to unify feature sets across target and host …",13,[[["unifytargethost",4]]]],[11,"unify_target_host","","Returns the current value of <code>unify_target_host</code>.",13,[[],["unifytargethost",4]]],[11,"set_unify_all","","Whether to unify feature sets for all dependencies.",13,[[]]],[11,"unify_all","","Returns the current value of <code>unify_all</code>.",13,[[]]],[11,"compute","","Computes the <code>Hakari</code> for this builder.",13,[[],["hakari",3]]],[11,"builder","","Returns the <code>HakariBuilder</code> used to create this instance.",6,[[],["hakaribuilder",3]]],[11,"read_toml","","Reads the existing TOML file for the Hakari package from …",6,[[],[["result",4],["option",4]]]],[11,"write_toml","","Writes <code>[dependencies]</code> and other <code>Cargo.toml</code> lines to the …",6,[[["tomloptions",3]],[["result",4],["tomlouterror",4]]]],[11,"to_toml_string","","A convenience method around <code>write_toml</code> that returns a new …",6,[[["tomloptions",3]],[["string",3],["result",4],["tomlouterror",4]]]],[11,"inner_maps","hakari::internals","Returns both the inner maps along with the build …",1,[[]]],[11,"get_inner_mut","","Returns a mutable reference to the inner map …",1,[[["buildplatform",4]],["computedinnermap",6]]],[11,"prop010_strategy","hakari","Returns a <code>Strategy</code> that generates random <code>HakariBuilder</code> …",13,[[["packagegraph",3]]]],[11,"to_summary","","Converts this <code>HakariBuilder</code> to a serializable summary.",13,[[],[["hakaribuildersummary",3],["targetspecerror",4],["result",4]]]],[11,"new","","Creates a new instance with default settings.",14,[[]]],[11,"set_exact_versions","","If set to true, outputs exact versions in package version …",14,[[]]],[11,"set_absolute_paths","","If set to true, outputs absolute paths for path …",14,[[]]],[11,"set_builder_summary","","If set to true, outputs a summary of the builder options …",14,[[]]]],"p":[[3,"HakariBuilderSummary"],[3,"ComputedValue"],[3,"OutputKey"],[4,"CargoTomlError"],[13,"Io"],[13,"GeneratedSectionNotFound"],[3,"Hakari"],[4,"UnifyTargetHost"],[4,"TomlOutError"],[13,"Toml"],[13,"PathWithoutHakari"],[13,"UnrecognizedExternal"],[3,"HakariCargoToml"],[3,"HakariBuilder"],[3,"TomlOptions"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google\'s high-performance …","i":[[0,"raw","hashbrown","Experimental and unsafe <code>RawTable</code> API. This module is only …",null,null],[3,"Bucket","hashbrown::raw","A reference to a hash table bucket containing a <code>T</code>.",null,null],[3,"RawTable","","A raw hash table with an unsafe API.",null,null],[3,"RawIter","","Iterator which returns a raw pointer to every full bucket …",null,null],[3,"RawIntoIter","","Iterator which consumes a table and returns elements.",null,null],[3,"RawDrain","","Iterator which consumes elements without freeing the …",null,null],[3,"RawIterHash","","Iterator over occupied buckets that could match a given …",null,null],[0,"hash_map","hashbrown","A hash map implemented with quadratic probing and SIMD …",null,null],[4,"DefaultHashBuilder","hashbrown::hash_map","Dummy default hasher for <code>HashMap</code>.",null,null],[3,"HashMap","","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"Iter","","An iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IterMut","","A mutable iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IntoIter","","An owning iterator over the entries of a <code>HashMap</code>.",null,null],[3,"Keys","","An iterator over the keys of a <code>HashMap</code>.",null,null],[3,"Values","","An iterator over the values of a <code>HashMap</code>.",null,null],[3,"Drain","","A draining iterator over the entries of a <code>HashMap</code>.",null,null],[3,"DrainFilter","","A draining iterator over entries of a <code>HashMap</code> which don\'t …",null,null],[3,"ValuesMut","","A mutable iterator over the values of a <code>HashMap</code>.",null,null],[3,"RawEntryBuilderMut","","A builder for computing where in a [<code>HashMap</code>] a key-value …",null,null],[4,"RawEntryMut","","A view into a single entry in a map, which may either be …",null,null],[13,"Occupied","","An occupied entry.",0,null],[13,"Vacant","","A vacant entry.",0,null],[3,"RawOccupiedEntryMut","","A view into an occupied entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RawVacantEntryMut","","A view into a vacant entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RawEntryBuilder","","A builder for computing where in a [<code>HashMap</code>] a key-value …",null,null],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Occupied","","An occupied entry.",1,null],[13,"Vacant","","A vacant entry.",1,null],[3,"OccupiedEntry","","A view into an occupied entry in a <code>HashMap</code>. It is part of …",null,null],[3,"VacantEntry","","A view into a vacant entry in a <code>HashMap</code>. It is part of …",null,null],[0,"hash_set","hashbrown","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[3,"HashSet","hashbrown::hash_set","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[3,"Iter","","An iterator over the items of a <code>HashSet</code>.",null,null],[3,"IntoIter","","An owning iterator over the items of a <code>HashSet</code>.",null,null],[3,"Drain","","A draining iterator over the items of a <code>HashSet</code>.",null,null],[3,"DrainFilter","","A draining iterator over entries of a <code>HashSet</code> which don\'t …",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of …",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of …",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric …",null,null],[3,"Union","","A lazy iterator producing elements in the union of <code>HashSet</code>…",null,null],[3,"HashMap","hashbrown","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"HashSet","","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[4,"TryReserveError","","The error type for <code>try_reserve</code> methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the …",2,null],[13,"AllocError","","The memory allocator returned an error",2,null],[12,"layout","hashbrown::TryReserveError","The layout of the allocation request that failed.",3,null],[11,"from","hashbrown::raw","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"into_iter","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"into_iter","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"into_iter","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","hashbrown::hash_map","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"into_iter","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"into_iter","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"into_iter","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"into_iter","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"into_iter","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"into_iter","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"into_iter","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"into_iter","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","hashbrown::hash_set","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"into_iter","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"into_iter","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"into_iter","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"into_iter","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"into_iter","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"into_iter","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"into_iter","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"into_iter","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"from","hashbrown","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"fmt","hashbrown::hash_map","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","hashbrown::hash_set","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","hashbrown","",2,[[["formatter",3]],["result",6]]],[11,"eq","hashbrown::hash_map","",11,[[]]],[11,"eq","hashbrown::hash_set","",26,[[]]],[11,"eq","hashbrown","",2,[[["tryreserveerror",4]]]],[11,"ne","","",2,[[["tryreserveerror",4]]]],[11,"drop","hashbrown::raw","",5,[[]]],[11,"drop","","",7,[[]]],[11,"drop","","",8,[[]]],[11,"drop","hashbrown::hash_map","",18,[[]]],[11,"drop","hashbrown::hash_set","",30,[[]]],[11,"index","hashbrown::hash_map","Returns a reference to the value corresponding to the …",11,[[]]],[11,"len","","",12,[[]]],[11,"len","","",13,[[]]],[11,"len","","",14,[[]]],[11,"len","","",15,[[]]],[11,"len","","",16,[[]]],[11,"len","","",19,[[]]],[11,"len","","",17,[[]]],[11,"len","hashbrown::hash_set","",27,[[]]],[11,"len","","",28,[[]]],[11,"len","","",29,[[]]],[11,"from_iter","hashbrown::hash_map","",11,[[["intoiterator",8]]]],[11,"from_iter","hashbrown::hash_set","",26,[[["intoiterator",8]]]],[11,"next","hashbrown::raw","",6,[[],[["option",4],["bucket",3]]]],[11,"size_hint","","",6,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",9,[[],[["option",4],["bucket",3]]]],[11,"next","hashbrown::hash_map","",18,[[],["option",4]]],[11,"size_hint","","",18,[[]]],[11,"next","","",12,[[],["option",4]]],[11,"size_hint","","",12,[[]]],[11,"next","","",13,[[],["option",4]]],[11,"size_hint","","",13,[[]]],[11,"next","","",14,[[],["option",4]]],[11,"size_hint","","",14,[[]]],[11,"next","","",15,[[],["option",4]]],[11,"size_hint","","",15,[[]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"next","","",19,[[],["option",4]]],[11,"size_hint","","",19,[[]]],[11,"next","","",17,[[],["option",4]]],[11,"size_hint","","",17,[[]]],[11,"next","hashbrown::hash_set","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","","",28,[[],["option",4]]],[11,"size_hint","","",28,[[]]],[11,"next","","",29,[[],["option",4]]],[11,"size_hint","","",29,[[]]],[11,"next","","",30,[[],["option",4]]],[11,"size_hint","","",30,[[]]],[11,"next","","",31,[[],["option",4]]],[11,"size_hint","","",31,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"next","","",33,[[],["option",4]]],[11,"size_hint","","",33,[[]]],[11,"next","","",34,[[],["option",4]]],[11,"size_hint","","",34,[[]]],[11,"into_iter","hashbrown::raw","",5,[[],["rawintoiter",3]]],[11,"into_iter","hashbrown::hash_map","Creates a consuming iterator, that is, one that moves …",11,[[],["intoiter",3]]],[11,"into_iter","hashbrown::hash_set","Creates a consuming iterator, that is, one that moves …",26,[[],["intoiter",3]]],[11,"extend","hashbrown::hash_map","",11,[[["intoiterator",8]]]],[11,"extend","","",11,[[["intoiterator",8]]]],[11,"extend","hashbrown::hash_set","",26,[[["intoiterator",8]]]],[11,"extend","","",26,[[["intoiterator",8]]]],[11,"clone","hashbrown::raw","",4,[[]]],[11,"clone","","",5,[[]]],[11,"clone_from","","",5,[[]]],[11,"clone","","",6,[[]]],[11,"clone","hashbrown::hash_map","",11,[[]]],[11,"clone_from","","",11,[[]]],[11,"clone","","",12,[[]]],[11,"clone","","",15,[[]]],[11,"clone","","",16,[[]]],[11,"clone","hashbrown::hash_set","",26,[[]]],[11,"clone_from","","",26,[[]]],[11,"clone","","",27,[[]]],[11,"clone","","",31,[[]]],[11,"clone","","",32,[[]]],[11,"clone","","",33,[[]]],[11,"clone","","",34,[[]]],[11,"clone","hashbrown","",2,[[],["tryreserveerror",4]]],[11,"default","hashbrown::hash_map","Creates an empty <code>HashMap<K, V, S></code>, with the <code>Default</code> value …",11,[[]]],[11,"default","hashbrown::hash_set","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …",26,[[]]],[11,"as_ptr","hashbrown::raw","",4,[[]]],[11,"drop","","",4,[[]]],[11,"read","","",4,[[]]],[11,"write","","",4,[[]]],[11,"as_ref","","",4,[[]]],[11,"as_mut","","",4,[[]]],[11,"copy_from_nonoverlapping","","",4,[[]]],[11,"new","","Creates a new empty hash table without allocating any …",5,[[]]],[11,"try_with_capacity","","Attempts to allocate a new hash table with at least …",5,[[],[["result",4],["tryreserveerror",4]]]],[11,"with_capacity","","Allocates a new hash table with at least enough capacity …",5,[[]]],[11,"data_end","","Returns pointer to one past last element of data table.",5,[[],["nonnull",3]]],[11,"bucket_index","","Returns the index of a bucket from a <code>Bucket</code>.",5,[[["bucket",3]]]],[11,"bucket","","Returns a pointer to an element in the table.",5,[[],["bucket",3]]],[11,"erase_no_drop","","Erases an element from the table without dropping it.",5,[[["bucket",3]]]],[11,"erase","","Erases an element from the table, dropping it in place.",5,[[["bucket",3]]]],[11,"erase_entry","","Finds and erases an element from the table, dropping it …",5,[[]]],[11,"remove","","Removes an element from the table, returning it.",5,[[["bucket",3]]]],[11,"remove_entry","","Finds and removes an element from the table, returning it.",5,[[],["option",4]]],[11,"clear_no_drop","","Marks all table buckets as empty without dropping their …",5,[[]]],[11,"clear","","Removes all elements from the table without freeing the …",5,[[]]],[11,"shrink_to","","Shrinks the table to fit <code>max(self.len(), min_size)</code> …",5,[[]]],[11,"reserve","","Ensures that at least <code>additional</code> items can be inserted …",5,[[]]],[11,"try_reserve","","Tries to ensure that at least <code>additional</code> items can be …",5,[[],[["result",4],["tryreserveerror",4]]]],[11,"insert","","Inserts a new element into the table, and returns its raw …",5,[[],["bucket",3]]],[11,"insert_entry","","Inserts a new element into the table, and returns a …",5,[[]]],[11,"insert_no_grow","","Inserts a new element into the table, without growing the …",5,[[],["bucket",3]]],[11,"replace_bucket_with","","Temporary removes a bucket, applying the given function …",5,[[["bucket",3]]]],[11,"find","","Searches for an element in the table.",5,[[],[["option",4],["bucket",3]]]],[11,"get","","Gets a reference to an element in the table.",5,[[],["option",4]]],[11,"get_mut","","Gets a mutable reference to an element in the table.",5,[[],["option",4]]],[11,"capacity","","Returns the number of elements the map can hold without …",5,[[]]],[11,"len","","Returns the number of elements in the table.",5,[[]]],[11,"buckets","","Returns the number of buckets in the table.",5,[[]]],[11,"iter","","Returns an iterator over every element in the table. It …",5,[[],["rawiter",3]]],[11,"iter_hash","","Returns an iterator over occupied buckets that could …",5,[[],["rawiterhash",3]]],[11,"drain","","Returns an iterator which removes all elements from the …",5,[[],["rawdrain",3]]],[11,"drain_iter_from","","Returns an iterator which removes all elements from the …",5,[[["rawiter",3]],["rawdrain",3]]],[11,"into_iter_from","","Returns an iterator which consumes all elements from the …",5,[[["rawiter",3]],["rawintoiter",3]]],[11,"clone_from_with_hasher","","Variant of <code>clone_from</code> to use when a hasher is available.",5,[[]]],[11,"reflect_remove","","Refresh the iterator so that it reflects a removal from …",6,[[["bucket",3]]]],[11,"reflect_insert","","Refresh the iterator so that it reflects an insertion …",6,[[["bucket",3]]]],[11,"iter","","",7,[[],["rawiter",3]]],[11,"iter","","",8,[[],["rawiter",3]]],[11,"with_hasher","hashbrown::hash_map","Creates an empty <code>HashMap</code> which will use the given hash …",11,[[]]],[11,"with_capacity_and_hasher","","Creates an empty <code>HashMap</code> with the specified capacity, …",11,[[]]],[11,"hasher","","Returns a reference to the map\'s <code>BuildHasher</code>.",11,[[]]],[11,"capacity","","Returns the number of elements the map can hold without …",11,[[]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The …",11,[[],["keys",3]]],[11,"values","","An iterator visiting all values in arbitrary order. The …",11,[[],["values",3]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary …",11,[[],["valuesmut",3]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary …",11,[[],["iter",3]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary …",11,[[],["itermut",3]]],[11,"len","","Returns the number of elements in the map.",11,[[]]],[11,"is_empty","","Returns <code>true</code> if the map contains no elements.",11,[[]]],[11,"drain","","Clears the map, returning all key-value pairs as an …",11,[[],["drain",3]]],[11,"retain","","Retains only the elements specified by the predicate.",11,[[]]],[11,"drain_filter","","Drains elements which are true under the given predicate, …",11,[[],["drainfilter",3]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the …",11,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",11,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",11,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It …",11,[[]]],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It …",11,[[]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",11,[[],["entry",4]]],[11,"get","","Returns a reference to the value corresponding to the key.",11,[[],["option",4]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied …",11,[[],["option",4]]],[11,"get_key_value_mut","","Returns the key-value pair corresponding to the supplied …",11,[[],["option",4]]],[11,"contains_key","","Returns <code>true</code> if the map contains a value for the …",11,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",11,[[],["option",4]]],[11,"insert","","Inserts a key-value pair into the map.",11,[[],["option",4]]],[11,"remove","","Removes a key from the map, returning the value at the …",11,[[],["option",4]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and …",11,[[],["option",4]]],[11,"raw_entry_mut","","Creates a raw entry builder for the HashMap.",11,[[],["rawentrybuildermut",3]]],[11,"raw_entry","","Creates a raw immutable entry builder for the HashMap.",11,[[],["rawentrybuilder",3]]],[11,"from_key","","Creates a <code>RawEntryMut</code> from the given key.",20,[[],["rawentrymut",4]]],[11,"from_key_hashed_nocheck","","Creates a <code>RawEntryMut</code> from the given key and its hash.",20,[[],["rawentrymut",4]]],[11,"from_hash","","Creates a <code>RawEntryMut</code> from the given hash.",20,[[],["rawentrymut",4]]],[11,"from_key","","Access an entry by key.",23,[[],["option",4]]],[11,"from_key_hashed_nocheck","","Access an entry by a key and its hash.",23,[[],["option",4]]],[11,"from_hash","","Access an entry by hash.",23,[[],["option",4]]],[11,"insert","","Sets the value of the entry, and returns a …",0,[[],["rawoccupiedentrymut",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",0,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",0,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",0,[[]]],[11,"and_replace_entry_with","","Provides shared access to the key and owned access to the …",0,[[]]],[11,"key","","Gets a reference to the key in the entry.",21,[[]]],[11,"key_mut","","Gets a mutable reference to the key in the entry.",21,[[]]],[11,"into_key","","Converts the entry into a mutable reference to the key in …",21,[[]]],[11,"get","","Gets a reference to the value in the entry.",21,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",21,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",21,[[]]],[11,"get_key_value","","Gets a reference to the key and value in the entry.",21,[[]]],[11,"get_key_value_mut","","Gets a mutable reference to the key and value in the …",21,[[]]],[11,"into_key_value","","Converts the OccupiedEntry into a mutable reference to …",21,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",21,[[]]],[11,"insert_key","","Sets the value of the entry, and returns the entry\'s old …",21,[[]]],[11,"remove","","Takes the value out of the entry, and returns it.",21,[[]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",21,[[]]],[11,"replace_entry_with","","Provides shared access to the key and owned access to the …",21,[[],["rawentrymut",4]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",22,[[]]],[11,"insert_hashed_nocheck","","Sets the value of the entry with the VacantEntry\'s key, …",22,[[]]],[11,"insert_with_hasher","","Set the value of an entry with a custom hasher function.",22,[[]]],[11,"insert","","Sets the value of the entry, and returns an OccupiedEntry.",1,[[],["occupiedentry",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",1,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",1,[[["fnonce",8]]]],[11,"or_insert_with_key","","Ensures a value is in the entry by inserting, if empty, …",1,[[["fnonce",8]]]],[11,"key","","Returns a reference to this entry\'s key.",1,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",1,[[]]],[11,"and_replace_entry_with","","Provides shared access to the key and owned access to the …",1,[[]]],[11,"or_default","","Ensures a value is in the entry by inserting the default …",1,[[]]],[11,"key","","Gets a reference to the key in the entry.",24,[[]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",24,[[]]],[11,"get","","Gets a reference to the value in the entry.",24,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",24,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",24,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",24,[[]]],[11,"remove","","Takes the value out of the entry, and returns it.",24,[[]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The …",24,[[]]],[11,"replace_key","","Replaces the key in the hash map with the key used to …",24,[[]]],[11,"replace_entry_with","","Provides shared access to the key and owned access to the …",24,[[],["entry",4]]],[11,"key","","Gets a reference to the key that would be used when …",25,[[]]],[11,"into_key","","Take ownership of the key.",25,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",25,[[]]],[11,"with_hasher","hashbrown::hash_set","Creates a new empty hash set which will use the given …",26,[[]]],[11,"with_capacity_and_hasher","","Creates an empty <code>HashSet</code> with the specified capacity, …",26,[[]]],[11,"capacity","","Returns the number of elements the set can hold without …",26,[[]]],[11,"iter","","An iterator visiting all elements in arbitrary order. The …",26,[[],["iter",3]]],[11,"len","","Returns the number of elements in the set.",26,[[]]],[11,"is_empty","","Returns <code>true</code> if the set contains no elements.",26,[[]]],[11,"drain","","Clears the set, returning all elements in an iterator.",26,[[],["drain",3]]],[11,"retain","","Retains only the elements specified by the predicate.",26,[[]]],[11,"drain_filter","","Drains elements which are true under the given predicate, …",26,[[],["drainfilter",3]]],[11,"clear","","Clears the set, removing all values.",26,[[]]],[11,"hasher","","Returns a reference to the set\'s <code>BuildHasher</code>.",26,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",26,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",26,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It …",26,[[]]],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It …",26,[[]]],[11,"difference","","Visits the values representing the difference, i.e., the …",26,[[],["difference",3]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, …",26,[[],["symmetricdifference",3]]],[11,"intersection","","Visits the values representing the intersection, i.e., …",26,[[],["intersection",3]]],[11,"union","","Visits the values representing the union, i.e., all the …",26,[[],["union",3]]],[11,"contains","","Returns <code>true</code> if the set contains a value.",26,[[]]],[11,"get","","Returns a reference to the value in the set, if any, that …",26,[[],["option",4]]],[11,"get_or_insert","","Inserts the given <code>value</code> into the set if it is not …",26,[[]]],[11,"get_or_insert_owned","","Inserts an owned copy of the given <code>value</code> into the set if …",26,[[]]],[11,"get_or_insert_with","","Inserts a value computed from <code>f</code> into the set if the given …",26,[[]]],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…",26,[[]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another, i.e., …",26,[[]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another, i.e., …",26,[[]]],[11,"insert","","Adds a value to the set.",26,[[]]],[11,"replace","","Adds a value to the set, replacing the existing value, if …",26,[[],["option",4]]],[11,"remove","","Removes a value from the set. Returns whether the value …",26,[[]]],[11,"take","","Removes and returns the value in the set, if any, that is …",26,[[],["option",4]]]],"p":[[4,"RawEntryMut"],[4,"Entry"],[4,"TryReserveError"],[13,"AllocError"],[3,"Bucket"],[3,"RawTable"],[3,"RawIter"],[3,"RawIntoIter"],[3,"RawDrain"],[3,"RawIterHash"],[4,"DefaultHashBuilder"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]},\
"heck":{"doc":"<strong>heck</strong> is a case conversion library.","i":[[8,"CamelCase","heck","This trait defines a camel case conversion.",null,null],[10,"to_camel_case","","Convert this type to camel case.",0,[[]]],[8,"KebabCase","","This trait defines a kebab case conversion.",null,null],[10,"to_kebab_case","","Convert this type to kebab case.",1,[[]]],[8,"MixedCase","","This trait defines a mixed case conversion.",null,null],[10,"to_mixed_case","","Convert this type to mixed case.",2,[[]]],[8,"ShoutyKebabCase","","This trait defines a shouty kebab case conversion.",null,null],[10,"to_shouty_kebab_case","","Convert this type to shouty kebab case.",3,[[]]],[8,"ShoutySnakeCase","","This trait defines a shouty snake case conversion.",null,null],[10,"to_shouty_snake_case","","Convert this type to shouty snake case.",4,[[]]],[8,"ShoutySnekCase","","Oh heck, ShoutySnekCase is an alias for ShoutySnakeCase. …",null,null],[10,"TO_SHOUTY_SNEK_CASE","","CONVERT THIS TYPE TO SNEK CASE.",5,[[]]],[8,"SnakeCase","","This trait defines a snake case conversion.",null,null],[10,"to_snake_case","","Convert this type to snake case.",6,[[]]],[8,"SnekCase","","Oh heck, SnekCase is an alias for SnakeCase. See …",null,null],[10,"to_snek_case","","Convert this type to snek case.",7,[[]]],[8,"TitleCase","","This trait defines a title case conversion.",null,null],[10,"to_title_case","","Convert this type to title case.",8,[[]]]],"p":[[8,"CamelCase"],[8,"KebabCase"],[8,"MixedCase"],[8,"ShoutyKebabCase"],[8,"ShoutySnakeCase"],[8,"ShoutySnekCase"],[8,"SnakeCase"],[8,"SnekCase"],[8,"TitleCase"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","i":[[0,"map","indexmap","<code>IndexMap</code> is a hash table where the iteration order of the …",null,null],[8,"MutableKeys","indexmap::map","Opt-in mutable access to keys.",null,null],[16,"Key","","",0,null],[16,"Value","","",0,null],[10,"get_full_mut2","","Return item index, mutable reference to key and value",0,[[],["option",4]]],[10,"retain2","","Scan through each key-value pair in the map and keep …",0,[[]]],[10,"__private_marker","","This method is not useful in itself – it is there to …",0,[[],["privatemarker",3]]],[4,"Entry","","Entry for an existing key-value pair or a vacant location …",null,null],[13,"Occupied","","Existing slot with equivalent key.",1,null],[13,"Vacant","","Vacant slot (no equivalent key in the map).",1,null],[3,"OccupiedEntry","","A view into an occupied entry in a <code>IndexMap</code>. It is part …",null,null],[3,"VacantEntry","","A view into a vacant entry in a <code>IndexMap</code>. It is part of …",null,null],[3,"IndexMap","","A hash table where the iteration order of the key-value …",null,null],[11,"new","","Create a new map. (Does not allocate.)",2,[[]]],[11,"with_capacity","","Create a new map with capacity for <code>n</code> key-value pairs. …",2,[[]]],[11,"with_capacity_and_hasher","","Create a new map with capacity for <code>n</code> key-value pairs. …",2,[[]]],[11,"with_hasher","","Create a new map with <code>hash_builder</code>",2,[[]]],[11,"capacity","","Computes in <strong>O(1)</strong> time.",2,[[]]],[11,"hasher","","Return a reference to the map\'s <code>BuildHasher</code>.",2,[[]]],[11,"len","","Return the number of key-value pairs in the map.",2,[[]]],[11,"is_empty","","Returns true if the map contains no elements.",2,[[]]],[11,"iter","","Return an iterator over the key-value pairs of the map, …",2,[[],["iter",3]]],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, …",2,[[],["itermut",3]]],[11,"keys","","Return an iterator over the keys of the map, in their …",2,[[],["keys",3]]],[11,"values","","Return an iterator over the values of the map, in their …",2,[[],["values",3]]],[11,"values_mut","","Return an iterator over mutable references to the the …",2,[[],["valuesmut",3]]],[11,"clear","","Remove all key-value pairs in the map, while preserving …",2,[[]]],[11,"truncate","","Shortens the map, keeping the first <code>len</code> elements and …",2,[[]]],[11,"drain","","Clears the <code>IndexMap</code> in the given index range, returning …",2,[[],["drain",3]]],[11,"split_off","","Splits the collection into two at the given index.",2,[[]]],[11,"reserve","","Reserve capacity for <code>additional</code> more key-value pairs.",2,[[]]],[11,"shrink_to_fit","","Shrink the capacity of the map as much as possible.",2,[[]]],[11,"insert","","Insert a key-value pair in the map.",2,[[],["option",4]]],[11,"insert_full","","Insert a key-value pair in the map, and get their index.",2,[[]]],[11,"entry","","Get the given key’s corresponding entry in the map for …",2,[[],["entry",4]]],[11,"contains_key","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.",2,[[]]],[11,"get","","Return a reference to the value stored for <code>key</code>, if it is …",2,[[],["option",4]]],[11,"get_key_value","","Return references to the key-value pair stored for <code>key</code>, …",2,[[],["option",4]]],[11,"get_full","","Return item index, key and value",2,[[],["option",4]]],[11,"get_index_of","","Return item index, if it exists in the map",2,[[],["option",4]]],[11,"get_mut","","",2,[[],["option",4]]],[11,"get_full_mut","","",2,[[],["option",4]]],[11,"remove","","Remove the key-value pair equivalent to <code>key</code> and return …",2,[[],["option",4]]],[11,"remove_entry","","Remove and return the key-value pair equivalent to <code>key</code>.",2,[[],["option",4]]],[11,"swap_remove","","Remove the key-value pair equivalent to <code>key</code> and return …",2,[[],["option",4]]],[11,"swap_remove_entry","","Remove and return the key-value pair equivalent to <code>key</code>.",2,[[],["option",4]]],[11,"swap_remove_full","","Remove the key-value pair equivalent to <code>key</code> and return it …",2,[[],["option",4]]],[11,"shift_remove","","Remove the key-value pair equivalent to <code>key</code> and return …",2,[[],["option",4]]],[11,"shift_remove_entry","","Remove and return the key-value pair equivalent to <code>key</code>.",2,[[],["option",4]]],[11,"shift_remove_full","","Remove the key-value pair equivalent to <code>key</code> and return it …",2,[[],["option",4]]],[11,"pop","","Remove the last key-value pair",2,[[],["option",4]]],[11,"retain","","Scan through each key-value pair in the map and keep …",2,[[]]],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering …",2,[[]]],[11,"sort_by","","Sort the map’s key-value pairs in place using the …",2,[[]]],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value …",2,[[],["intoiter",3]]],[11,"reverse","","Reverses the order of the map’s key-value pairs in …",2,[[]]],[11,"get_index","","Get a key-value pair by index",2,[[],["option",4]]],[11,"get_index_mut","","Get a key-value pair by index",2,[[],["option",4]]],[11,"first","","Get the first key-value pair",2,[[],["option",4]]],[11,"first_mut","","Get the first key-value pair, with mutable access to the …",2,[[],["option",4]]],[11,"last","","Get the last key-value pair",2,[[],["option",4]]],[11,"last_mut","","Get the last key-value pair, with mutable access to the …",2,[[],["option",4]]],[11,"swap_remove_index","","Remove the key-value pair by index",2,[[],["option",4]]],[11,"shift_remove_index","","Remove the key-value pair by index",2,[[],["option",4]]],[11,"swap_indices","","Swaps the position of two key-value pairs in the map.",2,[[]]],[3,"Keys","","An iterator over the keys of a <code>IndexMap</code>.",null,null],[3,"Values","","An iterator over the values of a <code>IndexMap</code>.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a <code>IndexMap</code>.",null,null],[3,"Iter","","An iterator over the entries of a <code>IndexMap</code>.",null,null],[3,"IterMut","","A mutable iterator over the entries of a <code>IndexMap</code>.",null,null],[3,"IntoIter","","An owning iterator over the entries of a <code>IndexMap</code>.",null,null],[3,"Drain","","A draining iterator over the entries of a <code>IndexMap</code>.",null,null],[0,"set","indexmap","A hash set implemented using <code>IndexMap</code>",null,null],[3,"IndexSet","indexmap::set","A hash set where the iteration order of the values is …",null,null],[11,"new","","Create a new set. (Does not allocate.)",3,[[]]],[11,"with_capacity","","Create a new set with capacity for <code>n</code> elements. (Does not …",3,[[]]],[11,"with_capacity_and_hasher","","Create a new set with capacity for <code>n</code> elements. (Does not …",3,[[]]],[11,"with_hasher","","Create a new set with <code>hash_builder</code>",3,[[]]],[11,"capacity","","Computes in <strong>O(1)</strong> time.",3,[[]]],[11,"hasher","","Return a reference to the set\'s <code>BuildHasher</code>.",3,[[]]],[11,"len","","Return the number of elements in the set.",3,[[]]],[11,"is_empty","","Returns true if the set contains no elements.",3,[[]]],[11,"iter","","Return an iterator over the values of the set, in their …",3,[[],["iter",3]]],[11,"clear","","Remove all elements in the set, while preserving its …",3,[[]]],[11,"truncate","","Shortens the set, keeping the first <code>len</code> elements and …",3,[[]]],[11,"drain","","Clears the <code>IndexSet</code> in the given index range, returning …",3,[[],["drain",3]]],[11,"split_off","","Splits the collection into two at the given index.",3,[[]]],[11,"reserve","","Reserve capacity for <code>additional</code> more values.",3,[[]]],[11,"shrink_to_fit","","Shrink the capacity of the set as much as possible.",3,[[]]],[11,"insert","","Insert the value into the set.",3,[[]]],[11,"insert_full","","Insert the value into the set, and get its index.",3,[[]]],[11,"difference","","Return an iterator over the values that are in <code>self</code> but …",3,[[["indexset",3]],["difference",3]]],[11,"symmetric_difference","","Return an iterator over the values that are in <code>self</code> or …",3,[[["indexset",3]],["symmetricdifference",3]]],[11,"intersection","","Return an iterator over the values that are in both <code>self</code> …",3,[[["indexset",3]],["intersection",3]]],[11,"union","","Return an iterator over all values that are in <code>self</code> or …",3,[[["indexset",3]],["union",3]]],[11,"contains","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.",3,[[]]],[11,"get","","Return a reference to the value stored in the set, if it …",3,[[],["option",4]]],[11,"get_full","","Return item index and value",3,[[],["option",4]]],[11,"get_index_of","","Return item index, if it exists in the set",3,[[],["option",4]]],[11,"replace","","Adds a value to the set, replacing the existing value, if …",3,[[],["option",4]]],[11,"remove","","Remove the value from the set, and return <code>true</code> if it was …",3,[[]]],[11,"swap_remove","","Remove the value from the set, and return <code>true</code> if it was …",3,[[]]],[11,"shift_remove","","Remove the value from the set, and return <code>true</code> if it was …",3,[[]]],[11,"take","","Removes and returns the value in the set, if any, that is …",3,[[],["option",4]]],[11,"swap_take","","Removes and returns the value in the set, if any, that is …",3,[[],["option",4]]],[11,"shift_take","","Removes and returns the value in the set, if any, that is …",3,[[],["option",4]]],[11,"swap_remove_full","","Remove the value from the set return it and the index it …",3,[[],["option",4]]],[11,"shift_remove_full","","Remove the value from the set return it and the index it …",3,[[],["option",4]]],[11,"pop","","Remove the last value",3,[[],["option",4]]],[11,"retain","","Scan through each value in the set and keep those where …",3,[[]]],[11,"sort","","Sort the set’s values by their default ordering.",3,[[]]],[11,"sort_by","","Sort the set’s values in place using the comparison …",3,[[]]],[11,"sorted_by","","Sort the values of the set and return a by value iterator …",3,[[],["intoiter",3]]],[11,"reverse","","Reverses the order of the set’s values in place.",3,[[]]],[11,"get_index","","Get a value by index",3,[[],["option",4]]],[11,"first","","Get the first value",3,[[],["option",4]]],[11,"last","","Get the last value",3,[[],["option",4]]],[11,"swap_remove_index","","Remove the value by index",3,[[],["option",4]]],[11,"shift_remove_index","","Remove the value by index",3,[[],["option",4]]],[11,"swap_indices","","Swaps the position of two values in the set.",3,[[]]],[3,"IntoIter","","An owning iterator over the items of a <code>IndexSet</code>.",null,null],[3,"Iter","","An iterator over the items of a <code>IndexSet</code>.",null,null],[3,"Drain","","A draining iterator over the items of a <code>IndexSet</code>.",null,null],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.",3,[[["indexset",3]]]],[11,"is_subset","","Returns <code>true</code> if all elements of <code>self</code> are contained in …",3,[[["indexset",3]]]],[11,"is_superset","","Returns <code>true</code> if all elements of <code>other</code> are contained in …",3,[[["indexset",3]]]],[3,"Difference","","A lazy iterator producing elements in the difference of …",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of …",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric …",null,null],[3,"Union","","A lazy iterator producing elements in the union of …",null,null],[8,"Equivalent","indexmap","Key equivalence trait.",null,null],[10,"equivalent","","Compare self to <code>key</code> and return <code>true</code> if they are equal.",4,[[]]],[14,"indexmap","","Create an <code>IndexMap</code> from a list of key-value pairs",null,null],[14,"indexset","","Create an <code>IndexSet</code> from a list of values",null,null],[11,"from","indexmap::map","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"into_iter","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"into_iter","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"into_iter","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"into_iter","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"into_iter","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"into_iter","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"into_iter","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","indexmap::set","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"into_iter","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"into_iter","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"into_iter","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"into_iter","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"into_iter","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"into_iter","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"into_iter","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"get_full_mut2","indexmap::map","",2,[[],["option",4]]],[11,"retain2","","",2,[[]]],[11,"__private_marker","","",2,[[],["privatemarker",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","indexmap::set","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"eq","indexmap::map","",2,[[["indexmap",3]]]],[11,"eq","indexmap::set","",3,[[["indexset",3]]]],[11,"index","indexmap::map","Returns a reference to the value corresponding to the …",2,[[]]],[11,"index","","Returns a reference to the value at the supplied <code>index</code>.",2,[[]]],[11,"index","indexmap::set","Returns a reference to the value at the supplied <code>index</code>.",3,[[]]],[11,"index_mut","indexmap::map","Returns a mutable reference to the value corresponding to …",2,[[]]],[11,"index_mut","","Returns a mutable reference to the value at the supplied …",2,[[]]],[11,"len","","",7,[[]]],[11,"len","","",8,[[]]],[11,"len","","",9,[[]]],[11,"len","","",10,[[]]],[11,"len","","",11,[[]]],[11,"len","","",12,[[]]],[11,"len","indexmap::set","",14,[[]]],[11,"len","","",15,[[]]],[11,"from_iter","indexmap::map","Create an <code>IndexMap</code> from the sequence of key-value pairs …",2,[[["intoiterator",8]]]],[11,"from_iter","indexmap::set","",3,[[["intoiterator",8]]]],[11,"next_back","indexmap::map","",7,[[],["option",4]]],[11,"next_back","","",8,[[],["option",4]]],[11,"next_back","","",9,[[],["option",4]]],[11,"next_back","","",10,[[],["option",4]]],[11,"next_back","","",11,[[],["option",4]]],[11,"next_back","","",12,[[],["option",4]]],[11,"next_back","","",13,[[],["option",4]]],[11,"next_back","indexmap::set","",14,[[],["option",4]]],[11,"next_back","","",15,[[],["option",4]]],[11,"next_back","","",16,[[],["option",4]]],[11,"next_back","","",17,[[],["option",4]]],[11,"next_back","","",18,[[],["option",4]]],[11,"next_back","","",19,[[],["option",4]]],[11,"next_back","","",20,[[],["option",4]]],[11,"next","indexmap::map","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"count","","",7,[[]]],[11,"nth","","",7,[[],["option",4]]],[11,"last","","",7,[[],["option",4]]],[11,"collect","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"count","","",8,[[]]],[11,"nth","","",8,[[],["option",4]]],[11,"last","","",8,[[],["option",4]]],[11,"collect","","",8,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"count","","",9,[[]]],[11,"nth","","",9,[[],["option",4]]],[11,"last","","",9,[[],["option",4]]],[11,"collect","","",9,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"count","","",10,[[]]],[11,"nth","","",10,[[],["option",4]]],[11,"last","","",10,[[],["option",4]]],[11,"collect","","",10,[[]]],[11,"next","","",11,[[],["option",4]]],[11,"size_hint","","",11,[[]]],[11,"count","","",11,[[]]],[11,"nth","","",11,[[],["option",4]]],[11,"last","","",11,[[],["option",4]]],[11,"collect","","",11,[[]]],[11,"next","","",12,[[],["option",4]]],[11,"size_hint","","",12,[[]]],[11,"count","","",12,[[]]],[11,"nth","","",12,[[],["option",4]]],[11,"last","","",12,[[],["option",4]]],[11,"collect","","",12,[[]]],[11,"next","","",13,[[],["option",4]]],[11,"size_hint","","",13,[[]]],[11,"count","","",13,[[]]],[11,"nth","","",13,[[],["option",4]]],[11,"last","","",13,[[],["option",4]]],[11,"collect","","",13,[[]]],[11,"next","indexmap::set","",14,[[],["option",4]]],[11,"size_hint","","",14,[[]]],[11,"count","","",14,[[]]],[11,"nth","","",14,[[],["option",4]]],[11,"last","","",14,[[],["option",4]]],[11,"collect","","",14,[[]]],[11,"next","","",15,[[],["option",4]]],[11,"size_hint","","",15,[[]]],[11,"count","","",15,[[]]],[11,"nth","","",15,[[],["option",4]]],[11,"last","","",15,[[],["option",4]]],[11,"collect","","",15,[[]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"count","","",16,[[]]],[11,"nth","","",16,[[],["option",4]]],[11,"last","","",16,[[],["option",4]]],[11,"collect","","",16,[[]]],[11,"next","","",17,[[],["option",4]]],[11,"size_hint","","",17,[[]]],[11,"next","","",18,[[],["option",4]]],[11,"size_hint","","",18,[[]]],[11,"next","","",19,[[],["option",4]]],[11,"size_hint","","",19,[[]]],[11,"fold","","",19,[[]]],[11,"next","","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"fold","","",20,[[]]],[11,"into_iter","indexmap::map","",2,[[]]],[11,"into_iter","indexmap::set","",3,[[]]],[11,"extend","indexmap::map","Extend the map with all key-value pairs in the iterable.",2,[[["intoiterator",8]]]],[11,"extend","","Extend the map with all key-value pairs in the iterable.",2,[[["intoiterator",8]]]],[11,"extend","indexmap::set","",3,[[["intoiterator",8]]]],[11,"extend","","",3,[[["intoiterator",8]]]],[11,"clone","indexmap::map","",2,[[]]],[11,"clone_from","","",2,[[]]],[11,"clone","","",7,[[]]],[11,"clone","","",8,[[]]],[11,"clone","","",10,[[]]],[11,"clone","indexmap::set","",3,[[]]],[11,"clone_from","","",3,[[]]],[11,"clone","","",15,[[]]],[11,"clone","","",17,[[]]],[11,"clone","","",18,[[]]],[11,"clone","","",19,[[]]],[11,"clone","","",20,[[]]],[11,"default","indexmap::map","Return an empty <code>IndexMap</code>",2,[[]]],[11,"default","indexmap::set","Return an empty <code>IndexSet</code>",3,[[]]],[11,"key","indexmap::map","Gets a reference to the entry\'s key in the map.",5,[[]]],[11,"get","","Gets a reference to the entry\'s value in the map.",5,[[]]],[11,"get_mut","","Gets a mutable reference to the entry\'s value in the map.",5,[[]]],[11,"index","","Return the index of the key-value pair",5,[[]]],[11,"into_mut","","Converts into a mutable reference to the entry\'s value in …",5,[[]]],[11,"swap_remove_entry","","Remove and return the key, value pair stored in the map …",5,[[]]],[11,"shift_remove_entry","","Remove and return the key, value pair stored in the map …",5,[[]]],[11,"or_insert","","Inserts the given default value in the entry if it is …",1,[[]]],[11,"or_insert_with","","Inserts the result of the <code>call</code> function in the entry if …",1,[[]]],[11,"or_insert_with_key","","Inserts the result of the <code>call</code> function with a reference …",1,[[]]],[11,"key","","Gets a reference to the entry\'s key, either within the …",1,[[]]],[11,"index","","Return the index where the key-value pair exists or will …",1,[[]]],[11,"and_modify","","Modifies the entry if it is occupied.",1,[[]]],[11,"or_default","","Inserts a default-constructed value in the entry if it is …",1,[[]]],[11,"insert","","Sets the value of the entry to <code>value</code>, and returns the …",5,[[]]],[11,"remove","","Remove the key, value pair stored in the map for this …",5,[[]]],[11,"swap_remove","","Remove the key, value pair stored in the map for this …",5,[[]]],[11,"shift_remove","","Remove the key, value pair stored in the map for this …",5,[[]]],[11,"remove_entry","","Remove and return the key, value pair stored in the map …",5,[[]]],[11,"key","","Gets a reference to the key that was used to find the …",6,[[]]],[11,"into_key","","Takes ownership of the key, leaving the entry vacant.",6,[[]]],[11,"index","","Return the index where the key-value pair will be …",6,[[]]],[11,"insert","","Inserts the entry\'s key and the given value into the map, …",6,[[]]]],"p":[[8,"MutableKeys"],[4,"Entry"],[3,"IndexMap"],[3,"IndexSet"],[8,"Equivalent"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","i":[[4,"Either","itertools","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …",null,null],[13,"Left","","A value of type <code>L</code>.",0,null],[13,"Right","","A value of type <code>R</code>.",0,null],[0,"structs","","The concrete iterator types.",null,null],[6,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[6,"DedupBy","","An iterator adaptor that removes repeated duplicates, …",null,null],[6,"DedupWithCount","","An iterator adaptor that removes repeated duplicates, …",null,null],[6,"DedupByWithCount","","An iterator adaptor that removes repeated duplicates, …",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two …",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two …",null,null],[3,"FilterMapOk","","An iterator adapter to filter and apply a transformation …",null,null],[3,"FilterOk","","An iterator adapter to filter values within a nested …",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian …",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single …",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure receives a …",null,null],[6,"MapInto","","An iterator adapter to apply <code>Into</code> conversion to each …",null,null],[6,"MapOk","","An iterator adapter to apply a transformation within a …",null,null],[6,"Merge","","An iterator adaptor that merges the two base iterators in …",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in …",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a <code>Clone</code>-able …",null,null],[3,"WhileSome","","An iterator adaptor that filters <code>Option<A></code> iterator …",null,null],[6,"Coalesce","","An iterator adaptor that may join together adjacent …",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a <code>Clone</code>…",null,null],[3,"Positions","","An iterator adapter to get the positions of each element …",null,null],[3,"Update","","An iterator adapter to apply a mutating function to each …",null,null],[6,"MapResults","","See <code>MapOk</code>.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the …",null,null],[3,"MultiProduct","","An iterator adaptor that iterates over the cartesian …",null,null],[3,"Combinations","","An iterator to iterate through all the <code>k</code>-length …",null,null],[3,"CombinationsWithReplacement","","An iterator to iterate through all the <code>n</code>-length …",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like …",null,null],[3,"ExactlyOneError","","Iterator returned for the error case of …",null,null],[3,"Format","","Format all iterator elements lazily, separated by <code>sep</code>.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by <code>sep</code>.",null,null],[3,"GroupingMap","","<code>GroupingMap</code> is an intermediate struct for efficient …",null,null],[6,"GroupingMapBy","","<code>GroupingMapBy</code> is an intermediate struct for efficient …",null,null],[3,"IntoChunks","","<code>ChunkLazy</code> is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","<code>GroupBy</code> is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[6,"Intersperse","","An iterator adaptor to insert a particular value between …",null,null],[3,"IntersperseWith","","An iterator adaptor to insert a particular value created …",null,null],[6,"KMerge","","An iterator adaptor that merges an abitrary number of …",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of …",null,null],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two …",null,null],[3,"MultiPeek","","See <code>multipeek()</code> for more information.",null,null],[3,"PeekNth","","See <code>peek_nth()</code> for more information.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum …",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure …",null,null],[3,"Permutations","","An iterator adaptor that iterates through all the <code>k</code>…",null,null],[3,"ProcessResults","","An iterator that produces only the <code>T</code> values as long as the…",null,null],[3,"Powerset","","An iterator to iterate through the powerset of the …",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in …",null,null],[3,"RcIter","","A wrapper for <code>Rc<RefCell<I>></code>, that implements the <code>Iterator</code>…",null,null],[12,"rciter","","The boxed iterator.",1,null],[3,"RepeatN","","An iterator that produces <em>n</em> repetitions of an element.",null,null],[3,"RepeatCall","","See <code>repeat_call</code> for more information.",null,null],[3,"Unfold","","See <code>unfold</code> for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the …",2,null],[3,"Iterate","","An iterator that infinitely applies function to value and …",null,null],[3,"Tee","","One half of an iterator pair where both return the same …",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces …",null,null],[3,"CircularTupleWindows","","An iterator over all windows,wrapping back to the first …",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific …",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an <code>Position</code>…",null,null],[3,"ZipEq","","An iterator which iterates two other iterators …",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators …",null,null],[3,"Zip","","See <code>multizip</code> for more information.",null,null],[0,"traits","itertools","Traits helpful for using certain <code>Itertools</code> methods in …",null,null],[8,"HomogeneousTuple","itertools::traits","Implemented for homogeneous tuples of size up to 4.",null,null],[11,"with_value","itertools::structs","put back value <code>value</code> (builder method)",3,[[]]],[11,"into_parts","","Split the <code>PutBack</code> into its parts.",3,[[]]],[11,"put_back","","Put back a single value to the front of the iterator.",3,[[]]],[11,"k","","Returns the length of a combination produced by this …",4,[[]]],[11,"n","","Returns the (current) length of the pool from which …",4,[[]]],[11,"aggregate","","This is the generic way to perform any operation on a …",5,[[],["hashmap",3]]],[11,"fold","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"fold_first","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"collect","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"max","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"max_by","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"max_by_key","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"min","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"min_by","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"min_by_key","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"minmax","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],[["hashmap",3],["minmaxresult",4]]]],[11,"minmax_by","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],[["hashmap",3],["minmaxresult",4]]]],[11,"minmax_by_key","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],[["hashmap",3],["minmaxresult",4]]]],[11,"sum","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"product","","Groups elements from the <code>GroupingMap</code> source by key and …",5,[[],["hashmap",3]]],[11,"reset_peek","","Reset the peeking “cursor”",6,[[]]],[11,"peek","","Works exactly like <code>.next()</code> with the only difference that …",6,[[],["option",4]]],[11,"peek","","Works exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>",7,[[],["option",4]]],[11,"peek_nth","","Returns a reference to the <code>nth</code> value without advancing …",7,[[],["option",4]]],[11,"put_back","","Puts x in front of the iterator. The values are yielded …",8,[[]]],[11,"into_buffer","","Return a buffer with the produced items that was not …",9,[[],["tuplebuffer",3]]],[5,"concat","itertools","Combine all an iterator\'s elements into one element by …",null,[[]]],[5,"cons_tuples","","Create an iterator that maps for example iterators of …",null,[[],["constuples",3]]],[5,"diff_with","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …",null,[[],[["option",4],["diff",4]]]],[4,"Diff","","A type returned by the <code>diff_with</code> function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with …",10,null],[13,"Shorter","","The total number of elements that were in <code>J</code> along with …",10,null],[13,"Longer","","The total number of elements that were in <code>I</code> along with …",10,null],[5,"kmerge_by","","Create an iterator that merges elements of the contained …",null,[[],["kmergeby",3]]],[4,"MinMaxResult","","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>. See …",null,null],[13,"NoElements","","Empty iterator",11,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are …",11,null],[13,"MinMax","","More than one element in the iterator, the first element …",11,null],[8,"PeekingNext","","An iterator that allows peeking at an element before …",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the …",12,[[],["option",4]]],[5,"process_results","","“Lift” a function of the values of an iterator so …",null,[[],["result",4]]],[5,"repeat_n","","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.",null,[[],["repeatn",3]]],[5,"repeat_call","","An iterator source that produces elements indefinitely by …",null,[[],["repeatcall",3]]],[5,"unfold","","Creates a new unfold source with the specified closure as …",null,[[],["unfold",3]]],[5,"iterate","","Creates a new iterator that infinitely applies function …",null,[[],["iterate",3]]],[4,"Position","","A value yielded by <code>WithPosition</code>. Indicates the position …",null,null],[13,"First","","This is the first element.",13,null],[13,"Middle","","This is neither the first nor the last element.",13,null],[13,"Last","","This is the last element.",13,null],[13,"Only","","This is the only element.",13,null],[5,"multizip","","An iterator that generalizes <em>.zip()</em> and allows running …",null,[[],["zip",3]]],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",null,null],[13,"Both","","Both values are present.",14,null],[13,"Left","","Only the left value of type <code>A</code> is present.",14,null],[13,"Right","","Only the right value of type <code>B</code> is present.",14,null],[5,"interleave","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.",null,[[],["interleave",3]]],[5,"merge","","Create an iterator that merges elements in <code>i</code> and <code>j</code>.",null,[[],["merge",6]]],[5,"put_back","","Create an iterator where you can put back a single item",null,[[],["putback",3]]],[5,"put_back_n","","Create an iterator where you can put back multiple values …",null,[[],["putbackn",3]]],[5,"multipeek","","An iterator adaptor that allows the user to peek at …",null,[[],["multipeek",3]]],[5,"peek_nth","","A drop-in replacement for <code>std::iter::Peekable</code> which adds …",null,[[],["peeknth",3]]],[5,"kmerge","","Create an iterator that merges elements of the contained …",null,[[],["kmerge",6]]],[5,"zip_eq","","Iterate <code>i</code> and <code>j</code> in lock step.",null,[[],["zipeq",3]]],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from …",null,[[],["mergejoinby",3]]],[5,"rciter","","Return an iterator inside a <code>Rc<RefCell<_>></code> wrapper.",null,[[],["rciter",3]]],[5,"enumerate","","Iterate <code>iterable</code> with a running index.",null,[[],["enumerate",3]]],[5,"rev","","Iterate <code>iterable</code> in reverse.",null,[[],["rev",3]]],[5,"zip","","Iterate <code>i</code> and <code>j</code> in lock step.",null,[[],["zip",3]]],[5,"chain","","Create an iterator that first iterates <code>i</code> and then <code>j</code>.",null,[[],["chain",3]]],[5,"cloned","","Create an iterator that clones each element from &T to T",null,[[],["cloned",3]]],[5,"fold","","Perform a fold operation over the iterable.",null,[[]]],[5,"all","","Test whether the predicate holds for all elements in the …",null,[[]]],[5,"any","","Test whether the predicate holds for any elements in the …",null,[[]]],[5,"max","","Return the maximum value of the iterable.",null,[[],["option",4]]],[5,"min","","Return the minimum value of the iterable.",null,[[],["option",4]]],[5,"join","","Combine all iterator elements into one String, seperated …",null,[[],["string",3]]],[5,"sorted","","Sort all iterator elements into a new iterator in …",null,[[],["intoiter",3]]],[8,"Itertools","","An <code>Iterator</code> blanket implementation that provides extra …",null,null],[11,"interleave","","Alternate elements from two iterators until both have run …",15,[[],["interleave",3]]],[11,"interleave_shortest","","Alternate elements from two iterators until at least one …",15,[[],["interleaveshortest",3]]],[11,"intersperse","","An iterator adaptor to insert a particular value between …",15,[[],["intersperse",6]]],[11,"intersperse_with","","An iterator adaptor to insert a particular value created …",15,[[],["interspersewith",3]]],[11,"zip_longest","","Create an iterator which iterates over both this and the …",15,[[],["ziplongest",3]]],[11,"zip_eq","","Create an iterator which iterates over both this and the …",15,[[],["zipeq",3]]],[11,"batching","","A “meta iterator adaptor”. Its closure receives a …",15,[[],["batching",3]]],[11,"group_by","","Return an <em>iterable</em> that can group iterator elements. …",15,[[],["groupby",3]]],[11,"chunks","","Return an <em>iterable</em> that can chunk the iterator.",15,[[],["intochunks",3]]],[11,"tuple_windows","","Return an iterator over all contiguous windows producing …",15,[[],["tuplewindows",3]]],[11,"circular_tuple_windows","","Return an iterator over all windows, wrapping back to the …",15,[[],["circulartuplewindows",3]]],[11,"tuples","","Return an iterator that groups the items in tuples of a …",15,[[],["tuples",3]]],[11,"tee","","Split into an iterator pair that both yield all elements …",15,[[]]],[11,"step","","Return an iterator adaptor that steps <code>n</code> elements in the …",15,[[],["step",3]]],[11,"map_into","","Convert each item of the iterator using the <code>Into</code> trait.",15,[[],["mapinto",6]]],[11,"map_results","","See <code>.map_ok()</code>.",15,[[],["mapok",6]]],[11,"map_ok","","Return an iterator adaptor that applies the provided …",15,[[],["mapok",6]]],[11,"filter_ok","","Return an iterator adaptor that filters every <code>Result::Ok</code> …",15,[[],["filterok",3]]],[11,"filter_map_ok","","Return an iterator adaptor that filters and transforms …",15,[[],["filtermapok",3]]],[11,"merge","","Return an iterator adaptor that merges the two base …",15,[[],["merge",6]]],[11,"merge_by","","Return an iterator adaptor that merges the two base …",15,[[],["mergeby",3]]],[11,"merge_join_by","","Create an iterator that merges items from both this and …",15,[[],["mergejoinby",3]]],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of …",15,[[],["kmerge",6]]],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of …",15,[[],["kmergeby",3]]],[11,"cartesian_product","","Return an iterator adaptor that iterates over the …",15,[[],["product",3]]],[11,"multi_cartesian_product","","Return an iterator adaptor that iterates over the …",15,[[],["multiproduct",3]]],[11,"coalesce","","Return an iterator adaptor that uses the passed-in …",15,[[],["coalesce",6]]],[11,"dedup","","Remove duplicates from sections of consecutive identical …",15,[[],["dedup",6]]],[11,"dedup_by","","Remove duplicates from sections of consecutive identical …",15,[[],["dedupby",6]]],[11,"dedup_with_count","","Remove duplicates from sections of consecutive identical …",15,[[],["dedupwithcount",6]]],[11,"dedup_by_with_count","","Remove duplicates from sections of consecutive identical …",15,[[],["dedupbywithcount",6]]],[11,"unique","","Return an iterator adaptor that filters out elements that …",15,[[],["unique",3]]],[11,"unique_by","","Return an iterator adaptor that filters out elements that …",15,[[],["uniqueby",3]]],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this …",15,[[],["peekingtakewhile",3]]],[11,"take_while_ref","","Return an iterator adaptor that borrows from a <code>Clone</code>-able …",15,[[],["takewhileref",3]]],[11,"while_some","","Return an iterator adaptor that filters <code>Option<A></code> …",15,[[],["whilesome",3]]],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the …",15,[[],["tuplecombinations",3]]],[11,"combinations","","Return an iterator adaptor that iterates over the <code>k</code>…",15,[[],["combinations",3]]],[11,"combinations_with_replacement","","Return an iterator that iterates over the <code>k</code>-length …",15,[[],["combinationswithreplacement",3]]],[11,"permutations","","Return an iterator adaptor that iterates over all …",15,[[],["permutations",3]]],[11,"powerset","","Return an iterator that iterates through the powerset of …",15,[[],["powerset",3]]],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a …",15,[[],["padusing",3]]],[11,"with_position","","Return an iterator adaptor that wraps each element in a …",15,[[],["withposition",3]]],[11,"positions","","Return an iterator adaptor that yields the indices of all …",15,[[],["positions",3]]],[11,"update","","Return an iterator adaptor that applies a mutating …",15,[[],["update",3]]],[11,"next_tuple","","Advances the iterator and returns the next items grouped …",15,[[],["option",4]]],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a …",15,[[],["option",4]]],[11,"find_position","","Find the position and value of the first element …",15,[[],["option",4]]],[11,"all_equal","","Check whether all elements compare equal.",15,[[]]],[11,"dropping","","Consume the first <code>n</code> elements from the iterator eagerly, …",15,[[]]],[11,"dropping_back","","Consume the last <code>n</code> elements from the iterator eagerly, …",15,[[]]],[11,"foreach","","Run the closure <code>f</code> eagerly on each element of the iterator.",15,[[]]],[11,"concat","","Combine all an iterator\'s elements into one element by …",15,[[]]],[11,"collect_vec","","<code>.collect_vec()</code> is simply a type specialization of …",15,[[],["vec",3]]],[11,"try_collect","","<code>.try_collect()</code> is more convenient way of writing …",15,[[],["result",4]]],[11,"set_from","","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …",15,[[]]],[11,"join","","Combine all iterator elements into one String, separated …",15,[[],["string",3]]],[11,"format","","Format all iterator elements, separated by <code>sep</code>.",15,[[],["format",3]]],[11,"format_with","","Format all iterator elements, separated by <code>sep</code>.",15,[[],["formatwith",3]]],[11,"fold_results","","See <code>.fold_ok()</code>.",15,[[],["result",4]]],[11,"fold_ok","","Fold <code>Result</code> values from an iterator.",15,[[],["result",4]]],[11,"fold_options","","Fold <code>Option</code> values from an iterator.",15,[[],["option",4]]],[11,"fold1","","Accumulator of the elements in the iterator.",15,[[],["option",4]]],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like …",15,[[],["option",4]]],[11,"fold_while","","An iterator method that applies a function, producing a …",15,[[],["foldwhile",4]]],[11,"sum1","","Iterate over the entire iterator and add all the elements.",15,[[],["option",4]]],[11,"product1","","Iterate over the entire iterator and multiply all the …",15,[[],["option",4]]],[11,"sorted_unstable","","Sort all iterator elements into a new iterator in …",15,[[],["intoiter",3]]],[11,"sorted_unstable_by","","Sort all iterator elements into a new iterator in …",15,[[],["intoiter",3]]],[11,"sorted_unstable_by_key","","Sort all iterator elements into a new iterator in …",15,[[],["intoiter",3]]],[11,"sorted","","Sort all iterator elements into a new iterator in …",15,[[],["intoiter",3]]],[11,"sorted_by","","Sort all iterator elements into a new iterator in …",15,[[],["intoiter",3]]],[11,"sorted_by_key","","Sort all iterator elements into a new iterator in …",15,[[],["intoiter",3]]],[11,"k_smallest","","Sort the k smallest elements into a new iterator, in …",15,[[],["intoiter",3]]],[11,"partition_map","","Collect all iterator elements into one of two partitions. …",15,[[]]],[11,"into_group_map","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …",15,[[],[["vec",3],["hashmap",3]]]],[11,"into_group_map_by","","Return an <code>Iterator</code> on a HahMap. Keys mapped to <code>Vec</code>s of …",15,[[],[["vec",3],["hashmap",3]]]],[11,"into_grouping_map","","Constructs a <code>GroupingMap</code> to be used later with one of the …",15,[[],["groupingmap",3]]],[11,"into_grouping_map_by","","Constructs a <code>GroupingMap</code> to be used later with one of the …",15,[[],["groupingmapby",6]]],[11,"minmax","","Return the minimum and maximum elements in the iterator.",15,[[],["minmaxresult",4]]],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as …",15,[[],["minmaxresult",4]]],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as …",15,[[],["minmaxresult",4]]],[11,"position_max","","Return the position of the maximum element in the …",15,[[],["option",4]]],[11,"position_max_by_key","","Return the position of the maximum element in the …",15,[[],["option",4]]],[11,"position_max_by","","Return the position of the maximum element in the …",15,[[],["option",4]]],[11,"position_min","","Return the position of the minimum element in the …",15,[[],["option",4]]],[11,"position_min_by_key","","Return the position of the minimum element in the …",15,[[],["option",4]]],[11,"position_min_by","","Return the position of the minimum element in the …",15,[[],["option",4]]],[11,"position_minmax","","Return the positions of the minimum and maximum elements …",15,[[],["minmaxresult",4]]],[11,"position_minmax_by_key","","Return the postions of the minimum and maximum elements …",15,[[],["minmaxresult",4]]],[11,"position_minmax_by","","Return the postions of the minimum and maximum elements …",15,[[],["minmaxresult",4]]],[11,"exactly_one","","If the iterator yields exactly one element, that element …",15,[[],[["result",4],["exactlyoneerror",3]]]],[11,"multipeek","","An iterator adaptor that allows the user to peek at …",15,[[],["multipeek",3]]],[11,"counts","","Collect the items in this iterator and return a <code>HashMap</code> …",15,[[],["hashmap",3]]],[5,"equal","","Return <code>true</code> if both iterables produce equal sequences …",null,[[]]],[5,"assert_equal","","Assert that two iterables produce equal sequences, with …",null,[[]]],[5,"partition","","Partition a sequence using predicate <code>pred</code> so that elements…",null,[[]]],[4,"FoldWhile","","An enum used for controlling the execution of …",null,null],[13,"Continue","","Continue folding with this value",16,null],[13,"Done","","Fold is complete and will return this value",16,null],[11,"into_inner","","Return the value in the continue or done.",16,[[]]],[11,"is_done","","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.",16,[[]]],[14,"iproduct","","Create an iterator over the “cartesian product” of …",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","itertools::structs","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"into_iter","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"into_iter","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"into_iter","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"into_iter","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"into_iter","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"into_iter","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"into_iter","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"into_iter","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"to_string","","",35,[[],["string",3]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"into_iter","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"into_iter","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"into_iter","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"into_iter","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"into_iter","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"into_iter","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"into_iter","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"into_iter","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"into_iter","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"into_iter","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"into_iter","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"into_iter","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"into_iter","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"into_iter","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"into_iter","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"into_iter","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"into_iter","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"into_iter","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"into_iter","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"into_iter","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"into_iter","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"into_iter","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"into_iter","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","itertools","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",0,[[["either",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["either",4]]]],[11,"le","","",0,[[["either",4]]]],[11,"gt","","",0,[[["either",4]]]],[11,"ge","","",0,[[["either",4]]]],[11,"read","","",0,[[],[["result",4],["error",3]]]],[11,"read_to_end","","",0,[[["vec",3]],[["result",4],["error",3]]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"fold","","",0,[[]]],[11,"count","","",0,[[]]],[11,"last","","",0,[[],["option",4]]],[11,"nth","","",0,[[],["option",4]]],[11,"collect","","",0,[[]]],[11,"all","","",0,[[]]],[11,"from","","",0,[[["result",4]],["either",4]]],[11,"deref","","",0,[[]]],[11,"as_mut","","",0,[[],["osstr",3]]],[11,"as_mut","","",0,[[],["cstr",3]]],[11,"as_mut","","",0,[[],["path",3]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[],["cstr",3]]],[11,"as_ref","","",0,[[],["path",3]]],[11,"as_ref","","",0,[[],["osstr",3]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"extend","","",0,[[]]],[11,"description","","",0,[[]]],[11,"cause","","",0,[[],[["option",4],["error",8]]]],[11,"into","","",0,[[],["result",4]]],[11,"clone","","",0,[[],["either",4]]],[11,"next_back","","",0,[[],["option",4]]],[11,"cmp","","",0,[[["either",4]],["ordering",4]]],[11,"eq","","",0,[[["either",4]]]],[11,"ne","","",0,[[["either",4]]]],[11,"write","","",0,[[],[["result",4],["error",3]]]],[11,"flush","","",0,[[],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"deref_mut","","",0,[[]]],[11,"fill_buf","","",0,[[],[["result",4],["error",3]]]],[11,"consume","","",0,[[]]],[11,"peeking_next","itertools::structs","",6,[[],["option",4]]],[11,"peeking_next","","",7,[[],["option",4]]],[11,"peeking_next","","",3,[[],["option",4]]],[11,"peeking_next","","",8,[[],["option",4]]],[11,"drop","","",40,[[]]],[11,"drop","","",37,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"into","itertools","",14,[[],[["option",4],["either",4]]]],[11,"next_back","itertools::structs","",27,[[],["option",4]]],[11,"next_back","","",28,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",45,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"next_back","","",50,[[],["option",4]]],[11,"next_back","","",58,[[],["option",4]]],[11,"next_back","","",57,[[],["option",4]]],[11,"next_back","","",61,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next","","",30,[[],["option",4]]],[11,"count","","",30,[[]]],[11,"size_hint","","",30,[[]]],[11,"last","","",30,[[],["option",4]]],[11,"next","","",17,[[],["option",4]]],[11,"size_hint","","",17,[[]]],[11,"next","","",18,[[],["option",4]]],[11,"size_hint","","",18,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"count","","",3,[[]]],[11,"last","","",3,[[],["option",4]]],[11,"nth","","",3,[[],["option",4]]],[11,"all","","",3,[[]]],[11,"fold","","",3,[[]]],[11,"next","","",21,[[],["option",4]]],[11,"size_hint","","",21,[[]]],[11,"fold","","",21,[[]]],[11,"next","","",22,[[],["option",4]]],[11,"next","","",29,[[],["option",4]]],[11,"size_hint","","",29,[[]]],[11,"next","","",23,[[],["option",4]]],[11,"size_hint","","",23,[[]]],[11,"next","","",24,[[],["option",4]]],[11,"size_hint","","",24,[[]]],[11,"next","","",25,[[],["option",4]]],[11,"size_hint","","",25,[[]]],[11,"next","","",26,[[],["option",4]]],[11,"next","","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"fold","","",20,[[]]],[11,"collect","","",20,[[]]],[11,"next","","",19,[[],["option",4]]],[11,"size_hint","","",19,[[]]],[11,"fold","","",19,[[]]],[11,"collect","","",19,[[]]],[11,"next","","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","","",28,[[],["option",4]]],[11,"size_hint","","",28,[[]]],[11,"fold","","",28,[[]]],[11,"collect","","",28,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",4,[[],["option",4]]],[11,"next","","",31,[[],["option",4]]],[11,"next","","",33,[[],["option",4]]],[11,"size_hint","","",33,[[]]],[11,"next","","",41,[[],["option",4]]],[11,"next","","",40,[[],["option",4]]],[11,"next","","",38,[[],["option",4]]],[11,"next","","",37,[[],["option",4]]],[11,"next","","",42,[[],["option",4]]],[11,"size_hint","","",42,[[]]],[11,"fold","","",42,[[]]],[11,"next","","",43,[[],["option",4]]],[11,"size_hint","","",43,[[]]],[11,"next","","",44,[[],["option",4]]],[11,"size_hint","","",44,[[]]],[11,"count","","",44,[[]]],[11,"last","","",44,[[],["option",4]]],[11,"nth","","",44,[[],["option",4]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",45,[[],["option",4]]],[11,"size_hint","","",45,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"next","","",46,[[],["option",4]]],[11,"size_hint","","",46,[[]]],[11,"next","","",47,[[],["option",4]]],[11,"count","","",47,[[]]],[11,"size_hint","","",47,[[]]],[11,"next","","",49,[[],["option",4]]],[11,"size_hint","","",49,[[]]],[11,"next","","",48,[[],["option",4]]],[11,"size_hint","","",48,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",50,[[],["option",4]]],[11,"size_hint","","",50,[[]]],[11,"next","","",51,[[],["option",4]]],[11,"size_hint","","",51,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",52,[[],["option",4]]],[11,"size_hint","","",52,[[]]],[11,"next","","",53,[[],["option",4]]],[11,"size_hint","","",53,[[]]],[11,"next","","",54,[[],["option",4]]],[11,"size_hint","","",54,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"next","","",55,[[],["option",4]]],[11,"next","","",56,[[],["option",4]]],[11,"next","","",58,[[],["option",4]]],[11,"size_hint","","",58,[[]]],[11,"count","","",58,[[]]],[11,"next","","",57,[[],["option",4]]],[11,"size_hint","","",57,[[]]],[11,"count","","",57,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",60,[[],["option",4]]],[11,"size_hint","","",60,[[]]],[11,"next","","",61,[[],["option",4]]],[11,"size_hint","","",61,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"clone","","",30,[[],["multiproduct",3]]],[11,"clone","","",17,[[],["interleave",3]]],[11,"clone","","",18,[[],["interleaveshortest",3]]],[11,"clone","","",3,[[],["putback",3]]],[11,"clone","","",21,[[],["product",3]]],[11,"clone","","",22,[[],["batching",3]]],[11,"clone","","",29,[[],["step",3]]],[11,"clone","","",23,[[]]],[11,"clone","","",25,[[],["whilesome",3]]],[11,"clone","","",26,[[],["tuplecombinations",3]]],[11,"clone","","",20,[[],["filterok",3]]],[11,"clone","","",27,[[],["positions",3]]],[11,"clone","","",28,[[],["update",3]]],[11,"clone","itertools","",14,[[],["eitherorboth",4]]],[11,"clone","itertools::structs","",32,[[]]],[11,"clone","","",4,[[]]],[11,"clone","","",31,[[],["combinationswithreplacement",3]]],[11,"clone","","",33,[[],["exactlyoneerror",3]]],[11,"clone","","",35,[[],["formatwith",3]]],[11,"clone","","",34,[[],["format",3]]],[11,"clone","","",5,[[],["groupingmap",3]]],[11,"clone","","",42,[[],["interspersewith",3]]],[11,"clone","","",43,[[]]],[11,"clone","","",44,[[]]],[11,"clone","itertools","",11,[[],["minmaxresult",4]]],[11,"clone","itertools::structs","",6,[[],["multipeek",3]]],[11,"clone","","",45,[[],["padusing",3]]],[11,"clone","","",7,[[],["peeknth",3]]],[11,"clone","","",47,[[]]],[11,"clone","","",49,[[]]],[11,"clone","","",8,[[],["putbackn",3]]],[11,"clone","","",1,[[]]],[11,"clone","","",50,[[],["repeatn",3]]],[11,"clone","","",51,[[],["repeatcall",3]]],[11,"clone","","",2,[[],["unfold",3]]],[11,"clone","","",52,[[],["iterate",3]]],[11,"clone","","",54,[[],["tuplebuffer",3]]],[11,"clone","","",9,[[],["tuples",3]]],[11,"clone","","",55,[[],["tuplewindows",3]]],[11,"clone","","",58,[[],["uniqueby",3]]],[11,"clone","","",57,[[],["unique",3]]],[11,"clone","","",59,[[]]],[11,"clone","itertools","",13,[[],["position",4]]],[11,"clone","itertools::structs","",60,[[],["zipeq",3]]],[11,"clone","","",61,[[],["ziplongest",3]]],[11,"clone","","",62,[[],["zip",3]]],[11,"clone","itertools","",16,[[],["foldwhile",4]]],[11,"eq","","",14,[[["eitherorboth",4]]]],[11,"ne","","",14,[[["eitherorboth",4]]]],[11,"eq","","",11,[[["minmaxresult",4]]]],[11,"ne","","",11,[[["minmaxresult",4]]]],[11,"eq","","",13,[[["position",4]]]],[11,"ne","","",13,[[["position",4]]]],[11,"eq","","",16,[[["foldwhile",4]]]],[11,"ne","","",16,[[["foldwhile",4]]]],[11,"fmt","itertools::structs","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","itertools","",14,[[["formatter",3]],["result",6]]],[11,"fmt","itertools::structs","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","itertools","",11,[[["formatter",3]],["result",6]]],[11,"fmt","itertools::structs","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","itertools","",13,[[["formatter",3]],["result",6]]],[11,"fmt","itertools::structs","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","itertools","",16,[[["formatter",3]],["result",6]]],[11,"fmt","itertools::structs","",33,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"hash","itertools","",14,[[]]],[11,"fmt","itertools::structs","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"is_left","itertools","Return true if the value is the <code>Left</code> variant.",0,[[]]],[11,"is_right","","Return true if the value is the <code>Right</code> variant.",0,[[]]],[11,"left","","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.",0,[[],["option",4]]],[11,"right","","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.",0,[[],["option",4]]],[11,"as_ref","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.",0,[[],["either",4]]],[11,"as_mut","","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.",0,[[],["either",4]]],[11,"flip","","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.",0,[[],["either",4]]],[11,"map_left","","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …",0,[[],["either",4]]],[11,"map_right","","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …",0,[[],["either",4]]],[11,"either","","Apply one of two functions depending on contents, …",0,[[]]],[11,"either_with","","Like <code>either</code>, but provide some context to whichever of the …",0,[[]]],[11,"left_and_then","","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …",0,[[],["either",4]]],[11,"right_and_then","","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …",0,[[],["either",4]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[],["either",4]]],[11,"left_or","","Return left value or given value",0,[[]]],[11,"left_or_default","","Return left or a default",0,[[]]],[11,"left_or_else","","Returns left value or computes it from a closure",0,[[]]],[11,"right_or","","Return right value or given value",0,[[]]],[11,"right_or_default","","Return right or a default",0,[[]]],[11,"right_or_else","","Returns right value or computes it from a closure",0,[[]]],[11,"unwrap_left","","Returns the left value",0,[[]]],[11,"unwrap_right","","Returns the right value",0,[[]]],[11,"expect_left","","Returns the left value",0,[[]]],[11,"expect_right","","Returns the right value",0,[[]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[]]],[11,"map","","Map <code>f</code> over the contained value and return the result in …",0,[[],["either",4]]],[11,"has_left","","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.",14,[[]]],[11,"has_right","","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.",14,[[]]],[11,"is_left","","If Left, return true otherwise, return false. Exclusive …",14,[[]]],[11,"is_right","","If Right, return true otherwise, return false. Exclusive …",14,[[]]],[11,"is_both","","If Right, return true otherwise, return false. Equivalent …",14,[[]]],[11,"left","","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …",14,[[],["option",4]]],[11,"right","","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …",14,[[],["option",4]]],[11,"both","","If Both, return <code>Some</code> tuple containing left and right.",14,[[],["option",4]]],[11,"as_ref","","Converts from <code>&EitherOrBoth<A, B></code> to <code>EitherOrBoth<&A, &B></code>.",14,[[],["eitherorboth",4]]],[11,"as_mut","","Converts from <code>&mut EitherOrBoth<A, B></code> to …",14,[[],["eitherorboth",4]]],[11,"flip","","Convert <code>EitherOrBoth<A, B></code> to <code>EitherOrBoth<B, A></code>.",14,[[],["eitherorboth",4]]],[11,"map_left","","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …",14,[[],["eitherorboth",4]]],[11,"map_right","","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …",14,[[],["eitherorboth",4]]],[11,"map_any","","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …",14,[[],["eitherorboth",4]]],[11,"left_and_then","","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …",14,[[],["eitherorboth",4]]],[11,"right_and_then","","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …",14,[[],["eitherorboth",4]]],[11,"reduce","","Return either value of left, right, or the product of <code>f</code> …",14,[[]]],[11,"into_option","","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The …",11,[[],["option",4]]],[11,"into_inner","","Return the inner value.",13,[[]]]],"p":[[4,"Either"],[3,"RcIter"],[3,"Unfold"],[3,"PutBack"],[3,"Combinations"],[3,"GroupingMap"],[3,"MultiPeek"],[3,"PeekNth"],[3,"PutBackN"],[3,"Tuples"],[4,"Diff"],[4,"MinMaxResult"],[8,"PeekingNext"],[4,"Position"],[4,"EitherOrBoth"],[8,"Itertools"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"Product"],[3,"Batching"],[3,"MergeBy"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Positions"],[3,"Update"],[3,"Step"],[3,"MultiProduct"],[3,"CombinationsWithReplacement"],[3,"ConsTuples"],[3,"ExactlyOneError"],[3,"Format"],[3,"FormatWith"],[3,"IntoChunks"],[3,"Chunk"],[3,"Chunks"],[3,"GroupBy"],[3,"Group"],[3,"Groups"],[3,"IntersperseWith"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"Permutations"],[3,"ProcessResults"],[3,"Powerset"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"TupleWindows"],[3,"CircularTupleWindows"],[3,"Unique"],[3,"UniqueBy"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"]]},\
"itoa":{"doc":"github crates-io docs-rs","i":[[5,"write","itoa","Write integer to an <code>io::Write</code>.",null,[[["write",8],["integer",8]],["result",6]]],[5,"fmt","","Write integer to an <code>fmt::Write</code>.",null,[[["write",8],["integer",8]],["result",6]]],[3,"Buffer","","A safe API for formatting integers to text.",null,null],[11,"new","","This is a cheap operation; you don\'t need to worry about …",0,[[],["buffer",3]]],[11,"format","","Print an integer into this buffer and return a reference …",0,[[["integer",8]]]],[8,"Integer","","An integer that can be formatted by <code>itoa::write</code> and …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[]]],[11,"default","","",0,[[],["buffer",3]]]],"p":[[3,"Buffer"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","i":[[8,"LazyStatic","lazy_static","Support trait for enabling a few common operation on lazy …",null,null],[5,"initialize","","Takes a shared reference to a lazy static and initializes …",null,[[]]],[14,"lazy_static","","",null,null]],"p":[]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms\' system libraries","i":[[4,"c_void","libc","Equivalent to C\'s <code>void</code> type when used as a pointer.",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"isblank","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"qsort","","",null,null],[5,"bsearch","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fmemopen","","",null,null],[5,"open_memstream","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"clearerr","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strndup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strcasecmp","","",null,null],[5,"strncasecmp","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"strsignal","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"wmemchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setegid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"ttyname_r","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"timegm","","",null,null],[5,"mknod","","",null,null],[5,"gethostname","","",null,null],[5,"endservent","","",null,null],[5,"getservbyname","","",null,null],[5,"getservbyport","","",null,null],[5,"getservent","","",null,null],[5,"setservent","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"strcasestr","","",null,null],[5,"getline","","",null,null],[5,"lockf","","",null,null],[5,"open_wmemstream","","",null,null],[5,"getsid","","",null,null],[5,"truncate","","",null,null],[5,"pause","","",null,null],[5,"readlinkat","","",null,null],[5,"mkdirat","","",null,null],[5,"openat","","",null,null],[5,"fdopendir","","",null,null],[5,"readdir_r","","The 64-bit libc on Solaris and illumos only has …",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetspeed","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_init","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"clock_getcpuclockid","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"posix_fadvise64","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"login_tty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"uname","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"forkpty","","",null,null],[5,"openpty","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"getnameinfo","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"futimes","","",null,null],[5,"strerror_r","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"getspnam_r","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"fallocate64","","",null,null],[5,"posix_fallocate","","",null,null],[5,"posix_fallocate64","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_timedreceive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_timedsend","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"accept4","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sendfile64","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"inotify_rm_watch","","",null,null],[5,"inotify_init","","",null,null],[5,"inotify_init1","","",null,null],[5,"inotify_add_watch","","",null,null],[5,"fanotify_init","","",null,null],[5,"regcomp","","",null,null],[5,"regexec","","",null,null],[5,"regerror","","",null,null],[5,"regfree","","",null,null],[5,"iconv_open","","",null,null],[5,"iconv","","",null,null],[5,"iconv_close","","",null,null],[5,"gettid","","",null,null],[5,"fgetspent_r","","",null,null],[5,"sgetspent_r","","",null,null],[5,"getspent_r","","",null,null],[5,"qsort_r","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"utmpname","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"mallopt","","",null,null],[5,"gettimeofday","","",null,null],[5,"statx","","",null,null],[5,"getrandom","","",null,null],[5,"memmem","","",null,null],[5,"getauxval","","",null,null],[5,"adjtimex","","",null,null],[5,"ntp_adjtime","","",null,null],[5,"ntp_gettime","","",null,null],[5,"copy_file_range","","",null,null],[5,"fanotify_mark","","",null,null],[5,"preadv2","","",null,null],[5,"pwritev2","","",null,null],[5,"renameat2","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"pthread_getname_np","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"dlmopen","","",null,null],[5,"dlinfo","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[4,"DIR","","",null,null],[6,"locale_t","","",null,null],[3,"group","","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",6,null],[12,"ipv6mr_interface","","",6,null],[3,"hostent","","",null,null],[12,"h_name","","",7,null],[12,"h_aliases","","",7,null],[12,"h_addrtype","","",7,null],[12,"h_length","","",7,null],[12,"h_addr_list","","",7,null],[3,"iovec","","",null,null],[12,"iov_base","","",8,null],[12,"iov_len","","",8,null],[3,"pollfd","","",null,null],[12,"fd","","",9,null],[12,"events","","",9,null],[12,"revents","","",9,null],[3,"winsize","","",null,null],[12,"ws_row","","",10,null],[12,"ws_col","","",10,null],[12,"ws_xpixel","","",10,null],[12,"ws_ypixel","","",10,null],[3,"linger","","",null,null],[12,"l_onoff","","",11,null],[12,"l_linger","","",11,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",12,null],[3,"itimerval","","",null,null],[12,"it_interval","","",13,null],[12,"it_value","","",13,null],[3,"tms","","",null,null],[12,"tms_utime","","",14,null],[12,"tms_stime","","",14,null],[12,"tms_cutime","","",14,null],[12,"tms_cstime","","",14,null],[3,"servent","","",null,null],[12,"s_name","","",15,null],[12,"s_aliases","","",15,null],[12,"s_port","","",15,null],[12,"s_proto","","",15,null],[3,"protoent","","",null,null],[12,"p_name","","",16,null],[12,"p_aliases","","",16,null],[12,"p_proto","","",16,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"ARPOP_REQUEST","","",null,null],[17,"ARPOP_REPLY","","",null,null],[17,"ATF_COM","","",null,null],[17,"ATF_PERM","","",null,null],[17,"ATF_PUBL","","",null,null],[17,"ATF_USETRAILERS","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[4,"timezone","","",null,null],[3,"in_addr","","",null,null],[12,"s_addr","","",17,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",18,null],[12,"imr_interface","","",18,null],[3,"ip_mreq_source","","",null,null],[12,"imr_multiaddr","","",19,null],[12,"imr_interface","","",19,null],[12,"imr_sourceaddr","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_next","","",23,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",24,null],[12,"sll_protocol","","",24,null],[12,"sll_ifindex","","",24,null],[12,"sll_hatype","","",24,null],[12,"sll_pkttype","","",24,null],[12,"sll_halen","","",24,null],[12,"sll_addr","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",26,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",27,null],[12,"dli_fbase","","",27,null],[12,"dli_sname","","",27,null],[12,"dli_saddr","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",29,null],[12,"ipi_spec_dst","","",29,null],[12,"ipi_addr","","",29,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",30,null],[12,"ifa_name","","",30,null],[12,"ifa_flags","","",30,null],[12,"ifa_addr","","",30,null],[12,"ifa_netmask","","",30,null],[12,"ifa_ifu","","",30,null],[12,"ifa_data","","",30,null],[3,"in6_rtmsg","","",null,null],[3,"arpreq","","",null,null],[12,"arp_pa","","",31,null],[12,"arp_ha","","",31,null],[12,"arp_flags","","",31,null],[12,"arp_netmask","","",31,null],[12,"arp_dev","","",31,null],[3,"arpreq_old","","",null,null],[12,"arp_pa","","",32,null],[12,"arp_ha","","",32,null],[12,"arp_flags","","",32,null],[12,"arp_netmask","","",32,null],[3,"arphdr","","",null,null],[12,"ar_hrd","","",33,null],[12,"ar_pro","","",33,null],[12,"ar_hln","","",33,null],[12,"ar_pln","","",33,null],[12,"ar_op","","",33,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",34,null],[12,"msg_len","","",34,null],[3,"epoll_event","","",null,null],[12,"events","","",35,null],[12,"u64","","",35,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",36,null],[12,"sun_path","","",36,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",37,null],[3,"utsname","","",null,null],[12,"sysname","","",38,null],[12,"nodename","","",38,null],[12,"release","","",38,null],[12,"version","","",38,null],[12,"machine","","",38,null],[12,"domainname","","",38,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",39,null],[12,"sigev_signo","","",39,null],[12,"sigev_notify","","",39,null],[12,"sigev_notify_thread_id","","",39,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"CLOCK_TAI","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_ALG","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_TOS","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_OPTIONS","","",null,null],[17,"IP_ROUTER_ALERT","","",null,null],[17,"IP_RECVOPTS","","",null,null],[17,"IP_RETOPTS","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_PKTOPTIONS","","",null,null],[17,"IP_MTU_DISCOVER","","",null,null],[17,"IP_RECVERR","","",null,null],[17,"IP_RECVTTL","","",null,null],[17,"IP_RECVTOS","","",null,null],[17,"IP_MTU","","",null,null],[17,"IP_FREEBIND","","",null,null],[17,"IP_IPSEC_POLICY","","",null,null],[17,"IP_XFRM_POLICY","","",null,null],[17,"IP_PASSSEC","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IP_ORIGDSTADDR","","",null,null],[17,"IP_RECVORIGDSTADDR","","",null,null],[17,"IP_MINTTL","","",null,null],[17,"IP_NODEFRAG","","",null,null],[17,"IP_CHECKSUM","","",null,null],[17,"IP_BIND_ADDRESS_NO_PORT","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_UNBLOCK_SOURCE","","",null,null],[17,"IP_BLOCK_SOURCE","","",null,null],[17,"IP_ADD_SOURCE_MEMBERSHIP","","",null,null],[17,"IP_DROP_SOURCE_MEMBERSHIP","","",null,null],[17,"IP_MSFILTER","","",null,null],[17,"IP_MULTICAST_ALL","","",null,null],[17,"IP_UNICAST_IF","","",null,null],[17,"IP_DEFAULT_MULTICAST_TTL","","",null,null],[17,"IP_DEFAULT_MULTICAST_LOOP","","",null,null],[17,"IP_PMTUDISC_DONT","","",null,null],[17,"IP_PMTUDISC_WANT","","",null,null],[17,"IP_PMTUDISC_DO","","",null,null],[17,"IP_PMTUDISC_PROBE","","",null,null],[17,"IP_PMTUDISC_INTERFACE","","",null,null],[17,"IP_PMTUDISC_OMIT","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"MCAST_EXCLUDE","","",null,null],[17,"MCAST_INCLUDE","","",null,null],[17,"MCAST_JOIN_GROUP","","",null,null],[17,"MCAST_BLOCK_SOURCE","","",null,null],[17,"MCAST_UNBLOCK_SOURCE","","",null,null],[17,"MCAST_LEAVE_GROUP","","",null,null],[17,"MCAST_JOIN_SOURCE_GROUP","","",null,null],[17,"MCAST_LEAVE_SOURCE_GROUP","","",null,null],[17,"MCAST_MSFILTER","","",null,null],[17,"IPV6_ADDRFORM","","",null,null],[17,"IPV6_2292PKTINFO","","",null,null],[17,"IPV6_2292HOPOPTS","","",null,null],[17,"IPV6_2292DSTOPTS","","",null,null],[17,"IPV6_2292RTHDR","","",null,null],[17,"IPV6_2292PKTOPTIONS","","",null,null],[17,"IPV6_CHECKSUM","","",null,null],[17,"IPV6_2292HOPLIMIT","","",null,null],[17,"IPV6_NEXTHOP","","",null,null],[17,"IPV6_AUTHHDR","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ROUTER_ALERT","","",null,null],[17,"IPV6_MTU_DISCOVER","","",null,null],[17,"IPV6_MTU","","",null,null],[17,"IPV6_RECVERR","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_JOIN_ANYCAST","","",null,null],[17,"IPV6_LEAVE_ANYCAST","","",null,null],[17,"IPV6_IPSEC_POLICY","","",null,null],[17,"IPV6_XFRM_POLICY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"IPV6_RECVHOPLIMIT","","",null,null],[17,"IPV6_HOPLIMIT","","",null,null],[17,"IPV6_RECVHOPOPTS","","",null,null],[17,"IPV6_HOPOPTS","","",null,null],[17,"IPV6_RTHDRDSTOPTS","","",null,null],[17,"IPV6_RECVRTHDR","","",null,null],[17,"IPV6_RTHDR","","",null,null],[17,"IPV6_RECVDSTOPTS","","",null,null],[17,"IPV6_DSTOPTS","","",null,null],[17,"IPV6_RECVPATHMTU","","",null,null],[17,"IPV6_PATHMTU","","",null,null],[17,"IPV6_DONTFRAG","","",null,null],[17,"IPV6_RECVTCLASS","","",null,null],[17,"IPV6_TCLASS","","",null,null],[17,"IPV6_AUTOFLOWLABEL","","",null,null],[17,"IPV6_ADDR_PREFERENCES","","",null,null],[17,"IPV6_MINHOPCOUNT","","",null,null],[17,"IPV6_ORIGDSTADDR","","",null,null],[17,"IPV6_RECVORIGDSTADDR","","",null,null],[17,"IPV6_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_IF","","",null,null],[17,"IPV6_PREFER_SRC_TMP","","",null,null],[17,"IPV6_PREFER_SRC_PUBLIC","","",null,null],[17,"IPV6_PREFER_SRC_PUBTMP_DEFAULT","","",null,null],[17,"IPV6_PREFER_SRC_COA","","",null,null],[17,"IPV6_PREFER_SRC_HOME","","",null,null],[17,"IPV6_PREFER_SRC_CGA","","",null,null],[17,"IPV6_PREFER_SRC_NONCGA","","",null,null],[17,"IPV6_PMTUDISC_DONT","","",null,null],[17,"IPV6_PMTUDISC_WANT","","",null,null],[17,"IPV6_PMTUDISC_DO","","",null,null],[17,"IPV6_PMTUDISC_PROBE","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"UIO_MAXIOV","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"MMAP_PAGE_ZERO","","",null,null],[17,"ADDR_LIMIT_32BIT","","",null,null],[17,"SHORT_INODE","","",null,null],[17,"WHOLE_SECONDS","","",null,null],[17,"STICKY_TIMEOUTS","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"CLD_EXITED","","",null,null],[17,"CLD_KILLED","","",null,null],[17,"CLD_DUMPED","","",null,null],[17,"CLD_TRAPPED","","",null,null],[17,"CLD_STOPPED","","",null,null],[17,"CLD_CONTINUED","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"P_PIDFD","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPTOS_ECN_MASK","","",null,null],[17,"IPTOS_ECN_ECT1","","",null,null],[17,"IPTOS_ECN_ECT0","","",null,null],[17,"IPTOS_ECN_CE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ARPOP_RREQUEST","","",null,null],[17,"ARPOP_RREPLY","","",null,null],[17,"ARPOP_InREQUEST","","",null,null],[17,"ARPOP_InREPLY","","",null,null],[17,"ARPOP_NAK","","",null,null],[17,"ATF_NETMASK","","",null,null],[17,"ATF_DONTPUB","","",null,null],[17,"ARPHRD_NETROM","","",null,null],[17,"ARPHRD_ETHER","","",null,null],[17,"ARPHRD_EETHER","","",null,null],[17,"ARPHRD_AX25","","",null,null],[17,"ARPHRD_PRONET","","",null,null],[17,"ARPHRD_CHAOS","","",null,null],[17,"ARPHRD_IEEE802","","",null,null],[17,"ARPHRD_ARCNET","","",null,null],[17,"ARPHRD_APPLETLK","","",null,null],[17,"ARPHRD_DLCI","","",null,null],[17,"ARPHRD_ATM","","",null,null],[17,"ARPHRD_METRICOM","","",null,null],[17,"ARPHRD_IEEE1394","","",null,null],[17,"ARPHRD_EUI64","","",null,null],[17,"ARPHRD_INFINIBAND","","",null,null],[17,"ARPHRD_SLIP","","",null,null],[17,"ARPHRD_CSLIP","","",null,null],[17,"ARPHRD_SLIP6","","",null,null],[17,"ARPHRD_CSLIP6","","",null,null],[17,"ARPHRD_RSRVD","","",null,null],[17,"ARPHRD_ADAPT","","",null,null],[17,"ARPHRD_ROSE","","",null,null],[17,"ARPHRD_X25","","",null,null],[17,"ARPHRD_HWX25","","",null,null],[17,"ARPHRD_PPP","","",null,null],[17,"ARPHRD_CISCO","","",null,null],[17,"ARPHRD_HDLC","","",null,null],[17,"ARPHRD_LAPB","","",null,null],[17,"ARPHRD_DDCMP","","",null,null],[17,"ARPHRD_RAWHDLC","","",null,null],[17,"ARPHRD_TUNNEL","","",null,null],[17,"ARPHRD_TUNNEL6","","",null,null],[17,"ARPHRD_FRAD","","",null,null],[17,"ARPHRD_SKIP","","",null,null],[17,"ARPHRD_LOOPBACK","","",null,null],[17,"ARPHRD_LOCALTLK","","",null,null],[17,"ARPHRD_FDDI","","",null,null],[17,"ARPHRD_BIF","","",null,null],[17,"ARPHRD_SIT","","",null,null],[17,"ARPHRD_IPDDP","","",null,null],[17,"ARPHRD_IPGRE","","",null,null],[17,"ARPHRD_PIMREG","","",null,null],[17,"ARPHRD_HIPPI","","",null,null],[17,"ARPHRD_ASH","","",null,null],[17,"ARPHRD_ECONET","","",null,null],[17,"ARPHRD_IRDA","","",null,null],[17,"ARPHRD_FCPP","","",null,null],[17,"ARPHRD_FCAL","","",null,null],[17,"ARPHRD_FCPL","","",null,null],[17,"ARPHRD_FCFABRIC","","",null,null],[17,"ARPHRD_IEEE802_TR","","",null,null],[17,"ARPHRD_IEEE80211","","",null,null],[17,"ARPHRD_IEEE80211_PRISM","","",null,null],[17,"ARPHRD_IEEE80211_RADIOTAP","","",null,null],[17,"ARPHRD_IEEE802154","","",null,null],[17,"ARPHRD_VOID","","",null,null],[17,"ARPHRD_NONE","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPV6_HDRINCL","","",null,null],[17,"IPV6_PMTUDISC_INTERFACE","","",null,null],[17,"IPV6_PMTUDISC_OMIT","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"ADDR_NO_RANDOMIZE","","",null,null],[17,"ADDR_COMPAT_LAYOUT","","",null,null],[17,"READ_IMPLIES_EXEC","","",null,null],[17,"ADDR_LIMIT_3GB","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[5,"CMSG_FIRSTHDR","","",null,[[]]],[5,"CMSG_DATA","","",null,[[]]],[5,"CMSG_SPACE","","",null,[[["c_uint",6]],["c_uint",6]]],[5,"CMSG_LEN","","",null,[[["c_uint",6]],["c_uint",6]]],[5,"FD_CLR","","",null,[[["c_int",6]]]],[5,"FD_ISSET","","",null,[[["c_int",6]]]],[5,"FD_SET","","",null,[[["c_int",6]]]],[5,"FD_ZERO","","",null,[[]]],[5,"WIFSTOPPED","","",null,[[["c_int",6]]]],[5,"WSTOPSIG","","",null,[[["c_int",6]],["c_int",6]]],[5,"WIFCONTINUED","","",null,[[["c_int",6]]]],[5,"WIFSIGNALED","","",null,[[["c_int",6]]]],[5,"WTERMSIG","","",null,[[["c_int",6]],["c_int",6]]],[5,"WIFEXITED","","",null,[[["c_int",6]]]],[5,"WEXITSTATUS","","",null,[[["c_int",6]],["c_int",6]]],[5,"WCOREDUMP","","",null,[[["c_int",6]]]],[5,"W_EXITCODE","","",null,[[["c_int",6]],["c_int",6]]],[5,"W_STOPCODE","","",null,[[["c_int",6]],["c_int",6]]],[5,"QCMD","","",null,[[["c_int",6]],["c_int",6]]],[5,"IPOPT_COPIED","","",null,[[]]],[5,"IPOPT_CLASS","","",null,[[]]],[5,"IPOPT_NUMBER","","",null,[[]]],[5,"IPTOS_ECN","","",null,[[]]],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"Elf64_Sxword","","",null,null],[6,"Elf32_Section","","",null,null],[6,"Elf64_Section","","",null,null],[6,"canid_t","","",null,null],[6,"can_err_mask_t","","",null,null],[6,"iconv_t","","",null,null],[4,"fpos64_t","","",null,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",40,null],[12,"rlim_max","","",40,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",41,null],[12,"gl_pathv","","",41,null],[12,"gl_offs","","",41,null],[12,"gl_flags","","",41,null],[3,"passwd","","",null,null],[12,"pw_name","","",42,null],[12,"pw_passwd","","",42,null],[12,"pw_uid","","",42,null],[12,"pw_gid","","",42,null],[12,"pw_gecos","","",42,null],[12,"pw_dir","","",42,null],[12,"pw_shell","","",42,null],[3,"spwd","","",null,null],[12,"sp_namp","","",43,null],[12,"sp_pwdp","","",43,null],[12,"sp_lstchg","","",43,null],[12,"sp_min","","",43,null],[12,"sp_max","","",43,null],[12,"sp_warn","","",43,null],[12,"sp_inact","","",43,null],[12,"sp_expire","","",43,null],[12,"sp_flag","","",43,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",44,null],[12,"dqb_bsoftlimit","","",44,null],[12,"dqb_curspace","","",44,null],[12,"dqb_ihardlimit","","",44,null],[12,"dqb_isoftlimit","","",44,null],[12,"dqb_curinodes","","",44,null],[12,"dqb_btime","","",44,null],[12,"dqb_itime","","",44,null],[12,"dqb_valid","","",44,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",45,null],[12,"ssi_errno","","",45,null],[12,"ssi_code","","",45,null],[12,"ssi_pid","","",45,null],[12,"ssi_uid","","",45,null],[12,"ssi_fd","","",45,null],[12,"ssi_tid","","",45,null],[12,"ssi_band","","",45,null],[12,"ssi_overrun","","",45,null],[12,"ssi_trapno","","",45,null],[12,"ssi_status","","",45,null],[12,"ssi_int","","",45,null],[12,"ssi_ptr","","",45,null],[12,"ssi_utime","","",45,null],[12,"ssi_stime","","",45,null],[12,"ssi_addr","","",45,null],[12,"ssi_addr_lsb","","",45,null],[12,"ssi_syscall","","",45,null],[12,"ssi_call_addr","","",45,null],[12,"ssi_arch","","",45,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",46,null],[12,"it_value","","",46,null],[3,"fsid_t","","",null,null],[3,"packet_mreq","","",null,null],[12,"mr_ifindex","","",47,null],[12,"mr_type","","",47,null],[12,"mr_alen","","",47,null],[12,"mr_address","","",47,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",48,null],[12,"if_name","","",48,null],[3,"msginfo","","",null,null],[12,"msgpool","","",49,null],[12,"msgmap","","",49,null],[12,"msgmax","","",49,null],[12,"msgmnb","","",49,null],[12,"msgmni","","",49,null],[12,"msgssz","","",49,null],[12,"msgtql","","",49,null],[12,"msgseg","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"uinput_ff_upload","","",null,null],[12,"request_id","","",65,null],[12,"retval","","",65,null],[12,"effect","","",65,null],[12,"old","","",65,null],[3,"uinput_ff_erase","","",null,null],[12,"request_id","","",66,null],[12,"retval","","",66,null],[12,"effect_id","","",66,null],[3,"uinput_abs_setup","","",null,null],[12,"code","","",67,null],[12,"absinfo","","",67,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",68,null],[12,"dlpi_name","","",68,null],[12,"dlpi_phdr","","",68,null],[12,"dlpi_phnum","","",68,null],[12,"dlpi_adds","","",68,null],[12,"dlpi_subs","","",68,null],[12,"dlpi_tls_modid","","",68,null],[12,"dlpi_tls_data","","",68,null],[3,"Elf32_Ehdr","","",null,null],[12,"e_ident","","",69,null],[12,"e_type","","",69,null],[12,"e_machine","","",69,null],[12,"e_version","","",69,null],[12,"e_entry","","",69,null],[12,"e_phoff","","",69,null],[12,"e_shoff","","",69,null],[12,"e_flags","","",69,null],[12,"e_ehsize","","",69,null],[12,"e_phentsize","","",69,null],[12,"e_phnum","","",69,null],[12,"e_shentsize","","",69,null],[12,"e_shnum","","",69,null],[12,"e_shstrndx","","",69,null],[3,"Elf64_Ehdr","","",null,null],[12,"e_ident","","",70,null],[12,"e_type","","",70,null],[12,"e_machine","","",70,null],[12,"e_version","","",70,null],[12,"e_entry","","",70,null],[12,"e_phoff","","",70,null],[12,"e_shoff","","",70,null],[12,"e_flags","","",70,null],[12,"e_ehsize","","",70,null],[12,"e_phentsize","","",70,null],[12,"e_phnum","","",70,null],[12,"e_shentsize","","",70,null],[12,"e_shnum","","",70,null],[12,"e_shstrndx","","",70,null],[3,"Elf32_Sym","","",null,null],[12,"st_name","","",71,null],[12,"st_value","","",71,null],[12,"st_size","","",71,null],[12,"st_info","","",71,null],[12,"st_other","","",71,null],[12,"st_shndx","","",71,null],[3,"Elf64_Sym","","",null,null],[12,"st_name","","",72,null],[12,"st_info","","",72,null],[12,"st_other","","",72,null],[12,"st_shndx","","",72,null],[12,"st_value","","",72,null],[12,"st_size","","",72,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",73,null],[12,"p_offset","","",73,null],[12,"p_vaddr","","",73,null],[12,"p_paddr","","",73,null],[12,"p_filesz","","",73,null],[12,"p_memsz","","",73,null],[12,"p_flags","","",73,null],[12,"p_align","","",73,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",74,null],[12,"p_flags","","",74,null],[12,"p_offset","","",74,null],[12,"p_vaddr","","",74,null],[12,"p_paddr","","",74,null],[12,"p_filesz","","",74,null],[12,"p_memsz","","",74,null],[12,"p_align","","",74,null],[3,"Elf32_Shdr","","",null,null],[12,"sh_name","","",75,null],[12,"sh_type","","",75,null],[12,"sh_flags","","",75,null],[12,"sh_addr","","",75,null],[12,"sh_offset","","",75,null],[12,"sh_size","","",75,null],[12,"sh_link","","",75,null],[12,"sh_info","","",75,null],[12,"sh_addralign","","",75,null],[12,"sh_entsize","","",75,null],[3,"Elf64_Shdr","","",null,null],[12,"sh_name","","",76,null],[12,"sh_type","","",76,null],[12,"sh_flags","","",76,null],[12,"sh_addr","","",76,null],[12,"sh_offset","","",76,null],[12,"sh_size","","",76,null],[12,"sh_link","","",76,null],[12,"sh_info","","",76,null],[12,"sh_addralign","","",76,null],[12,"sh_entsize","","",76,null],[3,"ucred","","",null,null],[12,"pid","","",77,null],[12,"uid","","",77,null],[12,"gid","","",77,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",78,null],[12,"mnt_dir","","",78,null],[12,"mnt_type","","",78,null],[12,"mnt_opts","","",78,null],[12,"mnt_freq","","",78,null],[12,"mnt_passno","","",78,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",79,null],[12,"version","","",79,null],[12,"reserved","","",79,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",80,null],[12,"ipi6_ifindex","","",80,null],[3,"arpd_request","","",null,null],[12,"req","","",81,null],[12,"ip","","",81,null],[12,"dev","","",81,null],[12,"stamp","","",81,null],[12,"updated","","",81,null],[12,"ha","","",81,null],[3,"inotify_event","","",null,null],[12,"wd","","",82,null],[12,"mask","","",82,null],[12,"cookie","","",82,null],[12,"len","","",82,null],[3,"fanotify_response","","",null,null],[12,"fd","","",83,null],[12,"response","","",83,null],[3,"sockaddr_vm","","",null,null],[12,"svm_family","","",84,null],[12,"svm_reserved1","","",84,null],[12,"svm_port","","",84,null],[12,"svm_cid","","",84,null],[12,"svm_zero","","",84,null],[3,"regmatch_t","","",null,null],[12,"rm_so","","",85,null],[12,"rm_eo","","",85,null],[3,"sock_extended_err","","",null,null],[12,"ee_errno","","",86,null],[12,"ee_origin","","",86,null],[12,"ee_type","","",86,null],[12,"ee_code","","",86,null],[12,"ee_pad","","",86,null],[12,"ee_info","","",86,null],[12,"ee_data","","",86,null],[3,"__c_anonymous_sockaddr_can_tp","","",null,null],[12,"rx_id","","",87,null],[12,"tx_id","","",87,null],[3,"__c_anonymous_sockaddr_can_j1939","","",null,null],[12,"name","","",88,null],[12,"pgn","","",88,null],[12,"addr","","",88,null],[3,"can_filter","","",null,null],[12,"can_id","","",89,null],[12,"can_mask","","",89,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",90,null],[12,"nl_pid","","",90,null],[12,"nl_groups","","",90,null],[3,"dirent","","",null,null],[12,"d_ino","","",91,null],[12,"d_off","","",91,null],[12,"d_reclen","","",91,null],[12,"d_type","","",91,null],[12,"d_name","","",91,null],[3,"dirent64","","",null,null],[12,"d_ino","","",92,null],[12,"d_off","","",92,null],[12,"d_reclen","","",92,null],[12,"d_type","","",92,null],[12,"d_name","","",92,null],[3,"sockaddr_alg","","",null,null],[12,"salg_family","","",93,null],[12,"salg_type","","",93,null],[12,"salg_feat","","",93,null],[12,"salg_mask","","",93,null],[12,"salg_name","","",93,null],[3,"uinput_setup","","",null,null],[12,"id","","",94,null],[12,"name","","",94,null],[12,"ff_effects_max","","",94,null],[3,"uinput_user_dev","","",null,null],[12,"name","","",95,null],[12,"id","","",95,null],[12,"ff_effects_max","","",95,null],[12,"absmax","","",95,null],[12,"absmin","","",95,null],[12,"absfuzz","","",95,null],[12,"absflat","","",95,null],[3,"af_alg_iv","","WARNING: The <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of …",null,null],[12,"ivlen","","",96,null],[12,"iv","","",96,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",97,null],[12,"mq_maxmsg","","",97,null],[12,"mq_msgsize","","",97,null],[12,"mq_curmsgs","","",97,null],[19,"__c_anonymous_sockaddr_can_can_addr","","",null,null],[12,"tp","","",98,null],[12,"j1939","","",98,null],[3,"sockaddr_can","","",null,null],[12,"can_family","","",99,null],[12,"can_ifindex","","",99,null],[12,"can_addr","","",99,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_SEAL_FUTURE_WRITE","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFA_UNSPEC","","",null,null],[17,"IFA_ADDRESS","","",null,null],[17,"IFA_LOCAL","","",null,null],[17,"IFA_LABEL","","",null,null],[17,"IFA_BROADCAST","","",null,null],[17,"IFA_ANYCAST","","",null,null],[17,"IFA_CACHEINFO","","",null,null],[17,"IFA_MULTICAST","","",null,null],[17,"IFA_F_SECONDARY","","",null,null],[17,"IFA_F_TEMPORARY","","",null,null],[17,"IFA_F_NODAD","","",null,null],[17,"IFA_F_OPTIMISTIC","","",null,null],[17,"IFA_F_DADFAILED","","",null,null],[17,"IFA_F_HOMEADDRESS","","",null,null],[17,"IFA_F_DEPRECATED","","",null,null],[17,"IFA_F_TENTATIVE","","",null,null],[17,"IFA_F_PERMANENT","","",null,null],[17,"IFLA_UNSPEC","","",null,null],[17,"IFLA_ADDRESS","","",null,null],[17,"IFLA_BROADCAST","","",null,null],[17,"IFLA_IFNAME","","",null,null],[17,"IFLA_MTU","","",null,null],[17,"IFLA_LINK","","",null,null],[17,"IFLA_QDISC","","",null,null],[17,"IFLA_STATS","","",null,null],[17,"IFLA_COST","","",null,null],[17,"IFLA_PRIORITY","","",null,null],[17,"IFLA_MASTER","","",null,null],[17,"IFLA_WIRELESS","","",null,null],[17,"IFLA_PROTINFO","","",null,null],[17,"IFLA_TXQLEN","","",null,null],[17,"IFLA_MAP","","",null,null],[17,"IFLA_WEIGHT","","",null,null],[17,"IFLA_OPERSTATE","","",null,null],[17,"IFLA_LINKMODE","","",null,null],[17,"IFLA_LINKINFO","","",null,null],[17,"IFLA_NET_NS_PID","","",null,null],[17,"IFLA_IFALIAS","","",null,null],[17,"IFLA_NUM_VF","","",null,null],[17,"IFLA_VFINFO_LIST","","",null,null],[17,"IFLA_STATS64","","",null,null],[17,"IFLA_VF_PORTS","","",null,null],[17,"IFLA_PORT_SELF","","",null,null],[17,"IFLA_AF_SPEC","","",null,null],[17,"IFLA_GROUP","","",null,null],[17,"IFLA_NET_NS_FD","","",null,null],[17,"IFLA_EXT_MASK","","",null,null],[17,"IFLA_PROMISCUITY","","",null,null],[17,"IFLA_NUM_TX_QUEUES","","",null,null],[17,"IFLA_NUM_RX_QUEUES","","",null,null],[17,"IFLA_CARRIER","","",null,null],[17,"IFLA_PHYS_PORT_ID","","",null,null],[17,"IFLA_CARRIER_CHANGES","","",null,null],[17,"IFLA_PHYS_SWITCH_ID","","",null,null],[17,"IFLA_LINK_NETNSID","","",null,null],[17,"IFLA_PHYS_PORT_NAME","","",null,null],[17,"IFLA_PROTO_DOWN","","",null,null],[17,"IFLA_GSO_MAX_SEGS","","",null,null],[17,"IFLA_GSO_MAX_SIZE","","",null,null],[17,"IFLA_PAD","","",null,null],[17,"IFLA_XDP","","",null,null],[17,"IFLA_EVENT","","",null,null],[17,"IFLA_NEW_NETNSID","","",null,null],[17,"IFLA_IF_NETNSID","","",null,null],[17,"IFLA_TARGET_NETNSID","","",null,null],[17,"IFLA_CARRIER_UP_COUNT","","",null,null],[17,"IFLA_CARRIER_DOWN_COUNT","","",null,null],[17,"IFLA_NEW_IFINDEX","","",null,null],[17,"IFLA_MIN_MTU","","",null,null],[17,"IFLA_MAX_MTU","","",null,null],[17,"IFLA_PROP_LIST","","",null,null],[17,"IFLA_ALT_IFNAME","","",null,null],[17,"IFLA_PERM_ADDRESS","","",null,null],[17,"IFLA_PROTO_DOWN_REASON","","",null,null],[17,"IFLA_INFO_UNSPEC","","",null,null],[17,"IFLA_INFO_KIND","","",null,null],[17,"IFLA_INFO_DATA","","",null,null],[17,"IFLA_INFO_XSTATS","","",null,null],[17,"IFLA_INFO_SLAVE_KIND","","",null,null],[17,"IFLA_INFO_SLAVE_DATA","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"SCHED_RESET_ON_FORK","","",null,null],[17,"IPPROTO_MPTCP","","Multipath TCP",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"TCP_ULP","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"IPV6_MULTICAST_ALL","","",null,null],[17,"IPV6_ROUTER_ALERT_ISOLATE","","",null,null],[17,"PACKET_MR_UNICAST","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"UDP_SEGMENT","","",null,null],[17,"UDP_GRO","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IP_RECVFRAGSIZE","","",null,null],[17,"IPV6_FLOWINFO","","",null,null],[17,"IPV6_FLOWLABEL_MGR","","",null,null],[17,"IPV6_FLOWINFO_SEND","","",null,null],[17,"IPV6_RECVFRAGSIZE","","",null,null],[17,"IPV6_FREEBIND","","",null,null],[17,"IPV6_FLOWINFO_FLOWLABEL","","",null,null],[17,"IPV6_FLOWINFO_PRIORITY","","",null,null],[17,"IPV6_RTHDR_LOOSE","","",null,null],[17,"IPV6_RTHDR_STRICT","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"MFD_HUGETLB","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NFNLGRP_NONE","","",null,null],[17,"NFNLGRP_CONNTRACK_NEW","","",null,null],[17,"NFNLGRP_CONNTRACK_UPDATE","","",null,null],[17,"NFNLGRP_CONNTRACK_DESTROY","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_NEW","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_UPDATE","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_DESTROY","","",null,null],[17,"NFNLGRP_NFTABLES","","",null,null],[17,"NFNLGRP_ACCT_QUOTA","","",null,null],[17,"NFNETLINK_V0","","",null,null],[17,"NFNL_SUBSYS_NONE","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK_EXP","","",null,null],[17,"NFNL_SUBSYS_QUEUE","","",null,null],[17,"NFNL_SUBSYS_ULOG","","",null,null],[17,"NFNL_SUBSYS_OSF","","",null,null],[17,"NFNL_SUBSYS_IPSET","","",null,null],[17,"NFNL_SUBSYS_ACCT","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK_TIMEOUT","","",null,null],[17,"NFNL_SUBSYS_CTHELPER","","",null,null],[17,"NFNL_SUBSYS_NFTABLES","","",null,null],[17,"NFNL_SUBSYS_NFT_COMPAT","","",null,null],[17,"NFNL_SUBSYS_COUNT","","",null,null],[17,"NFNL_MSG_BATCH_BEGIN","","",null,null],[17,"NFNL_MSG_BATCH_END","","",null,null],[17,"NFULNL_MSG_PACKET","","",null,null],[17,"NFULNL_MSG_CONFIG","","",null,null],[17,"NFULA_UNSPEC","","",null,null],[17,"NFULA_PACKET_HDR","","",null,null],[17,"NFULA_MARK","","",null,null],[17,"NFULA_TIMESTAMP","","",null,null],[17,"NFULA_IFINDEX_INDEV","","",null,null],[17,"NFULA_IFINDEX_OUTDEV","","",null,null],[17,"NFULA_IFINDEX_PHYSINDEV","","",null,null],[17,"NFULA_IFINDEX_PHYSOUTDEV","","",null,null],[17,"NFULA_HWADDR","","",null,null],[17,"NFULA_PAYLOAD","","",null,null],[17,"NFULA_PREFIX","","",null,null],[17,"NFULA_UID","","",null,null],[17,"NFULA_SEQ","","",null,null],[17,"NFULA_SEQ_GLOBAL","","",null,null],[17,"NFULA_GID","","",null,null],[17,"NFULA_HWTYPE","","",null,null],[17,"NFULA_HWHEADER","","",null,null],[17,"NFULA_HWLEN","","",null,null],[17,"NFULA_CT","","",null,null],[17,"NFULA_CT_INFO","","",null,null],[17,"NFULNL_CFG_CMD_NONE","","",null,null],[17,"NFULNL_CFG_CMD_BIND","","",null,null],[17,"NFULNL_CFG_CMD_UNBIND","","",null,null],[17,"NFULNL_CFG_CMD_PF_BIND","","",null,null],[17,"NFULNL_CFG_CMD_PF_UNBIND","","",null,null],[17,"NFULA_CFG_UNSPEC","","",null,null],[17,"NFULA_CFG_CMD","","",null,null],[17,"NFULA_CFG_MODE","","",null,null],[17,"NFULA_CFG_NLBUFSIZ","","",null,null],[17,"NFULA_CFG_TIMEOUT","","",null,null],[17,"NFULA_CFG_QTHRESH","","",null,null],[17,"NFULA_CFG_FLAGS","","",null,null],[17,"NFULNL_COPY_NONE","","",null,null],[17,"NFULNL_COPY_META","","",null,null],[17,"NFULNL_COPY_PACKET","","",null,null],[17,"NFULNL_CFG_F_SEQ","","",null,null],[17,"NFULNL_CFG_F_SEQ_GLOBAL","","",null,null],[17,"NFULNL_CFG_F_CONNTRACK","","",null,null],[17,"NFQNL_MSG_PACKET","","",null,null],[17,"NFQNL_MSG_VERDICT","","",null,null],[17,"NFQNL_MSG_CONFIG","","",null,null],[17,"NFQNL_MSG_VERDICT_BATCH","","",null,null],[17,"NFQA_UNSPEC","","",null,null],[17,"NFQA_PACKET_HDR","","",null,null],[17,"NFQA_VERDICT_HDR","","",null,null],[17,"NFQA_MARK","","",null,null],[17,"NFQA_TIMESTAMP","","",null,null],[17,"NFQA_IFINDEX_INDEV","","",null,null],[17,"NFQA_IFINDEX_OUTDEV","","",null,null],[17,"NFQA_IFINDEX_PHYSINDEV","","",null,null],[17,"NFQA_IFINDEX_PHYSOUTDEV","","",null,null],[17,"NFQA_HWADDR","","",null,null],[17,"NFQA_PAYLOAD","","",null,null],[17,"NFQA_CT","","",null,null],[17,"NFQA_CT_INFO","","",null,null],[17,"NFQA_CAP_LEN","","",null,null],[17,"NFQA_SKB_INFO","","",null,null],[17,"NFQA_EXP","","",null,null],[17,"NFQA_UID","","",null,null],[17,"NFQA_GID","","",null,null],[17,"NFQA_SECCTX","","",null,null],[17,"NFQNL_CFG_CMD_NONE","","",null,null],[17,"NFQNL_CFG_CMD_BIND","","",null,null],[17,"NFQNL_CFG_CMD_UNBIND","","",null,null],[17,"NFQNL_CFG_CMD_PF_BIND","","",null,null],[17,"NFQNL_CFG_CMD_PF_UNBIND","","",null,null],[17,"NFQNL_COPY_NONE","","",null,null],[17,"NFQNL_COPY_META","","",null,null],[17,"NFQNL_COPY_PACKET","","",null,null],[17,"NFQA_CFG_UNSPEC","","",null,null],[17,"NFQA_CFG_CMD","","",null,null],[17,"NFQA_CFG_PARAMS","","",null,null],[17,"NFQA_CFG_QUEUE_MAXLEN","","",null,null],[17,"NFQA_CFG_MASK","","",null,null],[17,"NFQA_CFG_FLAGS","","",null,null],[17,"NFQA_CFG_F_FAIL_OPEN","","",null,null],[17,"NFQA_CFG_F_CONNTRACK","","",null,null],[17,"NFQA_CFG_F_GSO","","",null,null],[17,"NFQA_CFG_F_UID_GID","","",null,null],[17,"NFQA_CFG_F_SECCTX","","",null,null],[17,"NFQA_CFG_F_MAX","","",null,null],[17,"NFQA_SKB_CSUMNOTREADY","","",null,null],[17,"NFQA_SKB_GSO","","",null,null],[17,"NFQA_SKB_CSUM_NOTVERIFIED","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"PACKET_ADD_MEMBERSHIP","","",null,null],[17,"PACKET_DROP_MEMBERSHIP","","",null,null],[17,"PACKET_MR_MULTICAST","","",null,null],[17,"PACKET_MR_PROMISC","","",null,null],[17,"PACKET_MR_ALLMULTI","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"IP6T_SO_ORIGINAL_DST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"IPTOS_ECN_NOT_ECT","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"NUD_NONE","","",null,null],[17,"NUD_INCOMPLETE","","",null,null],[17,"NUD_REACHABLE","","",null,null],[17,"NUD_STALE","","",null,null],[17,"NUD_DELAY","","",null,null],[17,"NUD_PROBE","","",null,null],[17,"NUD_FAILED","","",null,null],[17,"NUD_NOARP","","",null,null],[17,"NUD_PERMANENT","","",null,null],[17,"NTF_USE","","",null,null],[17,"NTF_SELF","","",null,null],[17,"NTF_MASTER","","",null,null],[17,"NTF_PROXY","","",null,null],[17,"NTF_ROUTER","","",null,null],[17,"NDA_UNSPEC","","",null,null],[17,"NDA_DST","","",null,null],[17,"NDA_LLADDR","","",null,null],[17,"NDA_CACHEINFO","","",null,null],[17,"NDA_PROBES","","",null,null],[17,"NDA_VLAN","","",null,null],[17,"NDA_PORT","","",null,null],[17,"NDA_VNI","","",null,null],[17,"NDA_IFINDEX","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TCA_UNSPEC","","",null,null],[17,"TCA_KIND","","",null,null],[17,"TCA_OPTIONS","","",null,null],[17,"TCA_STATS","","",null,null],[17,"TCA_XSTATS","","",null,null],[17,"TCA_RATE","","",null,null],[17,"TCA_FCNT","","",null,null],[17,"TCA_STATS2","","",null,null],[17,"TCA_STAB","","",null,null],[17,"RTM_NEWLINK","","",null,null],[17,"RTM_DELLINK","","",null,null],[17,"RTM_GETLINK","","",null,null],[17,"RTM_SETLINK","","",null,null],[17,"RTM_NEWADDR","","",null,null],[17,"RTM_DELADDR","","",null,null],[17,"RTM_GETADDR","","",null,null],[17,"RTM_NEWROUTE","","",null,null],[17,"RTM_DELROUTE","","",null,null],[17,"RTM_GETROUTE","","",null,null],[17,"RTM_NEWNEIGH","","",null,null],[17,"RTM_DELNEIGH","","",null,null],[17,"RTM_GETNEIGH","","",null,null],[17,"RTM_NEWRULE","","",null,null],[17,"RTM_DELRULE","","",null,null],[17,"RTM_GETRULE","","",null,null],[17,"RTM_NEWQDISC","","",null,null],[17,"RTM_DELQDISC","","",null,null],[17,"RTM_GETQDISC","","",null,null],[17,"RTM_NEWTCLASS","","",null,null],[17,"RTM_DELTCLASS","","",null,null],[17,"RTM_GETTCLASS","","",null,null],[17,"RTM_NEWTFILTER","","",null,null],[17,"RTM_DELTFILTER","","",null,null],[17,"RTM_GETTFILTER","","",null,null],[17,"RTM_NEWACTION","","",null,null],[17,"RTM_DELACTION","","",null,null],[17,"RTM_GETACTION","","",null,null],[17,"RTM_NEWPREFIX","","",null,null],[17,"RTM_GETMULTICAST","","",null,null],[17,"RTM_GETANYCAST","","",null,null],[17,"RTM_NEWNEIGHTBL","","",null,null],[17,"RTM_GETNEIGHTBL","","",null,null],[17,"RTM_SETNEIGHTBL","","",null,null],[17,"RTM_NEWNDUSEROPT","","",null,null],[17,"RTM_NEWADDRLABEL","","",null,null],[17,"RTM_DELADDRLABEL","","",null,null],[17,"RTM_GETADDRLABEL","","",null,null],[17,"RTM_GETDCB","","",null,null],[17,"RTM_SETDCB","","",null,null],[17,"RTM_NEWNETCONF","","",null,null],[17,"RTM_GETNETCONF","","",null,null],[17,"RTM_NEWMDB","","",null,null],[17,"RTM_DELMDB","","",null,null],[17,"RTM_GETMDB","","",null,null],[17,"RTM_NEWNSID","","",null,null],[17,"RTM_DELNSID","","",null,null],[17,"RTM_GETNSID","","",null,null],[17,"RTM_F_NOTIFY","","",null,null],[17,"RTM_F_CLONED","","",null,null],[17,"RTM_F_EQUALIZE","","",null,null],[17,"RTM_F_PREFIX","","",null,null],[17,"RTA_UNSPEC","","",null,null],[17,"RTA_DST","","",null,null],[17,"RTA_SRC","","",null,null],[17,"RTA_IIF","","",null,null],[17,"RTA_OIF","","",null,null],[17,"RTA_GATEWAY","","",null,null],[17,"RTA_PRIORITY","","",null,null],[17,"RTA_PREFSRC","","",null,null],[17,"RTA_METRICS","","",null,null],[17,"RTA_MULTIPATH","","",null,null],[17,"RTA_PROTOINFO","","",null,null],[17,"RTA_FLOW","","",null,null],[17,"RTA_CACHEINFO","","",null,null],[17,"RTA_SESSION","","",null,null],[17,"RTA_MP_ALGO","","",null,null],[17,"RTA_TABLE","","",null,null],[17,"RTA_MARK","","",null,null],[17,"RTA_MFC_STATS","","",null,null],[17,"RTN_UNSPEC","","",null,null],[17,"RTN_UNICAST","","",null,null],[17,"RTN_LOCAL","","",null,null],[17,"RTN_BROADCAST","","",null,null],[17,"RTN_ANYCAST","","",null,null],[17,"RTN_MULTICAST","","",null,null],[17,"RTN_BLACKHOLE","","",null,null],[17,"RTN_UNREACHABLE","","",null,null],[17,"RTN_PROHIBIT","","",null,null],[17,"RTN_THROW","","",null,null],[17,"RTN_NAT","","",null,null],[17,"RTN_XRESOLVE","","",null,null],[17,"RTPROT_UNSPEC","","",null,null],[17,"RTPROT_REDIRECT","","",null,null],[17,"RTPROT_KERNEL","","",null,null],[17,"RTPROT_BOOT","","",null,null],[17,"RTPROT_STATIC","","",null,null],[17,"RT_SCOPE_UNIVERSE","","",null,null],[17,"RT_SCOPE_SITE","","",null,null],[17,"RT_SCOPE_LINK","","",null,null],[17,"RT_SCOPE_HOST","","",null,null],[17,"RT_SCOPE_NOWHERE","","",null,null],[17,"RT_TABLE_UNSPEC","","",null,null],[17,"RT_TABLE_COMPAT","","",null,null],[17,"RT_TABLE_DEFAULT","","",null,null],[17,"RT_TABLE_MAIN","","",null,null],[17,"RT_TABLE_LOCAL","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"MAX_ADDR_LEN","","",null,null],[17,"ARPD_UPDATE","","",null,null],[17,"ARPD_LOOKUP","","",null,null],[17,"ARPD_FLUSH","","",null,null],[17,"ATF_MAGIC","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",null,null],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",null,null],[17,"SOF_TIMESTAMPING_TX_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_TX_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_RX_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_RX_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_SYS_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_RAW_HARDWARE","","",null,null],[17,"ALG_SET_KEY","","",null,null],[17,"ALG_SET_IV","","",null,null],[17,"ALG_SET_OP","","",null,null],[17,"ALG_SET_AEAD_ASSOCLEN","","",null,null],[17,"ALG_SET_AEAD_AUTHSIZE","","",null,null],[17,"ALG_OP_DECRYPT","","",null,null],[17,"ALG_OP_ENCRYPT","","",null,null],[17,"UDP_CORK","","",null,null],[17,"UDP_ENCAP","","",null,null],[17,"UDP_NO_CHECK6_TX","","",null,null],[17,"UDP_NO_CHECK6_RX","","",null,null],[17,"MAP_SHARED_VALIDATE","","",null,null],[17,"MAP_FIXED_NOREPLACE","","",null,null],[17,"VMADDR_CID_ANY","","",null,null],[17,"VMADDR_CID_HYPERVISOR","","",null,null],[17,"VMADDR_CID_RESERVED","","",null,null],[17,"VMADDR_CID_LOCAL","","",null,null],[17,"VMADDR_CID_HOST","","",null,null],[17,"VMADDR_PORT_ANY","","",null,null],[17,"IN_ACCESS","","",null,null],[17,"IN_MODIFY","","",null,null],[17,"IN_ATTRIB","","",null,null],[17,"IN_CLOSE_WRITE","","",null,null],[17,"IN_CLOSE_NOWRITE","","",null,null],[17,"IN_CLOSE","","",null,null],[17,"IN_OPEN","","",null,null],[17,"IN_MOVED_FROM","","",null,null],[17,"IN_MOVED_TO","","",null,null],[17,"IN_MOVE","","",null,null],[17,"IN_CREATE","","",null,null],[17,"IN_DELETE","","",null,null],[17,"IN_DELETE_SELF","","",null,null],[17,"IN_MOVE_SELF","","",null,null],[17,"IN_UNMOUNT","","",null,null],[17,"IN_Q_OVERFLOW","","",null,null],[17,"IN_IGNORED","","",null,null],[17,"IN_ONLYDIR","","",null,null],[17,"IN_DONT_FOLLOW","","",null,null],[17,"KEY_SPEC_THREAD_KEYRING","","",null,null],[17,"KEY_SPEC_PROCESS_KEYRING","","",null,null],[17,"KEY_SPEC_SESSION_KEYRING","","",null,null],[17,"KEY_SPEC_USER_KEYRING","","",null,null],[17,"KEY_SPEC_USER_SESSION_KEYRING","","",null,null],[17,"KEY_SPEC_GROUP_KEYRING","","",null,null],[17,"KEY_SPEC_REQKEY_AUTH_KEY","","",null,null],[17,"KEY_SPEC_REQUESTOR_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_NO_CHANGE","","",null,null],[17,"KEY_REQKEY_DEFL_DEFAULT","","",null,null],[17,"KEY_REQKEY_DEFL_THREAD_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_PROCESS_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_SESSION_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_USER_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_USER_SESSION_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_GROUP_KEYRING","","",null,null],[17,"KEY_REQKEY_DEFL_REQUESTOR_KEYRING","","",null,null],[17,"KEYCTL_GET_KEYRING_ID","","",null,null],[17,"KEYCTL_JOIN_SESSION_KEYRING","","",null,null],[17,"KEYCTL_UPDATE","","",null,null],[17,"KEYCTL_REVOKE","","",null,null],[17,"KEYCTL_CHOWN","","",null,null],[17,"KEYCTL_SETPERM","","",null,null],[17,"KEYCTL_DESCRIBE","","",null,null],[17,"KEYCTL_CLEAR","","",null,null],[17,"KEYCTL_LINK","","",null,null],[17,"KEYCTL_UNLINK","","",null,null],[17,"KEYCTL_SEARCH","","",null,null],[17,"KEYCTL_READ","","",null,null],[17,"KEYCTL_INSTANTIATE","","",null,null],[17,"KEYCTL_NEGATE","","",null,null],[17,"KEYCTL_SET_REQKEY_KEYRING","","",null,null],[17,"KEYCTL_SET_TIMEOUT","","",null,null],[17,"KEYCTL_ASSUME_AUTHORITY","","",null,null],[17,"KEYCTL_GET_SECURITY","","",null,null],[17,"KEYCTL_SESSION_TO_PARENT","","",null,null],[17,"KEYCTL_REJECT","","",null,null],[17,"KEYCTL_INSTANTIATE_IOV","","",null,null],[17,"KEYCTL_INVALIDATE","","",null,null],[17,"KEYCTL_GET_PERSISTENT","","",null,null],[17,"IN_ISDIR","","",null,null],[17,"IN_ONESHOT","","",null,null],[17,"IN_ALL_EVENTS","","",null,null],[17,"IN_CLOEXEC","","",null,null],[17,"IN_NONBLOCK","","",null,null],[17,"FF_MAX","","",null,null],[17,"FF_CNT","","",null,null],[17,"INPUT_PROP_MAX","","",null,null],[17,"INPUT_PROP_CNT","","",null,null],[17,"EV_MAX","","",null,null],[17,"EV_CNT","","",null,null],[17,"SYN_MAX","","",null,null],[17,"SYN_CNT","","",null,null],[17,"KEY_MAX","","",null,null],[17,"KEY_CNT","","",null,null],[17,"REL_MAX","","",null,null],[17,"REL_CNT","","",null,null],[17,"ABS_MAX","","",null,null],[17,"ABS_CNT","","",null,null],[17,"SW_MAX","","",null,null],[17,"SW_CNT","","",null,null],[17,"MSC_MAX","","",null,null],[17,"MSC_CNT","","",null,null],[17,"LED_MAX","","",null,null],[17,"LED_CNT","","",null,null],[17,"REP_MAX","","",null,null],[17,"REP_CNT","","",null,null],[17,"SND_MAX","","",null,null],[17,"SND_CNT","","",null,null],[17,"UINPUT_VERSION","","",null,null],[17,"UINPUT_MAX_NAME_SIZE","","",null,null],[17,"FAN_ACCESS","","",null,null],[17,"FAN_MODIFY","","",null,null],[17,"FAN_CLOSE_WRITE","","",null,null],[17,"FAN_CLOSE_NOWRITE","","",null,null],[17,"FAN_OPEN","","",null,null],[17,"FAN_Q_OVERFLOW","","",null,null],[17,"FAN_OPEN_PERM","","",null,null],[17,"FAN_ACCESS_PERM","","",null,null],[17,"FAN_ONDIR","","",null,null],[17,"FAN_EVENT_ON_CHILD","","",null,null],[17,"FAN_CLOSE","","",null,null],[17,"FAN_CLOEXEC","","",null,null],[17,"FAN_NONBLOCK","","",null,null],[17,"FAN_CLASS_NOTIF","","",null,null],[17,"FAN_CLASS_CONTENT","","",null,null],[17,"FAN_CLASS_PRE_CONTENT","","",null,null],[17,"FAN_UNLIMITED_QUEUE","","",null,null],[17,"FAN_UNLIMITED_MARKS","","",null,null],[17,"FAN_MARK_ADD","","",null,null],[17,"FAN_MARK_REMOVE","","",null,null],[17,"FAN_MARK_DONT_FOLLOW","","",null,null],[17,"FAN_MARK_ONLYDIR","","",null,null],[17,"FAN_MARK_IGNORED_MASK","","",null,null],[17,"FAN_MARK_IGNORED_SURV_MODIFY","","",null,null],[17,"FAN_MARK_FLUSH","","",null,null],[17,"FANOTIFY_METADATA_VERSION","","",null,null],[17,"FAN_ALLOW","","",null,null],[17,"FAN_DENY","","",null,null],[17,"FAN_NOFD","","",null,null],[17,"FUTEX_WAIT","","",null,null],[17,"FUTEX_WAKE","","",null,null],[17,"FUTEX_FD","","",null,null],[17,"FUTEX_REQUEUE","","",null,null],[17,"FUTEX_CMP_REQUEUE","","",null,null],[17,"FUTEX_WAKE_OP","","",null,null],[17,"FUTEX_LOCK_PI","","",null,null],[17,"FUTEX_UNLOCK_PI","","",null,null],[17,"FUTEX_TRYLOCK_PI","","",null,null],[17,"FUTEX_WAIT_BITSET","","",null,null],[17,"FUTEX_WAKE_BITSET","","",null,null],[17,"FUTEX_WAIT_REQUEUE_PI","","",null,null],[17,"FUTEX_CMP_REQUEUE_PI","","",null,null],[17,"FUTEX_PRIVATE_FLAG","","",null,null],[17,"FUTEX_CLOCK_REALTIME","","",null,null],[17,"FUTEX_CMD_MASK","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"REG_EXTENDED","","",null,null],[17,"REG_ICASE","","",null,null],[17,"REG_NEWLINE","","",null,null],[17,"REG_NOSUB","","",null,null],[17,"REG_NOTBOL","","",null,null],[17,"REG_NOTEOL","","",null,null],[17,"REG_ENOSYS","","",null,null],[17,"REG_NOMATCH","","",null,null],[17,"REG_BADPAT","","",null,null],[17,"REG_ECOLLATE","","",null,null],[17,"REG_ECTYPE","","",null,null],[17,"REG_EESCAPE","","",null,null],[17,"REG_ESUBREG","","",null,null],[17,"REG_EBRACK","","",null,null],[17,"REG_EPAREN","","",null,null],[17,"REG_EBRACE","","",null,null],[17,"REG_BADBR","","",null,null],[17,"REG_ERANGE","","",null,null],[17,"REG_ESPACE","","",null,null],[17,"REG_BADRPT","","",null,null],[17,"SO_EE_ORIGIN_NONE","","",null,null],[17,"SO_EE_ORIGIN_LOCAL","","",null,null],[17,"SO_EE_ORIGIN_ICMP","","",null,null],[17,"SO_EE_ORIGIN_ICMP6","","",null,null],[17,"SO_EE_ORIGIN_TXSTATUS","","",null,null],[17,"SO_EE_ORIGIN_TIMESTAMPING","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"CAN_EFF_FLAG","","",null,null],[17,"CAN_RTR_FLAG","","",null,null],[17,"CAN_ERR_FLAG","","",null,null],[17,"CAN_SFF_MASK","","",null,null],[17,"CAN_EFF_MASK","","",null,null],[17,"CAN_ERR_MASK","","",null,null],[17,"CAN_SFF_ID_BITS","","",null,null],[17,"CAN_EFF_ID_BITS","","",null,null],[17,"CAN_MAX_DLC","","",null,null],[17,"CAN_MAX_DLEN","","",null,null],[17,"CANFD_MAX_DLC","","",null,null],[17,"CANFD_MAX_DLEN","","",null,null],[17,"CANFD_BRS","","",null,null],[17,"CANFD_ESI","","",null,null],[17,"CAN_MTU","","",null,null],[17,"CANFD_MTU","","",null,null],[17,"CAN_RAW","","",null,null],[17,"CAN_BCM","","",null,null],[17,"CAN_TP16","","",null,null],[17,"CAN_TP20","","",null,null],[17,"CAN_MCNET","","",null,null],[17,"CAN_ISOTP","","",null,null],[17,"CAN_J1939","","",null,null],[17,"CAN_NPROTO","","",null,null],[17,"SOL_CAN_BASE","","",null,null],[17,"CAN_INV_FILTER","","",null,null],[17,"CAN_RAW_FILTER_MAX","","",null,null],[5,"NLA_ALIGN","","",null,[[["c_int",6]],["c_int",6]]],[5,"CMSG_NXTHDR","","",null,[[]]],[5,"CPU_ALLOC_SIZE","","",null,[[["c_int",6]],["size_t",6]]],[5,"CPU_ZERO","","",null,[[["cpu_set_t",3]]]],[5,"CPU_SET","","",null,[[["cpu_set_t",3]]]],[5,"CPU_CLR","","",null,[[["cpu_set_t",3]]]],[5,"CPU_ISSET","","",null,[[["cpu_set_t",3]]]],[5,"CPU_COUNT_S","","",null,[[["cpu_set_t",3]],["c_int",6]]],[5,"CPU_COUNT","","",null,[[["cpu_set_t",3]],["c_int",6]]],[5,"CPU_EQUAL","","",null,[[["cpu_set_t",3]]]],[5,"major","","",null,[[["dev_t",6]],["c_uint",6]]],[5,"minor","","",null,[[["dev_t",6]],["c_uint",6]]],[5,"makedev","","",null,[[["c_uint",6]],["dev_t",6]]],[5,"IPTOS_TOS","","",null,[[]]],[5,"IPTOS_PREC","","",null,[[]]],[5,"RT_TOS","","",null,[[]]],[5,"RT_ADDRCLASS","","",null,[[]]],[5,"RT_LOCALADDR","","",null,[[]]],[5,"SO_EE_OFFENDER","","",null,[[]]],[6,"pthread_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"__rlimit_resource_t","","",null,null],[6,"Lmid_t","","",null,null],[6,"regoff_t","","",null,null],[3,"statx","","",null,null],[12,"stx_mask","","",100,null],[12,"stx_blksize","","",100,null],[12,"stx_attributes","","",100,null],[12,"stx_nlink","","",100,null],[12,"stx_uid","","",100,null],[12,"stx_gid","","",100,null],[12,"stx_mode","","",100,null],[12,"stx_ino","","",100,null],[12,"stx_size","","",100,null],[12,"stx_blocks","","",100,null],[12,"stx_attributes_mask","","",100,null],[12,"stx_atime","","",100,null],[12,"stx_btime","","",100,null],[12,"stx_ctime","","",100,null],[12,"stx_mtime","","",100,null],[12,"stx_rdev_major","","",100,null],[12,"stx_rdev_minor","","",100,null],[12,"stx_dev_major","","",100,null],[12,"stx_dev_minor","","",100,null],[12,"stx_mnt_id","","",100,null],[3,"statx_timestamp","","",null,null],[12,"tv_sec","","",101,null],[12,"tv_nsec","","",101,null],[12,"__statx_timestamp_pad1","","",101,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",102,null],[12,"aio_lio_opcode","","",102,null],[12,"aio_reqprio","","",102,null],[12,"aio_buf","","",102,null],[12,"aio_nbytes","","",102,null],[12,"aio_sigevent","","",102,null],[12,"aio_offset","","",102,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",103,null],[12,"e_exit","","",103,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",104,null],[12,"tv_usec","","",104,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",105,null],[12,"gl_pathv","","",105,null],[12,"gl_offs","","",105,null],[12,"gl_flags","","",105,null],[3,"msghdr","","",null,null],[12,"msg_name","","",106,null],[12,"msg_namelen","","",106,null],[12,"msg_iov","","",106,null],[12,"msg_iovlen","","",106,null],[12,"msg_control","","",106,null],[12,"msg_controllen","","",106,null],[12,"msg_flags","","",106,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",107,null],[12,"cmsg_level","","",107,null],[12,"cmsg_type","","",107,null],[3,"termios","","",null,null],[12,"c_iflag","","",108,null],[12,"c_oflag","","",108,null],[12,"c_cflag","","",108,null],[12,"c_lflag","","",108,null],[12,"c_line","","",108,null],[12,"c_cc","","",108,null],[12,"c_ispeed","","",108,null],[12,"c_ospeed","","",108,null],[3,"mallinfo","","",null,null],[12,"arena","","",109,null],[12,"ordblks","","",109,null],[12,"smblks","","",109,null],[12,"hblks","","",109,null],[12,"hblkhd","","",109,null],[12,"usmblks","","",109,null],[12,"fsmblks","","",109,null],[12,"uordblks","","",109,null],[12,"fordblks","","",109,null],[12,"keepcost","","",109,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",110,null],[12,"nlmsg_type","","",110,null],[12,"nlmsg_flags","","",110,null],[12,"nlmsg_seq","","",110,null],[12,"nlmsg_pid","","",110,null],[3,"nlmsgerr","","",null,null],[12,"error","","",111,null],[12,"msg","","",111,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",112,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",113,null],[12,"nm_block_nr","","",113,null],[12,"nm_frame_size","","",113,null],[12,"nm_frame_nr","","",113,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",114,null],[12,"nm_len","","",114,null],[12,"nm_group","","",114,null],[12,"nm_pid","","",114,null],[12,"nm_uid","","",114,null],[12,"nm_gid","","",114,null],[3,"nlattr","","",null,null],[12,"nla_len","","",115,null],[12,"nla_type","","",115,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",116,null],[12,"rt_dst","","",116,null],[12,"rt_gateway","","",116,null],[12,"rt_genmask","","",116,null],[12,"rt_flags","","",116,null],[12,"rt_pad2","","",116,null],[12,"rt_pad3","","",116,null],[12,"rt_tos","","",116,null],[12,"rt_class","","",116,null],[12,"rt_pad4","","",116,null],[12,"rt_metric","","",116,null],[12,"rt_dev","","",116,null],[12,"rt_mtu","","",116,null],[12,"rt_window","","",116,null],[12,"rt_irtt","","",116,null],[3,"timex","","",null,null],[12,"modes","","",117,null],[12,"offset","","",117,null],[12,"freq","","",117,null],[12,"maxerror","","",117,null],[12,"esterror","","",117,null],[12,"status","","",117,null],[12,"constant","","",117,null],[12,"precision","","",117,null],[12,"tolerance","","",117,null],[12,"time","","",117,null],[12,"tick","","",117,null],[12,"ppsfreq","","",117,null],[12,"jitter","","",117,null],[12,"shift","","",117,null],[12,"stabil","","",117,null],[12,"jitcnt","","",117,null],[12,"calcnt","","",117,null],[12,"errcnt","","",117,null],[12,"stbcnt","","",117,null],[12,"tai","","",117,null],[12,"__unused1","","",117,null],[12,"__unused2","","",117,null],[12,"__unused3","","",117,null],[12,"__unused4","","",117,null],[12,"__unused5","","",117,null],[12,"__unused6","","",117,null],[12,"__unused7","","",117,null],[12,"__unused8","","",117,null],[12,"__unused9","","",117,null],[12,"__unused10","","",117,null],[12,"__unused11","","",117,null],[3,"ntptimeval","","",null,null],[12,"time","","",118,null],[12,"maxerror","","",118,null],[12,"esterror","","",118,null],[12,"tai","","",118,null],[12,"__glibc_reserved1","","",118,null],[12,"__glibc_reserved2","","",118,null],[12,"__glibc_reserved3","","",118,null],[12,"__glibc_reserved4","","",118,null],[3,"regex_t","","",null,null],[3,"Elf64_Chdr","","",null,null],[12,"ch_type","","",119,null],[12,"ch_reserved","","",119,null],[12,"ch_size","","",119,null],[12,"ch_addralign","","",119,null],[3,"Elf32_Chdr","","",null,null],[12,"ch_type","","",120,null],[12,"ch_size","","",120,null],[12,"ch_addralign","","",120,null],[3,"utmpx","","",null,null],[12,"ut_type","","",121,null],[12,"ut_pid","","",121,null],[12,"ut_line","","",121,null],[12,"ut_id","","",121,null],[12,"ut_user","","",121,null],[12,"ut_host","","",121,null],[12,"ut_exit","","",121,null],[12,"ut_session","","",121,null],[12,"ut_tv","","",121,null],[12,"ut_addr_v6","","",121,null],[17,"HUGETLB_FLAG_ENCODE_SHIFT","","",null,null],[17,"HUGETLB_FLAG_ENCODE_MASK","","",null,null],[17,"HUGETLB_FLAG_ENCODE_64KB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_512KB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_1MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_2MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_8MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_16MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_32MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_256MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_512MB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_1GB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_2GB","","",null,null],[17,"HUGETLB_FLAG_ENCODE_16GB","","",null,null],[17,"MAP_HUGE_SHIFT","","",null,null],[17,"MAP_HUGE_MASK","","",null,null],[17,"MAP_HUGE_64KB","","",null,null],[17,"MAP_HUGE_512KB","","",null,null],[17,"MAP_HUGE_1MB","","",null,null],[17,"MAP_HUGE_2MB","","",null,null],[17,"MAP_HUGE_8MB","","",null,null],[17,"MAP_HUGE_16MB","","",null,null],[17,"MAP_HUGE_32MB","","",null,null],[17,"MAP_HUGE_256MB","","",null,null],[17,"MAP_HUGE_512MB","","",null,null],[17,"MAP_HUGE_1GB","","",null,null],[17,"MAP_HUGE_2GB","","",null,null],[17,"MAP_HUGE_16GB","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"LM_ID_BASE","","",null,null],[17,"LM_ID_NEWLM","","",null,null],[17,"RTLD_DI_LMID","","",null,null],[17,"RTLD_DI_LINKMAP","","",null,null],[17,"RTLD_DI_CONFIGADDR","","",null,null],[17,"RTLD_DI_SERINFO","","",null,null],[17,"RTLD_DI_SERINFOSIZE","","",null,null],[17,"RTLD_DI_ORIGIN","","",null,null],[17,"RTLD_DI_PROFILENAME","","",null,null],[17,"RTLD_DI_PROFILEOUT","","",null,null],[17,"RTLD_DI_TLS_MODID","","",null,null],[17,"RTLD_DI_TLS_DATA","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_NFC","","",null,null],[17,"SOL_XDP","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"TCP_FASTOPEN_CONNECT","","",null,null],[17,"FAN_MARK_INODE","","",null,null],[17,"FAN_MARK_MOUNT","","",null,null],[17,"FAN_MARK_FILESYSTEM","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"AF_XDP","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"PF_XDP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening …",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"AFS_SUPER_MAGIC","","",null,null],[17,"AUTOFS_SUPER_MAGIC","","",null,null],[17,"BINDERFS_SUPER_MAGIC","","",null,null],[17,"BPF_FS_MAGIC","","",null,null],[17,"BTRFS_SUPER_MAGIC","","",null,null],[17,"CGROUP2_SUPER_MAGIC","","",null,null],[17,"CGROUP_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEBUGFS_MAGIC","","",null,null],[17,"DEVPTS_SUPER_MAGIC","","",null,null],[17,"ECRYPTFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"F2FS_SUPER_MAGIC","","",null,null],[17,"FUTEXFS_SUPER_MAGIC","","",null,null],[17,"HOSTFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX3_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NILFS_SUPER_MAGIC","","",null,null],[17,"OCFS2_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"OVERLAYFS_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"QNX6_SUPER_MAGIC","","",null,null],[17,"RDTGROUP_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SECURITYFS_MAGIC","","",null,null],[17,"SELINUX_MAGIC","","",null,null],[17,"SMACK_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSFS_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"TRACEFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"XENFS_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"RWF_HIPRI","","",null,null],[17,"RWF_DSYNC","","",null,null],[17,"RWF_SYNC","","",null,null],[17,"RWF_NOWAIT","","",null,null],[17,"RWF_APPEND","","",null,null],[17,"TCA_PAD","","",null,null],[17,"TCA_DUMP_INVISIBLE","","",null,null],[17,"TCA_CHAIN","","",null,null],[17,"TCA_HW_OFFLOAD","","",null,null],[17,"RTM_DELNETCONF","","",null,null],[17,"RTM_NEWSTATS","","",null,null],[17,"RTM_GETSTATS","","",null,null],[17,"RTM_NEWCACHEREPORT","","",null,null],[17,"RTM_F_LOOKUP_TABLE","","",null,null],[17,"RTM_F_FIB_MATCH","","",null,null],[17,"RTA_VIA","","",null,null],[17,"RTA_NEWDST","","",null,null],[17,"RTA_PREF","","",null,null],[17,"RTA_ENCAP_TYPE","","",null,null],[17,"RTA_ENCAP","","",null,null],[17,"RTA_EXPIRES","","",null,null],[17,"RTA_PAD","","",null,null],[17,"RTA_UID","","",null,null],[17,"RTA_TTL_PROPAGATE","","",null,null],[17,"NTF_EXT_LEARNED","","",null,null],[17,"NTF_OFFLOADED","","",null,null],[17,"NDA_MASTER","","",null,null],[17,"NDA_LINK_NETNSID","","",null,null],[17,"NDA_SRC_VNI","","",null,null],[17,"UNAME26","","",null,null],[17,"FDPIC_FUNCPTRS","","",null,null],[17,"IFA_FLAGS","","",null,null],[17,"IFA_F_MANAGETEMPADDR","","",null,null],[17,"IFA_F_NOPREFIXROUTE","","",null,null],[17,"IFA_F_MCAUTOJOIN","","",null,null],[17,"IFA_F_STABLE_PRIVACY","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"KEYCTL_DH_COMPUTE","","",null,null],[17,"KEYCTL_PKEY_QUERY","","",null,null],[17,"KEYCTL_PKEY_ENCRYPT","","",null,null],[17,"KEYCTL_PKEY_DECRYPT","","",null,null],[17,"KEYCTL_PKEY_SIGN","","",null,null],[17,"KEYCTL_PKEY_VERIFY","","",null,null],[17,"KEYCTL_RESTRICT_KEYRING","","",null,null],[17,"KEYCTL_SUPPORTS_ENCRYPT","","",null,null],[17,"KEYCTL_SUPPORTS_DECRYPT","","",null,null],[17,"KEYCTL_SUPPORTS_SIGN","","",null,null],[17,"KEYCTL_SUPPORTS_VERIFY","","",null,null],[17,"KEYCTL_MOVE","","",null,null],[17,"KEYCTL_CAPABILITIES","","",null,null],[17,"KEYCTL_CAPS0_CAPABILITIES","","",null,null],[17,"KEYCTL_CAPS0_PERSISTENT_KEYRINGS","","",null,null],[17,"KEYCTL_CAPS0_DIFFIE_HELLMAN","","",null,null],[17,"KEYCTL_CAPS0_PUBLIC_KEY","","",null,null],[17,"KEYCTL_CAPS0_BIG_KEY","","",null,null],[17,"KEYCTL_CAPS0_INVALIDATE","","",null,null],[17,"KEYCTL_CAPS0_RESTRICT_KEYRING","","",null,null],[17,"KEYCTL_CAPS0_MOVE","","",null,null],[17,"KEYCTL_CAPS1_NS_KEYRING_NAME","","",null,null],[17,"KEYCTL_CAPS1_NS_KEY_TAG","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"M_MXFAST","","",null,null],[17,"M_NLBLKS","","",null,null],[17,"M_GRAIN","","",null,null],[17,"M_KEEP","","",null,null],[17,"M_TRIM_THRESHOLD","","",null,null],[17,"M_TOP_PAD","","",null,null],[17,"M_MMAP_THRESHOLD","","",null,null],[17,"M_MMAP_MAX","","",null,null],[17,"M_CHECK_ACTION","","",null,null],[17,"M_PERTURB","","",null,null],[17,"M_ARENA_TEST","","",null,null],[17,"M_ARENA_MAX","","",null,null],[17,"AT_STATX_SYNC_TYPE","","",null,null],[17,"AT_STATX_SYNC_AS_STAT","","",null,null],[17,"AT_STATX_FORCE_SYNC","","",null,null],[17,"AT_STATX_DONT_SYNC","","",null,null],[17,"STATX_TYPE","","",null,null],[17,"STATX_MODE","","",null,null],[17,"STATX_NLINK","","",null,null],[17,"STATX_UID","","",null,null],[17,"STATX_GID","","",null,null],[17,"STATX_ATIME","","",null,null],[17,"STATX_MTIME","","",null,null],[17,"STATX_CTIME","","",null,null],[17,"STATX_INO","","",null,null],[17,"STATX_SIZE","","",null,null],[17,"STATX_BLOCKS","","",null,null],[17,"STATX_BASIC_STATS","","",null,null],[17,"STATX_BTIME","","",null,null],[17,"STATX_MNT_ID","","",null,null],[17,"STATX_ALL","","",null,null],[17,"STATX__RESERVED","","",null,null],[17,"STATX_ATTR_COMPRESSED","","",null,null],[17,"STATX_ATTR_IMMUTABLE","","",null,null],[17,"STATX_ATTR_APPEND","","",null,null],[17,"STATX_ATTR_NODUMP","","",null,null],[17,"STATX_ATTR_ENCRYPTED","","",null,null],[17,"STATX_ATTR_AUTOMOUNT","","",null,null],[17,"AT_NULL","","",null,null],[17,"AT_IGNORE","","",null,null],[17,"AT_EXECFD","","",null,null],[17,"AT_PHDR","","",null,null],[17,"AT_PHENT","","",null,null],[17,"AT_PHNUM","","",null,null],[17,"AT_PAGESZ","","",null,null],[17,"AT_BASE","","",null,null],[17,"AT_FLAGS","","",null,null],[17,"AT_ENTRY","","",null,null],[17,"AT_NOTELF","","",null,null],[17,"AT_UID","","",null,null],[17,"AT_EUID","","",null,null],[17,"AT_GID","","",null,null],[17,"AT_EGID","","",null,null],[17,"AT_PLATFORM","","",null,null],[17,"AT_HWCAP","","",null,null],[17,"AT_CLKTCK","","",null,null],[17,"AT_SECURE","","",null,null],[17,"AT_BASE_PLATFORM","","",null,null],[17,"AT_RANDOM","","",null,null],[17,"AT_HWCAP2","","",null,null],[17,"AT_EXECFN","","",null,null],[17,"ADJ_OFFSET","","",null,null],[17,"ADJ_FREQUENCY","","",null,null],[17,"ADJ_MAXERROR","","",null,null],[17,"ADJ_ESTERROR","","",null,null],[17,"ADJ_STATUS","","",null,null],[17,"ADJ_TIMECONST","","",null,null],[17,"ADJ_TAI","","",null,null],[17,"ADJ_SETOFFSET","","",null,null],[17,"ADJ_MICRO","","",null,null],[17,"ADJ_NANO","","",null,null],[17,"ADJ_TICK","","",null,null],[17,"ADJ_OFFSET_SINGLESHOT","","",null,null],[17,"ADJ_OFFSET_SS_READ","","",null,null],[17,"MOD_OFFSET","","",null,null],[17,"MOD_FREQUENCY","","",null,null],[17,"MOD_MAXERROR","","",null,null],[17,"MOD_ESTERROR","","",null,null],[17,"MOD_STATUS","","",null,null],[17,"MOD_TIMECONST","","",null,null],[17,"MOD_CLKB","","",null,null],[17,"MOD_CLKA","","",null,null],[17,"MOD_TAI","","",null,null],[17,"MOD_MICRO","","",null,null],[17,"MOD_NANO","","",null,null],[17,"STA_PLL","","",null,null],[17,"STA_PPSFREQ","","",null,null],[17,"STA_PPSTIME","","",null,null],[17,"STA_FLL","","",null,null],[17,"STA_INS","","",null,null],[17,"STA_DEL","","",null,null],[17,"STA_UNSYNC","","",null,null],[17,"STA_FREQHOLD","","",null,null],[17,"STA_PPSSIGNAL","","",null,null],[17,"STA_PPSJITTER","","",null,null],[17,"STA_PPSWANDER","","",null,null],[17,"STA_PPSERROR","","",null,null],[17,"STA_CLOCKERR","","",null,null],[17,"STA_NANO","","",null,null],[17,"STA_MODE","","",null,null],[17,"STA_CLK","","",null,null],[17,"STA_RONLY","","",null,null],[17,"NTP_API","","",null,null],[17,"TIME_OK","","",null,null],[17,"TIME_INS","","",null,null],[17,"TIME_DEL","","",null,null],[17,"TIME_OOP","","",null,null],[17,"TIME_WAIT","","",null,null],[17,"TIME_ERROR","","",null,null],[17,"TIME_BAD","","",null,null],[17,"MAXTC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"REG_STARTEND","","",null,null],[17,"REG_EEND","","",null,null],[17,"REG_ESIZE","","",null,null],[17,"REG_ERPAREN","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",122,null],[12,"loads","","",122,null],[12,"totalram","","",122,null],[12,"freeram","","",122,null],[12,"sharedram","","",122,null],[12,"bufferram","","",122,null],[12,"totalswap","","",122,null],[12,"freeswap","","",122,null],[12,"procs","","",122,null],[12,"pad","","",122,null],[12,"totalhigh","","",122,null],[12,"freehigh","","",122,null],[12,"mem_unit","","",122,null],[12,"_f","","",122,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",123,null],[12,"msg_stime","","",123,null],[12,"msg_rtime","","",123,null],[12,"msg_ctime","","",123,null],[12,"msg_qnum","","",123,null],[12,"msg_qbytes","","",123,null],[12,"msg_lspid","","",123,null],[12,"msg_lrpid","","",123,null],[17,"RLIM_INFINITY","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",124,null],[12,"sa_mask","","",124,null],[12,"sa_flags","","",124,null],[12,"sa_restorer","","",124,null],[3,"statfs","","",null,null],[12,"f_type","","",125,null],[12,"f_bsize","","",125,null],[12,"f_blocks","","",125,null],[12,"f_bfree","","",125,null],[12,"f_bavail","","",125,null],[12,"f_files","","",125,null],[12,"f_ffree","","",125,null],[12,"f_fsid","","",125,null],[12,"f_namelen","","",125,null],[12,"f_frsize","","",125,null],[3,"flock","","",null,null],[12,"l_type","","",126,null],[12,"l_whence","","",126,null],[12,"l_start","","",126,null],[12,"l_len","","",126,null],[12,"l_pid","","",126,null],[3,"flock64","","",null,null],[12,"l_type","","",127,null],[12,"l_whence","","",127,null],[12,"l_start","","",127,null],[12,"l_len","","",127,null],[12,"l_pid","","",127,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",128,null],[12,"si_errno","","",128,null],[12,"si_code","","",128,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",129,null],[12,"ss_flags","","",129,null],[12,"ss_size","","",129,null],[3,"stat","","",null,null],[12,"st_dev","","",130,null],[12,"st_ino","","",130,null],[12,"st_nlink","","",130,null],[12,"st_mode","","",130,null],[12,"st_uid","","",130,null],[12,"st_gid","","",130,null],[12,"st_rdev","","",130,null],[12,"st_size","","",130,null],[12,"st_blksize","","",130,null],[12,"st_blocks","","",130,null],[12,"st_atime","","",130,null],[12,"st_atime_nsec","","",130,null],[12,"st_mtime","","",130,null],[12,"st_mtime_nsec","","",130,null],[12,"st_ctime","","",130,null],[12,"st_ctime_nsec","","",130,null],[3,"stat64","","",null,null],[12,"st_dev","","",131,null],[12,"st_ino","","",131,null],[12,"st_nlink","","",131,null],[12,"st_mode","","",131,null],[12,"st_uid","","",131,null],[12,"st_gid","","",131,null],[12,"st_rdev","","",131,null],[12,"st_size","","",131,null],[12,"st_blksize","","",131,null],[12,"st_blocks","","",131,null],[12,"st_atime","","",131,null],[12,"st_atime_nsec","","",131,null],[12,"st_mtime","","",131,null],[12,"st_mtime_nsec","","",131,null],[12,"st_ctime","","",131,null],[12,"st_ctime_nsec","","",131,null],[3,"statfs64","","",null,null],[12,"f_type","","",132,null],[12,"f_bsize","","",132,null],[12,"f_blocks","","",132,null],[12,"f_bfree","","",132,null],[12,"f_bavail","","",132,null],[12,"f_files","","",132,null],[12,"f_ffree","","",132,null],[12,"f_fsid","","",132,null],[12,"f_namelen","","",132,null],[12,"f_frsize","","",132,null],[12,"f_flags","","",132,null],[12,"f_spare","","",132,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",133,null],[12,"f_frsize","","",133,null],[12,"f_blocks","","",133,null],[12,"f_bfree","","",133,null],[12,"f_bavail","","",133,null],[12,"f_files","","",133,null],[12,"f_ffree","","",133,null],[12,"f_favail","","",133,null],[12,"f_fsid","","",133,null],[12,"f_flag","","",133,null],[12,"f_namemax","","",133,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",134,null],[12,"exponent","","",134,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",135,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",136,null],[12,"swd","","",136,null],[12,"ftw","","",136,null],[12,"fop","","",136,null],[12,"rip","","",136,null],[12,"rdp","","",136,null],[12,"mxcsr","","",136,null],[12,"mxcr_mask","","",136,null],[12,"_st","","",136,null],[12,"_xmm","","",136,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",137,null],[12,"r14","","",137,null],[12,"r13","","",137,null],[12,"r12","","",137,null],[12,"rbp","","",137,null],[12,"rbx","","",137,null],[12,"r11","","",137,null],[12,"r10","","",137,null],[12,"r9","","",137,null],[12,"r8","","",137,null],[12,"rax","","",137,null],[12,"rcx","","",137,null],[12,"rdx","","",137,null],[12,"rsi","","",137,null],[12,"rdi","","",137,null],[12,"orig_rax","","",137,null],[12,"rip","","",137,null],[12,"cs","","",137,null],[12,"eflags","","",137,null],[12,"rsp","","",137,null],[12,"ss","","",137,null],[12,"fs_base","","",137,null],[12,"gs_base","","",137,null],[12,"ds","","",137,null],[12,"es","","",137,null],[12,"fs","","",137,null],[12,"gs","","",137,null],[3,"user","","",null,null],[12,"regs","","",138,null],[12,"u_fpvalid","","",138,null],[12,"i387","","",138,null],[12,"u_tsize","","",138,null],[12,"u_dsize","","",138,null],[12,"u_ssize","","",138,null],[12,"start_code","","",138,null],[12,"start_stack","","",138,null],[12,"signal","","",138,null],[12,"u_ar0","","",138,null],[12,"u_fpstate","","",138,null],[12,"magic","","",138,null],[12,"u_comm","","",138,null],[12,"u_debugreg","","",138,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",139,null],[12,"fpregs","","",139,null],[3,"ipc_perm","","",null,null],[12,"__key","","",140,null],[12,"uid","","",140,null],[12,"gid","","",140,null],[12,"cuid","","",140,null],[12,"cgid","","",140,null],[12,"mode","","",140,null],[12,"__seq","","",140,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",141,null],[12,"shm_segsz","","",141,null],[12,"shm_atime","","",141,null],[12,"shm_dtime","","",141,null],[12,"shm_ctime","","",141,null],[12,"shm_cpid","","",141,null],[12,"shm_lpid","","",141,null],[12,"shm_nattch","","",141,null],[3,"termios2","","",null,null],[12,"c_iflag","","",142,null],[12,"c_oflag","","",142,null],[12,"c_cflag","","",142,null],[12,"c_lflag","","",142,null],[12,"c_line","","",142,null],[12,"c_cc","","",142,null],[12,"c_ispeed","","",142,null],[12,"c_ospeed","","",142,null],[3,"ip_mreqn","","",null,null],[12,"imr_multiaddr","","",143,null],[12,"imr_address","","",143,null],[12,"imr_ifindex","","",143,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",144,null],[12,"swd","","",144,null],[12,"ftw","","",144,null],[12,"fop","","",144,null],[12,"rip","","",144,null],[12,"rdp","","",144,null],[12,"mxcsr","","",144,null],[12,"mxcr_mask","","",144,null],[12,"st_space","","",144,null],[12,"xmm_space","","",144,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",145,null],[12,"uc_link","","",145,null],[12,"uc_stack","","",145,null],[12,"uc_mcontext","","",145,null],[12,"uc_sigmask","","",145,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"VEOF","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCGRS485","","",null,null],[17,"TIOCSRS485","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SO_ATTACH_REUSEPORT_CBPF","","",null,null],[17,"SO_ATTACH_REUSEPORT_EBPF","","",null,null],[17,"SO_CNX_ADVICE","","",null,null],[17,"SCM_TIMESTAMPING_OPT_STATS","","",null,null],[17,"SO_MEMINFO","","",null,null],[17,"SO_INCOMING_NAPI_ID","","",null,null],[17,"SO_COOKIE","","",null,null],[17,"SCM_TIMESTAMPING_PKTINFO","","",null,null],[17,"SO_PEERGROUPS","","",null,null],[17,"SO_ZEROCOPY","","",null,null],[17,"SO_TXTIME","","",null,null],[17,"SCM_TXTIME","","",null,null],[17,"SO_BINDTOIFINDEX","","",null,null],[17,"SO_TIMESTAMP_NEW","","",null,null],[17,"SO_TIMESTAMPNS_NEW","","",null,null],[17,"SO_TIMESTAMPING_NEW","","",null,null],[17,"SO_RCVTIMEO_NEW","","",null,null],[17,"SO_SNDTIMEO_NEW","","",null,null],[17,"SO_DETACH_REUSEPORT_BPF","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_OFD_GETLK","","",null,null],[17,"F_OFD_SETLK","","",null,null],[17,"F_OFD_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_SYNC","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"PTRACE_SYSEMU","","",null,null],[17,"PTRACE_SYSEMU_SINGLESTEP","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"REG_R8","","",null,null],[17,"REG_R9","","",null,null],[17,"REG_R10","","",null,null],[17,"REG_R11","","",null,null],[17,"REG_R12","","",null,null],[17,"REG_R13","","",null,null],[17,"REG_R14","","",null,null],[17,"REG_R15","","",null,null],[17,"REG_RDI","","",null,null],[17,"REG_RSI","","",null,null],[17,"REG_RBP","","",null,null],[17,"REG_RBX","","",null,null],[17,"REG_RDX","","",null,null],[17,"REG_RAX","","",null,null],[17,"REG_RCX","","",null,null],[17,"REG_RSP","","",null,null],[17,"REG_RIP","","",null,null],[17,"REG_EFL","","",null,null],[17,"REG_CSGSFS","","",null,null],[17,"REG_ERR","","",null,null],[17,"REG_TRAPNO","","",null,null],[17,"REG_OLDMASK","","",null,null],[17,"REG_CR2","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",146,null],[12,"f_frsize","","",146,null],[12,"f_blocks","","",146,null],[12,"f_bfree","","",146,null],[12,"f_bavail","","",146,null],[12,"f_files","","",146,null],[12,"f_ffree","","",146,null],[12,"f_favail","","",146,null],[12,"f_fsid","","",146,null],[12,"f_flag","","",146,null],[12,"f_namemax","","",146,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[17,"SYS_statx","","",null,null],[17,"SYS_pidfd_send_signal","","",null,null],[17,"SYS_io_uring_setup","","",null,null],[17,"SYS_io_uring_enter","","",null,null],[17,"SYS_io_uring_register","","",null,null],[17,"SYS_open_tree","","",null,null],[17,"SYS_move_mount","","",null,null],[17,"SYS_fsopen","","",null,null],[17,"SYS_fsconfig","","",null,null],[17,"SYS_fsmount","","",null,null],[17,"SYS_fspick","","",null,null],[17,"SYS_pidfd_open","","",null,null],[17,"SYS_clone3","","",null,null],[17,"SYS_close_range","","",null,null],[17,"SYS_openat2","","",null,null],[17,"SYS_pidfd_getfd","","",null,null],[17,"SYS_faccessat2","","",null,null],[17,"SYS_process_madvise","","",null,null],[17,"SYS_epoll_pwait2","","",null,null],[17,"SYS_mount_setattr","","",null,null],[3,"max_align_t","","",null,null],[3,"sem_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"fanotify_event_metadata","","",null,null],[12,"event_len","","",147,null],[12,"vers","","",147,null],[12,"reserved","","",147,null],[12,"metadata_len","","",147,null],[12,"mask","","",147,null],[12,"fd","","",147,null],[12,"pid","","",147,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"can_frame","","",null,null],[12,"can_id","","",148,null],[12,"can_dlc","","",148,null],[12,"data","","",148,null],[3,"canfd_frame","","",null,null],[12,"can_id","","",149,null],[12,"len","","",149,null],[12,"flags","","",149,null],[12,"data","","",149,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",150,null],[11,"from","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"into","","",151,[[]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"from","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"into","","",146,[[]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"from","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"into","","",152,[[]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"into","","",124,[[]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"into","","",125,[[]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"into","","",126,[[]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"into","","",127,[[]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"into","","",128,[[]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"into","","",129,[[]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"into","","",130,[[]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"into","","",131,[[]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"into","","",132,[[]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"into","","",133,[[]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"into","","",153,[[]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"into","","",134,[[]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"into","","",135,[[]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"into","","",136,[[]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"into","","",137,[[]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"into","","",138,[[]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"into","","",139,[[]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"into","","",140,[[]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"into","","",141,[[]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"into","","",142,[[]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"into","","",143,[[]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"into","","",144,[[]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"from","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"into","","",145,[[]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"from","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"into","","",154,[[]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"from","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"into","","",122,[[]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"into","","",123,[[]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"into","","",155,[[]]],[11,"try_into","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"into","","",100,[[]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"into","","",101,[[]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"into","","",102,[[]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"into","","",103,[[]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"into","","",104,[[]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"into","","",105,[[]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"into","","",106,[[]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"into","","",107,[[]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"into","","",108,[[]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"into","","",109,[[]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"into","","",110,[[]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"into","","",111,[[]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"into","","",112,[[]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"into","","",113,[[]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"into","","",114,[[]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"into","","",115,[[]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"into","","",116,[[]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"into","","",117,[[]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"into","","",118,[[]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"into","","",156,[[]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"into","","",119,[[]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"into","","",120,[[]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"into","","",121,[[]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"into","","",157,[[]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"into","","",158,[[]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"into","","",159,[[]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"into","","",68,[[]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"into","","",70,[[]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"into","","",74,[[]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"into","","",160,[[]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"from","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"into","","",161,[[]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"into","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"into","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"into","","",81,[[]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"into","","",82,[[]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"into","","",83,[[]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"into","","",84,[[]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"into","","",85,[[]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"into","","",86,[[]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"into","","",87,[[]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"into","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"into","","",89,[[]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"into","","",90,[[]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"into","","",91,[[]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"into","","",92,[[]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"into","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"into","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"into","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"into","","",96,[[]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"into","","",97,[[]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"into","","",98,[[]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"into","","",99,[[]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"into","","",162,[[]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"from","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"into","","",163,[[]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"from","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"into","","",164,[[]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"from","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"into","","",147,[[]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"from","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"into","","",165,[[]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"from","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"into","","",166,[[]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"from","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"into","","",167,[[]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"from","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"into","","",148,[[]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"from","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"into","","",149,[[]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"from","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"into","","",168,[[]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",169,[[]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"into","","",169,[[]]],[11,"try_into","","",169,[[],["result",4]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",170,[[]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"into","","",170,[[]]],[11,"try_into","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"into","","",150,[[]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"from","","",171,[[]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"into","","",171,[[]]],[11,"try_into","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",172,[[]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"into","","",172,[[]]],[11,"try_into","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"from","","",173,[[]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"into","","",173,[[]]],[11,"try_into","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"fmt","","",151,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",171,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",172,[[["formatter",3]],["result",6]]],[11,"fmt","","",173,[[["formatter",3]],["result",6]]],[11,"fmt","","",168,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",169,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",170,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",165,[[["formatter",3]],["result",6]]],[11,"fmt","","",166,[[["formatter",3]],["result",6]]],[11,"fmt","","",167,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","","",131,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","","",138,[[["formatter",3]],["result",6]]],[11,"fmt","","",139,[[["formatter",3]],["result",6]]],[11,"fmt","","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",142,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","","",144,[[["formatter",3]],["result",6]]],[11,"fmt","","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",162,[[["formatter",3]],["result",6]]],[11,"fmt","","",163,[[["formatter",3]],["result",6]]],[11,"fmt","","",164,[[["formatter",3]],["result",6]]],[11,"fmt","","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["group",3]]]],[11,"ne","","",0,[[["group",3]]]],[11,"eq","","",1,[[["utimbuf",3]]]],[11,"ne","","",1,[[["utimbuf",3]]]],[11,"eq","","",2,[[["timeval",3]]]],[11,"ne","","",2,[[["timeval",3]]]],[11,"eq","","",3,[[["timespec",3]]]],[11,"ne","","",3,[[["timespec",3]]]],[11,"eq","","",4,[[["rlimit",3]]]],[11,"ne","","",4,[[["rlimit",3]]]],[11,"eq","","",5,[[["rusage",3]]]],[11,"ne","","",5,[[["rusage",3]]]],[11,"eq","","",6,[[["ipv6_mreq",3]]]],[11,"ne","","",6,[[["ipv6_mreq",3]]]],[11,"eq","","",7,[[["hostent",3]]]],[11,"ne","","",7,[[["hostent",3]]]],[11,"eq","","",8,[[["iovec",3]]]],[11,"ne","","",8,[[["iovec",3]]]],[11,"eq","","",9,[[["pollfd",3]]]],[11,"ne","","",9,[[["pollfd",3]]]],[11,"eq","","",10,[[["winsize",3]]]],[11,"ne","","",10,[[["winsize",3]]]],[11,"eq","","",11,[[["linger",3]]]],[11,"ne","","",11,[[["linger",3]]]],[11,"eq","","",12,[[["sigval",3]]]],[11,"ne","","",12,[[["sigval",3]]]],[11,"eq","","",13,[[["itimerval",3]]]],[11,"ne","","",13,[[["itimerval",3]]]],[11,"eq","","",14,[[["tms",3]]]],[11,"ne","","",14,[[["tms",3]]]],[11,"eq","","",15,[[["servent",3]]]],[11,"ne","","",15,[[["servent",3]]]],[11,"eq","","",16,[[["protoent",3]]]],[11,"ne","","",16,[[["protoent",3]]]],[11,"eq","","",17,[[["in_addr",3]]]],[11,"ne","","",17,[[["in_addr",3]]]],[11,"eq","","",18,[[["ip_mreq",3]]]],[11,"ne","","",18,[[["ip_mreq",3]]]],[11,"eq","","",19,[[["ip_mreq_source",3]]]],[11,"ne","","",19,[[["ip_mreq_source",3]]]],[11,"eq","","",20,[[["sockaddr",3]]]],[11,"ne","","",20,[[["sockaddr",3]]]],[11,"eq","","",21,[[["sockaddr_in",3]]]],[11,"ne","","",21,[[["sockaddr_in",3]]]],[11,"eq","","",22,[[["sockaddr_in6",3]]]],[11,"ne","","",22,[[["sockaddr_in6",3]]]],[11,"eq","","",23,[[["addrinfo",3]]]],[11,"ne","","",23,[[["addrinfo",3]]]],[11,"eq","","",24,[[["sockaddr_ll",3]]]],[11,"ne","","",24,[[["sockaddr_ll",3]]]],[11,"eq","","",169,[[["fd_set",3]]]],[11,"ne","","",169,[[["fd_set",3]]]],[11,"eq","","",25,[[["tm",3]]]],[11,"ne","","",25,[[["tm",3]]]],[11,"eq","","",26,[[["sched_param",3]]]],[11,"ne","","",26,[[["sched_param",3]]]],[11,"eq","","",27,[[["dl_info",3]]]],[11,"ne","","",27,[[["dl_info",3]]]],[11,"eq","","",28,[[["lconv",3]]]],[11,"ne","","",28,[[["lconv",3]]]],[11,"eq","","",29,[[["in_pktinfo",3]]]],[11,"ne","","",29,[[["in_pktinfo",3]]]],[11,"eq","","",30,[[["ifaddrs",3]]]],[11,"ne","","",30,[[["ifaddrs",3]]]],[11,"eq","","",170,[[["in6_rtmsg",3]]]],[11,"ne","","",170,[[["in6_rtmsg",3]]]],[11,"eq","","",31,[[["arpreq",3]]]],[11,"ne","","",31,[[["arpreq",3]]]],[11,"eq","","",32,[[["arpreq_old",3]]]],[11,"ne","","",32,[[["arpreq_old",3]]]],[11,"eq","","",33,[[["arphdr",3]]]],[11,"ne","","",33,[[["arphdr",3]]]],[11,"eq","","",34,[[["mmsghdr",3]]]],[11,"ne","","",34,[[["mmsghdr",3]]]],[11,"eq","","",35,[[["epoll_event",3]]]],[11,"eq","","",36,[[["sockaddr_un",3]]]],[11,"eq","","",37,[[["sockaddr_storage",3]]]],[11,"eq","","",38,[[["utsname",3]]]],[11,"eq","","",39,[[["sigevent",3]]]],[11,"eq","","",40,[[["rlimit64",3]]]],[11,"ne","","",40,[[["rlimit64",3]]]],[11,"eq","","",41,[[["glob_t",3]]]],[11,"ne","","",41,[[["glob_t",3]]]],[11,"eq","","",42,[[["passwd",3]]]],[11,"ne","","",42,[[["passwd",3]]]],[11,"eq","","",43,[[["spwd",3]]]],[11,"ne","","",43,[[["spwd",3]]]],[11,"eq","","",44,[[["dqblk",3]]]],[11,"ne","","",44,[[["dqblk",3]]]],[11,"eq","","",45,[[["signalfd_siginfo",3]]]],[11,"ne","","",45,[[["signalfd_siginfo",3]]]],[11,"eq","","",46,[[["itimerspec",3]]]],[11,"ne","","",46,[[["itimerspec",3]]]],[11,"eq","","",158,[[["fsid_t",3]]]],[11,"ne","","",158,[[["fsid_t",3]]]],[11,"eq","","",47,[[["packet_mreq",3]]]],[11,"ne","","",47,[[["packet_mreq",3]]]],[11,"eq","","",159,[[["cpu_set_t",3]]]],[11,"ne","","",159,[[["cpu_set_t",3]]]],[11,"eq","","",48,[[["if_nameindex",3]]]],[11,"ne","","",48,[[["if_nameindex",3]]]],[11,"eq","","",49,[[["msginfo",3]]]],[11,"ne","","",49,[[["msginfo",3]]]],[11,"eq","","",50,[[["sembuf",3]]]],[11,"ne","","",50,[[["sembuf",3]]]],[11,"eq","","",51,[[["input_event",3]]]],[11,"ne","","",51,[[["input_event",3]]]],[11,"eq","","",52,[[["input_id",3]]]],[11,"ne","","",52,[[["input_id",3]]]],[11,"eq","","",53,[[["input_absinfo",3]]]],[11,"ne","","",53,[[["input_absinfo",3]]]],[11,"eq","","",54,[[["input_keymap_entry",3]]]],[11,"ne","","",54,[[["input_keymap_entry",3]]]],[11,"eq","","",55,[[["input_mask",3]]]],[11,"ne","","",55,[[["input_mask",3]]]],[11,"eq","","",56,[[["ff_replay",3]]]],[11,"ne","","",56,[[["ff_replay",3]]]],[11,"eq","","",57,[[["ff_trigger",3]]]],[11,"ne","","",57,[[["ff_trigger",3]]]],[11,"eq","","",58,[[["ff_envelope",3]]]],[11,"ne","","",58,[[["ff_envelope",3]]]],[11,"eq","","",59,[[["ff_constant_effect",3]]]],[11,"ne","","",59,[[["ff_constant_effect",3]]]],[11,"eq","","",60,[[["ff_ramp_effect",3]]]],[11,"ne","","",60,[[["ff_ramp_effect",3]]]],[11,"eq","","",61,[[["ff_condition_effect",3]]]],[11,"ne","","",61,[[["ff_condition_effect",3]]]],[11,"eq","","",62,[[["ff_periodic_effect",3]]]],[11,"ne","","",62,[[["ff_periodic_effect",3]]]],[11,"eq","","",63,[[["ff_rumble_effect",3]]]],[11,"ne","","",63,[[["ff_rumble_effect",3]]]],[11,"eq","","",64,[[["ff_effect",3]]]],[11,"ne","","",64,[[["ff_effect",3]]]],[11,"eq","","",65,[[["uinput_ff_upload",3]]]],[11,"ne","","",65,[[["uinput_ff_upload",3]]]],[11,"eq","","",66,[[["uinput_ff_erase",3]]]],[11,"ne","","",66,[[["uinput_ff_erase",3]]]],[11,"eq","","",67,[[["uinput_abs_setup",3]]]],[11,"ne","","",67,[[["uinput_abs_setup",3]]]],[11,"eq","","",68,[[["dl_phdr_info",3]]]],[11,"ne","","",68,[[["dl_phdr_info",3]]]],[11,"eq","","",69,[[["elf32_ehdr",3]]]],[11,"ne","","",69,[[["elf32_ehdr",3]]]],[11,"eq","","",70,[[["elf64_ehdr",3]]]],[11,"ne","","",70,[[["elf64_ehdr",3]]]],[11,"eq","","",71,[[["elf32_sym",3]]]],[11,"ne","","",71,[[["elf32_sym",3]]]],[11,"eq","","",72,[[["elf64_sym",3]]]],[11,"ne","","",72,[[["elf64_sym",3]]]],[11,"eq","","",73,[[["elf32_phdr",3]]]],[11,"ne","","",73,[[["elf32_phdr",3]]]],[11,"eq","","",74,[[["elf64_phdr",3]]]],[11,"ne","","",74,[[["elf64_phdr",3]]]],[11,"eq","","",75,[[["elf32_shdr",3]]]],[11,"ne","","",75,[[["elf32_shdr",3]]]],[11,"eq","","",76,[[["elf64_shdr",3]]]],[11,"ne","","",76,[[["elf64_shdr",3]]]],[11,"eq","","",77,[[["ucred",3]]]],[11,"ne","","",77,[[["ucred",3]]]],[11,"eq","","",78,[[["mntent",3]]]],[11,"ne","","",78,[[["mntent",3]]]],[11,"eq","","",160,[[["posix_spawn_file_actions_t",3]]]],[11,"ne","","",160,[[["posix_spawn_file_actions_t",3]]]],[11,"eq","","",161,[[["posix_spawnattr_t",3]]]],[11,"ne","","",161,[[["posix_spawnattr_t",3]]]],[11,"eq","","",79,[[["genlmsghdr",3]]]],[11,"ne","","",79,[[["genlmsghdr",3]]]],[11,"eq","","",80,[[["in6_pktinfo",3]]]],[11,"ne","","",80,[[["in6_pktinfo",3]]]],[11,"eq","","",81,[[["arpd_request",3]]]],[11,"ne","","",81,[[["arpd_request",3]]]],[11,"eq","","",82,[[["inotify_event",3]]]],[11,"ne","","",82,[[["inotify_event",3]]]],[11,"eq","","",83,[[["fanotify_response",3]]]],[11,"ne","","",83,[[["fanotify_response",3]]]],[11,"eq","","",84,[[["sockaddr_vm",3]]]],[11,"ne","","",84,[[["sockaddr_vm",3]]]],[11,"eq","","",85,[[["regmatch_t",3]]]],[11,"ne","","",85,[[["regmatch_t",3]]]],[11,"eq","","",86,[[["sock_extended_err",3]]]],[11,"ne","","",86,[[["sock_extended_err",3]]]],[11,"eq","","",87,[[["__c_anonymous_sockaddr_can_tp",3]]]],[11,"ne","","",87,[[["__c_anonymous_sockaddr_can_tp",3]]]],[11,"eq","","",88,[[["__c_anonymous_sockaddr_can_j1939",3]]]],[11,"ne","","",88,[[["__c_anonymous_sockaddr_can_j1939",3]]]],[11,"eq","","",89,[[["can_filter",3]]]],[11,"ne","","",89,[[["can_filter",3]]]],[11,"eq","","",90,[[["sockaddr_nl",3]]]],[11,"eq","","",91,[[["dirent",3]]]],[11,"eq","","",92,[[["dirent64",3]]]],[11,"eq","","",165,[[["pthread_cond_t",3]]]],[11,"eq","","",166,[[["pthread_mutex_t",3]]]],[11,"eq","","",167,[[["pthread_rwlock_t",3]]]],[11,"eq","","",93,[[["sockaddr_alg",3]]]],[11,"eq","","",94,[[["uinput_setup",3]]]],[11,"eq","","",95,[[["uinput_user_dev",3]]]],[11,"eq","","",96,[[["af_alg_iv",3]]]],[11,"eq","","",97,[[["mq_attr",3]]]],[11,"eq","","",100,[[["statx",3]]]],[11,"ne","","",100,[[["statx",3]]]],[11,"eq","","",101,[[["statx_timestamp",3]]]],[11,"ne","","",101,[[["statx_timestamp",3]]]],[11,"eq","","",102,[[["aiocb",3]]]],[11,"ne","","",102,[[["aiocb",3]]]],[11,"eq","","",103,[[["__exit_status",3]]]],[11,"ne","","",103,[[["__exit_status",3]]]],[11,"eq","","",104,[[["__timeval",3]]]],[11,"ne","","",104,[[["__timeval",3]]]],[11,"eq","","",105,[[["glob64_t",3]]]],[11,"ne","","",105,[[["glob64_t",3]]]],[11,"eq","","",106,[[["msghdr",3]]]],[11,"ne","","",106,[[["msghdr",3]]]],[11,"eq","","",107,[[["cmsghdr",3]]]],[11,"ne","","",107,[[["cmsghdr",3]]]],[11,"eq","","",108,[[["termios",3]]]],[11,"ne","","",108,[[["termios",3]]]],[11,"eq","","",109,[[["mallinfo",3]]]],[11,"ne","","",109,[[["mallinfo",3]]]],[11,"eq","","",110,[[["nlmsghdr",3]]]],[11,"ne","","",110,[[["nlmsghdr",3]]]],[11,"eq","","",111,[[["nlmsgerr",3]]]],[11,"ne","","",111,[[["nlmsgerr",3]]]],[11,"eq","","",112,[[["nl_pktinfo",3]]]],[11,"ne","","",112,[[["nl_pktinfo",3]]]],[11,"eq","","",113,[[["nl_mmap_req",3]]]],[11,"ne","","",113,[[["nl_mmap_req",3]]]],[11,"eq","","",114,[[["nl_mmap_hdr",3]]]],[11,"ne","","",114,[[["nl_mmap_hdr",3]]]],[11,"eq","","",115,[[["nlattr",3]]]],[11,"ne","","",115,[[["nlattr",3]]]],[11,"eq","","",116,[[["rtentry",3]]]],[11,"ne","","",116,[[["rtentry",3]]]],[11,"eq","","",117,[[["timex",3]]]],[11,"ne","","",117,[[["timex",3]]]],[11,"eq","","",118,[[["ntptimeval",3]]]],[11,"ne","","",118,[[["ntptimeval",3]]]],[11,"eq","","",156,[[["regex_t",3]]]],[11,"ne","","",156,[[["regex_t",3]]]],[11,"eq","","",119,[[["elf64_chdr",3]]]],[11,"ne","","",119,[[["elf64_chdr",3]]]],[11,"eq","","",120,[[["elf32_chdr",3]]]],[11,"ne","","",120,[[["elf32_chdr",3]]]],[11,"eq","","",121,[[["utmpx",3]]]],[11,"eq","","",154,[[["sigset_t",3]]]],[11,"ne","","",154,[[["sigset_t",3]]]],[11,"eq","","",122,[[["sysinfo",3]]]],[11,"ne","","",122,[[["sysinfo",3]]]],[11,"eq","","",123,[[["msqid_ds",3]]]],[11,"ne","","",123,[[["msqid_ds",3]]]],[11,"eq","","",124,[[["sigaction",3]]]],[11,"ne","","",124,[[["sigaction",3]]]],[11,"eq","","",125,[[["statfs",3]]]],[11,"ne","","",125,[[["statfs",3]]]],[11,"eq","","",126,[[["flock",3]]]],[11,"ne","","",126,[[["flock",3]]]],[11,"eq","","",127,[[["flock64",3]]]],[11,"ne","","",127,[[["flock64",3]]]],[11,"eq","","",128,[[["siginfo_t",3]]]],[11,"ne","","",128,[[["siginfo_t",3]]]],[11,"eq","","",129,[[["stack_t",3]]]],[11,"ne","","",129,[[["stack_t",3]]]],[11,"eq","","",130,[[["stat",3]]]],[11,"ne","","",130,[[["stat",3]]]],[11,"eq","","",131,[[["stat64",3]]]],[11,"ne","","",131,[[["stat64",3]]]],[11,"eq","","",132,[[["statfs64",3]]]],[11,"ne","","",132,[[["statfs64",3]]]],[11,"eq","","",133,[[["statvfs64",3]]]],[11,"ne","","",133,[[["statvfs64",3]]]],[11,"eq","","",153,[[["pthread_attr_t",3]]]],[11,"ne","","",153,[[["pthread_attr_t",3]]]],[11,"eq","","",134,[[["_libc_fpxreg",3]]]],[11,"ne","","",134,[[["_libc_fpxreg",3]]]],[11,"eq","","",135,[[["_libc_xmmreg",3]]]],[11,"ne","","",135,[[["_libc_xmmreg",3]]]],[11,"eq","","",136,[[["_libc_fpstate",3]]]],[11,"ne","","",136,[[["_libc_fpstate",3]]]],[11,"eq","","",137,[[["user_regs_struct",3]]]],[11,"ne","","",137,[[["user_regs_struct",3]]]],[11,"eq","","",138,[[["user",3]]]],[11,"ne","","",138,[[["user",3]]]],[11,"eq","","",139,[[["mcontext_t",3]]]],[11,"ne","","",139,[[["mcontext_t",3]]]],[11,"eq","","",140,[[["ipc_perm",3]]]],[11,"ne","","",140,[[["ipc_perm",3]]]],[11,"eq","","",141,[[["shmid_ds",3]]]],[11,"ne","","",141,[[["shmid_ds",3]]]],[11,"eq","","",142,[[["termios2",3]]]],[11,"ne","","",142,[[["termios2",3]]]],[11,"eq","","",143,[[["ip_mreqn",3]]]],[11,"ne","","",143,[[["ip_mreqn",3]]]],[11,"eq","","",144,[[["user_fpregs_struct",3]]]],[11,"eq","","",145,[[["ucontext_t",3]]]],[11,"eq","","",146,[[["statvfs",3]]]],[11,"ne","","",146,[[["statvfs",3]]]],[11,"eq","","",155,[[["sem_t",3]]]],[11,"ne","","",155,[[["sem_t",3]]]],[11,"eq","","",162,[[["pthread_mutexattr_t",3]]]],[11,"ne","","",162,[[["pthread_mutexattr_t",3]]]],[11,"eq","","",163,[[["pthread_rwlockattr_t",3]]]],[11,"ne","","",163,[[["pthread_rwlockattr_t",3]]]],[11,"eq","","",164,[[["pthread_condattr_t",3]]]],[11,"ne","","",164,[[["pthread_condattr_t",3]]]],[11,"eq","","",147,[[["fanotify_event_metadata",3]]]],[11,"ne","","",147,[[["fanotify_event_metadata",3]]]],[11,"eq","","",150,[[["in6_addr",3]]]],[11,"ne","","",150,[[["in6_addr",3]]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",169,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",30,[[]]],[11,"hash","","",170,[[]]],[11,"hash","","",31,[[]]],[11,"hash","","",32,[[]]],[11,"hash","","",33,[[]]],[11,"hash","","",34,[[]]],[11,"hash","","",35,[[]]],[11,"hash","","",36,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",38,[[]]],[11,"hash","","",39,[[]]],[11,"hash","","",40,[[]]],[11,"hash","","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","","",43,[[]]],[11,"hash","","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",46,[[]]],[11,"hash","","",158,[[]]],[11,"hash","","",47,[[]]],[11,"hash","","",159,[[]]],[11,"hash","","",48,[[]]],[11,"hash","","",49,[[]]],[11,"hash","","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",52,[[]]],[11,"hash","","",53,[[]]],[11,"hash","","",54,[[]]],[11,"hash","","",55,[[]]],[11,"hash","","",56,[[]]],[11,"hash","","",57,[[]]],[11,"hash","","",58,[[]]],[11,"hash","","",59,[[]]],[11,"hash","","",60,[[]]],[11,"hash","","",61,[[]]],[11,"hash","","",62,[[]]],[11,"hash","","",63,[[]]],[11,"hash","","",64,[[]]],[11,"hash","","",65,[[]]],[11,"hash","","",66,[[]]],[11,"hash","","",67,[[]]],[11,"hash","","",68,[[]]],[11,"hash","","",69,[[]]],[11,"hash","","",70,[[]]],[11,"hash","","",71,[[]]],[11,"hash","","",72,[[]]],[11,"hash","","",73,[[]]],[11,"hash","","",74,[[]]],[11,"hash","","",75,[[]]],[11,"hash","","",76,[[]]],[11,"hash","","",77,[[]]],[11,"hash","","",78,[[]]],[11,"hash","","",160,[[]]],[11,"hash","","",161,[[]]],[11,"hash","","",79,[[]]],[11,"hash","","",80,[[]]],[11,"hash","","",81,[[]]],[11,"hash","","",82,[[]]],[11,"hash","","",83,[[]]],[11,"hash","","",84,[[]]],[11,"hash","","",85,[[]]],[11,"hash","","",86,[[]]],[11,"hash","","",87,[[]]],[11,"hash","","",88,[[]]],[11,"hash","","",89,[[]]],[11,"hash","","",90,[[]]],[11,"hash","","",91,[[]]],[11,"hash","","",92,[[]]],[11,"hash","","",165,[[]]],[11,"hash","","",166,[[]]],[11,"hash","","",167,[[]]],[11,"hash","","",93,[[]]],[11,"hash","","",94,[[]]],[11,"hash","","",95,[[]]],[11,"hash","","",96,[[]]],[11,"hash","","",97,[[]]],[11,"hash","","",100,[[]]],[11,"hash","","",101,[[]]],[11,"hash","","",102,[[]]],[11,"hash","","",103,[[]]],[11,"hash","","",104,[[]]],[11,"hash","","",105,[[]]],[11,"hash","","",106,[[]]],[11,"hash","","",107,[[]]],[11,"hash","","",108,[[]]],[11,"hash","","",109,[[]]],[11,"hash","","",110,[[]]],[11,"hash","","",111,[[]]],[11,"hash","","",112,[[]]],[11,"hash","","",113,[[]]],[11,"hash","","",114,[[]]],[11,"hash","","",115,[[]]],[11,"hash","","",116,[[]]],[11,"hash","","",117,[[]]],[11,"hash","","",118,[[]]],[11,"hash","","",156,[[]]],[11,"hash","","",119,[[]]],[11,"hash","","",120,[[]]],[11,"hash","","",121,[[]]],[11,"hash","","",154,[[]]],[11,"hash","","",122,[[]]],[11,"hash","","",123,[[]]],[11,"hash","","",124,[[]]],[11,"hash","","",125,[[]]],[11,"hash","","",126,[[]]],[11,"hash","","",127,[[]]],[11,"hash","","",128,[[]]],[11,"hash","","",129,[[]]],[11,"hash","","",130,[[]]],[11,"hash","","",131,[[]]],[11,"hash","","",132,[[]]],[11,"hash","","",133,[[]]],[11,"hash","","",153,[[]]],[11,"hash","","",134,[[]]],[11,"hash","","",135,[[]]],[11,"hash","","",136,[[]]],[11,"hash","","",137,[[]]],[11,"hash","","",138,[[]]],[11,"hash","","",139,[[]]],[11,"hash","","",140,[[]]],[11,"hash","","",141,[[]]],[11,"hash","","",142,[[]]],[11,"hash","","",143,[[]]],[11,"hash","","",144,[[]]],[11,"hash","","",145,[[]]],[11,"hash","","",146,[[]]],[11,"hash","","",155,[[]]],[11,"hash","","",162,[[]]],[11,"hash","","",163,[[]]],[11,"hash","","",164,[[]]],[11,"hash","","",147,[[]]],[11,"hash","","",150,[[]]],[11,"clone","","",171,[[],["dir",4]]],[11,"clone","","",0,[[],["group",3]]],[11,"clone","","",1,[[],["utimbuf",3]]],[11,"clone","","",2,[[],["timeval",3]]],[11,"clone","","",3,[[],["timespec",3]]],[11,"clone","","",4,[[],["rlimit",3]]],[11,"clone","","",5,[[],["rusage",3]]],[11,"clone","","",6,[[],["ipv6_mreq",3]]],[11,"clone","","",7,[[],["hostent",3]]],[11,"clone","","",8,[[],["iovec",3]]],[11,"clone","","",9,[[],["pollfd",3]]],[11,"clone","","",10,[[],["winsize",3]]],[11,"clone","","",11,[[],["linger",3]]],[11,"clone","","",12,[[],["sigval",3]]],[11,"clone","","",13,[[],["itimerval",3]]],[11,"clone","","",14,[[],["tms",3]]],[11,"clone","","",15,[[],["servent",3]]],[11,"clone","","",16,[[],["protoent",3]]],[11,"clone","","",172,[[],["file",4]]],[11,"clone","","",173,[[],["fpos_t",4]]],[11,"clone","","",168,[[],["timezone",4]]],[11,"clone","","",17,[[],["in_addr",3]]],[11,"clone","","",18,[[],["ip_mreq",3]]],[11,"clone","","",19,[[],["ip_mreq_source",3]]],[11,"clone","","",20,[[],["sockaddr",3]]],[11,"clone","","",21,[[],["sockaddr_in",3]]],[11,"clone","","",22,[[],["sockaddr_in6",3]]],[11,"clone","","",23,[[],["addrinfo",3]]],[11,"clone","","",24,[[],["sockaddr_ll",3]]],[11,"clone","","",169,[[],["fd_set",3]]],[11,"clone","","",25,[[],["tm",3]]],[11,"clone","","",26,[[],["sched_param",3]]],[11,"clone","","",27,[[],["dl_info",3]]],[11,"clone","","",28,[[],["lconv",3]]],[11,"clone","","",29,[[],["in_pktinfo",3]]],[11,"clone","","",30,[[],["ifaddrs",3]]],[11,"clone","","",170,[[],["in6_rtmsg",3]]],[11,"clone","","",31,[[],["arpreq",3]]],[11,"clone","","",32,[[],["arpreq_old",3]]],[11,"clone","","",33,[[],["arphdr",3]]],[11,"clone","","",34,[[],["mmsghdr",3]]],[11,"clone","","",35,[[],["epoll_event",3]]],[11,"clone","","",36,[[],["sockaddr_un",3]]],[11,"clone","","",37,[[],["sockaddr_storage",3]]],[11,"clone","","",38,[[],["utsname",3]]],[11,"clone","","",39,[[],["sigevent",3]]],[11,"clone","","",157,[[],["fpos64_t",4]]],[11,"clone","","",40,[[],["rlimit64",3]]],[11,"clone","","",41,[[],["glob_t",3]]],[11,"clone","","",42,[[],["passwd",3]]],[11,"clone","","",43,[[],["spwd",3]]],[11,"clone","","",44,[[],["dqblk",3]]],[11,"clone","","",45,[[],["signalfd_siginfo",3]]],[11,"clone","","",46,[[],["itimerspec",3]]],[11,"clone","","",158,[[],["fsid_t",3]]],[11,"clone","","",47,[[],["packet_mreq",3]]],[11,"clone","","",159,[[],["cpu_set_t",3]]],[11,"clone","","",48,[[],["if_nameindex",3]]],[11,"clone","","",49,[[],["msginfo",3]]],[11,"clone","","",50,[[],["sembuf",3]]],[11,"clone","","",51,[[],["input_event",3]]],[11,"clone","","",52,[[],["input_id",3]]],[11,"clone","","",53,[[],["input_absinfo",3]]],[11,"clone","","",54,[[],["input_keymap_entry",3]]],[11,"clone","","",55,[[],["input_mask",3]]],[11,"clone","","",56,[[],["ff_replay",3]]],[11,"clone","","",57,[[],["ff_trigger",3]]],[11,"clone","","",58,[[],["ff_envelope",3]]],[11,"clone","","",59,[[],["ff_constant_effect",3]]],[11,"clone","","",60,[[],["ff_ramp_effect",3]]],[11,"clone","","",61,[[],["ff_condition_effect",3]]],[11,"clone","","",62,[[],["ff_periodic_effect",3]]],[11,"clone","","",63,[[],["ff_rumble_effect",3]]],[11,"clone","","",64,[[],["ff_effect",3]]],[11,"clone","","",65,[[],["uinput_ff_upload",3]]],[11,"clone","","",66,[[],["uinput_ff_erase",3]]],[11,"clone","","",67,[[],["uinput_abs_setup",3]]],[11,"clone","","",68,[[],["dl_phdr_info",3]]],[11,"clone","","",69,[[],["elf32_ehdr",3]]],[11,"clone","","",70,[[],["elf64_ehdr",3]]],[11,"clone","","",71,[[],["elf32_sym",3]]],[11,"clone","","",72,[[],["elf64_sym",3]]],[11,"clone","","",73,[[],["elf32_phdr",3]]],[11,"clone","","",74,[[],["elf64_phdr",3]]],[11,"clone","","",75,[[],["elf32_shdr",3]]],[11,"clone","","",76,[[],["elf64_shdr",3]]],[11,"clone","","",77,[[],["ucred",3]]],[11,"clone","","",78,[[],["mntent",3]]],[11,"clone","","",160,[[],["posix_spawn_file_actions_t",3]]],[11,"clone","","",161,[[],["posix_spawnattr_t",3]]],[11,"clone","","",79,[[],["genlmsghdr",3]]],[11,"clone","","",80,[[],["in6_pktinfo",3]]],[11,"clone","","",81,[[],["arpd_request",3]]],[11,"clone","","",82,[[],["inotify_event",3]]],[11,"clone","","",83,[[],["fanotify_response",3]]],[11,"clone","","",84,[[],["sockaddr_vm",3]]],[11,"clone","","",85,[[],["regmatch_t",3]]],[11,"clone","","",86,[[],["sock_extended_err",3]]],[11,"clone","","",87,[[],["__c_anonymous_sockaddr_can_tp",3]]],[11,"clone","","",88,[[],["__c_anonymous_sockaddr_can_j1939",3]]],[11,"clone","","",89,[[],["can_filter",3]]],[11,"clone","","",90,[[],["sockaddr_nl",3]]],[11,"clone","","",91,[[],["dirent",3]]],[11,"clone","","",92,[[],["dirent64",3]]],[11,"clone","","",93,[[],["sockaddr_alg",3]]],[11,"clone","","",94,[[],["uinput_setup",3]]],[11,"clone","","",95,[[],["uinput_user_dev",3]]],[11,"clone","","",96,[[],["af_alg_iv",3]]],[11,"clone","","",97,[[],["mq_attr",3]]],[11,"clone","","",98,[[],["__c_anonymous_sockaddr_can_can_addr",19]]],[11,"clone","","",99,[[],["sockaddr_can",3]]],[11,"clone","","",100,[[],["statx",3]]],[11,"clone","","",101,[[],["statx_timestamp",3]]],[11,"clone","","",102,[[],["aiocb",3]]],[11,"clone","","",103,[[],["__exit_status",3]]],[11,"clone","","",104,[[],["__timeval",3]]],[11,"clone","","",105,[[],["glob64_t",3]]],[11,"clone","","",106,[[],["msghdr",3]]],[11,"clone","","",107,[[],["cmsghdr",3]]],[11,"clone","","",108,[[],["termios",3]]],[11,"clone","","",109,[[],["mallinfo",3]]],[11,"clone","","",110,[[],["nlmsghdr",3]]],[11,"clone","","",111,[[],["nlmsgerr",3]]],[11,"clone","","",112,[[],["nl_pktinfo",3]]],[11,"clone","","",113,[[],["nl_mmap_req",3]]],[11,"clone","","",114,[[],["nl_mmap_hdr",3]]],[11,"clone","","",115,[[],["nlattr",3]]],[11,"clone","","",116,[[],["rtentry",3]]],[11,"clone","","",117,[[],["timex",3]]],[11,"clone","","",118,[[],["ntptimeval",3]]],[11,"clone","","",156,[[],["regex_t",3]]],[11,"clone","","",119,[[],["elf64_chdr",3]]],[11,"clone","","",120,[[],["elf32_chdr",3]]],[11,"clone","","",121,[[],["utmpx",3]]],[11,"clone","","",154,[[],["sigset_t",3]]],[11,"clone","","",122,[[],["sysinfo",3]]],[11,"clone","","",123,[[],["msqid_ds",3]]],[11,"clone","","",124,[[],["sigaction",3]]],[11,"clone","","",125,[[],["statfs",3]]],[11,"clone","","",126,[[],["flock",3]]],[11,"clone","","",127,[[],["flock64",3]]],[11,"clone","","",128,[[],["siginfo_t",3]]],[11,"clone","","",129,[[],["stack_t",3]]],[11,"clone","","",130,[[],["stat",3]]],[11,"clone","","",131,[[],["stat64",3]]],[11,"clone","","",132,[[],["statfs64",3]]],[11,"clone","","",133,[[],["statvfs64",3]]],[11,"clone","","",153,[[],["pthread_attr_t",3]]],[11,"clone","","",134,[[],["_libc_fpxreg",3]]],[11,"clone","","",135,[[],["_libc_xmmreg",3]]],[11,"clone","","",136,[[],["_libc_fpstate",3]]],[11,"clone","","",137,[[],["user_regs_struct",3]]],[11,"clone","","",138,[[],["user",3]]],[11,"clone","","",139,[[],["mcontext_t",3]]],[11,"clone","","",140,[[],["ipc_perm",3]]],[11,"clone","","",141,[[],["shmid_ds",3]]],[11,"clone","","",142,[[],["termios2",3]]],[11,"clone","","",143,[[],["ip_mreqn",3]]],[11,"clone","","",144,[[],["user_fpregs_struct",3]]],[11,"clone","","",145,[[],["ucontext_t",3]]],[11,"clone","","",146,[[],["statvfs",3]]],[11,"clone","","",152,[[],["max_align_t",3]]],[11,"clone","","",155,[[],["sem_t",3]]],[11,"clone","","",162,[[],["pthread_mutexattr_t",3]]],[11,"clone","","",163,[[],["pthread_rwlockattr_t",3]]],[11,"clone","","",164,[[],["pthread_condattr_t",3]]],[11,"clone","","",147,[[],["fanotify_event_metadata",3]]],[11,"clone","","",165,[[],["pthread_cond_t",3]]],[11,"clone","","",166,[[],["pthread_mutex_t",3]]],[11,"clone","","",167,[[],["pthread_rwlock_t",3]]],[11,"clone","","",148,[[],["can_frame",3]]],[11,"clone","","",149,[[],["canfd_frame",3]]],[11,"clone","","",150,[[],["in6_addr",3]]],[11,"si_addr","","",128,[[]]],[11,"si_value","","",128,[[],["sigval",3]]],[11,"si_pid","","",128,[[],["pid_t",6]]],[11,"si_uid","","",128,[[],["uid_t",6]]],[11,"si_status","","",128,[[],["c_int",6]]],[11,"si_utime","","",128,[[],["c_long",6]]],[11,"si_stime","","",128,[[],["c_long",6]]]],"p":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"in_addr"],[3,"ip_mreq"],[3,"ip_mreq_source"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"lconv"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"mmsghdr"],[3,"epoll_event"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"utsname"],[3,"sigevent"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"uinput_ff_upload"],[3,"uinput_ff_erase"],[3,"uinput_abs_setup"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"inotify_event"],[3,"fanotify_response"],[3,"sockaddr_vm"],[3,"regmatch_t"],[3,"sock_extended_err"],[3,"__c_anonymous_sockaddr_can_tp"],[3,"__c_anonymous_sockaddr_can_j1939"],[3,"can_filter"],[3,"sockaddr_nl"],[3,"dirent"],[3,"dirent64"],[3,"sockaddr_alg"],[3,"uinput_setup"],[3,"uinput_user_dev"],[3,"af_alg_iv"],[3,"mq_attr"],[19,"__c_anonymous_sockaddr_can_can_addr"],[3,"sockaddr_can"],[3,"statx"],[3,"statx_timestamp"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"glob64_t"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"timex"],[3,"ntptimeval"],[3,"Elf64_Chdr"],[3,"Elf32_Chdr"],[3,"utmpx"],[3,"sysinfo"],[3,"msqid_ds"],[3,"sigaction"],[3,"statfs"],[3,"flock"],[3,"flock64"],[3,"siginfo_t"],[3,"stack_t"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"ip_mreqn"],[3,"user_fpregs_struct"],[3,"ucontext_t"],[3,"statvfs"],[3,"fanotify_event_metadata"],[3,"can_frame"],[3,"canfd_frame"],[3,"in6_addr"],[4,"c_void"],[3,"max_align_t"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"regex_t"],[4,"fpos64_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_condattr_t"],[3,"pthread_cond_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[4,"timezone"],[3,"fd_set"],[3,"in6_rtmsg"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"]]},\
"linked_hash_map":{"doc":"A <code>HashMap</code> wrapper that holds key-value pairs in insertion …","i":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[11,"new","","Creates a linked hash map.",0,[[]]],[11,"with_capacity","","Creates an empty linked hash map with the given initial …",0,[[]]],[11,"with_hasher","","Creates an empty linked hash map with the given initial …",0,[[]]],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial …",0,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",0,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It …",0,[[]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",0,[[],["entry",4]]],[11,"entries","","Returns an iterator visiting all entries in insertion …",0,[[],["entries",3]]],[11,"insert","","Inserts a key-value pair into the map. If the key already …",0,[[],["option",4]]],[11,"contains_key","","Checks if the map contains the given key.",0,[[]]],[11,"get","","Returns the value corresponding to the key in the map.",0,[[],["option",4]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in …",0,[[],["option",4]]],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,[[],["option",4]]],[11,"remove","","Removes and returns the value corresponding to the key …",0,[[],["option",4]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can …",0,[[]]],[11,"pop_front","","Removes the first entry.",0,[[],["option",4]]],[11,"front","","Gets the first entry.",0,[[],["option",4]]],[11,"pop_back","","Removes the last entry.",0,[[],["option",4]]],[11,"back","","Gets the last entry.",0,[[],["option",4]]],[11,"len","","Returns the number of key-value pairs in the map.",0,[[]]],[11,"is_empty","","Returns whether the map is currently empty.",0,[[]]],[11,"hasher","","Returns a reference to the map\'s hasher.",0,[[]]],[11,"clear","","Clears the map of all key-value pairs.",0,[[]]],[11,"iter","","Returns a double-ended iterator visiting all key-value …",0,[[],["iter",3]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value …",0,[[],["itermut",3]]],[11,"keys","","Returns a double-ended iterator visiting all key in order …",0,[[],["keys",3]]],[11,"values","","Returns a double-ended iterator visiting all values in …",0,[[],["values",3]]],[3,"Iter","","An insertion-order iterator over a <code>LinkedHashMap</code>\'s …",null,null],[3,"IterMut","","An insertion-order iterator over a <code>LinkedHashMap</code>\'s …",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a <code>LinkedHashMap</code>…",null,null],[3,"Entries","","An insertion-order iterator over a <code>LinkedHashMap</code>\'s …",null,null],[3,"Keys","","An insertion-order iterator over a <code>LinkedHashMap</code>\'s keys.",null,null],[3,"Values","","An insertion-order iterator over a <code>LinkedHashMap</code>\'s values.",null,null],[4,"Entry","","A view into a single location in a map, which may be …",null,null],[13,"Occupied","","An occupied Entry.",1,null],[13,"Vacant","","A vacant Entry.",1,null],[3,"OccupiedEntry","","A view into a single occupied location in a <code>LinkedHashMap</code>.",null,null],[3,"VacantEntry","","A view into a single empty location in a <code>LinkedHashMap</code>.",null,null],[11,"key","","Returns the entry key",1,[[]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",1,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",1,[[["fnonce",8]]]],[11,"key","","Gets a reference to the entry key",2,[[]]],[11,"get","","Gets a reference to the value in the entry.",2,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",2,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",2,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",2,[[]]],[11,"remove","","Takes the value out of the entry, and returns it",2,[[]]],[11,"key","","Gets a reference to the entry key",3,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"drop","","",0,[[]]],[11,"drop","","",6,[[]]],[11,"next_back","","",4,[[],["option",4]]],[11,"next_back","","",5,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next_back","","",8,[[],["option",4]]],[11,"next_back","","",9,[[],["option",4]]],[11,"len","","",4,[[]]],[11,"len","","",5,[[]]],[11,"len","","",6,[[]]],[11,"len","","",8,[[]]],[11,"len","","",9,[[]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"into_iter","","",0,[[],["intoiter",3]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",7,[[],[["option",4],["occupiedentry",3]]]],[11,"size_hint","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"clone","","",0,[[]]],[11,"clone","","",4,[[]]],[11,"clone","","",6,[[]]],[11,"clone","","",8,[[]]],[11,"clone","","",9,[[]]],[11,"default","","",0,[[]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"eq","","",0,[[]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[]]],[11,"le","","",0,[[]]],[11,"ge","","",0,[[]]],[11,"gt","","",0,[[]]],[11,"fmt","","Returns a string that lists the key-value pairs in …",0,[[["formatter",3]],["result",6]]],[11,"index","","",0,[[]]],[11,"index_mut","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"from_iter","","",0,[[["intoiterator",8]]]]],"p":[[3,"LinkedHashMap"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Entries"],[3,"Keys"],[3,"Values"]]},\
"log":{"doc":"A lightweight logging facade.","i":[[4,"Level","log","An enum representing the available verbosity levels of …",null,null],[13,"Error","","The \\\"error\\\" level.",0,null],[13,"Warn","","The \\\"warn\\\" level.",0,null],[13,"Info","","The \\\"info\\\" level.",0,null],[13,"Debug","","The \\\"debug\\\" level.",0,null],[13,"Trace","","The \\\"trace\\\" level.",0,null],[11,"max","","Returns the most verbose logging level.",0,[[],["level",4]]],[11,"to_level_filter","","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.",0,[[],["levelfilter",4]]],[11,"as_str","","Returns the string representation of the <code>Level</code>.",0,[[]]],[4,"LevelFilter","","An enum representing the available verbosity level …",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the <code>Error</code> log level.",1,null],[13,"Warn","","Corresponds to the <code>Warn</code> log level.",1,null],[13,"Info","","Corresponds to the <code>Info</code> log level.",1,null],[13,"Debug","","Corresponds to the <code>Debug</code> log level.",1,null],[13,"Trace","","Corresponds to the <code>Trace</code> log level.",1,null],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter",4]]],[11,"to_level","","Converts <code>self</code> to the equivalent <code>Level</code>.",1,[[],[["option",4],["level",4]]]],[11,"as_str","","Returns the string representation of the <code>LevelFilter</code>.",1,[[]]],[3,"Record","","The \\\"payload\\\" of a log message.",null,null],[11,"builder","","Returns a new builder.",2,[[],["recordbuilder",3]]],[11,"args","","The message body.",2,[[],["arguments",3]]],[11,"metadata","","Metadata about the log directive.",2,[[],["metadata",3]]],[11,"level","","The verbosity level of the message.",2,[[],["level",4]]],[11,"target","","The name of the target of the directive.",2,[[]]],[11,"module_path","","The module path of the message.",2,[[],["option",4]]],[11,"module_path_static","","The module path of the message, if it is a <code>\'static</code> string.",2,[[],["option",4]]],[11,"file","","The source file containing the message.",2,[[],["option",4]]],[11,"file_static","","The module path of the message, if it is a <code>\'static</code> string.",2,[[],["option",4]]],[11,"line","","The line containing the message.",2,[[],["option",4]]],[3,"RecordBuilder","","Builder for <code>Record</code>.",null,null],[11,"new","","Construct new <code>RecordBuilder</code>.",3,[[],["recordbuilder",3]]],[11,"args","","Set <code>args</code>.",3,[[["arguments",3]],["recordbuilder",3]]],[11,"metadata","","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …",3,[[["metadata",3]],["recordbuilder",3]]],[11,"level","","Set <code>Metadata::level</code>.",3,[[["level",4]],["recordbuilder",3]]],[11,"target","","Set <code>Metadata::target</code>",3,[[],["recordbuilder",3]]],[11,"module_path","","Set <code>module_path</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"module_path_static","","Set <code>module_path</code> to a <code>\'static</code> string",3,[[["option",4]],["recordbuilder",3]]],[11,"file","","Set <code>file</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"file_static","","Set <code>file</code> to a <code>\'static</code> string.",3,[[["option",4]],["recordbuilder",3]]],[11,"line","","Set <code>line</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"build","","Invoke the builder and return a <code>Record</code>",3,[[],["record",3]]],[3,"Metadata","","Metadata about a log message.",null,null],[11,"builder","","Returns a new builder.",4,[[],["metadatabuilder",3]]],[11,"level","","The verbosity level of the message.",4,[[],["level",4]]],[11,"target","","The name of the target of the directive.",4,[[]]],[3,"MetadataBuilder","","Builder for <code>Metadata</code>.",null,null],[11,"new","","Construct a new <code>MetadataBuilder</code>.",5,[[],["metadatabuilder",3]]],[11,"level","","Setter for <code>level</code>.",5,[[["level",4]],["metadatabuilder",3]]],[11,"target","","Setter for <code>target</code>.",5,[[],["metadatabuilder",3]]],[11,"build","","Returns a <code>Metadata</code> object.",5,[[],["metadata",3]]],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata …",6,[[["metadata",3]]]],[10,"log","","Logs the <code>Record</code>.",6,[[["record",3]]]],[10,"flush","","Flushes any buffered records.",6,[[]]],[5,"set_max_level","","Sets the global maximum log level.",null,[[["levelfilter",4]]]],[5,"max_level","","Returns the current maximum log level.",null,[[],["levelfilter",4]]],[5,"set_logger","","Sets the global logger to a <code>&\'static Log</code>.",null,[[["log",8]],[["result",4],["setloggererror",3]]]],[5,"set_logger_racy","","A thread-unsafe version of <code>set_logger</code>.",null,[[["log",8]],[["result",4],["setloggererror",3]]]],[3,"SetLoggerError","","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …",null,null],[3,"ParseLevelError","","The type returned by <code>from_str</code> when the string doesn\'t …",null,null],[5,"logger","","Returns a reference to the logger.",null,[[],["log",8]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in …",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["level",4]]]],[11,"eq","","",0,[[["levelfilter",4]]]],[11,"eq","","",1,[[["levelfilter",4]]]],[11,"eq","","",1,[[["level",4]]]],[11,"eq","","",4,[[["metadata",3]]]],[11,"ne","","",4,[[["metadata",3]]]],[11,"eq","","",5,[[["metadatabuilder",3]]]],[11,"ne","","",5,[[["metadatabuilder",3]]]],[11,"eq","","",8,[[["parselevelerror",3]]]],[11,"ne","","",8,[[["parselevelerror",3]]]],[11,"cmp","","",0,[[["level",4]],["ordering",4]]],[11,"cmp","","",1,[[["levelfilter",4]],["ordering",4]]],[11,"cmp","","",4,[[["metadata",3]],["ordering",4]]],[11,"cmp","","",5,[[["metadatabuilder",3]],["ordering",4]]],[11,"partial_cmp","","",0,[[["level",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["level",4]]]],[11,"le","","",0,[[["level",4]]]],[11,"gt","","",0,[[["level",4]]]],[11,"ge","","",0,[[["level",4]]]],[11,"partial_cmp","","",0,[[["levelfilter",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["levelfilter",4]]]],[11,"le","","",0,[[["levelfilter",4]]]],[11,"gt","","",0,[[["levelfilter",4]]]],[11,"ge","","",0,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["levelfilter",4]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["levelfilter",4]]]],[11,"le","","",1,[[["levelfilter",4]]]],[11,"gt","","",1,[[["levelfilter",4]]]],[11,"ge","","",1,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["level",4]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["level",4]]]],[11,"le","","",1,[[["level",4]]]],[11,"gt","","",1,[[["level",4]]]],[11,"ge","","",1,[[["level",4]]]],[11,"partial_cmp","","",4,[[["metadata",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["metadata",3]]]],[11,"le","","",4,[[["metadata",3]]]],[11,"gt","","",4,[[["metadata",3]]]],[11,"ge","","",4,[[["metadata",3]]]],[11,"partial_cmp","","",5,[[["metadatabuilder",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["metadatabuilder",3]]]],[11,"le","","",5,[[["metadatabuilder",3]]]],[11,"gt","","",5,[[["metadatabuilder",3]]]],[11,"ge","","",5,[[["metadatabuilder",3]]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"from_str","","",0,[[],[["level",4],["result",4]]]],[11,"from_str","","",1,[[],[["levelfilter",4],["result",4]]]],[11,"clone","","",0,[[],["level",4]]],[11,"clone","","",1,[[],["levelfilter",4]]],[11,"clone","","",2,[[],["record",3]]],[11,"clone","","",4,[[],["metadata",3]]]],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[8,"Log"],[3,"SetLoggerError"],[3,"ParseLevelError"]]},\
"memchr":{"doc":"The <code>memchr</code> crate provides heavily optimized routines for …","i":[[3,"Memchr","memchr","An iterator for <code>memchr</code>.",null,null],[3,"Memchr2","","An iterator for <code>memchr2</code>.",null,null],[3,"Memchr3","","An iterator for <code>memchr3</code>.",null,null],[5,"memchr_iter","","An iterator over all occurrences of the needle in a …",null,[[],["memchr",3]]],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a …",null,[[],["memchr2",3]]],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a …",null,[[],["memchr3",3]]],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a …",null,[[],[["memchr",3],["rev",3]]]],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a …",null,[[],[["memchr2",3],["rev",3]]]],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a …",null,[[],[["memchr3",3],["rev",3]]]],[5,"memchr","","Search for the first occurrence of a byte in a slice.",null,[[],["option",4]]],[5,"memchr2","","Like <code>memchr</code>, but searches for either of two bytes instead …",null,[[],["option",4]]],[5,"memchr3","","Like <code>memchr</code>, but searches for any of three bytes instead …",null,[[],["option",4]]],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",null,[[],["option",4]]],[5,"memrchr2","","Like <code>memrchr</code>, but searches for either of two bytes …",null,[[],["option",4]]],[5,"memrchr3","","Like <code>memrchr</code>, but searches for any of three bytes instead …",null,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"new","","Creates a new iterator that yields all positions of …",0,[[],["memchr",3]]],[11,"new","","Creates a new iterator that yields all positions of …",1,[[],["memchr2",3]]],[11,"new","","Create a new <code>Memchr3</code> that\'s initialized to zero with a …",2,[[],["memchr3",3]]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members …","i":[[14,"raw_field","memoffset","Computes a const raw pointer to the given field of the …",null,null],[14,"raw_field_tuple","","Computes a const raw pointer to the given field of the …",null,null],[14,"offset_of","","Calculates the offset of the specified field from the …",null,null],[14,"offset_of_tuple","","Calculates the offset of the specified field from the …",null,null],[14,"span_of","","Produces a range instance representing the sub-slice …",null,null]],"p":[]},\
"nested":{"doc":"A two dimensional collection whose purpose it to reduce …","i":[[6,"Item","nested","A <code>Nested</code> item when <code>T: Collection</code>",null,null],[6,"ZString","","A <code>Nested<String></code>",null,null],[6,"ZVec","","A <code>Nested<Vec<T>></code>",null,null],[8,"Collection","","A <code>Collection</code> trait to expose basic required fn for <code>Nested</code> …",null,null],[10,"new","","",0,[[]]],[10,"with_capacity","","",0,[[]]],[10,"len","","",0,[[]]],[10,"truncate","","",0,[[]]],[10,"extend_from_slice","","",0,[[]]],[10,"split_off","","",0,[[]]],[3,"Nested","","A two dimensional collection with minimal allocation",null,null],[11,"new","","Create a new <code>Nested</code>.",1,[[]]],[11,"with_capacity","","Creates a new <code>Nested</code> with given capacity.",1,[[]]],[11,"push","","Pushes a new item",1,[[["asref",8],["item",6]]]],[11,"pop","","Removes the last element from a <code>Nested</code> and returns it, or …",1,[[],["option",4]]],[11,"extend_empty","","Extend with <code>count</code> empty elements",1,[[]]],[11,"len","","Returns the number of elements in the <code>Nested</code>.",1,[[]]],[11,"data_len","","Get the total length taken by the data",1,[[]]],[11,"is_empty","","Returns true if self has a length of zero.",1,[[]]],[11,"truncate","","Shortens the <code>Nested</code>, keeping the first len elements and …",1,[[]]],[11,"clear","","Truncates this <code>Nested</code>, removing all contents.",1,[[]]],[11,"get","","Returns a shared reference to the output at this …",1,[[],[["item",6],["option",4]]]],[11,"into_parts","","Converts this <code>Nested</code> into its constituent parts.",1,[[]]],[11,"indices","","Returns a reference to the underlying indices.",1,[[]]],[11,"data","","Returns a reference to the underlying data.",1,[[]]],[11,"iter","","Returns an iterator over <code>Nested</code> elements.",1,[[],["iter",3]]],[11,"split_off","","Splits the collection into two at the given index.",1,[[],["nested",3]]],[3,"Iter","","An iterator over <code>Nested</code> elements",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"next_back","","",2,[[],["option",4]]],[11,"len","","",2,[[]]],[11,"extend","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"clone","","",1,[[],["nested",3]]],[11,"clone","","",2,[[],["iter",3]]],[11,"eq","","",1,[[["nested",3]]]],[11,"ne","","",1,[[["nested",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"index","","",1,[[]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]]],"p":[[8,"Collection"],[3,"Nested"],[3,"Iter"]]},\
"nix":{"doc":"Rust friendly bindings to the various *nix system …","i":[[0,"dir","nix","",null,null],[3,"Dir","nix::dir","An open directory.",null,null],[11,"open","","Opens the given path as with <code>fcntl::open</code>.",0,[[["mode",3],["oflag",3]],["result",6]]],[11,"openat","","Opens the given path as with <code>fcntl::openat</code>.",0,[[["mode",3],["oflag",3],["rawfd",6]],["result",6]]],[11,"from","","Converts from a descriptor-based object, closing the …",0,[[["intorawfd",8]],["result",6]]],[11,"from_fd","","Converts from a file descriptor, closing it on success or …",0,[[["rawfd",6]],["result",6]]],[11,"iter","","Returns an iterator of <code>Result<Entry></code> which rewinds when …",0,[[],["iter",3]]],[3,"Iter","","",null,null],[3,"OwningIter","","The return type of [Dir::into_iter]",null,null],[3,"Entry","","A directory entry, similar to <code>std::fs::DirEntry</code>.",null,null],[4,"Type","","",null,null],[13,"Fifo","","",1,null],[13,"CharacterDevice","","",1,null],[13,"Directory","","",1,null],[13,"BlockDevice","","",1,null],[13,"File","","",1,null],[13,"Symlink","","",1,null],[13,"Socket","","",1,null],[11,"ino","","Returns the inode number (<code>d_ino</code>) of the underlying <code>dirent</code>.",2,[[]]],[11,"file_name","","Returns the bare file name of this directory entry …",2,[[],["cstr",3]]],[11,"file_type","","Returns the type of this directory entry, if known.",2,[[],[["option",4],["type",4]]]],[0,"env","nix","",null,null],[5,"clearenv","nix::env","Clear the environment of all name-value pairs.",null,[[],["result",6]]],[0,"errno","nix","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",3,null],[13,"EPERM","","",3,null],[13,"ENOENT","","",3,null],[13,"ESRCH","","",3,null],[13,"EINTR","","",3,null],[13,"EIO","","",3,null],[13,"ENXIO","","",3,null],[13,"E2BIG","","",3,null],[13,"ENOEXEC","","",3,null],[13,"EBADF","","",3,null],[13,"ECHILD","","",3,null],[13,"EAGAIN","","",3,null],[13,"ENOMEM","","",3,null],[13,"EACCES","","",3,null],[13,"EFAULT","","",3,null],[13,"ENOTBLK","","",3,null],[13,"EBUSY","","",3,null],[13,"EEXIST","","",3,null],[13,"EXDEV","","",3,null],[13,"ENODEV","","",3,null],[13,"ENOTDIR","","",3,null],[13,"EISDIR","","",3,null],[13,"EINVAL","","",3,null],[13,"ENFILE","","",3,null],[13,"EMFILE","","",3,null],[13,"ENOTTY","","",3,null],[13,"ETXTBSY","","",3,null],[13,"EFBIG","","",3,null],[13,"ENOSPC","","",3,null],[13,"ESPIPE","","",3,null],[13,"EROFS","","",3,null],[13,"EMLINK","","",3,null],[13,"EPIPE","","",3,null],[13,"EDOM","","",3,null],[13,"ERANGE","","",3,null],[13,"EDEADLK","","",3,null],[13,"ENAMETOOLONG","","",3,null],[13,"ENOLCK","","",3,null],[13,"ENOSYS","","",3,null],[13,"ENOTEMPTY","","",3,null],[13,"ELOOP","","",3,null],[13,"ENOMSG","","",3,null],[13,"EIDRM","","",3,null],[13,"ECHRNG","","",3,null],[13,"EL2NSYNC","","",3,null],[13,"EL3HLT","","",3,null],[13,"EL3RST","","",3,null],[13,"ELNRNG","","",3,null],[13,"EUNATCH","","",3,null],[13,"ENOCSI","","",3,null],[13,"EL2HLT","","",3,null],[13,"EBADE","","",3,null],[13,"EBADR","","",3,null],[13,"EXFULL","","",3,null],[13,"ENOANO","","",3,null],[13,"EBADRQC","","",3,null],[13,"EBADSLT","","",3,null],[13,"EBFONT","","",3,null],[13,"ENOSTR","","",3,null],[13,"ENODATA","","",3,null],[13,"ETIME","","",3,null],[13,"ENOSR","","",3,null],[13,"ENONET","","",3,null],[13,"ENOPKG","","",3,null],[13,"EREMOTE","","",3,null],[13,"ENOLINK","","",3,null],[13,"EADV","","",3,null],[13,"ESRMNT","","",3,null],[13,"ECOMM","","",3,null],[13,"EPROTO","","",3,null],[13,"EMULTIHOP","","",3,null],[13,"EDOTDOT","","",3,null],[13,"EBADMSG","","",3,null],[13,"EOVERFLOW","","",3,null],[13,"ENOTUNIQ","","",3,null],[13,"EBADFD","","",3,null],[13,"EREMCHG","","",3,null],[13,"ELIBACC","","",3,null],[13,"ELIBBAD","","",3,null],[13,"ELIBSCN","","",3,null],[13,"ELIBMAX","","",3,null],[13,"ELIBEXEC","","",3,null],[13,"EILSEQ","","",3,null],[13,"ERESTART","","",3,null],[13,"ESTRPIPE","","",3,null],[13,"EUSERS","","",3,null],[13,"ENOTSOCK","","",3,null],[13,"EDESTADDRREQ","","",3,null],[13,"EMSGSIZE","","",3,null],[13,"EPROTOTYPE","","",3,null],[13,"ENOPROTOOPT","","",3,null],[13,"EPROTONOSUPPORT","","",3,null],[13,"ESOCKTNOSUPPORT","","",3,null],[13,"EOPNOTSUPP","","",3,null],[13,"EPFNOSUPPORT","","",3,null],[13,"EAFNOSUPPORT","","",3,null],[13,"EADDRINUSE","","",3,null],[13,"EADDRNOTAVAIL","","",3,null],[13,"ENETDOWN","","",3,null],[13,"ENETUNREACH","","",3,null],[13,"ENETRESET","","",3,null],[13,"ECONNABORTED","","",3,null],[13,"ECONNRESET","","",3,null],[13,"ENOBUFS","","",3,null],[13,"EISCONN","","",3,null],[13,"ENOTCONN","","",3,null],[13,"ESHUTDOWN","","",3,null],[13,"ETOOMANYREFS","","",3,null],[13,"ETIMEDOUT","","",3,null],[13,"ECONNREFUSED","","",3,null],[13,"EHOSTDOWN","","",3,null],[13,"EHOSTUNREACH","","",3,null],[13,"EALREADY","","",3,null],[13,"EINPROGRESS","","",3,null],[13,"ESTALE","","",3,null],[13,"EUCLEAN","","",3,null],[13,"ENOTNAM","","",3,null],[13,"ENAVAIL","","",3,null],[13,"EISNAM","","",3,null],[13,"EREMOTEIO","","",3,null],[13,"EDQUOT","","",3,null],[13,"ENOMEDIUM","","",3,null],[13,"EMEDIUMTYPE","","",3,null],[13,"ECANCELED","","",3,null],[13,"ENOKEY","","",3,null],[13,"EKEYEXPIRED","","",3,null],[13,"EKEYREVOKED","","",3,null],[13,"EKEYREJECTED","","",3,null],[13,"EOWNERDEAD","","",3,null],[13,"ENOTRECOVERABLE","","",3,null],[13,"ERFKILL","","",3,null],[13,"EHWPOISON","","",3,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"ENOTSUP","","",null,null],[5,"from_i32","","",null,[[],["errno",4]]],[5,"errno","","Returns the platform-specific value of errno",null,[[]]],[11,"last","","",3,[[]]],[11,"desc","","",3,[[]]],[11,"from_i32","","",3,[[],["errno",4]]],[11,"clear","","",3,[[]]],[11,"result","","Returns <code>Ok(value)</code> if it does not contain the sentinel …",3,[[["partialeq",8],["errnosentinel",8]],[["errnosentinel",8],["result",6],["partialeq",8]]]],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and …",null,null],[10,"sentinel","","",4,[[]]],[0,"features","nix","Feature tests for OS functionality",null,null],[5,"socket_atomic_cloexec","nix::features","Check if the OS supports atomic close-on-exec for sockets",null,[[]]],[0,"fcntl","nix","",null,null],[4,"PosixFadviseAdvice","nix::fcntl","",null,null],[13,"POSIX_FADV_NORMAL","","",5,null],[13,"POSIX_FADV_SEQUENTIAL","","",5,null],[13,"POSIX_FADV_RANDOM","","",5,null],[13,"POSIX_FADV_NOREUSE","","",5,null],[13,"POSIX_FADV_WILLNEED","","",5,null],[13,"POSIX_FADV_DONTNEED","","",5,null],[5,"posix_fadvise","","",null,[[["posixfadviseadvice",4],["off_t",6],["rawfd",6]],[["c_int",6],["result",6]]]],[3,"AtFlags","","",null,null],[18,"AT_REMOVEDIR","","",6,null],[18,"AT_SYMLINK_FOLLOW","","",6,null],[18,"AT_SYMLINK_NOFOLLOW","","",6,null],[18,"AT_NO_AUTOMOUNT","","",6,null],[18,"AT_EMPTY_PATH","","",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["atflags",3]]],[11,"all","","Returns the set containing all flags.",6,[[],["atflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",6,[[["c_int",6]],[["atflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",6,[[["c_int",6]],["atflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[["c_int",6]],["atflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",6,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",6,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",6,[[["atflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",6,[[["atflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["atflags",3]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["atflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["atflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",6,[[["atflags",3]]]],[3,"OFlag","","Configuration options for opened files.",null,null],[18,"O_ACCMODE","","Mask for the access mode of the file.",7,null],[18,"O_APPEND","","Open the file in append-only mode.",7,null],[18,"O_ASYNC","","Generate a signal when input or output becomes possible.",7,null],[18,"O_CLOEXEC","","Closes the file descriptor once an <code>execve</code> call is made.",7,null],[18,"O_CREAT","","Create the file if it does not exist.",7,null],[18,"O_DIRECT","","Try to minimize cache effects of the I/O for this file.",7,null],[18,"O_DIRECTORY","","If the specified path isn\'t a directory, fail.",7,null],[18,"O_DSYNC","","Implicitly follow each <code>write()</code> with an <code>fdatasync()</code>.",7,null],[18,"O_EXCL","","Error out if a file was not created.",7,null],[18,"O_FSYNC","","Same as <code>O_SYNC</code>.",7,null],[18,"O_LARGEFILE","","Allow files whose sizes can\'t be represented in an <code>off_t</code> …",7,null],[18,"O_NOATIME","","Do not update the file last access time during <code>read(2)</code>s.",7,null],[18,"O_NOCTTY","","Don\'t attach the device as the process\' controlling …",7,null],[18,"O_NDELAY","","Same as <code>O_NONBLOCK</code>.",7,null],[18,"O_NOFOLLOW","","<code>open()</code> will fail if the given path is a symbolic link.",7,null],[18,"O_NONBLOCK","","When possible, open the file in nonblocking mode.",7,null],[18,"O_PATH","","Obtain a file descriptor for low-level access.",7,null],[18,"O_RDONLY","","Only allow reading.",7,null],[18,"O_RDWR","","Allow both reading and writing.",7,null],[18,"O_RSYNC","","Similar to <code>O_DSYNC</code> but applies to <code>read</code>s instead.",7,null],[18,"O_SYNC","","Implicitly follow each <code>write()</code> with an <code>fsync()</code>.",7,null],[18,"O_TMPFILE","","Create an unnamed temporary file.",7,null],[18,"O_TRUNC","","Truncate an existing regular file to 0 length if it …",7,null],[18,"O_WRONLY","","Only allow writing.",7,null],[11,"empty","","Returns an empty set of flags",7,[[],["oflag",3]]],[11,"all","","Returns the set containing all flags.",7,[[],["oflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",7,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",7,[[["c_int",6]],[["option",4],["oflag",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",7,[[["c_int",6]],["oflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",7,[[["c_int",6]],["oflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",7,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",7,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",7,[[["oflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",7,[[["oflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",7,[[["oflag",3]]]],[11,"remove","","Removes the specified flags in-place.",7,[[["oflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",7,[[["oflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",7,[[["oflag",3]]]],[5,"open","","",null,[[["oflag",3],["mode",3]],[["result",6],["rawfd",6]]]],[5,"openat","","",null,[[["oflag",3],["mode",3],["rawfd",6]],[["result",6],["rawfd",6]]]],[5,"renameat","","",null,[[["option",4],["rawfd",6]],["result",6]]],[5,"readlink","","",null,[[],[["osstring",3],["result",6]]]],[5,"readlinkat","","",null,[[["rawfd",6]],[["osstring",3],["result",6]]]],[3,"SealFlag","","Additional flags for file sealing, which allows for …",null,null],[18,"F_SEAL_SEAL","","Prevents further calls to <code>fcntl()</code> with <code>F_ADD_SEALS</code>.",8,null],[18,"F_SEAL_SHRINK","","The file cannot be reduced in size.",8,null],[18,"F_SEAL_GROW","","The size of the file cannot be increased.",8,null],[18,"F_SEAL_WRITE","","The file contents cannot be modified.",8,null],[11,"empty","","Returns an empty set of flags",8,[[],["sealflag",3]]],[11,"all","","Returns the set containing all flags.",8,[[],["sealflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",8,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",8,[[["c_int",6]],[["option",4],["sealflag",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",8,[[["c_int",6]],["sealflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",8,[[["c_int",6]],["sealflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",8,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",8,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",8,[[["sealflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",8,[[["sealflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",8,[[["sealflag",3]]]],[11,"remove","","Removes the specified flags in-place.",8,[[["sealflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",8,[[["sealflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",8,[[["sealflag",3]]]],[3,"FdFlag","","Additional configuration flags for <code>fcntl</code>\'s <code>F_SETFD</code>.",null,null],[18,"FD_CLOEXEC","","The file descriptor will automatically be closed during a …",9,null],[11,"empty","","Returns an empty set of flags",9,[[],["fdflag",3]]],[11,"all","","Returns the set containing all flags.",9,[[],["fdflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",9,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",9,[[["c_int",6]],[["option",4],["fdflag",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",9,[[["c_int",6]],["fdflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",9,[[["c_int",6]],["fdflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",9,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",9,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",9,[[["fdflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",9,[[["fdflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",9,[[["fdflag",3]]]],[11,"remove","","Removes the specified flags in-place.",9,[[["fdflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",9,[[["fdflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",9,[[["fdflag",3]]]],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",10,null],[13,"F_DUPFD_CLOEXEC","","",10,null],[13,"F_GETFD","","",10,null],[13,"F_SETFD","","",10,null],[13,"F_GETFL","","",10,null],[13,"F_SETFL","","",10,null],[13,"F_SETLK","","",10,null],[13,"F_SETLKW","","",10,null],[13,"F_GETLK","","",10,null],[13,"F_OFD_SETLK","","",10,null],[13,"F_OFD_SETLKW","","",10,null],[13,"F_OFD_GETLK","","",10,null],[13,"F_ADD_SEALS","","",10,null],[13,"F_GET_SEALS","","",10,null],[13,"F_GETPIPE_SZ","","",10,null],[13,"F_SETPIPE_SZ","","",10,null],[5,"fcntl","","",null,[[["fcntlarg",4],["rawfd",6]],[["c_int",6],["result",6]]]],[4,"FlockArg","","",null,null],[13,"LockShared","","",11,null],[13,"LockExclusive","","",11,null],[13,"Unlock","","",11,null],[13,"LockSharedNonblock","","",11,null],[13,"LockExclusiveNonblock","","",11,null],[13,"UnlockNonblock","","",11,null],[5,"flock","","",null,[[["flockarg",4],["rawfd",6]],["result",6]]],[3,"SpliceFFlags","","Additional flags to <code>splice</code> and friends.",null,null],[18,"SPLICE_F_MOVE","","Request that pages be moved instead of copied.",12,null],[18,"SPLICE_F_NONBLOCK","","Do not block on I/O.",12,null],[18,"SPLICE_F_MORE","","Hint that more data will be coming in a subsequent splice.",12,null],[18,"SPLICE_F_GIFT","","Gift the user pages to the kernel.",12,null],[11,"empty","","Returns an empty set of flags",12,[[],["splicefflags",3]]],[11,"all","","Returns the set containing all flags.",12,[[],["splicefflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",12,[[],["c_uint",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",12,[[["c_uint",6]],[["option",4],["splicefflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",12,[[["c_uint",6]],["splicefflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",12,[[["c_uint",6]],["splicefflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",12,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",12,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",12,[[["splicefflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",12,[[["splicefflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",12,[[["splicefflags",3]]]],[11,"remove","","Removes the specified flags in-place.",12,[[["splicefflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",12,[[["splicefflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",12,[[["splicefflags",3]]]],[5,"copy_file_range","","Copy a range of data from one file to another",null,[[["loff_t",6],["option",4],["rawfd",6]],["result",6]]],[5,"splice","","",null,[[["splicefflags",3],["loff_t",6],["option",4],["rawfd",6]],["result",6]]],[5,"tee","","",null,[[["splicefflags",3],["rawfd",6]],["result",6]]],[5,"vmsplice","","",null,[[["splicefflags",3],["rawfd",6]],["result",6]]],[3,"FallocateFlags","","Mode argument flags for fallocate determining operation …",null,null],[18,"FALLOC_FL_KEEP_SIZE","","File size is not changed.",13,null],[18,"FALLOC_FL_PUNCH_HOLE","","Deallocates space by creating a hole.",13,null],[18,"FALLOC_FL_COLLAPSE_RANGE","","Removes byte range from a file without leaving a hole.",13,null],[18,"FALLOC_FL_ZERO_RANGE","","Zeroes space in specified byte range.",13,null],[18,"FALLOC_FL_INSERT_RANGE","","Increases file space by inserting a hole within the file …",13,null],[18,"FALLOC_FL_UNSHARE_RANGE","","Shared file data extants are made private to the file.",13,null],[11,"empty","","Returns an empty set of flags",13,[[],["fallocateflags",3]]],[11,"all","","Returns the set containing all flags.",13,[[],["fallocateflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",13,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",13,[[["c_int",6]],[["fallocateflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",13,[[["c_int",6]],["fallocateflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",13,[[["c_int",6]],["fallocateflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",13,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",13,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",13,[[["fallocateflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",13,[[["fallocateflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",13,[[["fallocateflags",3]]]],[11,"remove","","Removes the specified flags in-place.",13,[[["fallocateflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",13,[[["fallocateflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",13,[[["fallocateflags",3]]]],[5,"fallocate","","Manipulates file space.",null,[[["off_t",6],["fallocateflags",3],["rawfd",6]],["result",6]]],[5,"posix_fallocate","","",null,[[["off_t",6],["rawfd",6]],["result",6]]],[0,"ifaddrs","nix","Query network interface addresses",null,null],[3,"InterfaceAddress","nix::ifaddrs","Describes a single address for an interface as returned …",null,null],[12,"interface_name","","Name of the network interface",14,null],[12,"flags","","Flags as from <code>SIOCGIFFLAGS</code> ioctl",14,null],[12,"address","","Network address of this interface",14,null],[12,"netmask","","Netmask of this interface",14,null],[12,"broadcast","","Broadcast address of this interface, if applicable",14,null],[12,"destination","","Point-to-point destination address",14,null],[3,"InterfaceAddressIterator","","Holds the results of <code>getifaddrs</code>.",null,null],[5,"getifaddrs","","Get interface addresses using libc\'s <code>getifaddrs</code>",null,[[],[["result",6],["interfaceaddressiterator",3]]]],[0,"kmod","nix","Load and unload kernel modules.",null,null],[5,"init_module","nix::kmod","Loads a kernel module from a buffer.",null,[[["cstr",3]],["result",6]]],[3,"ModuleInitFlags","","Flags used by the <code>finit_module</code> function.",null,null],[18,"MODULE_INIT_IGNORE_MODVERSIONS","","Ignore symbol version hashes.",15,null],[18,"MODULE_INIT_IGNORE_VERMAGIC","","Ignore kernel version magic.",15,null],[11,"empty","","Returns an empty set of flags",15,[[],["moduleinitflags",3]]],[11,"all","","Returns the set containing all flags.",15,[[],["moduleinitflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",15,[[],["c_uint",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",15,[[["c_uint",6]],[["moduleinitflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",15,[[["c_uint",6]],["moduleinitflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",15,[[["c_uint",6]],["moduleinitflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",15,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",15,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",15,[[["moduleinitflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",15,[[["moduleinitflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",15,[[["moduleinitflags",3]]]],[11,"remove","","Removes the specified flags in-place.",15,[[["moduleinitflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",15,[[["moduleinitflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",15,[[["moduleinitflags",3]]]],[5,"finit_module","","Loads a kernel module from a given file descriptor.",null,[[["cstr",3],["moduleinitflags",3]],["result",6]]],[3,"DeleteModuleFlags","","Flags used by <code>delete_module</code>.",null,null],[18,"O_NONBLOCK","","",16,null],[18,"O_TRUNC","","",16,null],[11,"empty","","Returns an empty set of flags",16,[[],["deletemoduleflags",3]]],[11,"all","","Returns the set containing all flags.",16,[[],["deletemoduleflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",16,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",16,[[["c_int",6]],[["deletemoduleflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",16,[[["c_int",6]],["deletemoduleflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",16,[[["c_int",6]],["deletemoduleflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",16,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",16,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",16,[[["deletemoduleflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",16,[[["deletemoduleflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",16,[[["deletemoduleflags",3]]]],[11,"remove","","Removes the specified flags in-place.",16,[[["deletemoduleflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",16,[[["deletemoduleflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",16,[[["deletemoduleflags",3]]]],[5,"delete_module","","Unloads the kernel module with the given name.",null,[[["deletemoduleflags",3],["cstr",3]],["result",6]]],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[18,"MS_RDONLY","","Mount read-only",17,null],[18,"MS_NOSUID","","Ignore suid and sgid bits",17,null],[18,"MS_NODEV","","Disallow access to device special files",17,null],[18,"MS_NOEXEC","","Disallow program execution",17,null],[18,"MS_SYNCHRONOUS","","Writes are synced at once",17,null],[18,"MS_REMOUNT","","Alter flags of a mounted FS",17,null],[18,"MS_MANDLOCK","","Allow mandatory locks on a FS",17,null],[18,"MS_DIRSYNC","","Directory modifications are synchronous",17,null],[18,"MS_NOATIME","","Do not update access times",17,null],[18,"MS_NODIRATIME","","Do not update directory access times",17,null],[18,"MS_BIND","","Linux 2.4.0 - Bind directory at different place",17,null],[18,"MS_MOVE","","",17,null],[18,"MS_REC","","",17,null],[18,"MS_SILENT","","",17,null],[18,"MS_POSIXACL","","",17,null],[18,"MS_UNBINDABLE","","",17,null],[18,"MS_PRIVATE","","",17,null],[18,"MS_SLAVE","","",17,null],[18,"MS_SHARED","","",17,null],[18,"MS_RELATIME","","",17,null],[18,"MS_KERNMOUNT","","",17,null],[18,"MS_I_VERSION","","",17,null],[18,"MS_STRICTATIME","","",17,null],[18,"MS_ACTIVE","","",17,null],[18,"MS_NOUSER","","",17,null],[18,"MS_RMT_MASK","","",17,null],[18,"MS_MGC_VAL","","",17,null],[18,"MS_MGC_MSK","","",17,null],[11,"empty","","Returns an empty set of flags",17,[[],["msflags",3]]],[11,"all","","Returns the set containing all flags.",17,[[],["msflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",17,[[],["c_ulong",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",17,[[["c_ulong",6]],[["option",4],["msflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",17,[[["c_ulong",6]],["msflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",17,[[["c_ulong",6]],["msflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",17,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",17,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",17,[[["msflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",17,[[["msflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",17,[[["msflags",3]]]],[11,"remove","","Removes the specified flags in-place.",17,[[["msflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",17,[[["msflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",17,[[["msflags",3]]]],[3,"MntFlags","","",null,null],[18,"MNT_FORCE","","",18,null],[18,"MNT_DETACH","","",18,null],[18,"MNT_EXPIRE","","",18,null],[11,"empty","","Returns an empty set of flags",18,[[],["mntflags",3]]],[11,"all","","Returns the set containing all flags.",18,[[],["mntflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",18,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",18,[[["c_int",6]],[["option",4],["mntflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",18,[[["c_int",6]],["mntflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",18,[[["c_int",6]],["mntflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",18,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",18,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",18,[[["mntflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",18,[[["mntflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",18,[[["mntflags",3]]]],[11,"remove","","Removes the specified flags in-place.",18,[[["mntflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",18,[[["mntflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",18,[[["mntflags",3]]]],[5,"mount","","",null,[[["option",4],["msflags",3],["option",4],["option",4]],["result",6]]],[5,"umount","","",null,[[],["result",6]]],[5,"umount2","","",null,[[["mntflags",3]],["result",6]]],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[18,"O_RDONLY","","",19,null],[18,"O_WRONLY","","",19,null],[18,"O_RDWR","","",19,null],[18,"O_CREAT","","",19,null],[18,"O_EXCL","","",19,null],[18,"O_NONBLOCK","","",19,null],[18,"O_CLOEXEC","","",19,null],[11,"empty","","Returns an empty set of flags",19,[[],["mq_oflag",3]]],[11,"all","","Returns the set containing all flags.",19,[[],["mq_oflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",19,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",19,[[["c_int",6]],[["option",4],["mq_oflag",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",19,[[["c_int",6]],["mq_oflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",19,[[["c_int",6]],["mq_oflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",19,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",19,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",19,[[["mq_oflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",19,[[["mq_oflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",19,[[["mq_oflag",3]]]],[11,"remove","","Removes the specified flags in-place.",19,[[["mq_oflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",19,[[["mq_oflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",19,[[["mq_oflag",3]]]],[3,"FdFlag","","",null,null],[18,"FD_CLOEXEC","","",20,null],[11,"empty","","Returns an empty set of flags",20,[[],["fdflag",3]]],[11,"all","","Returns the set containing all flags.",20,[[],["fdflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",20,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",20,[[["c_int",6]],[["option",4],["fdflag",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",20,[[["c_int",6]],["fdflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",20,[[["c_int",6]],["fdflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",20,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",20,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",20,[[["fdflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",20,[[["fdflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",20,[[["fdflag",3]]]],[11,"remove","","Removes the specified flags in-place.",20,[[["fdflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",20,[[["fdflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",20,[[["fdflag",3]]]],[3,"MqAttr","","",null,null],[6,"mq_attr_member_t","","",null,null],[11,"new","","",21,[[["mq_attr_member_t",6]],["mqattr",3]]],[11,"flags","","",21,[[],["mq_attr_member_t",6]]],[5,"mq_open","","Open a message queue",null,[[["mq_oflag",3],["mode",3],["mqattr",3],["option",4],["cstring",3]],[["mqd_t",6],["result",6]]]],[5,"mq_unlink","","Remove a message queue",null,[[["cstring",3]],["result",6]]],[5,"mq_close","","Close a message queue",null,[[["mqd_t",6]],["result",6]]],[5,"mq_receive","","Receive a message from a message queue",null,[[["mqd_t",6]],["result",6]]],[5,"mq_send","","Send a message to a message queue",null,[[["mqd_t",6]],["result",6]]],[5,"mq_getattr","","Get message queue attributes",null,[[["mqd_t",6]],[["mqattr",3],["result",6]]]],[5,"mq_setattr","","Set the attributes of the message queue. Only <code>O_NONBLOCK</code> …",null,[[["mqd_t",6],["mqattr",3]],[["mqattr",3],["result",6]]]],[5,"mq_set_nonblock","","Convenience function. Sets the <code>O_NONBLOCK</code> attribute for a …",null,[[["mqd_t",6]],[["mqattr",3],["result",6]]]],[5,"mq_remove_nonblock","","Convenience function. Removes <code>O_NONBLOCK</code> attribute for a …",null,[[["mqd_t",6]],[["mqattr",3],["result",6]]]],[0,"net","nix","Functionality involving network interfaces",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,[[],[["c_uint",6],["result",6]]]],[3,"InterfaceFlags","","Standard interface flags, used by <code>getifaddrs</code>",null,null],[18,"IFF_UP","","Interface is running. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_BROADCAST","","Valid broadcast address set. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_DEBUG","","Internal debugging flag. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_LOOPBACK","","Interface is a loopback interface. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_POINTOPOINT","","Interface is a point-to-point link. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_NOTRAILERS","","Avoid use of trailers. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_RUNNING","","Resources allocated. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_NOARP","","No arp protocol, L2 destination address not set. (see …",22,null],[18,"IFF_PROMISC","","Interface is in promiscuous mode. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_ALLMULTI","","Receive all multicast packets. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_MASTER","","Master of a load balancing bundle. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_SLAVE","","Slave of a load balancing bundle. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_MULTICAST","","Supports multicast. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_PORTSEL","","Is able to select media type via ifmap. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_AUTOMEDIA","","Auto media selection active. (see <code>netdevice(7)</code>)",22,null],[18,"IFF_DYNAMIC","","The addresses are lost when the interface goes down. (see …",22,null],[18,"IFF_LOWER_UP","","Driver signals L1 up. Volatile.",22,null],[18,"IFF_DORMANT","","Driver signals dormant. Volatile.",22,null],[18,"IFF_ECHO","","Echo sent packets. Volatile.",22,null],[18,"IFF_NO_PI","","Do not provide packet information",22,null],[18,"IFF_TUN","","TUN device (no Ethernet headers) ",22,null],[18,"IFF_TAP","","TAP device",22,null],[11,"empty","","Returns an empty set of flags",22,[[],["interfaceflags",3]]],[11,"all","","Returns the set containing all flags.",22,[[],["interfaceflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",22,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",22,[[["c_int",6]],[["interfaceflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",22,[[["c_int",6]],["interfaceflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",22,[[["c_int",6]],["interfaceflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",22,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",22,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",22,[[["interfaceflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",22,[[["interfaceflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",22,[[["interfaceflags",3]]]],[11,"remove","","Removes the specified flags in-place.",22,[[["interfaceflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",22,[[["interfaceflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",22,[[["interfaceflags",3]]]],[0,"poll","nix","Wait for events to trigger on specific file descriptors",null,null],[3,"PollFd","nix::poll","This is a wrapper around <code>libc::pollfd</code>.",null,null],[11,"new","","Creates a new <code>PollFd</code> specifying the events of interest …",23,[[["pollflags",3],["rawfd",6]],["pollfd",3]]],[11,"revents","","Returns the events that occured in the last call to <code>poll</code> …",23,[[],[["option",4],["pollflags",3]]]],[3,"PollFlags","","These flags define the different events that can be …",null,null],[18,"POLLIN","","There is data to read.",24,null],[18,"POLLPRI","","There is some exceptional condition on the file …",24,null],[18,"POLLOUT","","Writing is now possible, though a write larger that the …",24,null],[18,"POLLRDNORM","","Equivalent to <code>POLLIN</code>",24,null],[18,"POLLWRNORM","","Equivalent to <code>POLLOUT</code>",24,null],[18,"POLLRDBAND","","Priority band data can be read (generally unused on …",24,null],[18,"POLLWRBAND","","Priority data may be written.",24,null],[18,"POLLERR","","Error condition (only returned in <code>PollFd::revents</code>; …",24,null],[18,"POLLHUP","","Hang up (only returned in <code>PollFd::revents</code>; ignored in …",24,null],[18,"POLLNVAL","","Invalid request: <code>fd</code> not open (only returned in …",24,null],[11,"empty","","Returns an empty set of flags",24,[[],["pollflags",3]]],[11,"all","","Returns the set containing all flags.",24,[[],["pollflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",24,[[],["c_short",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",24,[[["c_short",6]],[["option",4],["pollflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",24,[[["c_short",6]],["pollflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",24,[[["c_short",6]],["pollflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",24,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",24,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",24,[[["pollflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",24,[[["pollflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",24,[[["pollflags",3]]]],[11,"remove","","Removes the specified flags in-place.",24,[[["pollflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",24,[[["pollflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",24,[[["pollflags",3]]]],[5,"poll","","<code>poll</code> waits for one of a set of file descriptors to become …",null,[[["c_int",6]],[["c_int",6],["result",6]]]],[5,"ppoll","","<code>ppoll()</code> allows an application to safely wait until either …",null,[[["option",4],["sigset",3],["timespec",3]],[["c_int",6],["result",6]]]],[0,"pty","nix","Create master and slave virtual pseudo-terminals (PTYs)",null,null],[6,"SessionId","nix::pty","",null,null],[3,"Winsize","","",null,null],[12,"ws_row","","",25,null],[12,"ws_col","","",25,null],[12,"ws_xpixel","","",25,null],[12,"ws_ypixel","","",25,null],[3,"OpenptyResult","","Representation of a master/slave pty pair",null,null],[12,"master","","The master port in a virtual pty pair",26,null],[12,"slave","","The slave port in a virtual pty pair",26,null],[3,"ForkptyResult","","Representation of a master with a forked pty",null,null],[12,"master","","The master port in a virtual pty pair",27,null],[12,"fork_result","","Metadata about forked process",27,null],[3,"PtyMaster","","Representation of the Master device in a master/slave pty …",null,null],[5,"grantpt","","Grant access to a slave pseudoterminal (see <code>grantpt(3)</code>)",null,[[["ptymaster",3]],["result",6]]],[5,"posix_openpt","","Open a pseudoterminal device (see <code>posix_openpt(3)</code>)",null,[[["oflag",3]],[["ptymaster",3],["result",6]]]],[5,"ptsname","","Get the name of the slave pseudoterminal (see <code>ptsname(3)</code>)",null,[[["ptymaster",3]],[["string",3],["result",6]]]],[5,"ptsname_r","","Get the name of the slave pseudoterminal (see <code>ptsname(3)</code>)",null,[[["ptymaster",3]],[["string",3],["result",6]]]],[5,"unlockpt","","Unlock a pseudoterminal master/slave pseudoterminal pair …",null,[[["ptymaster",3]],["result",6]]],[5,"openpty","","Create a new pseudoterminal, returning the slave and …",null,[[["option",4],["into",8],["into",8],["option",4]],[["result",6],["openptyresult",3]]]],[5,"forkpty","","Create a new pseudoterminal, returning the master file …",null,[[["option",4],["into",8],["into",8],["option",4]],[["forkptyresult",3],["result",6]]]],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[6,"CloneCb","","",null,null],[3,"CpuSet","","CpuSet represent a bit-mask of CPUs. CpuSets are used by …",null,null],[5,"sched_setaffinity","","<code>sched_setaffinity</code> set a thread\'s CPU affinity mask (…",null,[[["pid",3],["cpuset",3]],["result",6]]],[5,"sched_getaffinity","","<code>sched_getaffinity</code> get a thread\'s CPU affinity mask (…",null,[[["pid",3]],[["cpuset",3],["result",6]]]],[5,"clone","","",null,[[["option",4],["clonecb",6],["cloneflags",3],["c_int",6]],[["result",6],["pid",3]]]],[5,"unshare","","",null,[[["cloneflags",3]],["result",6]]],[5,"setns","","",null,[[["cloneflags",3],["rawfd",6]],["result",6]]],[5,"sched_yield","","Explicitly yield the processor to other threads.",null,[[],["result",6]]],[0,"sys","nix","",null,null],[0,"aio","nix::sys","POSIX Asynchronous I/O",null,null],[4,"AioFsyncMode","nix::sys::aio","Mode for <code>AioCb::fsync</code>.  Controls whether only data or …",null,null],[13,"O_SYNC","","do it like <code>fsync</code>",28,null],[13,"O_DSYNC","","on supported operating systems only, do it like <code>fdatasync</code>",28,null],[4,"LioOpcode","","When used with <code>lio_listio</code>, determines whether a given …",null,null],[13,"LIO_NOP","","",29,null],[13,"LIO_WRITE","","",29,null],[13,"LIO_READ","","",29,null],[4,"LioMode","","Mode for <code>lio_listio</code>",null,null],[13,"LIO_WAIT","","Requests that <code>lio_listio</code> block until all requested …",30,null],[13,"LIO_NOWAIT","","Requests that <code>lio_listio</code> return immediately",30,null],[4,"AioCancelStat","","Return values for <code>AioCb::cancel</code> and <code>aio_cancel_all</code>",null,null],[13,"AioCanceled","","All outstanding requests were canceled",31,null],[13,"AioNotCanceled","","Some requests were not canceled.  Their status should be …",31,null],[13,"AioAllDone","","All of the requests have already finished",31,null],[4,"Buffer","","Owns (uniquely or shared) a memory buffer to keep it from …",null,null],[13,"None","","No buffer to own.",32,null],[13,"Phantom","","Keeps a reference to a slice",32,null],[13,"BoxedSlice","","Generic thing that keeps a buffer from dropping",32,null],[13,"BoxedMutSlice","","Generic thing that keeps a mutable buffer from dropping",32,null],[3,"AioCb","","AIO Control Block.",null,null],[11,"buffer","","Remove the inner <code>Buffer</code> and return it",33,[[],["buffer",4]]],[11,"boxed_slice","","Remove the inner boxed slice, if any, and return it.",33,[[],[["box",3],["option",4]]]],[11,"boxed_mut_slice","","Remove the inner boxed mutable slice, if any, and return …",33,[[],[["box",3],["option",4]]]],[11,"fd","","Returns the underlying file descriptor associated with …",33,[[],["rawfd",6]]],[11,"from_fd","","Constructs a new <code>AioCb</code> with no associated buffer.",33,[[["sigevnotify",4],["c_int",6],["rawfd",6]],["aiocb",3]]],[11,"from_mut_slice","","Constructs a new <code>AioCb</code> from a mutable slice.",33,[[["off_t",6],["lioopcode",4],["sigevnotify",4],["c_int",6],["rawfd",6]],["aiocb",3]]],[11,"from_boxed_slice","","The safest and most flexible way to create an <code>AioCb</code>.",33,[[["off_t",6],["borrow",8],["lioopcode",4],["sigevnotify",4],["box",3],["c_int",6],["rawfd",6]],["aiocb",3]]],[11,"from_boxed_mut_slice","","The safest and most flexible way to create an <code>AioCb</code> for …",33,[[["off_t",6],["lioopcode",4],["box",3],["borrowmut",8],["sigevnotify",4],["c_int",6],["rawfd",6]],["aiocb",3]]],[11,"from_mut_ptr","","Constructs a new <code>AioCb</code> from a mutable raw pointer",33,[[["off_t",6],["lioopcode",4],["sigevnotify",4],["c_int",6],["rawfd",6]],["aiocb",3]]],[11,"from_ptr","","Constructs a new <code>AioCb</code> from a raw pointer.",33,[[["off_t",6],["lioopcode",4],["sigevnotify",4],["c_int",6],["rawfd",6]],["aiocb",3]]],[11,"from_slice","","Like <code>from_mut_slice</code>, but works on constant slices rather …",33,[[["off_t",6],["lioopcode",4],["sigevnotify",4],["c_int",6],["rawfd",6]],["aiocb",3]]],[11,"set_sigev_notify","","Update the notification settings for an existing <code>aiocb</code>",33,[[["sigevnotify",4]]]],[11,"cancel","","Cancels an outstanding AIO request.",33,[[],[["aiocancelstat",4],["result",6]]]],[11,"error","","Retrieve error status of an asynchronous operation.",33,[[],["result",6]]],[11,"fsync","","An asynchronous version of <code>fsync(2)</code>.",33,[[["aiofsyncmode",4]],["result",6]]],[11,"lio_opcode","","Returns the <code>aiocb</code>\'s <code>LioOpcode</code> field",33,[[],[["lioopcode",4],["option",4]]]],[11,"nbytes","","Returns the requested length of the aio operation in bytes",33,[[]]],[11,"offset","","Returns the file offset stored in the <code>AioCb</code>",33,[[],["off_t",6]]],[11,"priority","","Returns the priority of the <code>AioCb</code>",33,[[],["c_int",6]]],[11,"read","","Asynchronously reads from a file descriptor into a buffer",33,[[],["result",6]]],[11,"sigevent","","Returns the <code>SigEvent</code> stored in the <code>AioCb</code>",33,[[],["sigevent",3]]],[11,"aio_return","","Retrieve return status of an asynchronous operation.",33,[[],["result",6]]],[11,"write","","Asynchronously writes from a buffer to a file descriptor",33,[[],["result",6]]],[5,"aio_cancel_all","","Cancels outstanding AIO requests for a given file …",null,[[["rawfd",6]],[["aiocancelstat",4],["result",6]]]],[5,"aio_suspend","","Suspends the calling process until at least one of the …",null,[[["option",4],["timespec",3]],["result",6]]],[3,"LioCb","","LIO Control Block.",null,null],[12,"aiocbs","","A collection of <code>AioCb</code>s.  All of these will be issued …",34,null],[11,"with_capacity","","Initialize an empty <code>LioCb</code>",34,[[],["liocb",3]]],[11,"listio","","Submits multiple asynchronous I/O requests with a single …",34,[[["sigevnotify",4],["liomode",4]],["result",6]]],[11,"listio_resubmit","","Resubmits any incomplete operations with <code>lio_listio</code>.",34,[[["sigevnotify",4],["liomode",4]],["result",6]]],[11,"aio_return","","Collect final status for an individual <code>AioCb</code> submitted as …",34,[[],["result",6]]],[11,"error","","Retrieve error status of an individual <code>AioCb</code> submitted as …",34,[[],["result",6]]],[0,"epoll","nix::sys","",null,null],[3,"EpollFlags","nix::sys::epoll","",null,null],[18,"EPOLLIN","","",35,null],[18,"EPOLLPRI","","",35,null],[18,"EPOLLOUT","","",35,null],[18,"EPOLLRDNORM","","",35,null],[18,"EPOLLRDBAND","","",35,null],[18,"EPOLLWRNORM","","",35,null],[18,"EPOLLWRBAND","","",35,null],[18,"EPOLLMSG","","",35,null],[18,"EPOLLERR","","",35,null],[18,"EPOLLHUP","","",35,null],[18,"EPOLLRDHUP","","",35,null],[18,"EPOLLEXCLUSIVE","","",35,null],[18,"EPOLLWAKEUP","","",35,null],[18,"EPOLLONESHOT","","",35,null],[18,"EPOLLET","","",35,null],[11,"empty","","Returns an empty set of flags",35,[[],["epollflags",3]]],[11,"all","","Returns the set containing all flags.",35,[[],["epollflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",35,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",35,[[["c_int",6]],[["epollflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",35,[[["c_int",6]],["epollflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",35,[[["c_int",6]],["epollflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",35,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",35,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",35,[[["epollflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",35,[[["epollflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",35,[[["epollflags",3]]]],[11,"remove","","Removes the specified flags in-place.",35,[[["epollflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",35,[[["epollflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",35,[[["epollflags",3]]]],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",36,null],[13,"EpollCtlDel","","",36,null],[13,"EpollCtlMod","","",36,null],[3,"EpollCreateFlags","","",null,null],[18,"EPOLL_CLOEXEC","","",37,null],[11,"empty","","Returns an empty set of flags",37,[[],["epollcreateflags",3]]],[11,"all","","Returns the set containing all flags.",37,[[],["epollcreateflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",37,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",37,[[["c_int",6]],[["option",4],["epollcreateflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",37,[[["c_int",6]],["epollcreateflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",37,[[["c_int",6]],["epollcreateflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",37,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",37,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",37,[[["epollcreateflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",37,[[["epollcreateflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",37,[[["epollcreateflags",3]]]],[11,"remove","","Removes the specified flags in-place.",37,[[["epollcreateflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",37,[[["epollcreateflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",37,[[["epollcreateflags",3]]]],[3,"EpollEvent","","",null,null],[11,"new","","",38,[[["epollflags",3]]]],[11,"empty","","",38,[[]]],[11,"events","","",38,[[],["epollflags",3]]],[11,"data","","",38,[[]]],[5,"epoll_create","","",null,[[],[["result",6],["rawfd",6]]]],[5,"epoll_create1","","",null,[[["epollcreateflags",3]],[["result",6],["rawfd",6]]]],[5,"epoll_ctl","","",null,[[["epollop",4],["rawfd",6]],["result",6]]],[5,"epoll_wait","","",null,[[["rawfd",6]],["result",6]]],[0,"eventfd","nix::sys","",null,null],[3,"EfdFlags","nix::sys::eventfd","",null,null],[18,"EFD_CLOEXEC","","",39,null],[18,"EFD_NONBLOCK","","",39,null],[18,"EFD_SEMAPHORE","","",39,null],[11,"empty","","Returns an empty set of flags",39,[[],["efdflags",3]]],[11,"all","","Returns the set containing all flags.",39,[[],["efdflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",39,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",39,[[["c_int",6]],[["efdflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",39,[[["c_int",6]],["efdflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",39,[[["c_int",6]],["efdflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",39,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",39,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",39,[[["efdflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",39,[[["efdflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",39,[[["efdflags",3]]]],[11,"remove","","Removes the specified flags in-place.",39,[[["efdflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",39,[[["efdflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",39,[[["efdflags",3]]]],[5,"eventfd","","",null,[[["efdflags",3],["c_uint",6]],[["result",6],["rawfd",6]]]],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls.",null,null],[0,"memfd","","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[18,"MFD_CLOEXEC","","",40,null],[18,"MFD_ALLOW_SEALING","","",40,null],[11,"empty","","Returns an empty set of flags",40,[[],["memfdcreateflag",3]]],[11,"all","","Returns the set containing all flags.",40,[[],["memfdcreateflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",40,[[],["c_uint",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",40,[[["c_uint",6]],[["memfdcreateflag",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",40,[[["c_uint",6]],["memfdcreateflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",40,[[["c_uint",6]],["memfdcreateflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",40,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",40,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",40,[[["memfdcreateflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",40,[[["memfdcreateflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",40,[[["memfdcreateflag",3]]]],[11,"remove","","Removes the specified flags in-place.",40,[[["memfdcreateflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",40,[[["memfdcreateflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",40,[[["memfdcreateflag",3]]]],[5,"memfd_create","","",null,[[["memfdcreateflag",3],["cstr",3]],[["result",6],["rawfd",6]]]],[0,"mman","nix::sys","",null,null],[3,"ProtFlags","nix::sys::mman","Desired memory protection of a memory mapping.",null,null],[18,"PROT_NONE","","Pages cannot be accessed.",41,null],[18,"PROT_READ","","Pages can be read.",41,null],[18,"PROT_WRITE","","Pages can be written.",41,null],[18,"PROT_EXEC","","Pages can be executed",41,null],[18,"PROT_GROWSDOWN","","Apply protection up to the end of a mapping that grows …",41,null],[18,"PROT_GROWSUP","","Apply protection down to the beginning of a mapping that …",41,null],[11,"empty","","Returns an empty set of flags",41,[[],["protflags",3]]],[11,"all","","Returns the set containing all flags.",41,[[],["protflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",41,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",41,[[["c_int",6]],[["protflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",41,[[["c_int",6]],["protflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",41,[[["c_int",6]],["protflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",41,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",41,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",41,[[["protflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",41,[[["protflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",41,[[["protflags",3]]]],[11,"remove","","Removes the specified flags in-place.",41,[[["protflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",41,[[["protflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",41,[[["protflags",3]]]],[3,"MapFlags","","Additional parameters for <code>mmap()</code>.",null,null],[18,"MAP_FILE","","Compatibility flag. Ignored.",42,null],[18,"MAP_SHARED","","Share this mapping. Mutually exclusive with <code>MAP_PRIVATE</code>.",42,null],[18,"MAP_PRIVATE","","Create a private copy-on-write mapping. Mutually …",42,null],[18,"MAP_FIXED","","Place the mapping at exactly the address specified in <code>addr</code>…",42,null],[18,"MAP_ANON","","Synonym for <code>MAP_ANONYMOUS</code>.",42,null],[18,"MAP_ANONYMOUS","","The mapping is not backed by any file.",42,null],[18,"MAP_32BIT","","Put the mapping into the first 2GB of the process address …",42,null],[18,"MAP_GROWSDOWN","","Used for stacks; indicates to the kernel that the mapping …",42,null],[18,"MAP_DENYWRITE","","Compatibility flag. Ignored.",42,null],[18,"MAP_EXECUTABLE","","Compatibility flag. Ignored.",42,null],[18,"MAP_LOCKED","","Mark the mmaped region to be locked in the same way as …",42,null],[18,"MAP_NORESERVE","","Do not reserve swap space for this mapping.",42,null],[18,"MAP_POPULATE","","Populate page tables for a mapping.",42,null],[18,"MAP_NONBLOCK","","Only meaningful when used with <code>MAP_POPULATE</code>. Don\'t …",42,null],[18,"MAP_HUGETLB","","Allocate the mapping using \\\"huge pages.\\\"",42,null],[18,"MAP_HUGE_64KB","","Make use of 64KB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_512KB","","Make use of 512KB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_1MB","","Make use of 1MB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_2MB","","Make use of 2MB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_8MB","","Make use of 8MB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_16MB","","Make use of 16MB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_32MB","","Make use of 32MB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_256MB","","Make use of 256MB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_512MB","","Make use of 512MB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_1GB","","Make use of 1GB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_2GB","","Make use of 2GB huge page (must be supported by the …",42,null],[18,"MAP_HUGE_16GB","","Make use of 16GB huge page (must be supported by the …",42,null],[18,"MAP_STACK","","Region grows down, like a stack.",42,null],[11,"empty","","Returns an empty set of flags",42,[[],["mapflags",3]]],[11,"all","","Returns the set containing all flags.",42,[[],["mapflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",42,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",42,[[["c_int",6]],[["option",4],["mapflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",42,[[["c_int",6]],["mapflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",42,[[["c_int",6]],["mapflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",42,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",42,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",42,[[["mapflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",42,[[["mapflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",42,[[["mapflags",3]]]],[11,"remove","","Removes the specified flags in-place.",42,[[["mapflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",42,[[["mapflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",42,[[["mapflags",3]]]],[3,"MRemapFlags","","Options for <code>mremap()</code>.",null,null],[18,"MREMAP_MAYMOVE","","Permit the kernel to relocate the mapping to a new …",43,null],[18,"MREMAP_FIXED","","Place the mapping at exactly the address specified in …",43,null],[11,"empty","","Returns an empty set of flags",43,[[],["mremapflags",3]]],[11,"all","","Returns the set containing all flags.",43,[[],["mremapflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",43,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",43,[[["c_int",6]],[["option",4],["mremapflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",43,[[["c_int",6]],["mremapflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",43,[[["c_int",6]],["mremapflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",43,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",43,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",43,[[["mremapflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",43,[[["mremapflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",43,[[["mremapflags",3]]]],[11,"remove","","Removes the specified flags in-place.",43,[[["mremapflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",43,[[["mremapflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",43,[[["mremapflags",3]]]],[4,"MmapAdvise","","Usage information for a range of memory to allow for …",null,null],[13,"MADV_NORMAL","","No further special treatment. This is the default.",44,null],[13,"MADV_RANDOM","","Expect random page references.",44,null],[13,"MADV_SEQUENTIAL","","Expect sequential page references.",44,null],[13,"MADV_WILLNEED","","Expect access in the near future.",44,null],[13,"MADV_DONTNEED","","Do not expect access in the near future.",44,null],[13,"MADV_REMOVE","","Free up a given range of pages and its associated backing …",44,null],[13,"MADV_DONTFORK","","Do not make pages in this range available to the child …",44,null],[13,"MADV_DOFORK","","Undo the effect of <code>MADV_DONTFORK</code>.",44,null],[13,"MADV_HWPOISON","","Poison the given pages.",44,null],[13,"MADV_MERGEABLE","","Enable Kernel Samepage Merging (KSM) for the given pages.",44,null],[13,"MADV_UNMERGEABLE","","Undo the effect of <code>MADV_MERGEABLE</code>",44,null],[13,"MADV_SOFT_OFFLINE","","Preserve the memory of each page but offline the original …",44,null],[13,"MADV_HUGEPAGE","","Enable Transparent Huge Pages (THP) for pages in the …",44,null],[13,"MADV_NOHUGEPAGE","","Undo the effect of <code>MADV_HUGEPAGE</code>.",44,null],[13,"MADV_DONTDUMP","","Exclude the given range from a core dump.",44,null],[13,"MADV_DODUMP","","Undo the effect of an earlier <code>MADV_DONTDUMP</code>.",44,null],[13,"MADV_FREE","","Specify that the application no longer needs the pages in …",44,null],[3,"MsFlags","","Configuration flags for <code>msync</code>.",null,null],[18,"MS_ASYNC","","Schedule an update but return immediately.",45,null],[18,"MS_INVALIDATE","","Invalidate all cached data.",45,null],[18,"MS_SYNC","","Perform an update and wait for it to complete.",45,null],[11,"empty","","Returns an empty set of flags",45,[[],["msflags",3]]],[11,"all","","Returns the set containing all flags.",45,[[],["msflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",45,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",45,[[["c_int",6]],[["option",4],["msflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",45,[[["c_int",6]],["msflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",45,[[["c_int",6]],["msflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",45,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",45,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",45,[[["msflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",45,[[["msflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",45,[[["msflags",3]]]],[11,"remove","","Removes the specified flags in-place.",45,[[["msflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",45,[[["msflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",45,[[["msflags",3]]]],[3,"MlockAllFlags","","Flags for <code>mlockall</code>.",null,null],[18,"MCL_CURRENT","","Lock pages that are currently mapped into the address …",46,null],[18,"MCL_FUTURE","","Lock pages which will become mapped into the address …",46,null],[11,"empty","","Returns an empty set of flags",46,[[],["mlockallflags",3]]],[11,"all","","Returns the set containing all flags.",46,[[],["mlockallflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",46,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",46,[[["c_int",6]],[["mlockallflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",46,[[["c_int",6]],["mlockallflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",46,[[["c_int",6]],["mlockallflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",46,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",46,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",46,[[["mlockallflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",46,[[["mlockallflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",46,[[["mlockallflags",3]]]],[11,"remove","","Removes the specified flags in-place.",46,[[["mlockallflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",46,[[["mlockallflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",46,[[["mlockallflags",3]]]],[5,"mlock","","Locks all memory pages that contain part of the address …",null,[[["size_t",6]],["result",6]]],[5,"munlock","","Unlocks all memory pages that contain part of the address …",null,[[["size_t",6]],["result",6]]],[5,"mlockall","","Locks all memory pages mapped into this process\' address …",null,[[["mlockallflags",3]],["result",6]]],[5,"munlockall","","Unlocks all memory pages mapped into this process\' …",null,[[],["result",6]]],[5,"mmap","","allocate memory, or map files or devices into memory",null,[[["off_t",6],["size_t",6],["protflags",3],["mapflags",3],["rawfd",6]],["result",6]]],[5,"mremap","","Expands (or shrinks) an existing memory mapping, …",null,[[["option",4],["mremapflags",3],["size_t",6]],["result",6]]],[5,"munmap","","remove a mapping",null,[[["size_t",6]],["result",6]]],[5,"madvise","","give advice about use of memory",null,[[["mmapadvise",4],["size_t",6]],["result",6]]],[5,"mprotect","","Set protection of memory mapping.",null,[[["protflags",3],["size_t",6]],["result",6]]],[5,"msync","","synchronize a mapped region",null,[[["msflags",3],["size_t",6]],["result",6]]],[5,"shm_open","","",null,[[["oflag",3],["mode",3]],[["result",6],["rawfd",6]]]],[5,"shm_unlink","","",null,[[],["result",6]]],[0,"personality","nix::sys","",null,null],[3,"Persona","nix::sys::personality","Flags used and returned by <code>get()</code> and <code>set()</code>.",null,null],[18,"ADDR_COMPAT_LAYOUT","","",47,null],[18,"ADDR_NO_RANDOMIZE","","",47,null],[18,"ADDR_LIMIT_32BIT","","",47,null],[18,"ADDR_LIMIT_3GB","","",47,null],[18,"FDPIC_FUNCPTRS","","",47,null],[18,"MMAP_PAGE_ZERO","","",47,null],[18,"READ_IMPLIES_EXEC","","",47,null],[18,"SHORT_INODE","","",47,null],[18,"STICKY_TIMEOUTS","","",47,null],[18,"UNAME26","","",47,null],[18,"WHOLE_SECONDS","","",47,null],[11,"empty","","Returns an empty set of flags",47,[[],["persona",3]]],[11,"all","","Returns the set containing all flags.",47,[[],["persona",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",47,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",47,[[["c_int",6]],[["option",4],["persona",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",47,[[["c_int",6]],["persona",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",47,[[["c_int",6]],["persona",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",47,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",47,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",47,[[["persona",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",47,[[["persona",3]]]],[11,"insert","","Inserts the specified flags in-place.",47,[[["persona",3]]]],[11,"remove","","Removes the specified flags in-place.",47,[[["persona",3]]]],[11,"toggle","","Toggles the specified flags in-place.",47,[[["persona",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",47,[[["persona",3]]]],[5,"get","","Retrieve the current process personality.",null,[[],[["result",6],["persona",3]]]],[5,"set","","Set the current process personality.",null,[[["persona",3]],[["result",6],["persona",3]]]],[0,"pthread","nix::sys","",null,null],[6,"Pthread","nix::sys::pthread","",null,null],[5,"pthread_self","","Obtain ID of the calling thread (see <code>pthread_self(3)</code>",null,[[],["pthread",6]]],[0,"ptrace","nix::sys","",null,null],[6,"AddressType","nix::sys::ptrace","",null,null],[4,"Request","","Ptrace Request enum defining the action to be taken.",null,null],[13,"PTRACE_TRACEME","","",48,null],[13,"PTRACE_PEEKTEXT","","",48,null],[13,"PTRACE_PEEKDATA","","",48,null],[13,"PTRACE_PEEKUSER","","",48,null],[13,"PTRACE_POKETEXT","","",48,null],[13,"PTRACE_POKEDATA","","",48,null],[13,"PTRACE_POKEUSER","","",48,null],[13,"PTRACE_CONT","","",48,null],[13,"PTRACE_KILL","","",48,null],[13,"PTRACE_SINGLESTEP","","",48,null],[13,"PTRACE_GETREGS","","",48,null],[13,"PTRACE_SETREGS","","",48,null],[13,"PTRACE_GETFPREGS","","",48,null],[13,"PTRACE_SETFPREGS","","",48,null],[13,"PTRACE_ATTACH","","",48,null],[13,"PTRACE_DETACH","","",48,null],[13,"PTRACE_GETFPXREGS","","",48,null],[13,"PTRACE_SETFPXREGS","","",48,null],[13,"PTRACE_SYSCALL","","",48,null],[13,"PTRACE_SETOPTIONS","","",48,null],[13,"PTRACE_GETEVENTMSG","","",48,null],[13,"PTRACE_GETSIGINFO","","",48,null],[13,"PTRACE_SETSIGINFO","","",48,null],[13,"PTRACE_GETREGSET","","",48,null],[13,"PTRACE_SETREGSET","","",48,null],[13,"PTRACE_SEIZE","","",48,null],[13,"PTRACE_INTERRUPT","","",48,null],[13,"PTRACE_LISTEN","","",48,null],[13,"PTRACE_PEEKSIGINFO","","",48,null],[13,"PTRACE_SYSEMU","","",48,null],[13,"PTRACE_SYSEMU_SINGLESTEP","","",48,null],[4,"Event","","Using the ptrace options the tracer can configure the …",null,null],[13,"PTRACE_EVENT_FORK","","Event that stops before a return from fork or clone.",49,null],[13,"PTRACE_EVENT_VFORK","","Event that stops before a return from vfork or clone.",49,null],[13,"PTRACE_EVENT_CLONE","","Event that stops before a return from clone.",49,null],[13,"PTRACE_EVENT_EXEC","","Event that stops before a return from execve.",49,null],[13,"PTRACE_EVENT_VFORK_DONE","","Event for a return from vfork.",49,null],[13,"PTRACE_EVENT_EXIT","","Event for a stop before an exit. Unlike the waitpid Exit …",49,null],[13,"PTRACE_EVENT_SECCOMP","","STop triggered by a seccomp rule on a tracee.",49,null],[3,"Options","","Ptrace options used in conjunction with the …",null,null],[5,"getregs","","Get user registers, as with <code>ptrace(PTRACE_GETREGS, ...)</code>",null,[[["pid",3]],[["user_regs_struct",3],["result",6]]]],[5,"setregs","","Set user registers, as with <code>ptrace(PTRACE_SETREGS, ...)</code>",null,[[["pid",3],["user_regs_struct",3]],["result",6]]],[5,"setoptions","","Set options, as with <code>ptrace(PTRACE_SETOPTIONS,...)</code>.",null,[[["pid",3],["options",3]],["result",6]]],[5,"getevent","","Gets a ptrace event as described by …",null,[[["pid",3]],[["result",6],["c_long",6]]]],[5,"getsiginfo","","Get siginfo as with <code>ptrace(PTRACE_GETSIGINFO,...)</code>",null,[[["pid",3]],[["siginfo_t",3],["result",6]]]],[5,"setsiginfo","","Set siginfo as with <code>ptrace(PTRACE_SETSIGINFO,...)</code>",null,[[["pid",3],["siginfo_t",3]],["result",6]]],[5,"traceme","","Sets the process as traceable, as with …",null,[[],["result",6]]],[5,"syscall","","Continue execution until the next syscall, as with …",null,[[["pid",3],["into",8],["option",4]],["result",6]]],[5,"sysemu","","Continue execution until the next syscall, as with …",null,[[["pid",3],["into",8],["option",4]],["result",6]]],[5,"attach","","Attach to a running process, as with …",null,[[["pid",3]],["result",6]]],[5,"seize","","Attach to a running process, as with …",null,[[["pid",3],["options",3]],["result",6]]],[5,"detach","","Detaches the current running process, as with …",null,[[["pid",3],["into",8],["option",4]],["result",6]]],[5,"cont","","Restart the stopped tracee process, as with …",null,[[["pid",3],["into",8],["option",4]],["result",6]]],[5,"kill","","Issues a kill request as with <code>ptrace(PTRACE_KILL, ...)</code>",null,[[["pid",3]],["result",6]]],[5,"step","","Move the stopped tracee process forward by a single step …",null,[[["pid",3],["into",8],["option",4]],["result",6]]],[5,"sysemu_step","","Move the stopped tracee process forward by a single step …",null,[[["pid",3],["into",8],["option",4]],["result",6]]],[5,"read","","Reads a word from a processes memory at the given address",null,[[["pid",3],["addresstype",6]],[["result",6],["c_long",6]]]],[5,"write","","Writes a word into the processes memory at the given …",null,[[["pid",3],["addresstype",6]],["result",6]]],[0,"quota","nix::sys","Set and configure disk quotas for users, groups, or …",null,null],[4,"QuotaType","nix::sys::quota","The scope of the quota.",null,null],[13,"USRQUOTA","","Specify a user quota",50,null],[13,"GRPQUOTA","","Specify a group quota",50,null],[4,"QuotaFmt","","The type of quota format to use.",null,null],[13,"QFMT_VFS_OLD","","Use the original quota format.",51,null],[13,"QFMT_VFS_V0","","Use the standard VFS v0 quota format.",51,null],[13,"QFMT_VFS_V1","","Use the VFS v1 quota format.",51,null],[3,"QuotaValidFlags","","Indicates the quota fields that are valid to read from.",null,null],[18,"QIF_BLIMITS","","The block hard & soft limit fields.",52,null],[18,"QIF_SPACE","","The current space field.",52,null],[18,"QIF_ILIMITS","","The inode hard & soft limit fields.",52,null],[18,"QIF_INODES","","The current inodes field.",52,null],[18,"QIF_BTIME","","The disk use time limit field.",52,null],[18,"QIF_ITIME","","The file quote time limit field.",52,null],[18,"QIF_LIMITS","","All block & inode limits.",52,null],[18,"QIF_USAGE","","The space & inodes usage fields.",52,null],[18,"QIF_TIMES","","The time limit fields.",52,null],[18,"QIF_ALL","","All fields.",52,null],[11,"empty","","Returns an empty set of flags",52,[[],["quotavalidflags",3]]],[11,"all","","Returns the set containing all flags.",52,[[],["quotavalidflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",52,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",52,[[],[["option",4],["quotavalidflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",52,[[],["quotavalidflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",52,[[],["quotavalidflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",52,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",52,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",52,[[["quotavalidflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",52,[[["quotavalidflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",52,[[["quotavalidflags",3]]]],[11,"remove","","Removes the specified flags in-place.",52,[[["quotavalidflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",52,[[["quotavalidflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",52,[[["quotavalidflags",3]]]],[3,"Dqblk","","Wrapper type for <code>if_dqblk</code>",null,null],[11,"blocks_hard_limit","","The absolute limit on disk quota blocks allocated.",53,[[],["option",4]]],[11,"set_blocks_hard_limit","","Set the absolute limit on disk quota blocks allocated.",53,[[]]],[11,"blocks_soft_limit","","Preferred limit on disk quota blocks",53,[[],["option",4]]],[11,"set_blocks_soft_limit","","Set the preferred limit on disk quota blocks allocated.",53,[[]]],[11,"occupied_space","","Current occupied space (bytes).",53,[[],["option",4]]],[11,"inodes_hard_limit","","Maximum number of allocated inodes.",53,[[],["option",4]]],[11,"set_inodes_hard_limit","","Set the maximum number of allocated inodes.",53,[[]]],[11,"inodes_soft_limit","","Preferred inode limit",53,[[],["option",4]]],[11,"set_inodes_soft_limit","","Set the preferred limit of allocated inodes.",53,[[]]],[11,"allocated_inodes","","Current number of allocated inodes.",53,[[],["option",4]]],[11,"block_time_limit","","Time limit for excessive disk use.",53,[[],["option",4]]],[11,"set_block_time_limit","","Set the time limit for excessive disk use.",53,[[]]],[11,"inode_time_limit","","Time limit for excessive files.",53,[[],["option",4]]],[11,"set_inode_time_limit","","Set the time limit for excessive files.",53,[[]]],[5,"quotactl_on","","Turn on disk quotas for a block device.",null,[[["quotafmt",4],["quotatype",4]],["result",6]]],[5,"quotactl_off","","Disable disk quotas for a block device.",null,[[["quotatype",4]],["result",6]]],[5,"quotactl_sync","","Update the on-disk copy of quota usages for a filesystem.",null,[[["option",4],["quotatype",4]],["result",6]]],[5,"quotactl_get","","Get disk quota limits and current usage for the given …",null,[[["quotatype",4],["c_int",6]],[["dqblk",3],["result",6]]]],[5,"quotactl_set","","Configure quota values for the specified fields for a …",null,[[["quotavalidflags",3],["quotatype",4],["c_int",6],["dqblk",3]],["result",6]]],[0,"reboot","nix::sys","Reboot/shutdown or enable/disable Ctrl-Alt-Delete.",null,null],[4,"RebootMode","nix::sys::reboot","How exactly should the system be rebooted.",null,null],[13,"RB_HALT_SYSTEM","","",54,null],[13,"RB_KEXEC","","",54,null],[13,"RB_POWER_OFF","","",54,null],[13,"RB_AUTOBOOT","","",54,null],[13,"RB_SW_SUSPEND","","",54,null],[5,"reboot","","",null,[[["rebootmode",4]],[["result",6],["infallible",4]]]],[5,"set_cad_enabled","","Enable or disable the reboot keystroke (Ctrl-Alt-Delete).",null,[[],["result",6]]],[0,"select","nix::sys","",null,null],[17,"FD_SETSIZE","nix::sys::select","",null,null],[3,"FdSet","","",null,null],[11,"new","","",55,[[],["fdset",3]]],[11,"insert","","",55,[[["rawfd",6]]]],[11,"remove","","",55,[[["rawfd",6]]]],[11,"contains","","",55,[[["rawfd",6]]]],[11,"clear","","",55,[[]]],[11,"highest","","Finds the highest file descriptor in the set.",55,[[],[["rawfd",6],["option",4]]]],[11,"fds","","Returns an iterator over the file descriptors in the set.",55,[[["option",4],["rawfd",6]],["fds",3]]],[3,"Fds","","Iterator over <code>FdSet</code>.",null,null],[5,"select","","Monitors file descriptors for readiness",null,[[],[["c_int",6],["result",6]]]],[5,"pselect","","Monitors file descriptors for readiness with an altered …",null,[[],[["c_int",6],["result",6]]]],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","Copy up to <code>count</code> bytes to <code>out_fd</code> from <code>in_fd</code> starting at …",null,[[["off_t",6],["option",4],["rawfd",6]],["result",6]]],[0,"signal","nix::sys","",null,null],[3,"SigEvent","nix::sys::signal","Used to request asynchronous notification of the …",null,null],[4,"Signal","","",null,null],[13,"SIGHUP","","",56,null],[13,"SIGINT","","",56,null],[13,"SIGQUIT","","",56,null],[13,"SIGILL","","",56,null],[13,"SIGTRAP","","",56,null],[13,"SIGABRT","","",56,null],[13,"SIGBUS","","",56,null],[13,"SIGFPE","","",56,null],[13,"SIGKILL","","",56,null],[13,"SIGUSR1","","",56,null],[13,"SIGSEGV","","",56,null],[13,"SIGUSR2","","",56,null],[13,"SIGPIPE","","",56,null],[13,"SIGALRM","","",56,null],[13,"SIGTERM","","",56,null],[13,"SIGSTKFLT","","",56,null],[13,"SIGCHLD","","",56,null],[13,"SIGCONT","","",56,null],[13,"SIGSTOP","","",56,null],[13,"SIGTSTP","","",56,null],[13,"SIGTTIN","","",56,null],[13,"SIGTTOU","","",56,null],[13,"SIGURG","","",56,null],[13,"SIGXCPU","","",56,null],[13,"SIGXFSZ","","",56,null],[13,"SIGVTALRM","","",56,null],[13,"SIGPROF","","",56,null],[13,"SIGWINCH","","",56,null],[13,"SIGIO","","",56,null],[13,"SIGPWR","","",56,null],[13,"SIGSYS","","",56,null],[11,"as_str","","Returns name of signal.",56,[[]]],[17,"NSIG","","",null,null],[3,"SignalIterator","","",null,null],[11,"iterator","","",56,[[],["signaliterator",3]]],[17,"SIGIOT","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGUNUSED","","",null,null],[3,"SaFlags","","",null,null],[18,"SA_NOCLDSTOP","","",57,null],[18,"SA_NOCLDWAIT","","",57,null],[18,"SA_NODEFER","","",57,null],[18,"SA_ONSTACK","","",57,null],[18,"SA_RESETHAND","","",57,null],[18,"SA_RESTART","","",57,null],[18,"SA_SIGINFO","","",57,null],[11,"empty","","Returns an empty set of flags",57,[[],["saflags",3]]],[11,"all","","Returns the set containing all flags.",57,[[],["saflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",57,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",57,[[["c_int",6]],[["saflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",57,[[["c_int",6]],["saflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",57,[[["c_int",6]],["saflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",57,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",57,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",57,[[["saflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",57,[[["saflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",57,[[["saflags",3]]]],[11,"remove","","Removes the specified flags in-place.",57,[[["saflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",57,[[["saflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",57,[[["saflags",3]]]],[4,"SigmaskHow","","",null,null],[13,"SIG_BLOCK","","",58,null],[13,"SIG_UNBLOCK","","",58,null],[13,"SIG_SETMASK","","",58,null],[3,"SigSet","","",null,null],[11,"all","","",59,[[],["sigset",3]]],[11,"empty","","",59,[[],["sigset",3]]],[11,"add","","",59,[[["signal",4]]]],[11,"clear","","",59,[[]]],[11,"remove","","",59,[[["signal",4]]]],[11,"contains","","",59,[[["signal",4]]]],[11,"extend","","",59,[[["sigset",3]]]],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for …",59,[[],[["result",6],["sigset",3]]]],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the …",59,[[],["result",6]]],[11,"thread_block","","Adds the set of signals to the signal mask for the …",59,[[],["result",6]]],[11,"thread_unblock","","Removes the set of signals from the signal mask for the …",59,[[],["result",6]]],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns …",59,[[["sigmaskhow",4]],[["result",6],["sigset",3]]]],[11,"wait","","Suspends execution of the calling thread until one of the …",59,[[],[["result",6],["signal",4]]]],[4,"SigHandler","","A signal handler.",null,null],[13,"SigDfl","","Default signal handling.",60,null],[13,"SigIgn","","Request that the signal be ignored.",60,null],[13,"Handler","","Use the given signal-catching function, which takes in …",60,null],[13,"SigAction","","Use the given signal-catching function, which takes in …",60,null],[3,"SigAction","","Action to take on receipt of a signal. Corresponds to …",null,null],[11,"new","","Creates a new action.",61,[[["sighandler",4],["saflags",3],["sigset",3]],["sigaction",3]]],[11,"flags","","Returns the flags set on the action.",61,[[],["saflags",3]]],[11,"mask","","Returns the set of signals that are blocked during …",61,[[],["sigset",3]]],[11,"handler","","Returns the action\'s handler.",61,[[],["sighandler",4]]],[5,"sigaction","","Changes the action taken by a process on receipt of a …",null,[[["sigaction",3],["signal",4]],[["result",6],["sigaction",3]]]],[5,"signal","","Signal management (see signal(3p))",null,[[["sighandler",4],["signal",4]],[["result",6],["sighandler",4]]]],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the …",null,[[["sigset",3],["option",4],["sigset",3],["option",4],["sigmaskhow",4]],["result",6]]],[5,"sigprocmask","","Examine and change blocked signals.",null,[[["sigset",3],["option",4],["sigset",3],["option",4],["sigmaskhow",4]],["result",6]]],[5,"kill","","",null,[[["pid",3],["into",8],["option",4]],["result",6]]],[5,"killpg","","Send a signal to a process group (see killpg(3)).",null,[[["pid",3],["into",8],["option",4]],["result",6]]],[5,"raise","","",null,[[["signal",4]],["result",6]]],[6,"type_of_thread_id","","",null,null],[4,"SigevNotify","","Used to request asynchronous notification of certain …",null,null],[13,"SigevNone","","No notification will be delivered",62,null],[13,"SigevSignal","","The signal given by <code>signal</code> will be delivered to the …",62,null],[12,"signal","nix::sys::signal::SigevNotify","",63,null],[12,"si_value","","",63,null],[13,"SigevThreadId","nix::sys::signal","The signal <code>signal</code> is queued to the thread whose LWP ID is …",62,null],[12,"signal","nix::sys::signal::SigevNotify","",64,null],[12,"thread_id","","",64,null],[12,"si_value","","",64,null],[0,"signalfd","nix::sys","Interface for the <code>signalfd</code> syscall.",null,null],[3,"siginfo","nix::sys::signalfd","",null,null],[12,"ssi_signo","","",65,null],[12,"ssi_errno","","",65,null],[12,"ssi_code","","",65,null],[12,"ssi_pid","","",65,null],[12,"ssi_uid","","",65,null],[12,"ssi_fd","","",65,null],[12,"ssi_tid","","",65,null],[12,"ssi_band","","",65,null],[12,"ssi_overrun","","",65,null],[12,"ssi_trapno","","",65,null],[12,"ssi_status","","",65,null],[12,"ssi_int","","",65,null],[12,"ssi_ptr","","",65,null],[12,"ssi_utime","","",65,null],[12,"ssi_stime","","",65,null],[12,"ssi_addr","","",65,null],[12,"ssi_addr_lsb","","",65,null],[12,"ssi_syscall","","",65,null],[12,"ssi_call_addr","","",65,null],[12,"ssi_arch","","",65,null],[3,"SfdFlags","","",null,null],[18,"SFD_NONBLOCK","","",66,null],[18,"SFD_CLOEXEC","","",66,null],[11,"empty","","Returns an empty set of flags",66,[[],["sfdflags",3]]],[11,"all","","Returns the set containing all flags.",66,[[],["sfdflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",66,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",66,[[["c_int",6]],[["option",4],["sfdflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",66,[[["c_int",6]],["sfdflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",66,[[["c_int",6]],["sfdflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",66,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",66,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",66,[[["sfdflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",66,[[["sfdflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",66,[[["sfdflags",3]]]],[11,"remove","","Removes the specified flags in-place.",66,[[["sfdflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",66,[[["sfdflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",66,[[["sfdflags",3]]]],[17,"SIGNALFD_NEW","","",null,null],[17,"SIGNALFD_SIGINFO_SIZE","","",null,null],[5,"signalfd","","Creates a new file descriptor for reading signals.",null,[[["sfdflags",3],["sigset",3],["rawfd",6]],[["result",6],["rawfd",6]]]],[3,"SignalFd","","A helper struct for creating, reading and closing a …",null,null],[11,"new","","",67,[[["sigset",3]],[["result",6],["signalfd",3]]]],[11,"with_flags","","",67,[[["sigset",3],["sfdflags",3]],[["result",6],["signalfd",3]]]],[11,"set_mask","","",67,[[["sigset",3]],["result",6]]],[11,"read_signal","","",67,[[],[["option",4],["result",6]]]],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"cmsghdr","nix::sys::socket","",null,null],[12,"cmsg_len","","",68,null],[12,"cmsg_level","","",68,null],[12,"cmsg_type","","",68,null],[3,"msghdr","","",null,null],[12,"msg_name","","",69,null],[12,"msg_namelen","","",69,null],[12,"msg_iov","","",69,null],[12,"msg_iovlen","","",69,null],[12,"msg_control","","",69,null],[12,"msg_controllen","","",69,null],[12,"msg_flags","","",69,null],[6,"sa_family_t","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",70,null],[12,"sa_data","","",70,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",71,null],[12,"sin_port","","",71,null],[12,"sin_addr","","",71,null],[12,"sin_zero","","",71,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",72,null],[12,"sin6_port","","",72,null],[12,"sin6_flowinfo","","",72,null],[12,"sin6_addr","","",72,null],[12,"sin6_scope_id","","",72,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",73,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",74,null],[12,"sun_path","","",74,null],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"TcpKeepCount","","",null,null],[3,"TcpKeepInterval","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[3,"BindToDevice","","",null,null],[3,"OriginalDst","","",null,null],[3,"ReceiveTimestamp","","",null,null],[3,"IpTransparent","","",null,null],[3,"Mark","","",null,null],[3,"PassCred","","",null,null],[3,"TcpCongestion","","",null,null],[3,"Ipv4PacketInfo","","",null,null],[3,"Ipv6RecvPacketInfo","","",null,null],[3,"UdpGsoSegment","","",null,null],[3,"UdpGroSegment","","",null,null],[3,"AlgSetAeadAuthSize","","",null,null],[3,"AlgSetKey","","",null,null],[4,"AddressFamily","nix::sys::socket","These constants specify the protocol family to be used in …",null,null],[13,"Unix","","Local communication (see <code>unix(7)</code>)",75,null],[13,"Inet","","IPv4 Internet protocols (see <code>ip(7)</code>)",75,null],[13,"Inet6","","IPv6 Internet protocols (see <code>ipv6(7)</code>)",75,null],[13,"Netlink","","Kernel user interface device (see <code>netlink(7)</code>)",75,null],[13,"Packet","","Low level packet interface (see <code>packet(7)</code>)",75,null],[13,"Ax25","","Amateur radio AX.25 protocol",75,null],[13,"Ipx","","IPX - Novell protocols",75,null],[13,"AppleTalk","","AppleTalk",75,null],[13,"NetRom","","",75,null],[13,"Bridge","","",75,null],[13,"AtmPvc","","Access to raw ATM PVCs",75,null],[13,"X25","","ITU-T X.25 / ISO-8208 protocol (see <code>x25(7)</code>)",75,null],[13,"Rose","","",75,null],[13,"Decnet","","",75,null],[13,"NetBeui","","",75,null],[13,"Security","","",75,null],[13,"Key","","",75,null],[13,"Ash","","",75,null],[13,"Econet","","",75,null],[13,"AtmSvc","","",75,null],[13,"Rds","","",75,null],[13,"Sna","","",75,null],[13,"Irda","","",75,null],[13,"Pppox","","",75,null],[13,"Wanpipe","","",75,null],[13,"Llc","","",75,null],[13,"Ib","","",75,null],[13,"Mpls","","",75,null],[13,"Can","","",75,null],[13,"Tipc","","",75,null],[13,"Bluetooth","","",75,null],[13,"Iucv","","",75,null],[13,"RxRpc","","",75,null],[13,"Isdn","","",75,null],[13,"Phonet","","",75,null],[13,"Ieee802154","","",75,null],[13,"Caif","","",75,null],[13,"Alg","","Interface to kernel crypto API",75,null],[13,"Nfc","","",75,null],[13,"Vsock","","",75,null],[13,"Unspec","","Unspecified address family, (see <code>getaddrinfo(3)</code>)",75,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",76,null],[13,"Unix","","",76,null],[13,"Netlink","","",76,null],[13,"Alg","","",76,null],[13,"Link","","Datalink address (MAC)",76,null],[13,"Vsock","","",76,null],[4,"InetAddr","","",null,null],[13,"V4","","",77,null],[13,"V6","","",77,null],[3,"UnixAddr","","A wrapper around <code>sockaddr_un</code>.",null,null],[12,"0","","",78,null],[12,"1","","",78,null],[4,"IpAddr","","",null,null],[13,"V4","","",79,null],[13,"V6","","",79,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",80,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",81,null],[3,"LinkAddr","","Hardware Address",null,null],[12,"0","","",82,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",83,null],[3,"AlgAddr","","",null,null],[12,"0","","",84,null],[3,"VsockAddr","","",null,null],[12,"0","","",85,null],[4,"SockType","","These constants are used to specify the communication …",null,null],[13,"Stream","","Provides sequenced, reliable, two-way, connection- based …",86,null],[13,"Datagram","","Supports datagrams (connectionless, unreliable messages …",86,null],[13,"SeqPacket","","Provides a sequenced, reliable, two-way connection- based …",86,null],[13,"Raw","","Provides raw network protocol access.",86,null],[13,"Rdm","","Provides a reliable datagram layer that does not …",86,null],[4,"SockProtocol","","Constants used in <code>socket</code> and <code>socketpair</code> to specify the …",null,null],[13,"Tcp","","TCP protocol (ip(7))",87,null],[13,"Udp","","UDP protocol (ip(7))",87,null],[13,"NetlinkRoute","","Receives routing and link updates and may be used to …",87,null],[13,"NetlinkUserSock","","Reserved for user-mode socket protocols (ref)",87,null],[13,"NetlinkSockDiag","","Query information about sockets of various protocol …",87,null],[13,"NetlinkSELinux","","SELinux event notifications. (ref)",87,null],[13,"NetlinkISCSI","","Open-iSCSI (ref)",87,null],[13,"NetlinkAudit","","Auditing (ref)",87,null],[13,"NetlinkFIBLookup","","Access to FIB lookup from user space (ref)",87,null],[13,"NetlinkNetFilter","","Netfilter subsystem (ref)",87,null],[13,"NetlinkSCSITransport","","SCSI Transports (ref)",87,null],[13,"NetlinkRDMA","","Infiniband RDMA (ref)",87,null],[13,"NetlinkIPv6Firewall","","Transport IPv6 packets from netfilter to user space.  …",87,null],[13,"NetlinkDECNetRoutingMessage","","DECnet routing messages (ref)",87,null],[13,"NetlinkKObjectUEvent","","Kernel messages to user space (ref)",87,null],[13,"NetlinkCrypto","","Netlink interface to request information about ciphers …",87,null],[3,"SockFlag","","Additional socket options",null,null],[18,"SOCK_NONBLOCK","","Set non-blocking mode on the new socket",88,null],[18,"SOCK_CLOEXEC","","Set close-on-exec on the new descriptor",88,null],[11,"empty","","Returns an empty set of flags",88,[[],["sockflag",3]]],[11,"all","","Returns the set containing all flags.",88,[[],["sockflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",88,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",88,[[["c_int",6]],[["option",4],["sockflag",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",88,[[["c_int",6]],["sockflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",88,[[["c_int",6]],["sockflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",88,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",88,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",88,[[["sockflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",88,[[["sockflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",88,[[["sockflag",3]]]],[11,"remove","","Removes the specified flags in-place.",88,[[["sockflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",88,[[["sockflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",88,[[["sockflag",3]]]],[3,"MsgFlags","","Flags for send/recv and their relatives",null,null],[18,"MSG_OOB","","Sends or requests out-of-band data on sockets that …",89,null],[18,"MSG_PEEK","","Peeks at an incoming message. The data is treated as …",89,null],[18,"MSG_WAITALL","","Receive operation blocks until the full amount of data …",89,null],[18,"MSG_DONTWAIT","","Enables nonblocking operation; if the operation would …",89,null],[18,"MSG_CTRUNC","","Receive flags: Control Data was discarded (buffer too …",89,null],[18,"MSG_TRUNC","","For raw (<code>Packet</code>), Internet datagram (since Linux …",89,null],[18,"MSG_EOR","","Terminates a record (when this notion is supported, as for…",89,null],[18,"MSG_ERRQUEUE","","This flag specifies that queued errors should be received …",89,null],[18,"MSG_CMSG_CLOEXEC","","Set the <code>close-on-exec</code> flag for the file descriptor …",89,null],[11,"empty","","Returns an empty set of flags",89,[[],["msgflags",3]]],[11,"all","","Returns the set containing all flags.",89,[[],["msgflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",89,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",89,[[["c_int",6]],[["msgflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",89,[[["c_int",6]],["msgflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",89,[[["c_int",6]],["msgflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",89,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",89,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",89,[[["msgflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",89,[[["msgflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",89,[[["msgflags",3]]]],[11,"remove","","Removes the specified flags in-place.",89,[[["msgflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",89,[[["msgflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",89,[[["msgflags",3]]]],[3,"UnixCredentials","","Unix credentials of the sending process.",null,null],[11,"new","","Creates a new instance with the credentials of the …",90,[[]]],[11,"pid","","Returns the process identifier",90,[[],["pid_t",6]]],[11,"uid","","Returns the user identifier",90,[[],["uid_t",6]]],[11,"gid","","Returns the group identifier",90,[[],["gid_t",6]]],[3,"IpMembershipRequest","","Request for multicast socket operations",null,null],[11,"new","","Instantiate a new <code>IpMembershipRequest</code>",91,[[["ipv4addr",3],["option",4]]]],[3,"Ipv6MembershipRequest","","Request for ipv6 multicast socket operations",null,null],[11,"new","","Instantiate a new <code>Ipv6MembershipRequest</code>",92,[[["ipv6addr",3]]]],[3,"RecvMsg","","",null,null],[12,"bytes","","",93,null],[12,"address","","",93,null],[12,"flags","","",93,null],[11,"cmsgs","","Iterate over the valid control messages pointed to by this…",93,[[],["cmsgiterator",3]]],[3,"CmsgIterator","","",null,null],[4,"ControlMessageOwned","","A type-safe wrapper around a single control message, as …",null,null],[13,"ScmRights","","Received version of [<code>ControlMessage::ScmRights</code>][…",94,null],[13,"ScmCredentials","","Received version of [<code>ControlMessage::ScmCredentials</code>][…",94,null],[13,"ScmTimestamp","","A message of type <code>SCM_TIMESTAMP</code>, containing the time the …",94,null],[13,"Ipv4PacketInfo","","",94,null],[13,"Ipv6PacketInfo","","",94,null],[13,"UdpGroSegments","","UDP Generic Receive Offload (GRO) allows receiving …",94,null],[4,"ControlMessage","","A type-safe zero-copy wrapper around a single control …",null,null],[13,"ScmRights","","A message of type <code>SCM_RIGHTS</code>, containing an array of file …",95,null],[13,"ScmCredentials","","A message of type <code>SCM_CREDENTIALS</code>, containing the pid, …",95,null],[13,"AlgSetIv","","Set IV for <code>AF_ALG</code> crypto API.",95,null],[13,"AlgSetOp","","Set crypto operation for <code>AF_ALG</code> crypto API. It may be one …",95,null],[13,"AlgSetAeadAssoclen","","Set the length of associated authentication data (AAD) …",95,null],[13,"UdpGsoSegments","","UDP GSO makes it possible for applications to generate …",95,null],[13,"Ipv4PacketInfo","","Configure the sending addressing and interface for v4",95,null],[13,"Ipv6PacketInfo","","Configure the sending addressing and interface for v6",95,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly …",null,[[["sockaddr",4],["option",4],["msgflags",3],["rawfd",6]],["result",6]]],[3,"SendMmsgData","","",null,null],[12,"iov","","",96,null],[12,"cmsgs","","",96,null],[12,"addr","","",96,null],[12,"_lt","","",96,null],[5,"sendmmsg","","An extension of <code>sendmsg</code> that allows the caller to …",null,[[["msgflags",3],["rawfd",6]],[["vec",3],["result",6]]]],[3,"RecvMmsgData","","",null,null],[12,"iov","","",97,null],[12,"cmsg_buffer","","",97,null],[5,"recvmmsg","","An extension of <code>recvmsg</code> that allows the caller to receive …",null,[[["rawfd",6],["option",4],["timespec",3],["msgflags",3]],[["result",6],["vec",3]]]],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, …",null,[[["vec",3],["option",4],["msgflags",3],["rawfd",6]],[["recvmsg",3],["result",6]]]],[5,"socket","","Create an endpoint for communication",null,[[["into",8],["option",4],["addressfamily",4],["sockflag",3],["socktype",4]],[["result",6],["rawfd",6]]]],[5,"socketpair","","Create a pair of connected sockets",null,[[["option",4],["sockflag",3],["addressfamily",4],["into",8],["socktype",4]],["result",6]]],[5,"listen","","Listen for connections on a socket",null,[[["rawfd",6]],["result",6]]],[5,"bind","","Bind a name to a socket",null,[[["sockaddr",4],["rawfd",6]],["result",6]]],[5,"accept","","Accept a connection on a socket",null,[[["rawfd",6]],[["result",6],["rawfd",6]]]],[5,"accept4","","Accept a connection on a socket",null,[[["sockflag",3],["rawfd",6]],[["result",6],["rawfd",6]]]],[5,"connect","","Initiate a connection on a socket",null,[[["sockaddr",4],["rawfd",6]],["result",6]]],[5,"recv","","Receive data from a connection-oriented socket. Returns …",null,[[["msgflags",3],["rawfd",6]],["result",6]]],[5,"recvfrom","","Receive data from a connectionless or connection-oriented …",null,[[["rawfd",6]],["result",6]]],[5,"sendto","","Send a message to a socket",null,[[["sockaddr",4],["msgflags",3],["rawfd",6]],["result",6]]],[5,"send","","Send data to a connection-oriented socket. Returns the …",null,[[["msgflags",3],["rawfd",6]],["result",6]]],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. …",null,null],[16,"Val","","",98,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. …",null,null],[16,"Val","","",99,null],[5,"getsockopt","","Get the current value for the requested socket option",null,[[["getsockopt",8],["rawfd",6]],["result",6]]],[5,"setsockopt","","Sets the value for the requested socket option",null,[[["setsockopt",8],["rawfd",6]],["result",6]]],[5,"getpeername","","Get the address of the peer connected to the socket <code>fd</code>.",null,[[["rawfd",6]],[["result",6],["sockaddr",4]]]],[5,"getsockname","","Get the current address to which the socket <code>fd</code> is bound.",null,[[["rawfd",6]],[["result",6],["sockaddr",4]]]],[5,"sockaddr_storage_to_addr","","Return the appropriate <code>SockAddr</code> type from a …",null,[[["sockaddr_storage",3]],[["result",6],["sockaddr",4]]]],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",100,null],[13,"Write","","Further  transmissions will be disallowed.",100,null],[13,"Both","","Further receptions and transmissions will be disallowed.",100,null],[5,"shutdown","","Shut down part of a full-duplex connection.",null,[[["shutdown",4],["rawfd",6]],["result",6]]],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[6,"mode_t","","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",101,null],[12,"st_ino","","",101,null],[12,"st_nlink","","",101,null],[12,"st_mode","","",101,null],[12,"st_uid","","",101,null],[12,"st_gid","","",101,null],[12,"st_rdev","","",101,null],[12,"st_size","","",101,null],[12,"st_blksize","","",101,null],[12,"st_blocks","","",101,null],[12,"st_atime","","",101,null],[12,"st_atime_nsec","","",101,null],[12,"st_mtime","","",101,null],[12,"st_mtime_nsec","","",101,null],[12,"st_ctime","","",101,null],[12,"st_ctime_nsec","","",101,null],[5,"FileStat","","",null,[[]]],[3,"SFlag","","",null,null],[18,"S_IFIFO","","",102,null],[18,"S_IFCHR","","",102,null],[18,"S_IFDIR","","",102,null],[18,"S_IFBLK","","",102,null],[18,"S_IFREG","","",102,null],[18,"S_IFLNK","","",102,null],[18,"S_IFSOCK","","",102,null],[18,"S_IFMT","","",102,null],[11,"empty","","Returns an empty set of flags",102,[[],["sflag",3]]],[11,"all","","Returns the set containing all flags.",102,[[],["sflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",102,[[],["mode_t",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",102,[[["mode_t",6]],[["sflag",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",102,[[["mode_t",6]],["sflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",102,[[["mode_t",6]],["sflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",102,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",102,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",102,[[["sflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",102,[[["sflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",102,[[["sflag",3]]]],[11,"remove","","Removes the specified flags in-place.",102,[[["sflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",102,[[["sflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",102,[[["sflag",3]]]],[3,"Mode","","",null,null],[18,"S_IRWXU","","",103,null],[18,"S_IRUSR","","",103,null],[18,"S_IWUSR","","",103,null],[18,"S_IXUSR","","",103,null],[18,"S_IRWXG","","",103,null],[18,"S_IRGRP","","",103,null],[18,"S_IWGRP","","",103,null],[18,"S_IXGRP","","",103,null],[18,"S_IRWXO","","",103,null],[18,"S_IROTH","","",103,null],[18,"S_IWOTH","","",103,null],[18,"S_IXOTH","","",103,null],[18,"S_ISUID","","",103,null],[18,"S_ISGID","","",103,null],[18,"S_ISVTX","","",103,null],[11,"empty","","Returns an empty set of flags",103,[[],["mode",3]]],[11,"all","","Returns the set containing all flags.",103,[[],["mode",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",103,[[],["mode_t",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",103,[[["mode_t",6]],[["option",4],["mode",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",103,[[["mode_t",6]],["mode",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",103,[[["mode_t",6]],["mode",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",103,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",103,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",103,[[["mode",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",103,[[["mode",3]]]],[11,"insert","","Inserts the specified flags in-place.",103,[[["mode",3]]]],[11,"remove","","Removes the specified flags in-place.",103,[[["mode",3]]]],[11,"toggle","","Toggles the specified flags in-place.",103,[[["mode",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",103,[[["mode",3]]]],[5,"mknod","","",null,[[["dev_t",6],["mode",3],["sflag",3]],["result",6]]],[5,"major","","",null,[[["dev_t",6]]]],[5,"minor","","",null,[[["dev_t",6]]]],[5,"makedev","","",null,[[],["dev_t",6]]],[5,"umask","","",null,[[["mode",3]],["mode",3]]],[5,"stat","","",null,[[],[["result",6],["filestat",3]]]],[5,"lstat","","",null,[[],[["result",6],["filestat",3]]]],[5,"fstat","","",null,[[["rawfd",6]],[["result",6],["filestat",3]]]],[5,"fstatat","","",null,[[["atflags",3],["rawfd",6]],[["result",6],["filestat",3]]]],[5,"fchmod","","Change the file permission bits of the file specified by …",null,[[["mode",3],["rawfd",6]],["result",6]]],[4,"FchmodatFlags","","Flags for <code>fchmodat</code> function.",null,null],[13,"FollowSymlink","","",104,null],[13,"NoFollowSymlink","","",104,null],[5,"fchmodat","","Change the file permission bits.",null,[[["rawfd",6],["mode",3],["fchmodatflags",4],["option",4]],["result",6]]],[5,"utimes","","Change the access and modification times of a file.",null,[[["timeval",3]],["result",6]]],[5,"lutimes","","Change the access and modification times of a file …",null,[[["timeval",3]],["result",6]]],[5,"futimens","","Change the access and modification times of the file …",null,[[["timespec",3],["rawfd",6]],["result",6]]],[4,"UtimensatFlags","","Flags for <code>utimensat</code> function.",null,null],[13,"FollowSymlink","","",105,null],[13,"NoFollowSymlink","","",105,null],[5,"utimensat","","Change the access and modification times of a file.",null,[[["timespec",3],["rawfd",6],["utimensatflags",4],["option",4]],["result",6]]],[5,"mkdirat","","",null,[[["mode",3],["rawfd",6]],["result",6]]],[0,"statfs","nix::sys","",null,null],[6,"fsid_t","nix::sys::statfs","",null,null],[3,"Statfs","","",null,null],[3,"FsType","","",null,null],[12,"0","","",106,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"OVERLAYFS_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"CGROUP_SUPER_MAGIC","","",null,null],[17,"CGROUP2_SUPER_MAGIC","","",null,null],[11,"filesystem_type","","Magic code defining system type",107,[[],["fstype",3]]],[11,"optimal_transfer_size","","Optimal transfer block size",107,[[],["__fsword_t",6]]],[11,"block_size","","Size of a block",107,[[],["__fsword_t",6]]],[11,"maximum_name_length","","Maximum length of filenames",107,[[],["__fsword_t",6]]],[11,"blocks","","Total data blocks in filesystem",107,[[],["c_ulong",6]]],[11,"blocks_free","","Free blocks in filesystem",107,[[],["c_ulong",6]]],[11,"blocks_available","","Free blocks available to unprivileged user",107,[[],["c_ulong",6]]],[11,"files","","Total file nodes in filesystem",107,[[],["c_ulong",6]]],[11,"files_free","","Free file nodes in filesystem",107,[[],["c_ulong",6]]],[11,"filesystem_id","","Filesystem ID",107,[[],["fsid_t",6]]],[5,"statfs","","",null,[[],[["result",6],["statfs",3]]]],[5,"fstatfs","","",null,[[],[["result",6],["statfs",3]]]],[0,"statvfs","nix::sys","Get filesystem statistics",null,null],[3,"FsFlags","nix::sys::statvfs","File system mount Flags",null,null],[18,"ST_RDONLY","","Read Only",108,null],[18,"ST_NOSUID","","Do not allow the set-uid bits to have an effect",108,null],[18,"ST_NODEV","","Do not interpret character or block-special devices",108,null],[18,"ST_NOEXEC","","Do not allow execution of binaries on the filesystem",108,null],[18,"ST_SYNCHRONOUS","","All IO should be done synchronously",108,null],[18,"ST_MANDLOCK","","Allow mandatory locks on the filesystem",108,null],[18,"ST_WRITE","","Write on file/directory/symlink",108,null],[18,"ST_APPEND","","Append-only file",108,null],[18,"ST_IMMUTABLE","","Immutable file",108,null],[18,"ST_NOATIME","","Do not update access times on files",108,null],[18,"ST_NODIRATIME","","Do not update access times on files",108,null],[18,"ST_RELATIME","","Update access time relative to modify/change time",108,null],[11,"empty","","Returns an empty set of flags",108,[[],["fsflags",3]]],[11,"all","","Returns the set containing all flags.",108,[[],["fsflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",108,[[],["c_ulong",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",108,[[["c_ulong",6]],[["option",4],["fsflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",108,[[["c_ulong",6]],["fsflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",108,[[["c_ulong",6]],["fsflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",108,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",108,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",108,[[["fsflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",108,[[["fsflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",108,[[["fsflags",3]]]],[11,"remove","","Removes the specified flags in-place.",108,[[["fsflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",108,[[["fsflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",108,[[["fsflags",3]]]],[3,"Statvfs","","Wrapper around the POSIX <code>statvfs</code> struct",null,null],[11,"block_size","","get the file system block size",109,[[],["c_ulong",6]]],[11,"fragment_size","","Get the fundamental file system block size",109,[[],["c_ulong",6]]],[11,"blocks","","Get the number of blocks.",109,[[],["fsblkcnt_t",6]]],[11,"blocks_free","","Get the number of free blocks in the file system",109,[[],["fsblkcnt_t",6]]],[11,"blocks_available","","Get the number of free blocks for unprivileged users",109,[[],["fsblkcnt_t",6]]],[11,"files","","Get the total number of file inodes",109,[[],["fsfilcnt_t",6]]],[11,"files_free","","Get the number of free file inodes",109,[[],["fsfilcnt_t",6]]],[11,"files_available","","Get the number of free file inodes for unprivileged users",109,[[],["fsfilcnt_t",6]]],[11,"filesystem_id","","Get the file system id",109,[[],["c_ulong",6]]],[11,"flags","","Get the mount flags",109,[[],["fsflags",3]]],[11,"name_max","","Get the maximum filename length",109,[[],["c_ulong",6]]],[5,"statvfs","","Return a <code>Statvfs</code> object with information about the <code>path</code>",null,[[],[["statvfs",3],["result",6]]]],[5,"fstatvfs","","Return a <code>Statvfs</code> object with information about <code>fd</code>",null,[[],[["statvfs",3],["result",6]]]],[0,"sysinfo","nix::sys","",null,null],[3,"SysInfo","nix::sys::sysinfo","System info structure returned by <code>sysinfo</code>.",null,null],[11,"load_average","","Returns the load average tuple.",110,[[]]],[11,"uptime","","Returns the time since system boot.",110,[[],["duration",3]]],[11,"process_count","","Current number of processes.",110,[[]]],[11,"swap_total","","Returns the amount of swap memory in Bytes.",110,[[]]],[11,"swap_free","","Returns the amount of unused swap memory in Bytes.",110,[[]]],[11,"ram_total","","Returns the total amount of installed RAM in Bytes.",110,[[]]],[11,"ram_unused","","Returns the amount of completely unused RAM in Bytes.",110,[[]]],[5,"sysinfo","","Returns system information.",null,[[],[["result",6],["sysinfo",3]]]],[0,"termios","nix::sys","An interface for controlling asynchronous communication …",null,null],[17,"NCCS","nix::sys::termios","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[3,"Termios","","Stores settings for the termios API",null,null],[12,"input_flags","","Input mode flags (see <code>termios.c_iflag</code> documentation)",111,null],[12,"output_flags","","Output mode flags (see <code>termios.c_oflag</code> documentation)",111,null],[12,"control_flags","","Control mode flags (see <code>termios.c_cflag</code> documentation)",111,null],[12,"local_flags","","Local mode flags (see <code>termios.c_lflag</code> documentation)",111,null],[12,"control_chars","","Control characters (see <code>termios.c_cc</code> documentation)",111,null],[4,"BaudRate","","Baud rates supported by the system.",null,null],[13,"B0","","",112,null],[13,"B50","","",112,null],[13,"B75","","",112,null],[13,"B110","","",112,null],[13,"B134","","",112,null],[13,"B150","","",112,null],[13,"B200","","",112,null],[13,"B300","","",112,null],[13,"B600","","",112,null],[13,"B1200","","",112,null],[13,"B1800","","",112,null],[13,"B2400","","",112,null],[13,"B4800","","",112,null],[13,"B9600","","",112,null],[13,"B19200","","",112,null],[13,"B38400","","",112,null],[13,"B57600","","",112,null],[13,"B115200","","",112,null],[13,"B230400","","",112,null],[13,"B460800","","",112,null],[13,"B500000","","",112,null],[13,"B576000","","",112,null],[13,"B921600","","",112,null],[13,"B1000000","","",112,null],[13,"B1152000","","",112,null],[13,"B1500000","","",112,null],[13,"B2000000","","",112,null],[13,"B2500000","","",112,null],[13,"B3000000","","",112,null],[13,"B3500000","","",112,null],[13,"B4000000","","",112,null],[4,"SetArg","","Specify when a port configuration change should occur.",null,null],[13,"TCSANOW","","The change will occur immediately",113,null],[13,"TCSADRAIN","","The change occurs after all output has been written",113,null],[13,"TCSAFLUSH","","Same as <code>TCSADRAIN</code>, but will also flush the input buffer",113,null],[4,"FlushArg","","Specify a combination of the input and output buffers to …",null,null],[13,"TCIFLUSH","","Flush data that was received but not read",114,null],[13,"TCOFLUSH","","Flush data written but not transmitted",114,null],[13,"TCIOFLUSH","","Flush both received data not read and written data not …",114,null],[4,"FlowArg","","Specify how transmission flow should be altered",null,null],[13,"TCOOFF","","Suspend transmission",115,null],[13,"TCOON","","Resume transmission",115,null],[13,"TCIOFF","","Transmit a STOP character, which should disable a …",115,null],[13,"TCION","","Transmit a START character, which should re-enable a …",115,null],[4,"SpecialCharacterIndices","","Indices into the <code>termios.c_cc</code> array for special …",null,null],[13,"VDISCARD","","",116,null],[13,"VEOF","","",116,null],[13,"VEOL","","",116,null],[13,"VEOL2","","",116,null],[13,"VERASE","","",116,null],[13,"VINTR","","",116,null],[13,"VKILL","","",116,null],[13,"VLNEXT","","",116,null],[13,"VMIN","","",116,null],[13,"VQUIT","","",116,null],[13,"VREPRINT","","",116,null],[13,"VSTART","","",116,null],[13,"VSTOP","","",116,null],[13,"VSUSP","","",116,null],[13,"VSWTC","","",116,null],[13,"VTIME","","",116,null],[13,"VWERASE","","",116,null],[3,"InputFlags","","Flags for configuring the input mode of a terminal",null,null],[18,"IGNBRK","","",117,null],[18,"BRKINT","","",117,null],[18,"IGNPAR","","",117,null],[18,"PARMRK","","",117,null],[18,"INPCK","","",117,null],[18,"ISTRIP","","",117,null],[18,"INLCR","","",117,null],[18,"IGNCR","","",117,null],[18,"ICRNL","","",117,null],[18,"IXON","","",117,null],[18,"IXOFF","","",117,null],[18,"IXANY","","",117,null],[18,"IMAXBEL","","",117,null],[18,"IUTF8","","",117,null],[11,"empty","","Returns an empty set of flags",117,[[],["inputflags",3]]],[11,"all","","Returns the set containing all flags.",117,[[],["inputflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",117,[[],["tcflag_t",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",117,[[["tcflag_t",6]],[["option",4],["inputflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",117,[[["tcflag_t",6]],["inputflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",117,[[["tcflag_t",6]],["inputflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",117,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",117,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",117,[[["inputflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",117,[[["inputflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",117,[[["inputflags",3]]]],[11,"remove","","Removes the specified flags in-place.",117,[[["inputflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",117,[[["inputflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",117,[[["inputflags",3]]]],[3,"OutputFlags","","Flags for configuring the output mode of a terminal",null,null],[18,"OPOST","","",118,null],[18,"OLCUC","","",118,null],[18,"ONLCR","","",118,null],[18,"OCRNL","","",118,null],[18,"ONOCR","","",118,null],[18,"ONLRET","","",118,null],[18,"OFILL","","",118,null],[18,"OFDEL","","",118,null],[18,"NL0","","",118,null],[18,"NL1","","",118,null],[18,"CR0","","",118,null],[18,"CR1","","",118,null],[18,"CR2","","",118,null],[18,"CR3","","",118,null],[18,"TAB0","","",118,null],[18,"TAB1","","",118,null],[18,"TAB2","","",118,null],[18,"TAB3","","",118,null],[18,"XTABS","","",118,null],[18,"BS0","","",118,null],[18,"BS1","","",118,null],[18,"VT0","","",118,null],[18,"VT1","","",118,null],[18,"FF0","","",118,null],[18,"FF1","","",118,null],[18,"NLDLY","","",118,null],[18,"CRDLY","","",118,null],[18,"TABDLY","","",118,null],[18,"BSDLY","","",118,null],[18,"VTDLY","","",118,null],[18,"FFDLY","","",118,null],[11,"empty","","Returns an empty set of flags",118,[[],["outputflags",3]]],[11,"all","","Returns the set containing all flags.",118,[[],["outputflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",118,[[],["tcflag_t",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",118,[[["tcflag_t",6]],[["option",4],["outputflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",118,[[["tcflag_t",6]],["outputflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",118,[[["tcflag_t",6]],["outputflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",118,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",118,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",118,[[["outputflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",118,[[["outputflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",118,[[["outputflags",3]]]],[11,"remove","","Removes the specified flags in-place.",118,[[["outputflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",118,[[["outputflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",118,[[["outputflags",3]]]],[3,"ControlFlags","","Flags for setting the control mode of a terminal",null,null],[18,"CS5","","",119,null],[18,"CS6","","",119,null],[18,"CS7","","",119,null],[18,"CS8","","",119,null],[18,"CSTOPB","","",119,null],[18,"CREAD","","",119,null],[18,"PARENB","","",119,null],[18,"PARODD","","",119,null],[18,"HUPCL","","",119,null],[18,"CLOCAL","","",119,null],[18,"CRTSCTS","","",119,null],[18,"CBAUD","","",119,null],[18,"CMSPAR","","",119,null],[18,"CIBAUD","","",119,null],[18,"CBAUDEX","","",119,null],[18,"CSIZE","","",119,null],[11,"empty","","Returns an empty set of flags",119,[[],["controlflags",3]]],[11,"all","","Returns the set containing all flags.",119,[[],["controlflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",119,[[],["tcflag_t",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",119,[[["tcflag_t",6]],[["controlflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",119,[[["tcflag_t",6]],["controlflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",119,[[["tcflag_t",6]],["controlflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",119,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",119,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",119,[[["controlflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",119,[[["controlflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",119,[[["controlflags",3]]]],[11,"remove","","Removes the specified flags in-place.",119,[[["controlflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",119,[[["controlflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",119,[[["controlflags",3]]]],[3,"LocalFlags","","Flags for setting any local modes",null,null],[18,"ECHOKE","","",120,null],[18,"ECHOE","","",120,null],[18,"ECHOK","","",120,null],[18,"ECHO","","",120,null],[18,"ECHONL","","",120,null],[18,"ECHOPRT","","",120,null],[18,"ECHOCTL","","",120,null],[18,"ISIG","","",120,null],[18,"ICANON","","",120,null],[18,"IEXTEN","","",120,null],[18,"EXTPROC","","",120,null],[18,"TOSTOP","","",120,null],[18,"FLUSHO","","",120,null],[18,"PENDIN","","",120,null],[18,"NOFLSH","","",120,null],[11,"empty","","Returns an empty set of flags",120,[[],["localflags",3]]],[11,"all","","Returns the set containing all flags.",120,[[],["localflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",120,[[],["tcflag_t",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",120,[[["tcflag_t",6]],[["option",4],["localflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",120,[[["tcflag_t",6]],["localflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",120,[[["tcflag_t",6]],["localflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",120,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",120,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",120,[[["localflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",120,[[["localflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",120,[[["localflags",3]]]],[11,"remove","","Removes the specified flags in-place.",120,[[["localflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",120,[[["localflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",120,[[["localflags",3]]]],[5,"cfgetispeed","","Get input baud rate (see cfgetispeed(3p)).",null,[[["termios",3]],["baudrate",4]]],[5,"cfgetospeed","","Get output baud rate (see cfgetospeed(3p)).",null,[[["termios",3]],["baudrate",4]]],[5,"cfsetispeed","","Set input baud rate (see cfsetispeed(3p)).",null,[[["termios",3],["baudrate",4]],["result",6]]],[5,"cfsetospeed","","Set output baud rate (see cfsetospeed(3p)).",null,[[["termios",3],["baudrate",4]],["result",6]]],[5,"cfsetspeed","","Set both the input and output baud rates (see termios(3)).",null,[[["termios",3],["baudrate",4]],["result",6]]],[5,"cfmakeraw","","Configures the port to something like the \\\"raw\\\" mode of …",null,[[["termios",3]]]],[5,"tcgetattr","","Return the configuration of a port tcgetattr(3p)).",null,[[["rawfd",6]],[["result",6],["termios",3]]]],[5,"tcsetattr","","Set the configuration for a terminal (see tcsetattr(3p)).",null,[[["setarg",4],["termios",3],["rawfd",6]],["result",6]]],[5,"tcdrain","","Block until all output data is written (see tcdrain(3p)).",null,[[["rawfd",6]],["result",6]]],[5,"tcflow","","Suspend or resume the transmission or reception of data …",null,[[["flowarg",4],["rawfd",6]],["result",6]]],[5,"tcflush","","Discard data in the output or input queue (see tcflush(3p)…",null,[[["flusharg",4],["rawfd",6]],["result",6]]],[5,"tcsendbreak","","Send a break for a specific duration (see tcsendbreak(3p)…",null,[[["c_int",6],["rawfd",6]],["result",6]]],[5,"tcgetsid","","Get the session controlled by the given terminal (see …",null,[[["rawfd",6]],[["result",6],["pid",3]]]],[0,"time","nix::sys","",null,null],[6,"time_t","nix::sys::time","",null,null],[6,"suseconds_t","","",null,null],[8,"TimeValLike","","",null,null],[11,"zero","","",121,[[]]],[11,"hours","","",121,[[]]],[11,"minutes","","",121,[[]]],[10,"seconds","","",121,[[]]],[10,"milliseconds","","",121,[[]]],[10,"microseconds","","",121,[[]]],[10,"nanoseconds","","",121,[[]]],[11,"num_hours","","",121,[[]]],[11,"num_minutes","","",121,[[]]],[10,"num_seconds","","",121,[[]]],[10,"num_milliseconds","","",121,[[]]],[10,"num_microseconds","","",121,[[]]],[10,"num_nanoseconds","","",121,[[]]],[3,"TimeSpec","","",null,null],[11,"tv_sec","","",122,[[],["time_t",6]]],[11,"tv_nsec","","",122,[[],["c_long",6]]],[3,"TimeVal","","",null,null],[11,"tv_sec","","",123,[[],["time_t",6]]],[11,"tv_usec","","",123,[[],["suseconds_t",6]]],[0,"uio","nix::sys","",null,null],[5,"writev","nix::sys::uio","",null,[[["rawfd",6]],["result",6]]],[5,"readv","","",null,[[["rawfd",6]],["result",6]]],[5,"pwritev","","Write to <code>fd</code> at <code>offset</code> from buffers in <code>iov</code>.",null,[[["off_t",6],["rawfd",6]],["result",6]]],[5,"preadv","","Read from <code>fd</code> at <code>offset</code> filling buffers in <code>iov</code>.",null,[[["off_t",6],["rawfd",6]],["result",6]]],[5,"pwrite","","",null,[[["off_t",6],["rawfd",6]],["result",6]]],[5,"pread","","",null,[[["off_t",6],["rawfd",6]],["result",6]]],[3,"RemoteIoVec","","A slice of memory in a remote process, starting at …",null,null],[12,"base","","The starting address of this slice (<code>iov_base</code>).",124,null],[12,"len","","The number of bytes in this slice (<code>iov_len</code>).",124,null],[5,"process_vm_writev","","Write data directly to another process\'s virtual memory …",null,[[["pid",3]],["result",6]]],[5,"process_vm_readv","","Read data directly from another process\'s virtual memory …",null,[[["pid",3]],["result",6]]],[3,"IoVec","","",null,null],[11,"as_slice","","",125,[[]]],[11,"from_slice","","",125,[[],["iovec",3]]],[11,"from_mut_slice","","",125,[[],["iovec",3]]],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[11,"sysname","","",126,[[]]],[11,"nodename","","",126,[[]]],[11,"release","","",126,[[]]],[11,"version","","",126,[[]]],[11,"machine","","",126,[[]]],[5,"uname","","",null,[[],["utsname",3]]],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[18,"WNOHANG","","",127,null],[18,"WUNTRACED","","",127,null],[18,"WEXITED","","",127,null],[18,"WCONTINUED","","",127,null],[18,"WSTOPPED","","",127,null],[18,"WNOWAIT","","Don\'t reap, just poll status.",127,null],[18,"__WNOTHREAD","","Don\'t wait on children of other threads in this group",127,null],[18,"__WALL","","Wait on all children, regardless of type",127,null],[18,"__WCLONE","","",127,null],[11,"empty","","Returns an empty set of flags",127,[[],["waitpidflag",3]]],[11,"all","","Returns the set containing all flags.",127,[[],["waitpidflag",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",127,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",127,[[["c_int",6]],[["waitpidflag",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",127,[[["c_int",6]],["waitpidflag",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",127,[[["c_int",6]],["waitpidflag",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",127,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",127,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",127,[[["waitpidflag",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",127,[[["waitpidflag",3]]]],[11,"insert","","Inserts the specified flags in-place.",127,[[["waitpidflag",3]]]],[11,"remove","","Removes the specified flags in-place.",127,[[["waitpidflag",3]]]],[11,"toggle","","Toggles the specified flags in-place.",127,[[["waitpidflag",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",127,[[["waitpidflag",3]]]],[4,"WaitStatus","","Possible return values from <code>wait()</code> or <code>waitpid()</code>.",null,null],[13,"Exited","","The process exited normally (as with <code>exit()</code> or returning …",128,null],[13,"Signaled","","The process was killed by the given signal. The third …",128,null],[13,"Stopped","","The process is alive, but was stopped by the given …",128,null],[13,"PtraceEvent","","The traced process was stopped by a <code>PTRACE_EVENT_*</code> event. …",128,null],[13,"PtraceSyscall","","The traced process was stopped by execution of a system …",128,null],[13,"Continued","","The process was previously stopped but has resumed …",128,null],[13,"StillAlive","","There are currently no state changes to report in any …",128,null],[11,"pid","","Extracts the PID from the WaitStatus unless it equals …",128,[[],[["pid",3],["option",4]]]],[11,"from_raw","","Convert a raw <code>wstatus</code> as returned by <code>waitpid</code>/<code>wait</code> into a …",128,[[["pid",3]],[["result",6],["waitstatus",4]]]],[5,"waitpid","","",null,[[["option",4],["into",8],["waitpidflag",3],["option",4]],[["result",6],["waitstatus",4]]]],[5,"wait","","",null,[[],[["result",6],["waitstatus",4]]]],[0,"inotify","nix::sys","Monitoring API for filesystem events.",null,null],[3,"AddWatchFlags","nix::sys::inotify","Configuration options for <code>inotify_add_watch</code>.",null,null],[18,"IN_ACCESS","","",129,null],[18,"IN_MODIFY","","",129,null],[18,"IN_ATTRIB","","",129,null],[18,"IN_CLOSE_WRITE","","",129,null],[18,"IN_CLOSE_NOWRITE","","",129,null],[18,"IN_OPEN","","",129,null],[18,"IN_MOVED_FROM","","",129,null],[18,"IN_MOVED_TO","","",129,null],[18,"IN_CREATE","","",129,null],[18,"IN_DELETE","","",129,null],[18,"IN_DELETE_SELF","","",129,null],[18,"IN_MOVE_SELF","","",129,null],[18,"IN_UNMOUNT","","",129,null],[18,"IN_Q_OVERFLOW","","",129,null],[18,"IN_IGNORED","","",129,null],[18,"IN_CLOSE","","",129,null],[18,"IN_MOVE","","",129,null],[18,"IN_ONLYDIR","","",129,null],[18,"IN_DONT_FOLLOW","","",129,null],[18,"IN_ISDIR","","",129,null],[18,"IN_ONESHOT","","",129,null],[18,"IN_ALL_EVENTS","","",129,null],[11,"empty","","Returns an empty set of flags",129,[[],["addwatchflags",3]]],[11,"all","","Returns the set containing all flags.",129,[[],["addwatchflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",129,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",129,[[],[["option",4],["addwatchflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",129,[[],["addwatchflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",129,[[],["addwatchflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",129,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",129,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",129,[[["addwatchflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",129,[[["addwatchflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",129,[[["addwatchflags",3]]]],[11,"remove","","Removes the specified flags in-place.",129,[[["addwatchflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",129,[[["addwatchflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",129,[[["addwatchflags",3]]]],[3,"InitFlags","","Configuration options for <code>inotify_init1</code>.",null,null],[18,"IN_CLOEXEC","","",130,null],[18,"IN_NONBLOCK","","",130,null],[11,"empty","","Returns an empty set of flags",130,[[],["initflags",3]]],[11,"all","","Returns the set containing all flags.",130,[[],["initflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",130,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",130,[[["c_int",6]],[["initflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",130,[[["c_int",6]],["initflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",130,[[["c_int",6]],["initflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",130,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",130,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",130,[[["initflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",130,[[["initflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",130,[[["initflags",3]]]],[11,"remove","","Removes the specified flags in-place.",130,[[["initflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",130,[[["initflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",130,[[["initflags",3]]]],[3,"Inotify","","An inotify instance. This is also a file descriptor, you …",null,null],[3,"WatchDescriptor","","This object is returned when you create a new watch on an …",null,null],[3,"InotifyEvent","","A single inotify event.",null,null],[12,"wd","","Watch descriptor. This field corresponds to the watch …",131,null],[12,"mask","","Event mask. This field is a bitfield describing the exact …",131,null],[12,"cookie","","This cookie is a number that allows you to connect …",131,null],[12,"name","","Filename. This field exists only if the event was …",131,null],[11,"init","","Initialize a new inotify instance.",132,[[["initflags",3]],[["result",6],["inotify",3]]]],[11,"add_watch","","Adds a new watch on the target file or directory. ",132,[[["addwatchflags",3]],[["result",6],["watchdescriptor",3]]]],[11,"rm_watch","","Removes an existing watch using the watch descriptor …",132,[[["watchdescriptor",3]],["result",6]]],[11,"read_events","","Reads a collection of events from the inotify file …",132,[[],[["vec",3],["result",6]]]],[0,"timerfd","nix::sys","Timer API via file descriptors.",null,null],[3,"TimerFd","nix::sys::timerfd","A timerfd instance. This is also a file descriptor, you …",null,null],[4,"ClockId","","The type of the clock used to mark the progress of the …",null,null],[13,"CLOCK_REALTIME","","",133,null],[13,"CLOCK_MONOTONIC","","",133,null],[13,"CLOCK_BOOTTIME","","",133,null],[13,"CLOCK_REALTIME_ALARM","","",133,null],[13,"CLOCK_BOOTTIME_ALARM","","",133,null],[3,"TimerFlags","","Additional flags to change the behaviour of the file …",null,null],[18,"TFD_NONBLOCK","","",134,null],[18,"TFD_CLOEXEC","","",134,null],[11,"empty","","Returns an empty set of flags",134,[[],["timerflags",3]]],[11,"all","","Returns the set containing all flags.",134,[[],["timerflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",134,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",134,[[["c_int",6]],[["option",4],["timerflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",134,[[["c_int",6]],["timerflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",134,[[["c_int",6]],["timerflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",134,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",134,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",134,[[["timerflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",134,[[["timerflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",134,[[["timerflags",3]]]],[11,"remove","","Removes the specified flags in-place.",134,[[["timerflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",134,[[["timerflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",134,[[["timerflags",3]]]],[3,"TimerSetTimeFlags","","Flags that are used for arming the timer.",null,null],[18,"TFD_TIMER_ABSTIME","","",135,null],[11,"empty","","Returns an empty set of flags",135,[[],["timersettimeflags",3]]],[11,"all","","Returns the set containing all flags.",135,[[],["timersettimeflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",135,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",135,[[["c_int",6]],[["timersettimeflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",135,[[["c_int",6]],["timersettimeflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",135,[[["c_int",6]],["timersettimeflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",135,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",135,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",135,[[["timersettimeflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",135,[[["timersettimeflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",135,[[["timersettimeflags",3]]]],[11,"remove","","Removes the specified flags in-place.",135,[[["timersettimeflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",135,[[["timersettimeflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",135,[[["timersettimeflags",3]]]],[4,"Expiration","","An enumeration allowing the definition of the expiration …",null,null],[13,"OneShot","","",136,null],[13,"IntervalDelayed","","",136,null],[13,"Interval","","",136,null],[11,"new","","Creates a new timer based on the clock defined by <code>clockid</code>…",137,[[["clockid",4],["timerflags",3]],["result",6]]],[11,"set","","Sets a new alarm on the timer.",137,[[["timersettimeflags",3],["expiration",4]],["result",6]]],[11,"get","","Get the parameters for the alarm currently set, if any.",137,[[],[["option",4],["result",6]]]],[11,"unset","","Remove the alarm if any is set.",137,[[],["result",6]]],[11,"wait","","Wait for the configured alarm to expire.",137,[[],["result",6]]],[0,"time","nix","",null,null],[3,"ClockId","nix::time","Clock identifier",null,null],[11,"from_raw","","Creates <code>ClockId</code> from raw <code>clockid_t</code>",138,[[["clockid_t",6]]]],[11,"pid_cpu_clock_id","","Returns <code>ClockId</code> of a <code>pid</code> CPU-time clock",138,[[["pid",3]],["result",6]]],[11,"res","","Returns resolution of the clock id",138,[[],[["timespec",3],["result",6]]]],[11,"now","","Returns the current time on the clock id",138,[[],[["timespec",3],["result",6]]]],[11,"set_time","","Sets time to <code>timespec</code> on the clock id",138,[[["timespec",3]],["result",6]]],[11,"as_raw","","Gets the raw <code>clockid_t</code> wrapped by <code>self</code>",138,[[],["clockid_t",6]]],[18,"CLOCK_BOOTTIME","","",138,null],[18,"CLOCK_BOOTTIME_ALARM","","",138,null],[18,"CLOCK_MONOTONIC","","",138,null],[18,"CLOCK_MONOTONIC_COARSE","","",138,null],[18,"CLOCK_MONOTONIC_RAW","","",138,null],[18,"CLOCK_PROCESS_CPUTIME_ID","","",138,null],[18,"CLOCK_REALTIME","","",138,null],[18,"CLOCK_REALTIME_ALARM","","",138,null],[18,"CLOCK_REALTIME_COARSE","","",138,null],[18,"CLOCK_THREAD_CPUTIME_ID","","",138,null],[5,"clock_getres","","Get the resolution of the specified clock, (see …",null,[[["clockid",3]],[["timespec",3],["result",6]]]],[5,"clock_gettime","","Get the time of the specified clock, (see clock_gettime(2)…",null,[[["clockid",3]],[["timespec",3],["result",6]]]],[5,"clock_settime","","Set the time of the specified clock, (see clock_settime(2)…",null,[[["clockid",3],["timespec",3]],["result",6]]],[5,"clock_getcpuclockid","","Get the clock id of the specified process id, (see …",null,[[["pid",3]],[["result",6],["clockid",3]]]],[0,"ucontext","nix","",null,null],[3,"UContext","nix::ucontext","",null,null],[11,"get","","",139,[[],[["ucontext",3],["result",6]]]],[11,"set","","",139,[[],["result",6]]],[11,"sigmask_mut","","",139,[[],["sigset",3]]],[11,"sigmask","","",139,[[],["sigset",3]]],[0,"unistd","nix","Safe wrappers around functions found in libc \\\"unistd.h\\\" …",null,null],[0,"alarm","nix::unistd","Alarm signal scheduling.",null,null],[5,"set","nix::unistd::alarm","Schedule an alarm signal.",null,[[["c_uint",6]],[["option",4],["c_uint",6]]]],[5,"cancel","","Cancel an previously set alarm signal.",null,[[],[["option",4],["c_uint",6]]]],[0,"acct","nix::unistd","",null,null],[5,"enable","nix::unistd::acct","Enable process accounting",null,[[],["result",6]]],[5,"disable","","Disable process accounting",null,[[],["result",6]]],[5,"pivot_root","nix::unistd","",null,[[],["result",6]]],[5,"setresuid","","Sets the real, effective, and saved uid. (see setresuid(2)…",null,[[["uid",3]],["result",6]]],[5,"setresgid","","Sets the real, effective, and saved gid. (see setresuid(2)…",null,[[["gid",3]],["result",6]]],[3,"Uid","","User identifier",null,null],[11,"from_raw","","Creates <code>Uid</code> from raw <code>uid_t</code>.",140,[[["uid_t",6]]]],[11,"current","","Returns Uid of calling process. This is practically a …",140,[[]]],[11,"effective","","Returns effective Uid of calling process. This is …",140,[[]]],[11,"is_root","","Returns true if the <code>Uid</code> represents privileged user - …",140,[[]]],[11,"as_raw","","Get the raw <code>uid_t</code> wrapped by <code>self</code>.",140,[[],["uid_t",6]]],[17,"ROOT","","Constant for UID = 0",null,null],[3,"Gid","","Group identifier",null,null],[11,"from_raw","","Creates <code>Gid</code> from raw <code>gid_t</code>.",141,[[["gid_t",6]]]],[11,"current","","Returns Gid of calling process. This is practically a …",141,[[]]],[11,"effective","","Returns effective Gid of calling process. This is …",141,[[]]],[11,"as_raw","","Get the raw <code>gid_t</code> wrapped by <code>self</code>.",141,[[],["gid_t",6]]],[3,"Pid","","Process identifier",null,null],[11,"from_raw","","Creates <code>Pid</code> from raw <code>pid_t</code>.",142,[[["pid_t",6]]]],[11,"this","","Returns PID of calling process",142,[[]]],[11,"parent","","Returns PID of parent of calling process",142,[[]]],[11,"as_raw","","Get the raw <code>pid_t</code> wrapped by <code>self</code>.",142,[[],["pid_t",6]]],[4,"ForkResult","","Represents the successful result of calling <code>fork</code>",null,null],[13,"Parent","","",143,null],[12,"child","nix::unistd::ForkResult","",144,null],[13,"Child","nix::unistd","",143,null],[11,"is_child","","Return <code>true</code> if this is the child process of the <code>fork()</code>",143,[[]]],[11,"is_parent","","Returns <code>true</code> if this is the parent process of the <code>fork()</code>",143,[[]]],[5,"fork","","Create a new child process duplicating the parent process …",null,[[],[["result",6],["forkresult",4]]]],[5,"getpid","","Get the pid of this process (see getpid(2)).",null,[[],["pid",3]]],[5,"getppid","","Get the pid of this processes\' parent (see getpid(2)).",null,[[],["pid",3]]],[5,"setpgid","","Set a process group ID (see setpgid(2)).",null,[[["pid",3]],["result",6]]],[5,"getpgid","","",null,[[["pid",3],["option",4]],[["result",6],["pid",3]]]],[5,"setsid","","Create new session and set process group id (see setsid(2)…",null,[[],[["result",6],["pid",3]]]],[5,"getsid","","Get the process group ID of a session leader getsid(2).",null,[[["pid",3],["option",4]],[["result",6],["pid",3]]]],[5,"tcgetpgrp","","Get the terminal foreground process group (see …",null,[[["c_int",6]],[["result",6],["pid",3]]]],[5,"tcsetpgrp","","Set the terminal foreground process group (see …",null,[[["pid",3],["c_int",6]],["result",6]]],[5,"getpgrp","","Get the group id of the calling process (see getpgrp(3)).",null,[[],["pid",3]]],[5,"gettid","","Get the caller\'s thread ID (see gettid(2).",null,[[],["pid",3]]],[5,"dup","","Create a copy of the specified file descriptor (see dup(2)…",null,[[["rawfd",6]],[["result",6],["rawfd",6]]]],[5,"dup2","","Create a copy of the specified file descriptor using the …",null,[[["rawfd",6]],[["result",6],["rawfd",6]]]],[5,"dup3","","Create a new copy of the specified file descriptor using …",null,[[["oflag",3],["rawfd",6]],[["result",6],["rawfd",6]]]],[5,"chdir","","Change the current working directory of the calling …",null,[[],["result",6]]],[5,"fchdir","","Change the current working directory of the process to …",null,[[["rawfd",6]],["result",6]]],[5,"mkdir","","Creates new directory <code>path</code> with access rights <code>mode</code>.  (see …",null,[[["mode",3]],["result",6]]],[5,"mkfifo","","Creates new fifo special file (named pipe) with path <code>path</code> …",null,[[["mode",3]],["result",6]]],[5,"mkfifoat","","Creates new fifo special file (named pipe) with path <code>path</code> …",null,[[["option",4],["mode",3],["rawfd",6]],["result",6]]],[5,"symlinkat","","Creates a symbolic link at <code>path2</code> which points to <code>path1</code>.",null,[[["option",4],["rawfd",6]],["result",6]]],[5,"getcwd","","Returns the current directory as a <code>PathBuf</code>",null,[[],[["result",6],["pathbuf",3]]]],[5,"chown","","Change the ownership of the file at <code>path</code> to be owned by …",null,[[["gid",3],["option",4],["option",4],["uid",3]],["result",6]]],[5,"fchown","","Change the ownership of the file referred to by the open …",null,[[["gid",3],["option",4],["option",4],["uid",3],["rawfd",6]],["result",6]]],[4,"FchownatFlags","","Flags for <code>fchownat</code> function.",null,null],[13,"FollowSymlink","","",145,null],[13,"NoFollowSymlink","","",145,null],[5,"fchownat","","Change the ownership of the file at <code>path</code> to be owned by …",null,[[["rawfd",6],["option",4],["gid",3],["option",4],["uid",3],["fchownatflags",4],["option",4]],["result",6]]],[5,"execv","","Replace the current process image with a new one (see …",null,[[["cstr",3]],[["result",6],["infallible",4]]]],[5,"execve","","Replace the current process image with a new one (see …",null,[[["cstr",3]],[["result",6],["infallible",4]]]],[5,"execvp","","Replace the current process image with a new one and …",null,[[["cstr",3]],[["result",6],["infallible",4]]]],[5,"execvpe","","Replace the current process image with a new one and …",null,[[["cstr",3]],[["result",6],["infallible",4]]]],[5,"fexecve","","Replace the current process image with a new one (see …",null,[[["rawfd",6]],[["result",6],["infallible",4]]]],[5,"execveat","","Execute program relative to a directory file descriptor …",null,[[["atflags",3],["cstr",3],["rawfd",6]],[["result",6],["infallible",4]]]],[5,"daemon","","Daemonize this process by detaching from the controlling …",null,[[],["result",6]]],[5,"sethostname","","Set the system host name (see sethostname(2)).",null,[[["asref",8],["osstr",3]],["result",6]]],[5,"gethostname","","Get the host name and store it in the provided buffer, …",null,[[],[["result",6],["cstr",3]]]],[5,"close","","Close a raw file descriptor",null,[[["rawfd",6]],["result",6]]],[5,"read","","Read from a raw file descriptor.",null,[[["rawfd",6]],["result",6]]],[5,"write","","Write to a raw file descriptor.",null,[[["rawfd",6]],["result",6]]],[4,"Whence","","Directive that tells <code>lseek</code> and <code>lseek64</code> what the offset is …",null,null],[13,"SeekSet","","Specify an offset relative to the start of the file.",146,null],[13,"SeekCur","","Specify an offset relative to the current file location.",146,null],[13,"SeekEnd","","Specify an offset relative to the end of the file.",146,null],[13,"SeekData","","Specify an offset relative to the next location in the …",146,null],[13,"SeekHole","","Specify an offset relative to the next hole in the file …",146,null],[5,"lseek","","Move the read/write file offset.",null,[[["off_t",6],["whence",4],["rawfd",6]],[["off_t",6],["result",6]]]],[5,"lseek64","","",null,[[["off64_t",6],["whence",4],["rawfd",6]],[["off64_t",6],["result",6]]]],[5,"pipe","","Create an interprocess channel.",null,[[],["result",6]]],[5,"pipe2","","Like <code>pipe</code>, but allows setting certain file descriptor …",null,[[["oflag",3]],["result",6]]],[5,"truncate","","Truncate a file to a specified length",null,[[["off_t",6]],["result",6]]],[5,"ftruncate","","Truncate a file to a specified length",null,[[["off_t",6],["rawfd",6]],["result",6]]],[5,"isatty","","",null,[[["rawfd",6]],["result",6]]],[4,"LinkatFlags","","Flags for <code>linkat</code> function.",null,null],[13,"SymlinkFollow","","",147,null],[13,"NoSymlinkFollow","","",147,null],[5,"linkat","","Link one file to another file",null,[[["option",4],["linkatflags",4],["rawfd",6]],["result",6]]],[5,"unlink","","Remove a directory entry",null,[[],["result",6]]],[4,"UnlinkatFlags","","Flags for <code>unlinkat</code> function.",null,null],[13,"RemoveDir","","",148,null],[13,"NoRemoveDir","","",148,null],[5,"unlinkat","","Remove a directory entry",null,[[["option",4],["unlinkatflags",4],["rawfd",6]],["result",6]]],[5,"chroot","","",null,[[],["result",6]]],[5,"sync","","Commit filesystem caches to disk",null,[[]]],[5,"fsync","","Synchronize changes to a file",null,[[["rawfd",6]],["result",6]]],[5,"fdatasync","","Synchronize the data of a file",null,[[["rawfd",6]],["result",6]]],[5,"getuid","","Get a real user ID",null,[[],["uid",3]]],[5,"geteuid","","Get the effective user ID",null,[[],["uid",3]]],[5,"getgid","","Get the real group ID",null,[[],["gid",3]]],[5,"getegid","","Get the effective group ID",null,[[],["gid",3]]],[5,"seteuid","","Set the effective user ID",null,[[["uid",3]],["result",6]]],[5,"setegid","","Set the effective group ID",null,[[["gid",3]],["result",6]]],[5,"setuid","","Set the user ID",null,[[["uid",3]],["result",6]]],[5,"setgid","","Set the group ID",null,[[["gid",3]],["result",6]]],[5,"setfsuid","","Set the user identity used for filesystem checks …",null,[[["uid",3]],["uid",3]]],[5,"setfsgid","","Set the group identity used for filesystem checks …",null,[[["gid",3]],["gid",3]]],[5,"getgroups","","Get the list of supplementary group IDs of the calling …",null,[[],[["result",6],["vec",3]]]],[5,"setgroups","","Set the list of supplementary group IDs for the calling …",null,[[],["result",6]]],[5,"getgrouplist","","Calculate the supplementary group access list.",null,[[["gid",3],["cstr",3]],[["result",6],["vec",3]]]],[5,"initgroups","","Initialize the supplementary group access list.",null,[[["gid",3],["cstr",3]],["result",6]]],[5,"pause","","Suspend the thread until a signal is received.",null,[[]]],[5,"sleep","","Suspend execution for an interval of time",null,[[["c_uint",6]],["c_uint",6]]],[5,"mkstemp","","Creates a regular file which persists even after process …",null,[[],["result",6]]],[4,"PathconfVar","","Variable names for <code>pathconf</code>",null,null],[13,"FILESIZEBITS","","Minimum number of bits needed to represent, as a signed …",149,null],[13,"LINK_MAX","","Maximum number of links to a single file.",149,null],[13,"MAX_CANON","","Maximum number of bytes in a terminal canonical input …",149,null],[13,"MAX_INPUT","","Minimum number of bytes for which space is available in a …",149,null],[13,"NAME_MAX","","Maximum number of bytes in a filename (not including the …",149,null],[13,"PATH_MAX","","Maximum number of bytes the implementation will store as …",149,null],[13,"PIPE_BUF","","Maximum number of bytes that is guaranteed to be atomic …",149,null],[13,"POSIX2_SYMLINKS","","Symbolic links can be created.",149,null],[13,"POSIX_ALLOC_SIZE_MIN","","Minimum number of bytes of storage actually allocated for …",149,null],[13,"POSIX_REC_INCR_XFER_SIZE","","Recommended increment for file transfer sizes between the …",149,null],[13,"POSIX_REC_MAX_XFER_SIZE","","Maximum recommended file transfer size.",149,null],[13,"POSIX_REC_MIN_XFER_SIZE","","Minimum recommended file transfer size.",149,null],[13,"POSIX_REC_XFER_ALIGN","","Recommended file transfer buffer alignment.",149,null],[13,"SYMLINK_MAX","","Maximum number of bytes in a symbolic link.",149,null],[13,"_POSIX_CHOWN_RESTRICTED","","The use of <code>chown</code> and <code>fchown</code> is restricted to a process …",149,null],[13,"_POSIX_NO_TRUNC","","Pathname components longer than {NAME_MAX} generate an …",149,null],[13,"_POSIX_VDISABLE","","This symbol shall be defined to be the value of a …",149,null],[13,"_POSIX_ASYNC_IO","","Asynchronous input or output operations may be performed …",149,null],[13,"_POSIX_PRIO_IO","","Prioritized input or output operations may be performed …",149,null],[13,"_POSIX_SYNC_IO","","Synchronized input or output operations may be performed …",149,null],[5,"fpathconf","","Like <code>pathconf</code>, but works with file descriptors instead of …",null,[[["pathconfvar",4],["rawfd",6]],[["option",4],["result",6]]]],[5,"pathconf","","Get path-dependent configurable system variables (see …",null,[[["pathconfvar",4]],[["option",4],["result",6]]]],[4,"SysconfVar","","Variable names for <code>sysconf</code>",null,null],[13,"AIO_LISTIO_MAX","","Maximum number of I/O operations in a single list I/O …",150,null],[13,"AIO_MAX","","Maximum number of outstanding asynchronous I/O operations …",150,null],[13,"AIO_PRIO_DELTA_MAX","","The maximum amount by which a process can decrease its …",150,null],[13,"ARG_MAX","","Maximum length of argument to the exec functions …",150,null],[13,"ATEXIT_MAX","","Maximum number of functions that may be registered with …",150,null],[13,"BC_BASE_MAX","","Maximum obase values allowed by the bc utility.",150,null],[13,"BC_DIM_MAX","","Maximum number of elements permitted in an array by the …",150,null],[13,"BC_SCALE_MAX","","Maximum scale value allowed by the bc utility.",150,null],[13,"BC_STRING_MAX","","Maximum length of a string constant accepted by the bc …",150,null],[13,"CHILD_MAX","","Maximum number of simultaneous processes per real user ID.",150,null],[13,"CLK_TCK","","",150,null],[13,"COLL_WEIGHTS_MAX","","Maximum number of weights that can be assigned to an …",150,null],[13,"DELAYTIMER_MAX","","Maximum number of timer expiration overruns.",150,null],[13,"EXPR_NEST_MAX","","Maximum number of expressions that can be nested within …",150,null],[13,"HOST_NAME_MAX","","Maximum length of a host name (not including the …",150,null],[13,"IOV_MAX","","Maximum number of iovec structures that one process has …",150,null],[13,"LINE_MAX","","Unless otherwise noted, the maximum length, in bytes, of …",150,null],[13,"LOGIN_NAME_MAX","","Maximum length of a login name.",150,null],[13,"NGROUPS_MAX","","Maximum number of simultaneous supplementary group IDs …",150,null],[13,"GETGR_R_SIZE_MAX","","Initial size of <code>getgrgid_r</code> and <code>getgrnam_r</code> data buffers",150,null],[13,"GETPW_R_SIZE_MAX","","Initial size of <code>getpwuid_r</code> and <code>getpwnam_r</code> data buffers",150,null],[13,"MQ_OPEN_MAX","","The maximum number of open message queue descriptors a …",150,null],[13,"MQ_PRIO_MAX","","The maximum number of message priorities supported by the …",150,null],[13,"OPEN_MAX","","A value one greater than the maximum value that the …",150,null],[13,"_POSIX_ADVISORY_INFO","","The implementation supports the Advisory Information …",150,null],[13,"_POSIX_BARRIERS","","The implementation supports barriers.",150,null],[13,"_POSIX_ASYNCHRONOUS_IO","","The implementation supports asynchronous input and output.",150,null],[13,"_POSIX_CLOCK_SELECTION","","The implementation supports clock selection.",150,null],[13,"_POSIX_CPUTIME","","The implementation supports the Process CPU-Time Clocks …",150,null],[13,"_POSIX_FSYNC","","The implementation supports the File Synchronization …",150,null],[13,"_POSIX_IPV6","","The implementation supports the IPv6 option.",150,null],[13,"_POSIX_JOB_CONTROL","","The implementation supports job control.",150,null],[13,"_POSIX_MAPPED_FILES","","The implementation supports memory mapped Files.",150,null],[13,"_POSIX_MEMLOCK","","The implementation supports the Process Memory Locking …",150,null],[13,"_POSIX_MEMLOCK_RANGE","","The implementation supports the Range Memory Locking …",150,null],[13,"_POSIX_MEMORY_PROTECTION","","The implementation supports memory protection.",150,null],[13,"_POSIX_MESSAGE_PASSING","","The implementation supports the Message Passing option.",150,null],[13,"_POSIX_MONOTONIC_CLOCK","","The implementation supports the Monotonic Clock option.",150,null],[13,"_POSIX_PRIORITIZED_IO","","The implementation supports the Prioritized Input and …",150,null],[13,"_POSIX_PRIORITY_SCHEDULING","","The implementation supports the Process Scheduling option.",150,null],[13,"_POSIX_RAW_SOCKETS","","The implementation supports the Raw Sockets option.",150,null],[13,"_POSIX_READER_WRITER_LOCKS","","The implementation supports read-write locks.",150,null],[13,"_POSIX_REALTIME_SIGNALS","","The implementation supports realtime signals.",150,null],[13,"_POSIX_REGEXP","","The implementation supports the Regular Expression …",150,null],[13,"_POSIX_SAVED_IDS","","Each process has a saved set-user-ID and a saved …",150,null],[13,"_POSIX_SEMAPHORES","","The implementation supports semaphores.",150,null],[13,"_POSIX_SHARED_MEMORY_OBJECTS","","The implementation supports the Shared Memory Objects …",150,null],[13,"_POSIX_SHELL","","The implementation supports the POSIX shell.",150,null],[13,"_POSIX_SPAWN","","The implementation supports the Spawn option.",150,null],[13,"_POSIX_SPIN_LOCKS","","The implementation supports spin locks.",150,null],[13,"_POSIX_SPORADIC_SERVER","","The implementation supports the Process Sporadic Server …",150,null],[13,"_POSIX_SS_REPL_MAX","","",150,null],[13,"_POSIX_SYNCHRONIZED_IO","","The implementation supports the Synchronized Input and …",150,null],[13,"_POSIX_THREAD_ATTR_STACKADDR","","The implementation supports the Thread Stack Address …",150,null],[13,"_POSIX_THREAD_ATTR_STACKSIZE","","The implementation supports the Thread Stack Size …",150,null],[13,"_POSIX_THREAD_CPUTIME","","The implementation supports the Thread CPU-Time Clocks …",150,null],[13,"_POSIX_THREAD_PRIO_INHERIT","","The implementation supports the Non-Robust Mutex Priority …",150,null],[13,"_POSIX_THREAD_PRIO_PROTECT","","The implementation supports the Non-Robust Mutex Priority …",150,null],[13,"_POSIX_THREAD_PRIORITY_SCHEDULING","","The implementation supports the Thread Execution …",150,null],[13,"_POSIX_THREAD_PROCESS_SHARED","","The implementation supports the Thread Process-Shared …",150,null],[13,"_POSIX_THREAD_ROBUST_PRIO_INHERIT","","The implementation supports the Robust Mutex Priority …",150,null],[13,"_POSIX_THREAD_ROBUST_PRIO_PROTECT","","The implementation supports the Robust Mutex Priority …",150,null],[13,"_POSIX_THREAD_SAFE_FUNCTIONS","","The implementation supports thread-safe functions.",150,null],[13,"_POSIX_THREAD_SPORADIC_SERVER","","The implementation supports the Thread Sporadic Server …",150,null],[13,"_POSIX_THREADS","","The implementation supports threads.",150,null],[13,"_POSIX_TIMEOUTS","","The implementation supports timeouts.",150,null],[13,"_POSIX_TIMERS","","The implementation supports timers.",150,null],[13,"_POSIX_TRACE","","The implementation supports the Trace option.",150,null],[13,"_POSIX_TRACE_EVENT_FILTER","","The implementation supports the Trace Event Filter option.",150,null],[13,"_POSIX_TRACE_EVENT_NAME_MAX","","",150,null],[13,"_POSIX_TRACE_INHERIT","","The implementation supports the Trace Inherit option.",150,null],[13,"_POSIX_TRACE_LOG","","The implementation supports the Trace Log option.",150,null],[13,"_POSIX_TRACE_NAME_MAX","","",150,null],[13,"_POSIX_TRACE_SYS_MAX","","",150,null],[13,"_POSIX_TRACE_USER_EVENT_MAX","","",150,null],[13,"_POSIX_TYPED_MEMORY_OBJECTS","","The implementation supports the Typed Memory Objects …",150,null],[13,"_POSIX_VERSION","","Integer value indicating version of this standard …",150,null],[13,"_POSIX_V6_ILP32_OFF32","","The implementation provides a C-language compilation …",150,null],[13,"_POSIX_V6_ILP32_OFFBIG","","The implementation provides a C-language compilation …",150,null],[13,"_POSIX_V6_LP64_OFF64","","The implementation provides a C-language compilation …",150,null],[13,"_POSIX_V6_LPBIG_OFFBIG","","The implementation provides a C-language compilation …",150,null],[13,"_POSIX2_C_BIND","","The implementation supports the C-Language Binding option.",150,null],[13,"_POSIX2_C_DEV","","The implementation supports the C-Language Development …",150,null],[13,"_POSIX2_CHAR_TERM","","The implementation supports the Terminal Characteristics …",150,null],[13,"_POSIX2_FORT_DEV","","The implementation supports the FORTRAN Development …",150,null],[13,"_POSIX2_FORT_RUN","","The implementation supports the FORTRAN Runtime Utilities …",150,null],[13,"_POSIX2_LOCALEDEF","","The implementation supports the creation of locales by …",150,null],[13,"_POSIX2_PBS","","The implementation supports the Batch Environment …",150,null],[13,"_POSIX2_PBS_ACCOUNTING","","The implementation supports the Batch Accounting option.",150,null],[13,"_POSIX2_PBS_CHECKPOINT","","The implementation supports the Batch Checkpoint/Restart …",150,null],[13,"_POSIX2_PBS_LOCATE","","The implementation supports the Locate Batch Job Request …",150,null],[13,"_POSIX2_PBS_MESSAGE","","The implementation supports the Batch Job Message Request …",150,null],[13,"_POSIX2_PBS_TRACK","","The implementation supports the Track Batch Job Request …",150,null],[13,"_POSIX2_SW_DEV","","The implementation supports the Software Development …",150,null],[13,"_POSIX2_UPE","","The implementation supports the User Portability …",150,null],[13,"_POSIX2_VERSION","","Integer value indicating version of the Shell and …",150,null],[13,"PAGE_SIZE","","The size of a system page in bytes.",150,null],[13,"PTHREAD_DESTRUCTOR_ITERATIONS","","",150,null],[13,"PTHREAD_KEYS_MAX","","",150,null],[13,"PTHREAD_STACK_MIN","","",150,null],[13,"PTHREAD_THREADS_MAX","","",150,null],[13,"RE_DUP_MAX","","",150,null],[13,"RTSIG_MAX","","",150,null],[13,"SEM_NSEMS_MAX","","",150,null],[13,"SEM_VALUE_MAX","","",150,null],[13,"SIGQUEUE_MAX","","",150,null],[13,"STREAM_MAX","","",150,null],[13,"SYMLOOP_MAX","","",150,null],[13,"TIMER_MAX","","",150,null],[13,"TTY_NAME_MAX","","",150,null],[13,"TZNAME_MAX","","",150,null],[13,"_XOPEN_CRYPT","","The implementation supports the X/Open Encryption Option …",150,null],[13,"_XOPEN_ENH_I18N","","The implementation supports the Issue 4, Version 2 …",150,null],[13,"_XOPEN_LEGACY","","",150,null],[13,"_XOPEN_REALTIME","","The implementation supports the X/Open Realtime Option …",150,null],[13,"_XOPEN_REALTIME_THREADS","","The implementation supports the X/Open Realtime Threads …",150,null],[13,"_XOPEN_SHM","","The implementation supports the Issue 4, Version 2 Shared …",150,null],[13,"_XOPEN_STREAMS","","The implementation supports the XSI STREAMS Option Group.",150,null],[13,"_XOPEN_UNIX","","The implementation supports the XSI option",150,null],[13,"_XOPEN_VERSION","","Integer value indicating version of the X/Open …",150,null],[5,"sysconf","","Get configurable system variables (see sysconf(3))",null,[[["sysconfvar",4]],[["option",4],["result",6]]]],[3,"AccessFlags","","Options for access()",null,null],[18,"F_OK","","Test for existence of file.",151,null],[18,"R_OK","","Test for read permission.",151,null],[18,"W_OK","","Test for write permission.",151,null],[18,"X_OK","","Test for execute (search) permission.",151,null],[11,"empty","","Returns an empty set of flags",151,[[],["accessflags",3]]],[11,"all","","Returns the set containing all flags.",151,[[],["accessflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",151,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",151,[[["c_int",6]],[["accessflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",151,[[["c_int",6]],["accessflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",151,[[["c_int",6]],["accessflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",151,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",151,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",151,[[["accessflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",151,[[["accessflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",151,[[["accessflags",3]]]],[11,"remove","","Removes the specified flags in-place.",151,[[["accessflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",151,[[["accessflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",151,[[["accessflags",3]]]],[5,"access","","Checks the file named by <code>path</code> for accessibility according …",null,[[["accessflags",3]],["result",6]]],[3,"User","","Representation of a User, based on <code>libc::passwd</code>",null,null],[12,"name","","Username",152,null],[12,"passwd","","User password (probably encrypted)",152,null],[12,"uid","","User ID",152,null],[12,"gid","","Group ID",152,null],[12,"gecos","","User information",152,null],[12,"dir","","Home directory",152,null],[12,"shell","","Path to shell",152,null],[11,"from_uid","","Get a user by UID.",152,[[["uid",3]],[["option",4],["result",6]]]],[11,"from_name","","Get a user by name.",152,[[],[["option",4],["result",6]]]],[3,"Group","","Representation of a Group, based on <code>libc::group</code>",null,null],[12,"name","","Group name",153,null],[12,"passwd","","Group password",153,null],[12,"gid","","Group ID",153,null],[12,"mem","","List of Group members",153,null],[11,"from_gid","","Get a group by GID.",153,[[["gid",3]],[["option",4],["result",6]]]],[11,"from_name","","Get a group by name.",153,[[],[["option",4],["result",6]]]],[5,"ttyname","","Get the name of the terminal device that is open on file …",null,[[["rawfd",6]],[["result",6],["pathbuf",3]]]],[6,"Result","nix","Nix Result Type",null,null],[4,"Error","","Nix Error Type",null,null],[13,"Sys","","",154,null],[13,"InvalidPath","","",154,null],[13,"InvalidUtf8","","The operation involved a conversion to Rust\'s native …",154,null],[13,"UnsupportedOperation","","The operation is not supported by Nix, in this instance …",154,null],[11,"as_errno","","Convert this <code>Error</code> to an <code>Errno</code>.",154,[[],[["errno",4],["option",4]]]],[11,"from_errno","","Create a nix Error from a given errno",154,[[["errno",4]],["error",4]]],[11,"last","","Get the current errno and convert it to a nix Error",154,[[],["error",4]]],[11,"invalid_argument","","Create a new invalid argument error (<code>EINVAL</code>)",154,[[],["error",4]]],[8,"NixPath","","",null,null],[10,"is_empty","","",155,[[]]],[10,"len","","",155,[[]]],[10,"with_nix_path","","",155,[[],["result",6]]],[14,"request_code_none","","Generate an ioctl request code for a command that passes …",null,null],[14,"request_code_read","","Generate an ioctl request code for a command that reads.",null,null],[14,"request_code_write","","Generate an ioctl request code for a command that writes.",null,null],[14,"request_code_readwrite","","Generate an ioctl request code for a command that reads …",null,null],[14,"ioctl_none","","Generates a wrapper function for an ioctl that passes no …",null,null],[14,"ioctl_none_bad","","Generates a wrapper function for a \\\"bad\\\" ioctl that …",null,null],[14,"ioctl_read","","Generates a wrapper function for an ioctl that reads data …",null,null],[14,"ioctl_read_bad","","Generates a wrapper function for a \\\"bad\\\" ioctl that reads …",null,null],[14,"ioctl_write_ptr","","Generates a wrapper function for an ioctl that writes …",null,null],[14,"ioctl_write_ptr_bad","","Generates a wrapper function for a \\\"bad\\\" ioctl that …",null,null],[14,"ioctl_write_int","","Generates a wrapper function for a ioctl that writes an …",null,null],[14,"ioctl_write_int_bad","","Generates a wrapper function for a \\\"bad\\\" ioctl that …",null,null],[14,"ioctl_readwrite","","Generates a wrapper function for an ioctl that reads and …",null,null],[14,"ioctl_readwrite_bad","","Generates a wrapper function for a \\\"bad\\\" ioctl that reads …",null,null],[14,"ioctl_read_buf","","Generates a wrapper function for an ioctl that reads an …",null,null],[14,"ioctl_write_buf","","Generates a wrapper function for an ioctl that writes an …",null,null],[14,"ioctl_readwrite_buf","","Generates a wrapper function for an ioctl that reads and …",null,null],[14,"cmsg_space","","Create a buffer large enough for storing some control …",null,null],[11,"from","nix::dir","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"into_iter","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"into_iter","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","nix::errno","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","nix::fcntl","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","nix::ifaddrs","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"into_iter","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"from","nix::kmod","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","nix::mount","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","nix::mqueue","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","nix::net::if_","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","nix::poll","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","nix::pty","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"from","nix::sched","",160,[[]]],[11,"into","","",160,[[]]],[11,"to_owned","","",160,[[]]],[11,"clone_into","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"to_owned","","",161,[[]]],[11,"clone_into","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"from","nix::sys::aio","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","nix::sys::epoll","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","nix::sys::eventfd","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","nix::sys::memfd","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","nix::sys::mman","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","nix::sys::personality","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","nix::sys::ptrace","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"to_owned","","",162,[[]]],[11,"clone_into","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"from","nix::sys::quota","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","nix::sys::reboot","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","nix::sys::select","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",163,[[]]],[11,"into","","",163,[[]]],[11,"into_iter","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"from","nix::sys::signal","",164,[[]]],[11,"into","","",164,[[]]],[11,"to_owned","","",164,[[]]],[11,"clone_into","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"to_string","","",56,[[],["string",3]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",165,[[]]],[11,"into","","",165,[[]]],[11,"into_iter","","",165,[[]]],[11,"to_owned","","",165,[[]]],[11,"clone_into","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","nix::sys::signalfd","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"into_iter","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","nix::sys::socket","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"to_string","","",83,[[],["string",3]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"to_string","","",84,[[],["string",3]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"to_string","","",82,[[],["string",3]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"to_string","","",85,[[],["string",3]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"to_string","","",77,[[],["string",3]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"to_string","","",79,[[],["string",3]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"to_string","","",80,[[],["string",3]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"to_string","","",81,[[],["string",3]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"to_string","","",78,[[],["string",3]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"to_string","","",76,[[],["string",3]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","nix::sys::socket::sockopt","",166,[[]]],[11,"into","","",166,[[]]],[11,"to_owned","","",166,[[]]],[11,"clone_into","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"from","","",167,[[]]],[11,"into","","",167,[[]]],[11,"to_owned","","",167,[[]]],[11,"clone_into","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"from","","",168,[[]]],[11,"into","","",168,[[]]],[11,"to_owned","","",168,[[]]],[11,"clone_into","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"from","","",169,[[]]],[11,"into","","",169,[[]]],[11,"to_owned","","",169,[[]]],[11,"clone_into","","",169,[[]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"from","","",170,[[]]],[11,"into","","",170,[[]]],[11,"to_owned","","",170,[[]]],[11,"clone_into","","",170,[[]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"from","","",171,[[]]],[11,"into","","",171,[[]]],[11,"to_owned","","",171,[[]]],[11,"clone_into","","",171,[[]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"from","","",172,[[]]],[11,"into","","",172,[[]]],[11,"to_owned","","",172,[[]]],[11,"clone_into","","",172,[[]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"to_owned","","",173,[[]]],[11,"clone_into","","",173,[[]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"from","","",174,[[]]],[11,"into","","",174,[[]]],[11,"to_owned","","",174,[[]]],[11,"clone_into","","",174,[[]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"try_into","","",174,[[],["result",4]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"from","","",175,[[]]],[11,"into","","",175,[[]]],[11,"to_owned","","",175,[[]]],[11,"clone_into","","",175,[[]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"from","","",176,[[]]],[11,"into","","",176,[[]]],[11,"to_owned","","",176,[[]]],[11,"clone_into","","",176,[[]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"from","","",177,[[]]],[11,"into","","",177,[[]]],[11,"to_owned","","",177,[[]]],[11,"clone_into","","",177,[[]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"try_into","","",177,[[],["result",4]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"from","","",178,[[]]],[11,"into","","",178,[[]]],[11,"to_owned","","",178,[[]]],[11,"clone_into","","",178,[[]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"try_from","","",178,[[],["result",4]]],[11,"try_into","","",178,[[],["result",4]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"from","","",179,[[]]],[11,"into","","",179,[[]]],[11,"to_owned","","",179,[[]]],[11,"clone_into","","",179,[[]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"try_into","","",179,[[],["result",4]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"from","","",180,[[]]],[11,"into","","",180,[[]]],[11,"to_owned","","",180,[[]]],[11,"clone_into","","",180,[[]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"try_into","","",180,[[],["result",4]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"from","","",181,[[]]],[11,"into","","",181,[[]]],[11,"to_owned","","",181,[[]]],[11,"clone_into","","",181,[[]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"try_from","","",181,[[],["result",4]]],[11,"try_into","","",181,[[],["result",4]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"from","","",182,[[]]],[11,"into","","",182,[[]]],[11,"to_owned","","",182,[[]]],[11,"clone_into","","",182,[[]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"try_from","","",182,[[],["result",4]]],[11,"try_into","","",182,[[],["result",4]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"from","","",183,[[]]],[11,"into","","",183,[[]]],[11,"to_owned","","",183,[[]]],[11,"clone_into","","",183,[[]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"try_from","","",183,[[],["result",4]]],[11,"try_into","","",183,[[],["result",4]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"from","","",184,[[]]],[11,"into","","",184,[[]]],[11,"to_owned","","",184,[[]]],[11,"clone_into","","",184,[[]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"try_into","","",184,[[],["result",4]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"from","","",185,[[]]],[11,"into","","",185,[[]]],[11,"to_owned","","",185,[[]]],[11,"clone_into","","",185,[[]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"try_from","","",185,[[],["result",4]]],[11,"try_into","","",185,[[],["result",4]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"from","","",186,[[]]],[11,"into","","",186,[[]]],[11,"to_owned","","",186,[[]]],[11,"clone_into","","",186,[[]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"try_into","","",186,[[],["result",4]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"from","","",187,[[]]],[11,"into","","",187,[[]]],[11,"to_owned","","",187,[[]]],[11,"clone_into","","",187,[[]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"try_into","","",187,[[],["result",4]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"from","","",188,[[]]],[11,"into","","",188,[[]]],[11,"to_owned","","",188,[[]]],[11,"clone_into","","",188,[[]]],[11,"borrow","","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"try_from","","",188,[[],["result",4]]],[11,"try_into","","",188,[[],["result",4]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"from","","",189,[[]]],[11,"into","","",189,[[]]],[11,"to_owned","","",189,[[]]],[11,"clone_into","","",189,[[]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"try_from","","",189,[[],["result",4]]],[11,"try_into","","",189,[[],["result",4]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"from","","",190,[[]]],[11,"into","","",190,[[]]],[11,"to_owned","","",190,[[]]],[11,"clone_into","","",190,[[]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"try_from","","",190,[[],["result",4]]],[11,"try_into","","",190,[[],["result",4]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"from","","",191,[[]]],[11,"into","","",191,[[]]],[11,"to_owned","","",191,[[]]],[11,"clone_into","","",191,[[]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"try_from","","",191,[[],["result",4]]],[11,"try_into","","",191,[[],["result",4]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"from","","",192,[[]]],[11,"into","","",192,[[]]],[11,"to_owned","","",192,[[]]],[11,"clone_into","","",192,[[]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"try_into","","",192,[[],["result",4]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"from","","",193,[[]]],[11,"into","","",193,[[]]],[11,"to_owned","","",193,[[]]],[11,"clone_into","","",193,[[]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"try_into","","",193,[[],["result",4]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"from","","",194,[[]]],[11,"into","","",194,[[]]],[11,"to_owned","","",194,[[]]],[11,"clone_into","","",194,[[]]],[11,"borrow","","",194,[[]]],[11,"borrow_mut","","",194,[[]]],[11,"try_from","","",194,[[],["result",4]]],[11,"try_into","","",194,[[],["result",4]]],[11,"type_id","","",194,[[],["typeid",3]]],[11,"from","","",195,[[]]],[11,"into","","",195,[[]]],[11,"to_owned","","",195,[[]]],[11,"clone_into","","",195,[[]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"try_from","","",195,[[],["result",4]]],[11,"try_into","","",195,[[],["result",4]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"from","","",196,[[]]],[11,"into","","",196,[[]]],[11,"to_owned","","",196,[[]]],[11,"clone_into","","",196,[[]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"try_from","","",196,[[],["result",4]]],[11,"try_into","","",196,[[],["result",4]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"from","","",197,[[]]],[11,"into","","",197,[[]]],[11,"to_owned","","",197,[[]]],[11,"clone_into","","",197,[[]]],[11,"borrow","","",197,[[]]],[11,"borrow_mut","","",197,[[]]],[11,"try_from","","",197,[[],["result",4]]],[11,"try_into","","",197,[[],["result",4]]],[11,"type_id","","",197,[[],["typeid",3]]],[11,"from","","",198,[[]]],[11,"into","","",198,[[]]],[11,"to_owned","","",198,[[]]],[11,"clone_into","","",198,[[]]],[11,"borrow","","",198,[[]]],[11,"borrow_mut","","",198,[[]]],[11,"try_from","","",198,[[],["result",4]]],[11,"try_into","","",198,[[],["result",4]]],[11,"type_id","","",198,[[],["typeid",3]]],[11,"from","","",199,[[]]],[11,"into","","",199,[[]]],[11,"to_owned","","",199,[[]]],[11,"clone_into","","",199,[[]]],[11,"borrow","","",199,[[]]],[11,"borrow_mut","","",199,[[]]],[11,"try_from","","",199,[[],["result",4]]],[11,"try_into","","",199,[[],["result",4]]],[11,"type_id","","",199,[[],["typeid",3]]],[11,"from","","",200,[[]]],[11,"into","","",200,[[]]],[11,"to_owned","","",200,[[]]],[11,"clone_into","","",200,[[]]],[11,"borrow","","",200,[[]]],[11,"borrow_mut","","",200,[[]]],[11,"try_from","","",200,[[],["result",4]]],[11,"try_into","","",200,[[],["result",4]]],[11,"type_id","","",200,[[],["typeid",3]]],[11,"from","","",201,[[]]],[11,"into","","",201,[[]]],[11,"to_owned","","",201,[[]]],[11,"clone_into","","",201,[[]]],[11,"borrow","","",201,[[]]],[11,"borrow_mut","","",201,[[]]],[11,"try_from","","",201,[[],["result",4]]],[11,"try_into","","",201,[[],["result",4]]],[11,"type_id","","",201,[[],["typeid",3]]],[11,"from","","",202,[[]]],[11,"into","","",202,[[]]],[11,"to_owned","","",202,[[]]],[11,"clone_into","","",202,[[]]],[11,"borrow","","",202,[[]]],[11,"borrow_mut","","",202,[[]]],[11,"try_from","","",202,[[],["result",4]]],[11,"try_into","","",202,[[],["result",4]]],[11,"type_id","","",202,[[],["typeid",3]]],[11,"from","","",203,[[]]],[11,"into","","",203,[[]]],[11,"to_owned","","",203,[[]]],[11,"clone_into","","",203,[[]]],[11,"borrow","","",203,[[]]],[11,"borrow_mut","","",203,[[]]],[11,"try_from","","",203,[[],["result",4]]],[11,"try_into","","",203,[[],["result",4]]],[11,"type_id","","",203,[[],["typeid",3]]],[11,"from","","",204,[[]]],[11,"into","","",204,[[]]],[11,"to_owned","","",204,[[]]],[11,"clone_into","","",204,[[]]],[11,"borrow","","",204,[[]]],[11,"borrow_mut","","",204,[[]]],[11,"try_from","","",204,[[],["result",4]]],[11,"try_into","","",204,[[],["result",4]]],[11,"type_id","","",204,[[],["typeid",3]]],[11,"from","nix::sys::socket","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",205,[[]]],[11,"into","","",205,[[]]],[11,"into_iter","","",205,[[]]],[11,"to_owned","","",205,[[]]],[11,"clone_into","","",205,[[]]],[11,"borrow","","",205,[[]]],[11,"borrow_mut","","",205,[[]]],[11,"try_from","","",205,[[],["result",4]]],[11,"try_into","","",205,[[],["result",4]]],[11,"type_id","","",205,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","nix::sys::stat","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","nix::sys::statfs","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","nix::sys::statvfs","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","nix::sys::sysinfo","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","nix::sys::termios","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","nix::sys::time","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"to_string","","",122,[[],["string",3]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"to_string","","",123,[[],["string",3]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","nix::sys::uio","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","nix::sys::utsname","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","nix::sys::wait","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","nix::sys::inotify","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","","",206,[[]]],[11,"into","","",206,[[]]],[11,"to_owned","","",206,[[]]],[11,"clone_into","","",206,[[]]],[11,"borrow","","",206,[[]]],[11,"borrow_mut","","",206,[[]]],[11,"try_from","","",206,[[],["result",4]]],[11,"try_into","","",206,[[],["result",4]]],[11,"type_id","","",206,[[],["typeid",3]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","nix::sys::timerfd","",137,[[]]],[11,"into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","nix::time","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"to_string","","",138,[[],["string",3]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","nix::ucontext","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","nix::unistd","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"to_string","","",140,[[],["string",3]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"to_string","","",141,[[],["string",3]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"to_string","","",142,[[],["string",3]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"to_owned","","",145,[[]]],[11,"clone_into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"to_owned","","",147,[[]]],[11,"clone_into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"to_owned","","",148,[[]]],[11,"clone_into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"to_owned","","",149,[[]]],[11,"clone_into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"to_owned","","",153,[[]]],[11,"clone_into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"from","nix","",154,[[]]],[11,"into","","",154,[[]]],[11,"to_owned","","",154,[[]]],[11,"clone_into","","",154,[[]]],[11,"to_string","","",154,[[],["string",3]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"eq","nix::sys::stat","",101,[[["stat",3]]]],[11,"ne","","",101,[[["stat",3]]]],[11,"eq","nix::sys::socket","",74,[[["sockaddr_un",3]]]],[11,"eq","nix::pty","",25,[[["winsize",3]]]],[11,"ne","","",25,[[["winsize",3]]]],[11,"eq","nix::sys::socket","",68,[[["cmsghdr",3]]]],[11,"ne","","",68,[[["cmsghdr",3]]]],[11,"eq","","",70,[[["sockaddr",3]]]],[11,"ne","","",70,[[["sockaddr",3]]]],[11,"eq","","",71,[[["sockaddr_in",3]]]],[11,"ne","","",71,[[["sockaddr_in",3]]]],[11,"eq","nix::sys::signalfd","",65,[[["signalfd_siginfo",3]]]],[11,"ne","","",65,[[["signalfd_siginfo",3]]]],[11,"eq","nix::sys::socket","",72,[[["sockaddr_in6",3]]]],[11,"ne","","",72,[[["sockaddr_in6",3]]]],[11,"eq","","",69,[[["msghdr",3]]]],[11,"ne","","",69,[[["msghdr",3]]]],[11,"eq","","",73,[[["sockaddr_storage",3]]]],[11,"hash","nix::sys::signalfd","",65,[[]]],[11,"hash","nix::sys::socket","",69,[[]]],[11,"hash","","",68,[[]]],[11,"hash","","",71,[[]]],[11,"hash","","",72,[[]]],[11,"hash","nix::sys::stat","",101,[[]]],[11,"hash","nix::sys::socket","",74,[[]]],[11,"hash","nix::pty","",25,[[]]],[11,"hash","nix::sys::socket","",73,[[]]],[11,"hash","","",70,[[]]],[11,"clone","","",69,[[],["msghdr",3]]],[11,"clone","","",73,[[],["sockaddr_storage",3]]],[11,"clone","nix::sys::stat","",101,[[],["stat",3]]],[11,"clone","nix::sys::socket","",72,[[],["sockaddr_in6",3]]],[11,"clone","","",74,[[],["sockaddr_un",3]]],[11,"clone","","",71,[[],["sockaddr_in",3]]],[11,"clone","nix::pty","",25,[[],["winsize",3]]],[11,"clone","nix::sys::signalfd","",65,[[],["signalfd_siginfo",3]]],[11,"clone","nix::sys::socket","",68,[[],["cmsghdr",3]]],[11,"clone","","",70,[[],["sockaddr",3]]],[11,"fmt","nix::sys::signalfd","",65,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","nix::pty","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","nix::sys::socket","",73,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",69,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","nix::sys::stat","",101,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","nix::sys::socket","",72,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",71,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",68,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",74,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",70,[[["formatter",3]],[["result",4],["error",3]]]],[11,"get","nix::sys::socket::sockopt","",166,[[["rawfd",6]],["result",6]]],[11,"get","","",167,[[["rawfd",6]],["result",6]]],[11,"get","","",168,[[["rawfd",6]],["result",6]]],[11,"get","","",169,[[["rawfd",6]],[["result",6],["linger",3]]]],[11,"get","","",174,[[["rawfd",6]],["result",6]]],[11,"get","","",175,[[["rawfd",6]],["result",6]]],[11,"get","","",176,[[["rawfd",6]],[["timeval",3],["result",6]]]],[11,"get","","",177,[[["rawfd",6]],[["timeval",3],["result",6]]]],[11,"get","","",178,[[["rawfd",6]],["result",6]]],[11,"get","","",179,[[["rawfd",6]],["result",6]]],[11,"get","","",180,[[["rawfd",6]],["result",6]]],[11,"get","","",181,[[["rawfd",6]],["result",6]]],[11,"get","","",182,[[["rawfd",6]],[["result",6],["unixcredentials",3]]]],[11,"get","","",183,[[["rawfd",6]],["result",6]]],[11,"get","","",184,[[["rawfd",6]],["result",6]]],[11,"get","","",185,[[["rawfd",6]],["result",6]]],[11,"get","","",186,[[["rawfd",6]],["result",6]]],[11,"get","","",187,[[["rawfd",6]],["result",6]]],[11,"get","","",190,[[["rawfd",6]],[["result",6],["socktype",4]]]],[11,"get","","",191,[[["rawfd",6]],["result",6]]],[11,"get","","",192,[[["rawfd",6]],[["osstring",3],["result",6]]]],[11,"get","","",193,[[["rawfd",6]],[["result",6],["sockaddr_in",3]]]],[11,"get","","",194,[[["rawfd",6]],["result",6]]],[11,"get","","",195,[[["rawfd",6]],["result",6]]],[11,"get","","",196,[[["rawfd",6]],["result",6]]],[11,"get","","",197,[[["rawfd",6]],["result",6]]],[11,"get","","",198,[[["rawfd",6]],[["osstring",3],["result",6]]]],[11,"get","","",199,[[["rawfd",6]],["result",6]]],[11,"get","","",200,[[["rawfd",6]],["result",6]]],[11,"get","","",201,[[["rawfd",6]],[["c_int",6],["result",6]]]],[11,"get","","",202,[[["rawfd",6]],["result",6]]],[11,"set","","",166,[[["rawfd",6]],["result",6]]],[11,"set","","",167,[[["rawfd",6]],["result",6]]],[11,"set","","",168,[[["rawfd",6]],["result",6]]],[11,"set","","",169,[[["linger",3],["rawfd",6]],["result",6]]],[11,"set","","",170,[[["ipmembershiprequest",3],["rawfd",6]],["result",6]]],[11,"set","","",171,[[["ipmembershiprequest",3],["rawfd",6]],["result",6]]],[11,"set","","",172,[[["ipv6membershiprequest",3],["rawfd",6]],["result",6]]],[11,"set","","",173,[[["ipv6membershiprequest",3],["rawfd",6]],["result",6]]],[11,"set","","",174,[[["rawfd",6]],["result",6]]],[11,"set","","",175,[[["rawfd",6]],["result",6]]],[11,"set","","",176,[[["timeval",3],["rawfd",6]],["result",6]]],[11,"set","","",177,[[["timeval",3],["rawfd",6]],["result",6]]],[11,"set","","",178,[[["rawfd",6]],["result",6]]],[11,"set","","",179,[[["rawfd",6]],["result",6]]],[11,"set","","",181,[[["rawfd",6]],["result",6]]],[11,"set","","",183,[[["rawfd",6]],["result",6]]],[11,"set","","",184,[[["rawfd",6]],["result",6]]],[11,"set","","",185,[[["rawfd",6]],["result",6]]],[11,"set","","",186,[[["rawfd",6]],["result",6]]],[11,"set","","",187,[[["rawfd",6]],["result",6]]],[11,"set","","",188,[[["rawfd",6]],["result",6]]],[11,"set","","",189,[[["rawfd",6]],["result",6]]],[11,"set","","",192,[[["osstring",3],["rawfd",6]],["result",6]]],[11,"set","","",194,[[["rawfd",6]],["result",6]]],[11,"set","","",195,[[["rawfd",6]],["result",6]]],[11,"set","","",196,[[["rawfd",6]],["result",6]]],[11,"set","","",197,[[["rawfd",6]],["result",6]]],[11,"set","","",198,[[["osstring",3],["rawfd",6]],["result",6]]],[11,"set","","",199,[[["rawfd",6]],["result",6]]],[11,"set","","",200,[[["rawfd",6]],["result",6]]],[11,"set","","",201,[[["c_int",6],["rawfd",6]],["result",6]]],[11,"set","","",202,[[["rawfd",6]],["result",6]]],[11,"set","","",203,[[["rawfd",6]],["result",6]]],[11,"set","","",204,[[["rawfd",6]],["result",6]]],[11,"seconds","nix::sys::time","",122,[[],["timespec",3]]],[11,"milliseconds","","",122,[[],["timespec",3]]],[11,"microseconds","","Makes a new <code>TimeSpec</code> with given number of microseconds.",122,[[],["timespec",3]]],[11,"nanoseconds","","Makes a new <code>TimeSpec</code> with given number of nanoseconds.",122,[[],["timespec",3]]],[11,"num_seconds","","",122,[[]]],[11,"num_milliseconds","","",122,[[]]],[11,"num_microseconds","","",122,[[]]],[11,"num_nanoseconds","","",122,[[]]],[11,"seconds","","",123,[[],["timeval",3]]],[11,"milliseconds","","",123,[[],["timeval",3]]],[11,"microseconds","","Makes a new <code>TimeVal</code> with given number of microseconds.",123,[[],["timeval",3]]],[11,"nanoseconds","","Makes a new <code>TimeVal</code> with given number of nanoseconds.  …",123,[[],["timeval",3]]],[11,"num_seconds","","",123,[[]]],[11,"num_milliseconds","","",123,[[]]],[11,"num_microseconds","","",123,[[]]],[11,"num_nanoseconds","","",123,[[]]],[11,"drop","nix::dir","",0,[[]]],[11,"drop","","",156,[[]]],[11,"drop","nix::ifaddrs","",158,[[]]],[11,"drop","nix::pty","",159,[[]]],[11,"drop","nix::sys::aio","If the <code>AioCb</code> has no remaining state in the kernel, just …",33,[[]]],[11,"drop","nix::sys::signalfd","",67,[[]]],[11,"drop","nix::sys::timerfd","",137,[[]]],[11,"as_mut","nix::sys::time","",122,[[],["timespec",3]]],[11,"as_mut","","",123,[[],["timeval",3]]],[11,"as_ref","nix::sys::signal","",56,[[]]],[11,"as_ref","","",59,[[],["sigset_t",3]]],[11,"as_ref","nix::sys::time","",122,[[],["timespec",3]]],[11,"as_ref","","",123,[[],["timeval",3]]],[11,"from","nix::sys::aio","",34,[[["aiocb",3],["vec",3]],["liocb",3]]],[11,"from","nix::sys::signal","",164,[[["sigevent",3]]]],[11,"from","nix::sys::socket","",90,[[["ucred",3]]]],[11,"from","nix::sys::termios","",111,[[["termios",3]]]],[11,"from","nix::sys::time","",122,[[["timespec",3]]]],[11,"from","","",122,[[["duration",3]]]],[11,"from","","",123,[[["timeval",3]]]],[11,"from","nix::time","",138,[[["clockid_t",6]]]],[11,"from","nix","",207,[[["pid",3]]]],[11,"from","nix::unistd","",152,[[["passwd",3]],["user",3]]],[11,"from","","",153,[[["group",3]],["group",3]]],[11,"from","nix","",154,[[["errno",4]],["error",4]]],[11,"from","","",154,[[["fromutf8error",3]],["error",4]]],[11,"into","nix::sys::socket","",90,[[],["ucred",3]]],[11,"into","nix::time","",138,[[],["clockid_t",6]]],[11,"next_back","nix::sys::select","",163,[[],[["rawfd",6],["option",4]]]],[11,"extend","nix::fcntl","",6,[[["intoiterator",8]]]],[11,"extend","","",7,[[["intoiterator",8]]]],[11,"extend","","",8,[[["intoiterator",8]]]],[11,"extend","","",9,[[["intoiterator",8]]]],[11,"extend","","",12,[[["intoiterator",8]]]],[11,"extend","","",13,[[["intoiterator",8]]]],[11,"extend","nix::kmod","",15,[[["intoiterator",8]]]],[11,"extend","","",16,[[["intoiterator",8]]]],[11,"extend","nix::mount","",17,[[["intoiterator",8]]]],[11,"extend","","",18,[[["intoiterator",8]]]],[11,"extend","nix::mqueue","",19,[[["intoiterator",8]]]],[11,"extend","","",20,[[["intoiterator",8]]]],[11,"extend","nix::net::if_","",22,[[["intoiterator",8]]]],[11,"extend","nix::poll","",24,[[["intoiterator",8]]]],[11,"extend","nix::sched","",160,[[["intoiterator",8]]]],[11,"extend","nix::sys::epoll","",35,[[["intoiterator",8]]]],[11,"extend","","",37,[[["intoiterator",8]]]],[11,"extend","nix::sys::eventfd","",39,[[["intoiterator",8]]]],[11,"extend","nix::sys::memfd","",40,[[["intoiterator",8]]]],[11,"extend","nix::sys::mman","",41,[[["intoiterator",8]]]],[11,"extend","","",42,[[["intoiterator",8]]]],[11,"extend","","",43,[[["intoiterator",8]]]],[11,"extend","","",45,[[["intoiterator",8]]]],[11,"extend","","",46,[[["intoiterator",8]]]],[11,"extend","nix::sys::personality","",47,[[["intoiterator",8]]]],[11,"extend","nix::sys::ptrace","",162,[[["intoiterator",8]]]],[11,"extend","nix::sys::quota","",52,[[["intoiterator",8]]]],[11,"extend","nix::sys::signal","",57,[[["intoiterator",8]]]],[11,"extend","nix::sys::signalfd","",66,[[["intoiterator",8]]]],[11,"extend","nix::sys::socket","",88,[[["intoiterator",8]]]],[11,"extend","","",89,[[["intoiterator",8]]]],[11,"extend","nix::sys::stat","",102,[[["intoiterator",8]]]],[11,"extend","","",103,[[["intoiterator",8]]]],[11,"extend","nix::sys::statvfs","",108,[[["intoiterator",8]]]],[11,"extend","nix::sys::termios","",117,[[["intoiterator",8]]]],[11,"extend","","",118,[[["intoiterator",8]]]],[11,"extend","","",119,[[["intoiterator",8]]]],[11,"extend","","",120,[[["intoiterator",8]]]],[11,"extend","nix::sys::wait","",127,[[["intoiterator",8]]]],[11,"extend","nix::sys::inotify","",129,[[["intoiterator",8]]]],[11,"extend","","",130,[[["intoiterator",8]]]],[11,"extend","nix::sys::timerfd","",134,[[["intoiterator",8]]]],[11,"extend","","",135,[[["intoiterator",8]]]],[11,"extend","nix::unistd","",151,[[["intoiterator",8]]]],[11,"into_iter","nix::dir","Creates a owning iterator, that is, one that takes …",0,[[]]],[11,"next","","",156,[[],["option",4]]],[11,"next","","",157,[[],["option",4]]],[11,"next","nix::ifaddrs","",158,[[],["option",4]]],[11,"next","nix::sys::select","",163,[[],[["rawfd",6],["option",4]]]],[11,"size_hint","","",163,[[]]],[11,"next","nix::sys::signal","",165,[[],[["option",4],["signal",4]]]],[11,"next","nix::sys::signalfd","",67,[[],["option",4]]],[11,"next","nix::sys::socket","",205,[[],[["controlmessageowned",4],["option",4]]]],[11,"clone","nix::dir","",2,[[],["entry",3]]],[11,"clone","","",1,[[],["type",4]]],[11,"clone","nix::errno","",3,[[],["errno",4]]],[11,"clone","nix::fcntl","",6,[[],["atflags",3]]],[11,"clone","","",7,[[],["oflag",3]]],[11,"clone","","",8,[[],["sealflag",3]]],[11,"clone","","",9,[[],["fdflag",3]]],[11,"clone","","",11,[[],["flockarg",4]]],[11,"clone","","",12,[[],["splicefflags",3]]],[11,"clone","","",13,[[],["fallocateflags",3]]],[11,"clone","","",5,[[],["posixfadviseadvice",4]]],[11,"clone","nix::ifaddrs","",14,[[],["interfaceaddress",3]]],[11,"clone","nix::kmod","",15,[[],["moduleinitflags",3]]],[11,"clone","","",16,[[],["deletemoduleflags",3]]],[11,"clone","nix::mount","",17,[[],["msflags",3]]],[11,"clone","","",18,[[],["mntflags",3]]],[11,"clone","nix::mqueue","",19,[[],["mq_oflag",3]]],[11,"clone","","",20,[[],["fdflag",3]]],[11,"clone","","",21,[[],["mqattr",3]]],[11,"clone","nix::net::if_","",22,[[],["interfaceflags",3]]],[11,"clone","nix::poll","",23,[[],["pollfd",3]]],[11,"clone","","",24,[[],["pollflags",3]]],[11,"clone","nix::pty","",26,[[],["openptyresult",3]]],[11,"clone","","",27,[[],["forkptyresult",3]]],[11,"clone","nix::sched","",160,[[],["cloneflags",3]]],[11,"clone","","",161,[[],["cpuset",3]]],[11,"clone","nix::sys::aio","",28,[[],["aiofsyncmode",4]]],[11,"clone","","",29,[[],["lioopcode",4]]],[11,"clone","","",30,[[],["liomode",4]]],[11,"clone","","",31,[[],["aiocancelstat",4]]],[11,"clone","nix::sys::epoll","",35,[[],["epollflags",3]]],[11,"clone","","",36,[[],["epollop",4]]],[11,"clone","","",37,[[],["epollcreateflags",3]]],[11,"clone","","",38,[[],["epollevent",3]]],[11,"clone","nix::sys::eventfd","",39,[[],["efdflags",3]]],[11,"clone","nix::sys::memfd","",40,[[],["memfdcreateflag",3]]],[11,"clone","nix::sys::mman","",41,[[],["protflags",3]]],[11,"clone","","",42,[[],["mapflags",3]]],[11,"clone","","",43,[[],["mremapflags",3]]],[11,"clone","","",44,[[],["mmapadvise",4]]],[11,"clone","","",45,[[],["msflags",3]]],[11,"clone","","",46,[[],["mlockallflags",3]]],[11,"clone","nix::sys::personality","",47,[[],["persona",3]]],[11,"clone","nix::sys::ptrace","",48,[[],["request",4]]],[11,"clone","","",49,[[],["event",4]]],[11,"clone","","",162,[[],["options",3]]],[11,"clone","nix::sys::quota","",50,[[],["quotatype",4]]],[11,"clone","","",51,[[],["quotafmt",4]]],[11,"clone","","",52,[[],["quotavalidflags",3]]],[11,"clone","","",53,[[],["dqblk",3]]],[11,"clone","nix::sys::reboot","",54,[[],["rebootmode",4]]],[11,"clone","nix::sys::select","",55,[[],["fdset",3]]],[11,"clone","nix::sys::signal","",56,[[],["signal",4]]],[11,"clone","","",165,[[],["signaliterator",3]]],[11,"clone","","",57,[[],["saflags",3]]],[11,"clone","","",58,[[],["sigmaskhow",4]]],[11,"clone","","",59,[[],["sigset",3]]],[11,"clone","","",60,[[],["sighandler",4]]],[11,"clone","","",61,[[],["sigaction",3]]],[11,"clone","","",62,[[],["sigevnotify",4]]],[11,"clone","","",164,[[],["sigevent",3]]],[11,"clone","nix::sys::signalfd","",66,[[],["sfdflags",3]]],[11,"clone","nix::sys::socket","",75,[[],["addressfamily",4]]],[11,"clone","","",77,[[],["inetaddr",4]]],[11,"clone","","",79,[[],["ipaddr",4]]],[11,"clone","","",80,[[],["ipv4addr",3]]],[11,"clone","","",81,[[],["ipv6addr",3]]],[11,"clone","","",78,[[],["unixaddr",3]]],[11,"clone","","",76,[[],["sockaddr",4]]],[11,"clone","","",83,[[],["netlinkaddr",3]]],[11,"clone","","",84,[[],["algaddr",3]]],[11,"clone","","",82,[[],["linkaddr",3]]],[11,"clone","","",85,[[],["vsockaddr",3]]],[11,"clone","nix::sys::socket::sockopt","",166,[[],["reuseaddr",3]]],[11,"clone","","",167,[[],["reuseport",3]]],[11,"clone","","",168,[[],["tcpnodelay",3]]],[11,"clone","","",169,[[],["linger",3]]],[11,"clone","","",170,[[],["ipaddmembership",3]]],[11,"clone","","",171,[[],["ipdropmembership",3]]],[11,"clone","","",172,[[],["ipv6addmembership",3]]],[11,"clone","","",173,[[],["ipv6dropmembership",3]]],[11,"clone","","",174,[[],["ipmulticastttl",3]]],[11,"clone","","",175,[[],["ipmulticastloop",3]]],[11,"clone","","",176,[[],["receivetimeout",3]]],[11,"clone","","",177,[[],["sendtimeout",3]]],[11,"clone","","",178,[[],["broadcast",3]]],[11,"clone","","",179,[[],["oobinline",3]]],[11,"clone","","",180,[[],["socketerror",3]]],[11,"clone","","",181,[[],["keepalive",3]]],[11,"clone","","",182,[[],["peercredentials",3]]],[11,"clone","","",183,[[],["tcpkeepidle",3]]],[11,"clone","","",184,[[],["tcpkeepcount",3]]],[11,"clone","","",185,[[],["tcpkeepinterval",3]]],[11,"clone","","",186,[[],["rcvbuf",3]]],[11,"clone","","",187,[[],["sndbuf",3]]],[11,"clone","","",188,[[],["rcvbufforce",3]]],[11,"clone","","",189,[[],["sndbufforce",3]]],[11,"clone","","",190,[[],["socktype",3]]],[11,"clone","","",191,[[],["acceptconn",3]]],[11,"clone","","",192,[[],["bindtodevice",3]]],[11,"clone","","",193,[[],["originaldst",3]]],[11,"clone","","",194,[[],["receivetimestamp",3]]],[11,"clone","","",195,[[],["iptransparent",3]]],[11,"clone","","",196,[[],["mark",3]]],[11,"clone","","",197,[[],["passcred",3]]],[11,"clone","","",198,[[],["tcpcongestion",3]]],[11,"clone","","",199,[[],["ipv4packetinfo",3]]],[11,"clone","","",200,[[],["ipv6recvpacketinfo",3]]],[11,"clone","","",201,[[],["udpgsosegment",3]]],[11,"clone","","",202,[[],["udpgrosegment",3]]],[11,"clone","","",203,[[],["algsetaeadauthsize",3]]],[11,"clone","","",204,[[],["algsetkey",3]]],[11,"clone","nix::sys::socket","",86,[[],["socktype",4]]],[11,"clone","","",87,[[],["sockprotocol",4]]],[11,"clone","","",88,[[],["sockflag",3]]],[11,"clone","","",89,[[],["msgflags",3]]],[11,"clone","","",90,[[],["unixcredentials",3]]],[11,"clone","","",91,[[],["ipmembershiprequest",3]]],[11,"clone","","",92,[[],["ipv6membershiprequest",3]]],[11,"clone","","",93,[[],["recvmsg",3]]],[11,"clone","","",205,[[],["cmsgiterator",3]]],[11,"clone","","",94,[[],["controlmessageowned",4]]],[11,"clone","","",95,[[],["controlmessage",4]]],[11,"clone","","",100,[[],["shutdown",4]]],[11,"clone","nix::sys::stat","",102,[[],["sflag",3]]],[11,"clone","","",103,[[],["mode",3]]],[11,"clone","","",104,[[],["fchmodatflags",4]]],[11,"clone","","",105,[[],["utimensatflags",4]]],[11,"clone","nix::sys::statfs","",107,[[],["statfs",3]]],[11,"clone","","",106,[[],["fstype",3]]],[11,"clone","nix::sys::statvfs","",108,[[],["fsflags",3]]],[11,"clone","","",109,[[],["statvfs",3]]],[11,"clone","nix::sys::sysinfo","",110,[[],["sysinfo",3]]],[11,"clone","nix::sys::termios","",111,[[],["termios",3]]],[11,"clone","","",112,[[],["baudrate",4]]],[11,"clone","","",113,[[],["setarg",4]]],[11,"clone","","",114,[[],["flusharg",4]]],[11,"clone","","",115,[[],["flowarg",4]]],[11,"clone","","",116,[[],["specialcharacterindices",4]]],[11,"clone","","",117,[[],["inputflags",3]]],[11,"clone","","",118,[[],["outputflags",3]]],[11,"clone","","",119,[[],["controlflags",3]]],[11,"clone","","",120,[[],["localflags",3]]],[11,"clone","nix::sys::time","",122,[[],["timespec",3]]],[11,"clone","","",123,[[],["timeval",3]]],[11,"clone","nix::sys::uio","",124,[[],["remoteiovec",3]]],[11,"clone","","",125,[[],["iovec",3]]],[11,"clone","nix::sys::utsname","",126,[[],["utsname",3]]],[11,"clone","nix::sys::wait","",127,[[],["waitpidflag",3]]],[11,"clone","","",128,[[],["waitstatus",4]]],[11,"clone","nix::sys::inotify","",129,[[],["addwatchflags",3]]],[11,"clone","","",130,[[],["initflags",3]]],[11,"clone","","",132,[[],["inotify",3]]],[11,"clone","","",206,[[],["watchdescriptor",3]]],[11,"clone","nix::sys::timerfd","",133,[[],["clockid",4]]],[11,"clone","","",134,[[],["timerflags",3]]],[11,"clone","","",135,[[],["timersettimeflags",3]]],[11,"clone","","",136,[[],["expiration",4]]],[11,"clone","nix::time","",138,[[],["clockid",3]]],[11,"clone","nix::ucontext","",139,[[],["ucontext",3]]],[11,"clone","nix::unistd","",140,[[],["uid",3]]],[11,"clone","","",141,[[],["gid",3]]],[11,"clone","","",142,[[],["pid",3]]],[11,"clone","","",143,[[],["forkresult",4]]],[11,"clone","","",145,[[],["fchownatflags",4]]],[11,"clone","","",146,[[],["whence",4]]],[11,"clone","","",147,[[],["linkatflags",4]]],[11,"clone","","",148,[[],["unlinkatflags",4]]],[11,"clone","","",149,[[],["pathconfvar",4]]],[11,"clone","","",150,[[],["sysconfvar",4]]],[11,"clone","","",151,[[],["accessflags",3]]],[11,"clone","","",152,[[],["user",3]]],[11,"clone","","",153,[[],["group",3]]],[11,"clone","nix","",154,[[],["error",4]]],[11,"default","nix::sched","",161,[[]]],[11,"default","nix::sys::quota","",52,[[],["quotavalidflags",3]]],[11,"default","","",53,[[],["dqblk",3]]],[11,"default","nix::sys::select","",55,[[]]],[11,"default","nix::sys::socket::sockopt","",204,[[]]],[11,"default","nix::sys::socket","",90,[[]]],[11,"default","nix::sys::statvfs","",108,[[],["fsflags",3]]],[11,"cmp","nix::fcntl","",6,[[["atflags",3]],["ordering",4]]],[11,"cmp","","",7,[[["oflag",3]],["ordering",4]]],[11,"cmp","","",8,[[["sealflag",3]],["ordering",4]]],[11,"cmp","","",9,[[["fdflag",3]],["ordering",4]]],[11,"cmp","","",12,[[["splicefflags",3]],["ordering",4]]],[11,"cmp","","",13,[[["fallocateflags",3]],["ordering",4]]],[11,"cmp","","",5,[[["posixfadviseadvice",4]],["ordering",4]]],[11,"cmp","nix::kmod","",15,[[["moduleinitflags",3]],["ordering",4]]],[11,"cmp","","",16,[[["deletemoduleflags",3]],["ordering",4]]],[11,"cmp","nix::mount","",17,[[["msflags",3]],["ordering",4]]],[11,"cmp","","",18,[[["mntflags",3]],["ordering",4]]],[11,"cmp","nix::mqueue","",19,[[["mq_oflag",3]],["ordering",4]]],[11,"cmp","","",20,[[["fdflag",3]],["ordering",4]]],[11,"cmp","nix::net::if_","",22,[[["interfaceflags",3]],["ordering",4]]],[11,"cmp","nix::poll","",24,[[["pollflags",3]],["ordering",4]]],[11,"cmp","nix::sched","",160,[[["cloneflags",3]],["ordering",4]]],[11,"cmp","nix::sys::aio","",28,[[["aiofsyncmode",4]],["ordering",4]]],[11,"cmp","","",29,[[["lioopcode",4]],["ordering",4]]],[11,"cmp","","",30,[[["liomode",4]],["ordering",4]]],[11,"cmp","nix::sys::epoll","",35,[[["epollflags",3]],["ordering",4]]],[11,"cmp","","",37,[[["epollcreateflags",3]],["ordering",4]]],[11,"cmp","nix::sys::eventfd","",39,[[["efdflags",3]],["ordering",4]]],[11,"cmp","nix::sys::memfd","",40,[[["memfdcreateflag",3]],["ordering",4]]],[11,"cmp","nix::sys::mman","",41,[[["protflags",3]],["ordering",4]]],[11,"cmp","","",42,[[["mapflags",3]],["ordering",4]]],[11,"cmp","","",43,[[["mremapflags",3]],["ordering",4]]],[11,"cmp","","",44,[[["mmapadvise",4]],["ordering",4]]],[11,"cmp","","",45,[[["msflags",3]],["ordering",4]]],[11,"cmp","","",46,[[["mlockallflags",3]],["ordering",4]]],[11,"cmp","nix::sys::personality","",47,[[["persona",3]],["ordering",4]]],[11,"cmp","nix::sys::ptrace","",48,[[["request",4]],["ordering",4]]],[11,"cmp","","",49,[[["event",4]],["ordering",4]]],[11,"cmp","","",162,[[["options",3]],["ordering",4]]],[11,"cmp","nix::sys::quota","",50,[[["quotatype",4]],["ordering",4]]],[11,"cmp","","",51,[[["quotafmt",4]],["ordering",4]]],[11,"cmp","","",52,[[["quotavalidflags",3]],["ordering",4]]],[11,"cmp","nix::sys::reboot","",54,[[["rebootmode",4]],["ordering",4]]],[11,"cmp","nix::sys::signal","",56,[[["signal",4]],["ordering",4]]],[11,"cmp","","",57,[[["saflags",3]],["ordering",4]]],[11,"cmp","","",58,[[["sigmaskhow",4]],["ordering",4]]],[11,"cmp","nix::sys::signalfd","",66,[[["sfdflags",3]],["ordering",4]]],[11,"cmp","nix::sys::socket","",88,[[["sockflag",3]],["ordering",4]]],[11,"cmp","","",89,[[["msgflags",3]],["ordering",4]]],[11,"cmp","nix::sys::stat","",102,[[["sflag",3]],["ordering",4]]],[11,"cmp","","",103,[[["mode",3]],["ordering",4]]],[11,"cmp","nix::sys::statvfs","",108,[[["fsflags",3]],["ordering",4]]],[11,"cmp","nix::sys::termios","",112,[[["baudrate",4]],["ordering",4]]],[11,"cmp","","",113,[[["setarg",4]],["ordering",4]]],[11,"cmp","","",114,[[["flusharg",4]],["ordering",4]]],[11,"cmp","","",115,[[["flowarg",4]],["ordering",4]]],[11,"cmp","","",116,[[["specialcharacterindices",4]],["ordering",4]]],[11,"cmp","","",117,[[["inputflags",3]],["ordering",4]]],[11,"cmp","","",118,[[["outputflags",3]],["ordering",4]]],[11,"cmp","","",119,[[["controlflags",3]],["ordering",4]]],[11,"cmp","","",120,[[["localflags",3]],["ordering",4]]],[11,"cmp","nix::sys::time","",122,[[["timespec",3]],["ordering",4]]],[11,"cmp","","",123,[[["timeval",3]],["ordering",4]]],[11,"cmp","nix::sys::wait","",127,[[["waitpidflag",3]],["ordering",4]]],[11,"cmp","nix::sys::inotify","",129,[[["addwatchflags",3]],["ordering",4]]],[11,"cmp","","",130,[[["initflags",3]],["ordering",4]]],[11,"cmp","","",206,[[["watchdescriptor",3]],["ordering",4]]],[11,"cmp","nix::sys::timerfd","",133,[[["clockid",4]],["ordering",4]]],[11,"cmp","","",134,[[["timerflags",3]],["ordering",4]]],[11,"cmp","","",135,[[["timersettimeflags",3]],["ordering",4]]],[11,"cmp","nix::time","",138,[[["clockid",3]],["ordering",4]]],[11,"cmp","nix::unistd","",142,[[["pid",3]],["ordering",4]]],[11,"cmp","","",151,[[["accessflags",3]],["ordering",4]]],[11,"eq","nix::dir","",0,[[["dir",3]]]],[11,"ne","","",0,[[["dir",3]]]],[11,"eq","","",156,[[["iter",3]]]],[11,"ne","","",156,[[["iter",3]]]],[11,"eq","","",157,[[["owningiter",3]]]],[11,"ne","","",157,[[["owningiter",3]]]],[11,"eq","","",2,[[["entry",3]]]],[11,"ne","","",2,[[["entry",3]]]],[11,"eq","","",1,[[["type",4]]]],[11,"eq","nix::errno","",3,[[["errno",4]]]],[11,"eq","nix::fcntl","",6,[[["atflags",3]]]],[11,"ne","","",6,[[["atflags",3]]]],[11,"eq","","",7,[[["oflag",3]]]],[11,"ne","","",7,[[["oflag",3]]]],[11,"eq","","",8,[[["sealflag",3]]]],[11,"ne","","",8,[[["sealflag",3]]]],[11,"eq","","",9,[[["fdflag",3]]]],[11,"ne","","",9,[[["fdflag",3]]]],[11,"eq","","",10,[[["fcntlarg",4]]]],[11,"ne","","",10,[[["fcntlarg",4]]]],[11,"eq","","",11,[[["flockarg",4]]]],[11,"eq","","",12,[[["splicefflags",3]]]],[11,"ne","","",12,[[["splicefflags",3]]]],[11,"eq","","",13,[[["fallocateflags",3]]]],[11,"ne","","",13,[[["fallocateflags",3]]]],[11,"eq","","",5,[[["posixfadviseadvice",4]]]],[11,"eq","nix::ifaddrs","",14,[[["interfaceaddress",3]]]],[11,"ne","","",14,[[["interfaceaddress",3]]]],[11,"eq","","",158,[[["interfaceaddressiterator",3]]]],[11,"ne","","",158,[[["interfaceaddressiterator",3]]]],[11,"eq","nix::kmod","",15,[[["moduleinitflags",3]]]],[11,"ne","","",15,[[["moduleinitflags",3]]]],[11,"eq","","",16,[[["deletemoduleflags",3]]]],[11,"ne","","",16,[[["deletemoduleflags",3]]]],[11,"eq","nix::mount","",17,[[["msflags",3]]]],[11,"ne","","",17,[[["msflags",3]]]],[11,"eq","","",18,[[["mntflags",3]]]],[11,"ne","","",18,[[["mntflags",3]]]],[11,"eq","nix::mqueue","",19,[[["mq_oflag",3]]]],[11,"ne","","",19,[[["mq_oflag",3]]]],[11,"eq","","",20,[[["fdflag",3]]]],[11,"ne","","",20,[[["fdflag",3]]]],[11,"eq","","",21,[[["mqattr",3]]]],[11,"ne","","",21,[[["mqattr",3]]]],[11,"eq","nix::net::if_","",22,[[["interfaceflags",3]]]],[11,"ne","","",22,[[["interfaceflags",3]]]],[11,"eq","nix::poll","",23,[[["pollfd",3]]]],[11,"ne","","",23,[[["pollfd",3]]]],[11,"eq","","",24,[[["pollflags",3]]]],[11,"ne","","",24,[[["pollflags",3]]]],[11,"eq","nix::pty","",26,[[["openptyresult",3]]]],[11,"ne","","",26,[[["openptyresult",3]]]],[11,"eq","","",159,[[["ptymaster",3]]]],[11,"ne","","",159,[[["ptymaster",3]]]],[11,"eq","nix::sched","",160,[[["cloneflags",3]]]],[11,"ne","","",160,[[["cloneflags",3]]]],[11,"eq","","",161,[[["cpuset",3]]]],[11,"ne","","",161,[[["cpuset",3]]]],[11,"eq","nix::sys::aio","",28,[[["aiofsyncmode",4]]]],[11,"eq","","",29,[[["lioopcode",4]]]],[11,"eq","","",30,[[["liomode",4]]]],[11,"eq","","",31,[[["aiocancelstat",4]]]],[11,"eq","nix::sys::epoll","",35,[[["epollflags",3]]]],[11,"ne","","",35,[[["epollflags",3]]]],[11,"eq","","",36,[[["epollop",4]]]],[11,"eq","","",37,[[["epollcreateflags",3]]]],[11,"ne","","",37,[[["epollcreateflags",3]]]],[11,"eq","","",38,[[["epollevent",3]]]],[11,"ne","","",38,[[["epollevent",3]]]],[11,"eq","nix::sys::eventfd","",39,[[["efdflags",3]]]],[11,"ne","","",39,[[["efdflags",3]]]],[11,"eq","nix::sys::memfd","",40,[[["memfdcreateflag",3]]]],[11,"ne","","",40,[[["memfdcreateflag",3]]]],[11,"eq","nix::sys::mman","",41,[[["protflags",3]]]],[11,"ne","","",41,[[["protflags",3]]]],[11,"eq","","",42,[[["mapflags",3]]]],[11,"ne","","",42,[[["mapflags",3]]]],[11,"eq","","",43,[[["mremapflags",3]]]],[11,"ne","","",43,[[["mremapflags",3]]]],[11,"eq","","",44,[[["mmapadvise",4]]]],[11,"eq","","",45,[[["msflags",3]]]],[11,"ne","","",45,[[["msflags",3]]]],[11,"eq","","",46,[[["mlockallflags",3]]]],[11,"ne","","",46,[[["mlockallflags",3]]]],[11,"eq","nix::sys::personality","",47,[[["persona",3]]]],[11,"ne","","",47,[[["persona",3]]]],[11,"eq","nix::sys::ptrace","",48,[[["request",4]]]],[11,"eq","","",49,[[["event",4]]]],[11,"eq","","",162,[[["options",3]]]],[11,"ne","","",162,[[["options",3]]]],[11,"eq","nix::sys::quota","",50,[[["quotatype",4]]]],[11,"eq","","",51,[[["quotafmt",4]]]],[11,"eq","","",52,[[["quotavalidflags",3]]]],[11,"ne","","",52,[[["quotavalidflags",3]]]],[11,"eq","","",53,[[["dqblk",3]]]],[11,"ne","","",53,[[["dqblk",3]]]],[11,"eq","nix::sys::reboot","",54,[[["rebootmode",4]]]],[11,"eq","nix::sys::select","",55,[[["fdset",3]]]],[11,"ne","","",55,[[["fdset",3]]]],[11,"eq","nix::sys::signal","",56,[[["signal",4]]]],[11,"eq","","",165,[[["signaliterator",3]]]],[11,"ne","","",165,[[["signaliterator",3]]]],[11,"eq","","",57,[[["saflags",3]]]],[11,"ne","","",57,[[["saflags",3]]]],[11,"eq","","",58,[[["sigmaskhow",4]]]],[11,"eq","","",59,[[["sigset",3]]]],[11,"ne","","",59,[[["sigset",3]]]],[11,"eq","","",60,[[["sighandler",4]]]],[11,"ne","","",60,[[["sighandler",4]]]],[11,"eq","","",61,[[["sigaction",3]]]],[11,"ne","","",61,[[["sigaction",3]]]],[11,"eq","","",62,[[["sigevnotify",4]]]],[11,"ne","","",62,[[["sigevnotify",4]]]],[11,"eq","","",164,[[["sigevent",3]]]],[11,"ne","","",164,[[["sigevent",3]]]],[11,"eq","nix::sys::signalfd","",66,[[["sfdflags",3]]]],[11,"ne","","",66,[[["sfdflags",3]]]],[11,"eq","","",67,[[["signalfd",3]]]],[11,"ne","","",67,[[["signalfd",3]]]],[11,"eq","nix::sys::socket","",75,[[["addressfamily",4]]]],[11,"eq","","",77,[[["inetaddr",4]]]],[11,"ne","","",77,[[["inetaddr",4]]]],[11,"eq","","",79,[[["ipaddr",4]]]],[11,"ne","","",79,[[["ipaddr",4]]]],[11,"eq","","",80,[[["ipv4addr",3]]]],[11,"ne","","",80,[[["ipv4addr",3]]]],[11,"eq","","",81,[[["ipv6addr",3]]]],[11,"ne","","",81,[[["ipv6addr",3]]]],[11,"eq","","",78,[[["unixaddr",3]]]],[11,"eq","","",76,[[["sockaddr",4]]]],[11,"ne","","",76,[[["sockaddr",4]]]],[11,"eq","","",83,[[["netlinkaddr",3]]]],[11,"ne","","",83,[[["netlinkaddr",3]]]],[11,"eq","","",84,[[]]],[11,"eq","","",82,[[["linkaddr",3]]]],[11,"ne","","",82,[[["linkaddr",3]]]],[11,"eq","","",85,[[]]],[11,"eq","nix::sys::socket::sockopt","",166,[[["reuseaddr",3]]]],[11,"eq","","",167,[[["reuseport",3]]]],[11,"eq","","",168,[[["tcpnodelay",3]]]],[11,"eq","","",169,[[["linger",3]]]],[11,"eq","","",170,[[["ipaddmembership",3]]]],[11,"eq","","",171,[[["ipdropmembership",3]]]],[11,"eq","","",172,[[["ipv6addmembership",3]]]],[11,"eq","","",173,[[["ipv6dropmembership",3]]]],[11,"eq","","",174,[[["ipmulticastttl",3]]]],[11,"eq","","",175,[[["ipmulticastloop",3]]]],[11,"eq","","",176,[[["receivetimeout",3]]]],[11,"eq","","",177,[[["sendtimeout",3]]]],[11,"eq","","",178,[[["broadcast",3]]]],[11,"eq","","",179,[[["oobinline",3]]]],[11,"eq","","",180,[[["socketerror",3]]]],[11,"eq","","",181,[[["keepalive",3]]]],[11,"eq","","",182,[[["peercredentials",3]]]],[11,"eq","","",183,[[["tcpkeepidle",3]]]],[11,"eq","","",184,[[["tcpkeepcount",3]]]],[11,"eq","","",185,[[["tcpkeepinterval",3]]]],[11,"eq","","",186,[[["rcvbuf",3]]]],[11,"eq","","",187,[[["sndbuf",3]]]],[11,"eq","","",188,[[["rcvbufforce",3]]]],[11,"eq","","",189,[[["sndbufforce",3]]]],[11,"eq","","",190,[[["socktype",3]]]],[11,"eq","","",191,[[["acceptconn",3]]]],[11,"eq","","",192,[[["bindtodevice",3]]]],[11,"eq","","",193,[[["originaldst",3]]]],[11,"eq","","",194,[[["receivetimestamp",3]]]],[11,"eq","","",195,[[["iptransparent",3]]]],[11,"eq","","",196,[[["mark",3]]]],[11,"eq","","",197,[[["passcred",3]]]],[11,"eq","","",198,[[["tcpcongestion",3]]]],[11,"eq","","",199,[[["ipv4packetinfo",3]]]],[11,"eq","","",200,[[["ipv6recvpacketinfo",3]]]],[11,"eq","","",201,[[["udpgsosegment",3]]]],[11,"eq","","",202,[[["udpgrosegment",3]]]],[11,"eq","nix::sys::socket","",86,[[["socktype",4]]]],[11,"eq","","",87,[[["sockprotocol",4]]]],[11,"eq","","",88,[[["sockflag",3]]]],[11,"ne","","",88,[[["sockflag",3]]]],[11,"eq","","",89,[[["msgflags",3]]]],[11,"ne","","",89,[[["msgflags",3]]]],[11,"eq","","",90,[[["unixcredentials",3]]]],[11,"ne","","",90,[[["unixcredentials",3]]]],[11,"eq","","",91,[[["ipmembershiprequest",3]]]],[11,"ne","","",91,[[["ipmembershiprequest",3]]]],[11,"eq","","",92,[[["ipv6membershiprequest",3]]]],[11,"ne","","",92,[[["ipv6membershiprequest",3]]]],[11,"eq","","",93,[[["recvmsg",3]]]],[11,"ne","","",93,[[["recvmsg",3]]]],[11,"eq","","",205,[[["cmsgiterator",3]]]],[11,"ne","","",205,[[["cmsgiterator",3]]]],[11,"eq","","",94,[[["controlmessageowned",4]]]],[11,"ne","","",94,[[["controlmessageowned",4]]]],[11,"eq","","",95,[[["controlmessage",4]]]],[11,"ne","","",95,[[["controlmessage",4]]]],[11,"eq","","",100,[[["shutdown",4]]]],[11,"eq","nix::sys::stat","",102,[[["sflag",3]]]],[11,"ne","","",102,[[["sflag",3]]]],[11,"eq","","",103,[[["mode",3]]]],[11,"ne","","",103,[[["mode",3]]]],[11,"eq","nix::sys::statfs","",106,[[["fstype",3]]]],[11,"ne","","",106,[[["fstype",3]]]],[11,"eq","nix::sys::statvfs","",108,[[["fsflags",3]]]],[11,"ne","","",108,[[["fsflags",3]]]],[11,"eq","","",109,[[["statvfs",3]]]],[11,"ne","","",109,[[["statvfs",3]]]],[11,"eq","nix::sys::sysinfo","",110,[[["sysinfo",3]]]],[11,"ne","","",110,[[["sysinfo",3]]]],[11,"eq","nix::sys::termios","",111,[[["termios",3]]]],[11,"ne","","",111,[[["termios",3]]]],[11,"eq","","",112,[[["baudrate",4]]]],[11,"eq","","",113,[[["setarg",4]]]],[11,"eq","","",114,[[["flusharg",4]]]],[11,"eq","","",115,[[["flowarg",4]]]],[11,"eq","","",116,[[["specialcharacterindices",4]]]],[11,"eq","","",117,[[["inputflags",3]]]],[11,"ne","","",117,[[["inputflags",3]]]],[11,"eq","","",118,[[["outputflags",3]]]],[11,"ne","","",118,[[["outputflags",3]]]],[11,"eq","","",119,[[["controlflags",3]]]],[11,"ne","","",119,[[["controlflags",3]]]],[11,"eq","","",120,[[["localflags",3]]]],[11,"ne","","",120,[[["localflags",3]]]],[11,"eq","nix::sys::time","",122,[[["timespec",3]]]],[11,"ne","","",122,[[["timespec",3]]]],[11,"eq","","",123,[[["timeval",3]]]],[11,"ne","","",123,[[["timeval",3]]]],[11,"eq","nix::sys::uio","",124,[[["remoteiovec",3]]]],[11,"ne","","",124,[[["remoteiovec",3]]]],[11,"eq","","",125,[[["iovec",3]]]],[11,"ne","","",125,[[["iovec",3]]]],[11,"eq","nix::sys::utsname","",126,[[["utsname",3]]]],[11,"ne","","",126,[[["utsname",3]]]],[11,"eq","nix::sys::wait","",127,[[["waitpidflag",3]]]],[11,"ne","","",127,[[["waitpidflag",3]]]],[11,"eq","","",128,[[["waitstatus",4]]]],[11,"ne","","",128,[[["waitstatus",4]]]],[11,"eq","nix::sys::inotify","",129,[[["addwatchflags",3]]]],[11,"ne","","",129,[[["addwatchflags",3]]]],[11,"eq","","",130,[[["initflags",3]]]],[11,"ne","","",130,[[["initflags",3]]]],[11,"eq","","",206,[[["watchdescriptor",3]]]],[11,"ne","","",206,[[["watchdescriptor",3]]]],[11,"eq","nix::sys::timerfd","",133,[[["clockid",4]]]],[11,"eq","","",134,[[["timerflags",3]]]],[11,"ne","","",134,[[["timerflags",3]]]],[11,"eq","","",135,[[["timersettimeflags",3]]]],[11,"ne","","",135,[[["timersettimeflags",3]]]],[11,"eq","","",136,[[["expiration",4]]]],[11,"ne","","",136,[[["expiration",4]]]],[11,"eq","nix::time","",138,[[["clockid",3]]]],[11,"ne","","",138,[[["clockid",3]]]],[11,"eq","nix::ucontext","",139,[[["ucontext",3]]]],[11,"ne","","",139,[[["ucontext",3]]]],[11,"eq","nix::unistd","",140,[[["uid",3]]]],[11,"ne","","",140,[[["uid",3]]]],[11,"eq","","",141,[[["gid",3]]]],[11,"ne","","",141,[[["gid",3]]]],[11,"eq","","",142,[[["pid",3]]]],[11,"ne","","",142,[[["pid",3]]]],[11,"eq","","",149,[[["pathconfvar",4]]]],[11,"eq","","",150,[[["sysconfvar",4]]]],[11,"eq","","",151,[[["accessflags",3]]]],[11,"ne","","",151,[[["accessflags",3]]]],[11,"eq","","",152,[[["user",3]]]],[11,"ne","","",152,[[["user",3]]]],[11,"eq","","",153,[[["group",3]]]],[11,"ne","","",153,[[["group",3]]]],[11,"eq","nix","",154,[[["error",4]]]],[11,"ne","","",154,[[["error",4]]]],[11,"partial_cmp","nix::fcntl","",6,[[["atflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["atflags",3]]]],[11,"le","","",6,[[["atflags",3]]]],[11,"gt","","",6,[[["atflags",3]]]],[11,"ge","","",6,[[["atflags",3]]]],[11,"partial_cmp","","",7,[[["oflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["oflag",3]]]],[11,"le","","",7,[[["oflag",3]]]],[11,"gt","","",7,[[["oflag",3]]]],[11,"ge","","",7,[[["oflag",3]]]],[11,"partial_cmp","","",8,[[["sealflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["sealflag",3]]]],[11,"le","","",8,[[["sealflag",3]]]],[11,"gt","","",8,[[["sealflag",3]]]],[11,"ge","","",8,[[["sealflag",3]]]],[11,"partial_cmp","","",9,[[["fdflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["fdflag",3]]]],[11,"le","","",9,[[["fdflag",3]]]],[11,"gt","","",9,[[["fdflag",3]]]],[11,"ge","","",9,[[["fdflag",3]]]],[11,"partial_cmp","","",12,[[["splicefflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["splicefflags",3]]]],[11,"le","","",12,[[["splicefflags",3]]]],[11,"gt","","",12,[[["splicefflags",3]]]],[11,"ge","","",12,[[["splicefflags",3]]]],[11,"partial_cmp","","",13,[[["fallocateflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",13,[[["fallocateflags",3]]]],[11,"le","","",13,[[["fallocateflags",3]]]],[11,"gt","","",13,[[["fallocateflags",3]]]],[11,"ge","","",13,[[["fallocateflags",3]]]],[11,"partial_cmp","","",5,[[["posixfadviseadvice",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","nix::kmod","",15,[[["moduleinitflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",15,[[["moduleinitflags",3]]]],[11,"le","","",15,[[["moduleinitflags",3]]]],[11,"gt","","",15,[[["moduleinitflags",3]]]],[11,"ge","","",15,[[["moduleinitflags",3]]]],[11,"partial_cmp","","",16,[[["deletemoduleflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",16,[[["deletemoduleflags",3]]]],[11,"le","","",16,[[["deletemoduleflags",3]]]],[11,"gt","","",16,[[["deletemoduleflags",3]]]],[11,"ge","","",16,[[["deletemoduleflags",3]]]],[11,"partial_cmp","nix::mount","",17,[[["msflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",17,[[["msflags",3]]]],[11,"le","","",17,[[["msflags",3]]]],[11,"gt","","",17,[[["msflags",3]]]],[11,"ge","","",17,[[["msflags",3]]]],[11,"partial_cmp","","",18,[[["mntflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["mntflags",3]]]],[11,"le","","",18,[[["mntflags",3]]]],[11,"gt","","",18,[[["mntflags",3]]]],[11,"ge","","",18,[[["mntflags",3]]]],[11,"partial_cmp","nix::mqueue","",19,[[["mq_oflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",19,[[["mq_oflag",3]]]],[11,"le","","",19,[[["mq_oflag",3]]]],[11,"gt","","",19,[[["mq_oflag",3]]]],[11,"ge","","",19,[[["mq_oflag",3]]]],[11,"partial_cmp","","",20,[[["fdflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",20,[[["fdflag",3]]]],[11,"le","","",20,[[["fdflag",3]]]],[11,"gt","","",20,[[["fdflag",3]]]],[11,"ge","","",20,[[["fdflag",3]]]],[11,"partial_cmp","nix::net::if_","",22,[[["interfaceflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",22,[[["interfaceflags",3]]]],[11,"le","","",22,[[["interfaceflags",3]]]],[11,"gt","","",22,[[["interfaceflags",3]]]],[11,"ge","","",22,[[["interfaceflags",3]]]],[11,"partial_cmp","nix::poll","",24,[[["pollflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["pollflags",3]]]],[11,"le","","",24,[[["pollflags",3]]]],[11,"gt","","",24,[[["pollflags",3]]]],[11,"ge","","",24,[[["pollflags",3]]]],[11,"partial_cmp","nix::sched","",160,[[["cloneflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",160,[[["cloneflags",3]]]],[11,"le","","",160,[[["cloneflags",3]]]],[11,"gt","","",160,[[["cloneflags",3]]]],[11,"ge","","",160,[[["cloneflags",3]]]],[11,"partial_cmp","nix::sys::aio","",28,[[["aiofsyncmode",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",29,[[["lioopcode",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",30,[[["liomode",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","nix::sys::epoll","",35,[[["epollflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",35,[[["epollflags",3]]]],[11,"le","","",35,[[["epollflags",3]]]],[11,"gt","","",35,[[["epollflags",3]]]],[11,"ge","","",35,[[["epollflags",3]]]],[11,"partial_cmp","","",37,[[["epollcreateflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",37,[[["epollcreateflags",3]]]],[11,"le","","",37,[[["epollcreateflags",3]]]],[11,"gt","","",37,[[["epollcreateflags",3]]]],[11,"ge","","",37,[[["epollcreateflags",3]]]],[11,"partial_cmp","nix::sys::eventfd","",39,[[["efdflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",39,[[["efdflags",3]]]],[11,"le","","",39,[[["efdflags",3]]]],[11,"gt","","",39,[[["efdflags",3]]]],[11,"ge","","",39,[[["efdflags",3]]]],[11,"partial_cmp","nix::sys::memfd","",40,[[["memfdcreateflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",40,[[["memfdcreateflag",3]]]],[11,"le","","",40,[[["memfdcreateflag",3]]]],[11,"gt","","",40,[[["memfdcreateflag",3]]]],[11,"ge","","",40,[[["memfdcreateflag",3]]]],[11,"partial_cmp","nix::sys::mman","",41,[[["protflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",41,[[["protflags",3]]]],[11,"le","","",41,[[["protflags",3]]]],[11,"gt","","",41,[[["protflags",3]]]],[11,"ge","","",41,[[["protflags",3]]]],[11,"partial_cmp","","",42,[[["mapflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",42,[[["mapflags",3]]]],[11,"le","","",42,[[["mapflags",3]]]],[11,"gt","","",42,[[["mapflags",3]]]],[11,"ge","","",42,[[["mapflags",3]]]],[11,"partial_cmp","","",43,[[["mremapflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",43,[[["mremapflags",3]]]],[11,"le","","",43,[[["mremapflags",3]]]],[11,"gt","","",43,[[["mremapflags",3]]]],[11,"ge","","",43,[[["mremapflags",3]]]],[11,"partial_cmp","","",44,[[["mmapadvise",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",45,[[["msflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",45,[[["msflags",3]]]],[11,"le","","",45,[[["msflags",3]]]],[11,"gt","","",45,[[["msflags",3]]]],[11,"ge","","",45,[[["msflags",3]]]],[11,"partial_cmp","","",46,[[["mlockallflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",46,[[["mlockallflags",3]]]],[11,"le","","",46,[[["mlockallflags",3]]]],[11,"gt","","",46,[[["mlockallflags",3]]]],[11,"ge","","",46,[[["mlockallflags",3]]]],[11,"partial_cmp","nix::sys::personality","",47,[[["persona",3]],[["option",4],["ordering",4]]]],[11,"lt","","",47,[[["persona",3]]]],[11,"le","","",47,[[["persona",3]]]],[11,"gt","","",47,[[["persona",3]]]],[11,"ge","","",47,[[["persona",3]]]],[11,"partial_cmp","nix::sys::ptrace","",48,[[["request",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",49,[[["event",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",162,[[["options",3]],[["option",4],["ordering",4]]]],[11,"lt","","",162,[[["options",3]]]],[11,"le","","",162,[[["options",3]]]],[11,"gt","","",162,[[["options",3]]]],[11,"ge","","",162,[[["options",3]]]],[11,"partial_cmp","nix::sys::quota","",50,[[["quotatype",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",51,[[["quotafmt",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",52,[[["quotavalidflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",52,[[["quotavalidflags",3]]]],[11,"le","","",52,[[["quotavalidflags",3]]]],[11,"gt","","",52,[[["quotavalidflags",3]]]],[11,"ge","","",52,[[["quotavalidflags",3]]]],[11,"partial_cmp","nix::sys::reboot","",54,[[["rebootmode",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","nix::sys::signal","",56,[[["signal",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",57,[[["saflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",57,[[["saflags",3]]]],[11,"le","","",57,[[["saflags",3]]]],[11,"gt","","",57,[[["saflags",3]]]],[11,"ge","","",57,[[["saflags",3]]]],[11,"partial_cmp","","",58,[[["sigmaskhow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","nix::sys::signalfd","",66,[[["sfdflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",66,[[["sfdflags",3]]]],[11,"le","","",66,[[["sfdflags",3]]]],[11,"gt","","",66,[[["sfdflags",3]]]],[11,"ge","","",66,[[["sfdflags",3]]]],[11,"partial_cmp","nix::sys::socket","",88,[[["sockflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",88,[[["sockflag",3]]]],[11,"le","","",88,[[["sockflag",3]]]],[11,"gt","","",88,[[["sockflag",3]]]],[11,"ge","","",88,[[["sockflag",3]]]],[11,"partial_cmp","","",89,[[["msgflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",89,[[["msgflags",3]]]],[11,"le","","",89,[[["msgflags",3]]]],[11,"gt","","",89,[[["msgflags",3]]]],[11,"ge","","",89,[[["msgflags",3]]]],[11,"partial_cmp","nix::sys::stat","",102,[[["sflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",102,[[["sflag",3]]]],[11,"le","","",102,[[["sflag",3]]]],[11,"gt","","",102,[[["sflag",3]]]],[11,"ge","","",102,[[["sflag",3]]]],[11,"partial_cmp","","",103,[[["mode",3]],[["option",4],["ordering",4]]]],[11,"lt","","",103,[[["mode",3]]]],[11,"le","","",103,[[["mode",3]]]],[11,"gt","","",103,[[["mode",3]]]],[11,"ge","","",103,[[["mode",3]]]],[11,"partial_cmp","nix::sys::statvfs","",108,[[["fsflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",108,[[["fsflags",3]]]],[11,"le","","",108,[[["fsflags",3]]]],[11,"gt","","",108,[[["fsflags",3]]]],[11,"ge","","",108,[[["fsflags",3]]]],[11,"partial_cmp","nix::sys::termios","",112,[[["baudrate",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",113,[[["setarg",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",114,[[["flusharg",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",115,[[["flowarg",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",116,[[["specialcharacterindices",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",117,[[["inputflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",117,[[["inputflags",3]]]],[11,"le","","",117,[[["inputflags",3]]]],[11,"gt","","",117,[[["inputflags",3]]]],[11,"ge","","",117,[[["inputflags",3]]]],[11,"partial_cmp","","",118,[[["outputflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",118,[[["outputflags",3]]]],[11,"le","","",118,[[["outputflags",3]]]],[11,"gt","","",118,[[["outputflags",3]]]],[11,"ge","","",118,[[["outputflags",3]]]],[11,"partial_cmp","","",119,[[["controlflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",119,[[["controlflags",3]]]],[11,"le","","",119,[[["controlflags",3]]]],[11,"gt","","",119,[[["controlflags",3]]]],[11,"ge","","",119,[[["controlflags",3]]]],[11,"partial_cmp","","",120,[[["localflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",120,[[["localflags",3]]]],[11,"le","","",120,[[["localflags",3]]]],[11,"gt","","",120,[[["localflags",3]]]],[11,"ge","","",120,[[["localflags",3]]]],[11,"partial_cmp","nix::sys::time","",122,[[["timespec",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",123,[[["timeval",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","nix::sys::wait","",127,[[["waitpidflag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",127,[[["waitpidflag",3]]]],[11,"le","","",127,[[["waitpidflag",3]]]],[11,"gt","","",127,[[["waitpidflag",3]]]],[11,"ge","","",127,[[["waitpidflag",3]]]],[11,"partial_cmp","nix::sys::inotify","",129,[[["addwatchflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",129,[[["addwatchflags",3]]]],[11,"le","","",129,[[["addwatchflags",3]]]],[11,"gt","","",129,[[["addwatchflags",3]]]],[11,"ge","","",129,[[["addwatchflags",3]]]],[11,"partial_cmp","","",130,[[["initflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",130,[[["initflags",3]]]],[11,"le","","",130,[[["initflags",3]]]],[11,"gt","","",130,[[["initflags",3]]]],[11,"ge","","",130,[[["initflags",3]]]],[11,"partial_cmp","","",206,[[["watchdescriptor",3]],[["option",4],["ordering",4]]]],[11,"lt","","",206,[[["watchdescriptor",3]]]],[11,"le","","",206,[[["watchdescriptor",3]]]],[11,"gt","","",206,[[["watchdescriptor",3]]]],[11,"ge","","",206,[[["watchdescriptor",3]]]],[11,"partial_cmp","nix::sys::timerfd","",133,[[["clockid",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",134,[[["timerflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",134,[[["timerflags",3]]]],[11,"le","","",134,[[["timerflags",3]]]],[11,"gt","","",134,[[["timerflags",3]]]],[11,"ge","","",134,[[["timerflags",3]]]],[11,"partial_cmp","","",135,[[["timersettimeflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",135,[[["timersettimeflags",3]]]],[11,"le","","",135,[[["timersettimeflags",3]]]],[11,"gt","","",135,[[["timersettimeflags",3]]]],[11,"ge","","",135,[[["timersettimeflags",3]]]],[11,"partial_cmp","nix::time","",138,[[["clockid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",138,[[["clockid",3]]]],[11,"le","","",138,[[["clockid",3]]]],[11,"gt","","",138,[[["clockid",3]]]],[11,"ge","","",138,[[["clockid",3]]]],[11,"partial_cmp","nix::unistd","",142,[[["pid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",142,[[["pid",3]]]],[11,"le","","",142,[[["pid",3]]]],[11,"gt","","",142,[[["pid",3]]]],[11,"ge","","",142,[[["pid",3]]]],[11,"partial_cmp","","",151,[[["accessflags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",151,[[["accessflags",3]]]],[11,"le","","",151,[[["accessflags",3]]]],[11,"gt","","",151,[[["accessflags",3]]]],[11,"ge","","",151,[[["accessflags",3]]]],[11,"fmt","nix::dir","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","nix::errno","",3,[[["formatter",3]],["result",6]]],[11,"fmt","nix::fcntl","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","nix::ifaddrs","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","nix::kmod","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mount","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mqueue","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","nix::net::if_","",22,[[["formatter",3]],["result",6]]],[11,"fmt","nix::poll","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","nix::pty","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sched","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::aio","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::epoll","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::eventfd","",39,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::memfd","",40,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::mman","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::personality","",47,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::ptrace","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",162,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::quota","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::reboot","",54,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::select","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",163,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signal","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",165,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",164,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signalfd","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::socket","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::socket::sockopt","",166,[[["formatter",3]],["result",6]]],[11,"fmt","","",167,[[["formatter",3]],["result",6]]],[11,"fmt","","",168,[[["formatter",3]],["result",6]]],[11,"fmt","","",169,[[["formatter",3]],["result",6]]],[11,"fmt","","",170,[[["formatter",3]],["result",6]]],[11,"fmt","","",171,[[["formatter",3]],["result",6]]],[11,"fmt","","",172,[[["formatter",3]],["result",6]]],[11,"fmt","","",173,[[["formatter",3]],["result",6]]],[11,"fmt","","",174,[[["formatter",3]],["result",6]]],[11,"fmt","","",175,[[["formatter",3]],["result",6]]],[11,"fmt","","",176,[[["formatter",3]],["result",6]]],[11,"fmt","","",177,[[["formatter",3]],["result",6]]],[11,"fmt","","",178,[[["formatter",3]],["result",6]]],[11,"fmt","","",179,[[["formatter",3]],["result",6]]],[11,"fmt","","",180,[[["formatter",3]],["result",6]]],[11,"fmt","","",181,[[["formatter",3]],["result",6]]],[11,"fmt","","",182,[[["formatter",3]],["result",6]]],[11,"fmt","","",183,[[["formatter",3]],["result",6]]],[11,"fmt","","",184,[[["formatter",3]],["result",6]]],[11,"fmt","","",185,[[["formatter",3]],["result",6]]],[11,"fmt","","",186,[[["formatter",3]],["result",6]]],[11,"fmt","","",187,[[["formatter",3]],["result",6]]],[11,"fmt","","",188,[[["formatter",3]],["result",6]]],[11,"fmt","","",189,[[["formatter",3]],["result",6]]],[11,"fmt","","",190,[[["formatter",3]],["result",6]]],[11,"fmt","","",191,[[["formatter",3]],["result",6]]],[11,"fmt","","",192,[[["formatter",3]],["result",6]]],[11,"fmt","","",193,[[["formatter",3]],["result",6]]],[11,"fmt","","",194,[[["formatter",3]],["result",6]]],[11,"fmt","","",195,[[["formatter",3]],["result",6]]],[11,"fmt","","",196,[[["formatter",3]],["result",6]]],[11,"fmt","","",197,[[["formatter",3]],["result",6]]],[11,"fmt","","",198,[[["formatter",3]],["result",6]]],[11,"fmt","","",199,[[["formatter",3]],["result",6]]],[11,"fmt","","",200,[[["formatter",3]],["result",6]]],[11,"fmt","","",201,[[["formatter",3]],["result",6]]],[11,"fmt","","",202,[[["formatter",3]],["result",6]]],[11,"fmt","","",203,[[["formatter",3]],["result",6]]],[11,"fmt","","",204,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::socket","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",205,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::stat","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::statfs","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::statvfs","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::sysinfo","",110,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::termios","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::time","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::uio","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::utsname","",126,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::wait","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::inotify","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","","",206,[[["formatter",3]],["result",6]]],[11,"fmt","","",131,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::timerfd","",137,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","nix::time","",138,[[["formatter",3]],["result",6]]],[11,"fmt","nix::ucontext","",139,[[["formatter",3]],["result",6]]],[11,"fmt","nix::unistd","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",142,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",149,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","nix","",154,[[["formatter",3]],["result",6]]],[11,"fmt","nix::errno","",3,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signal","",56,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::socket","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::time","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","nix::time","",138,[[["formatter",3]],["result",6]]],[11,"fmt","nix::unistd","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",142,[[["formatter",3]],["result",6]]],[11,"fmt","nix","",154,[[["formatter",3]],["result",6]]],[11,"div","nix::sys::time","",122,[[],["timespec",3]]],[11,"div","","",123,[[],["timeval",3]]],[11,"sub","nix::fcntl","Returns the set difference of the two sets of flags.",6,[[["atflags",3]],["atflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",7,[[["oflag",3]],["oflag",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",8,[[["sealflag",3]],["sealflag",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",9,[[["fdflag",3]],["fdflag",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",12,[[["splicefflags",3]],["splicefflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",13,[[["fallocateflags",3]],["fallocateflags",3]]],[11,"sub","nix::kmod","Returns the set difference of the two sets of flags.",15,[[["moduleinitflags",3]],["moduleinitflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",16,[[["deletemoduleflags",3]],["deletemoduleflags",3]]],[11,"sub","nix::mount","Returns the set difference of the two sets of flags.",17,[[["msflags",3]],["msflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",18,[[["mntflags",3]],["mntflags",3]]],[11,"sub","nix::mqueue","Returns the set difference of the two sets of flags.",19,[[["mq_oflag",3]],["mq_oflag",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",20,[[["fdflag",3]],["fdflag",3]]],[11,"sub","nix::net::if_","Returns the set difference of the two sets of flags.",22,[[["interfaceflags",3]],["interfaceflags",3]]],[11,"sub","nix::poll","Returns the set difference of the two sets of flags.",24,[[["pollflags",3]],["pollflags",3]]],[11,"sub","nix::sched","Returns the set difference of the two sets of flags.",160,[[["cloneflags",3]],["cloneflags",3]]],[11,"sub","nix::sys::epoll","Returns the set difference of the two sets of flags.",35,[[["epollflags",3]],["epollflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",37,[[["epollcreateflags",3]],["epollcreateflags",3]]],[11,"sub","nix::sys::eventfd","Returns the set difference of the two sets of flags.",39,[[["efdflags",3]],["efdflags",3]]],[11,"sub","nix::sys::memfd","Returns the set difference of the two sets of flags.",40,[[["memfdcreateflag",3]],["memfdcreateflag",3]]],[11,"sub","nix::sys::mman","Returns the set difference of the two sets of flags.",41,[[["protflags",3]],["protflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",42,[[["mapflags",3]],["mapflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",43,[[["mremapflags",3]],["mremapflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",45,[[["msflags",3]],["msflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",46,[[["mlockallflags",3]],["mlockallflags",3]]],[11,"sub","nix::sys::personality","Returns the set difference of the two sets of flags.",47,[[["persona",3]],["persona",3]]],[11,"sub","nix::sys::ptrace","Returns the set difference of the two sets of flags.",162,[[["options",3]],["options",3]]],[11,"sub","nix::sys::quota","Returns the set difference of the two sets of flags.",52,[[["quotavalidflags",3]],["quotavalidflags",3]]],[11,"sub","nix::sys::signal","Returns the set difference of the two sets of flags.",57,[[["saflags",3]],["saflags",3]]],[11,"sub","nix::sys::signalfd","Returns the set difference of the two sets of flags.",66,[[["sfdflags",3]],["sfdflags",3]]],[11,"sub","nix::sys::socket","Returns the set difference of the two sets of flags.",88,[[["sockflag",3]],["sockflag",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",89,[[["msgflags",3]],["msgflags",3]]],[11,"sub","nix::sys::stat","Returns the set difference of the two sets of flags.",102,[[["sflag",3]],["sflag",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",103,[[["mode",3]],["mode",3]]],[11,"sub","nix::sys::statvfs","Returns the set difference of the two sets of flags.",108,[[["fsflags",3]],["fsflags",3]]],[11,"sub","nix::sys::termios","Returns the set difference of the two sets of flags.",117,[[["inputflags",3]],["inputflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",118,[[["outputflags",3]],["outputflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",119,[[["controlflags",3]],["controlflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",120,[[["localflags",3]],["localflags",3]]],[11,"sub","nix::sys::time","",122,[[["timespec",3]],["timespec",3]]],[11,"sub","","",123,[[["timeval",3]],["timeval",3]]],[11,"sub","nix::sys::wait","Returns the set difference of the two sets of flags.",127,[[["waitpidflag",3]],["waitpidflag",3]]],[11,"sub","nix::sys::inotify","Returns the set difference of the two sets of flags.",129,[[["addwatchflags",3]],["addwatchflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",130,[[["initflags",3]],["initflags",3]]],[11,"sub","nix::sys::timerfd","Returns the set difference of the two sets of flags.",134,[[["timerflags",3]],["timerflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",135,[[["timersettimeflags",3]],["timersettimeflags",3]]],[11,"sub","nix::unistd","Returns the set difference of the two sets of flags.",151,[[["accessflags",3]],["accessflags",3]]],[11,"add","nix::sys::time","",122,[[["timespec",3]],["timespec",3]]],[11,"add","","",123,[[["timeval",3]],["timeval",3]]],[11,"mul","","",122,[[],["timespec",3]]],[11,"mul","","",123,[[],["timeval",3]]],[11,"neg","","",122,[[],["timespec",3]]],[11,"neg","","",123,[[],["timeval",3]]],[11,"sub_assign","nix::fcntl","Disables all flags enabled in the set.",6,[[["atflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",7,[[["oflag",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",8,[[["sealflag",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",9,[[["fdflag",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",12,[[["splicefflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",13,[[["fallocateflags",3]]]],[11,"sub_assign","nix::kmod","Disables all flags enabled in the set.",15,[[["moduleinitflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",16,[[["deletemoduleflags",3]]]],[11,"sub_assign","nix::mount","Disables all flags enabled in the set.",17,[[["msflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",18,[[["mntflags",3]]]],[11,"sub_assign","nix::mqueue","Disables all flags enabled in the set.",19,[[["mq_oflag",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",20,[[["fdflag",3]]]],[11,"sub_assign","nix::net::if_","Disables all flags enabled in the set.",22,[[["interfaceflags",3]]]],[11,"sub_assign","nix::poll","Disables all flags enabled in the set.",24,[[["pollflags",3]]]],[11,"sub_assign","nix::sched","Disables all flags enabled in the set.",160,[[["cloneflags",3]]]],[11,"sub_assign","nix::sys::epoll","Disables all flags enabled in the set.",35,[[["epollflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",37,[[["epollcreateflags",3]]]],[11,"sub_assign","nix::sys::eventfd","Disables all flags enabled in the set.",39,[[["efdflags",3]]]],[11,"sub_assign","nix::sys::memfd","Disables all flags enabled in the set.",40,[[["memfdcreateflag",3]]]],[11,"sub_assign","nix::sys::mman","Disables all flags enabled in the set.",41,[[["protflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",42,[[["mapflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",43,[[["mremapflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",45,[[["msflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",46,[[["mlockallflags",3]]]],[11,"sub_assign","nix::sys::personality","Disables all flags enabled in the set.",47,[[["persona",3]]]],[11,"sub_assign","nix::sys::ptrace","Disables all flags enabled in the set.",162,[[["options",3]]]],[11,"sub_assign","nix::sys::quota","Disables all flags enabled in the set.",52,[[["quotavalidflags",3]]]],[11,"sub_assign","nix::sys::signal","Disables all flags enabled in the set.",57,[[["saflags",3]]]],[11,"sub_assign","nix::sys::signalfd","Disables all flags enabled in the set.",66,[[["sfdflags",3]]]],[11,"sub_assign","nix::sys::socket","Disables all flags enabled in the set.",88,[[["sockflag",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",89,[[["msgflags",3]]]],[11,"sub_assign","nix::sys::stat","Disables all flags enabled in the set.",102,[[["sflag",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",103,[[["mode",3]]]],[11,"sub_assign","nix::sys::statvfs","Disables all flags enabled in the set.",108,[[["fsflags",3]]]],[11,"sub_assign","nix::sys::termios","Disables all flags enabled in the set.",117,[[["inputflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",118,[[["outputflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",119,[[["controlflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",120,[[["localflags",3]]]],[11,"sub_assign","nix::sys::wait","Disables all flags enabled in the set.",127,[[["waitpidflag",3]]]],[11,"sub_assign","nix::sys::inotify","Disables all flags enabled in the set.",129,[[["addwatchflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",130,[[["initflags",3]]]],[11,"sub_assign","nix::sys::timerfd","Disables all flags enabled in the set.",134,[[["timerflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",135,[[["timersettimeflags",3]]]],[11,"sub_assign","nix::unistd","Disables all flags enabled in the set.",151,[[["accessflags",3]]]],[11,"not","nix::fcntl","Returns the complement of this set of flags.",6,[[],["atflags",3]]],[11,"not","","Returns the complement of this set of flags.",7,[[],["oflag",3]]],[11,"not","","Returns the complement of this set of flags.",8,[[],["sealflag",3]]],[11,"not","","Returns the complement of this set of flags.",9,[[],["fdflag",3]]],[11,"not","","Returns the complement of this set of flags.",12,[[],["splicefflags",3]]],[11,"not","","Returns the complement of this set of flags.",13,[[],["fallocateflags",3]]],[11,"not","nix::kmod","Returns the complement of this set of flags.",15,[[],["moduleinitflags",3]]],[11,"not","","Returns the complement of this set of flags.",16,[[],["deletemoduleflags",3]]],[11,"not","nix::mount","Returns the complement of this set of flags.",17,[[],["msflags",3]]],[11,"not","","Returns the complement of this set of flags.",18,[[],["mntflags",3]]],[11,"not","nix::mqueue","Returns the complement of this set of flags.",19,[[],["mq_oflag",3]]],[11,"not","","Returns the complement of this set of flags.",20,[[],["fdflag",3]]],[11,"not","nix::net::if_","Returns the complement of this set of flags.",22,[[],["interfaceflags",3]]],[11,"not","nix::poll","Returns the complement of this set of flags.",24,[[],["pollflags",3]]],[11,"not","nix::sched","Returns the complement of this set of flags.",160,[[],["cloneflags",3]]],[11,"not","nix::sys::epoll","Returns the complement of this set of flags.",35,[[],["epollflags",3]]],[11,"not","","Returns the complement of this set of flags.",37,[[],["epollcreateflags",3]]],[11,"not","nix::sys::eventfd","Returns the complement of this set of flags.",39,[[],["efdflags",3]]],[11,"not","nix::sys::memfd","Returns the complement of this set of flags.",40,[[],["memfdcreateflag",3]]],[11,"not","nix::sys::mman","Returns the complement of this set of flags.",41,[[],["protflags",3]]],[11,"not","","Returns the complement of this set of flags.",42,[[],["mapflags",3]]],[11,"not","","Returns the complement of this set of flags.",43,[[],["mremapflags",3]]],[11,"not","","Returns the complement of this set of flags.",45,[[],["msflags",3]]],[11,"not","","Returns the complement of this set of flags.",46,[[],["mlockallflags",3]]],[11,"not","nix::sys::personality","Returns the complement of this set of flags.",47,[[],["persona",3]]],[11,"not","nix::sys::ptrace","Returns the complement of this set of flags.",162,[[],["options",3]]],[11,"not","nix::sys::quota","Returns the complement of this set of flags.",52,[[],["quotavalidflags",3]]],[11,"not","nix::sys::signal","Returns the complement of this set of flags.",57,[[],["saflags",3]]],[11,"not","nix::sys::signalfd","Returns the complement of this set of flags.",66,[[],["sfdflags",3]]],[11,"not","nix::sys::socket","Returns the complement of this set of flags.",88,[[],["sockflag",3]]],[11,"not","","Returns the complement of this set of flags.",89,[[],["msgflags",3]]],[11,"not","nix::sys::stat","Returns the complement of this set of flags.",102,[[],["sflag",3]]],[11,"not","","Returns the complement of this set of flags.",103,[[],["mode",3]]],[11,"not","nix::sys::statvfs","Returns the complement of this set of flags.",108,[[],["fsflags",3]]],[11,"not","nix::sys::termios","Returns the complement of this set of flags.",117,[[],["inputflags",3]]],[11,"not","","Returns the complement of this set of flags.",118,[[],["outputflags",3]]],[11,"not","","Returns the complement of this set of flags.",119,[[],["controlflags",3]]],[11,"not","","Returns the complement of this set of flags.",120,[[],["localflags",3]]],[11,"not","nix::sys::wait","Returns the complement of this set of flags.",127,[[],["waitpidflag",3]]],[11,"not","nix::sys::inotify","Returns the complement of this set of flags.",129,[[],["addwatchflags",3]]],[11,"not","","Returns the complement of this set of flags.",130,[[],["initflags",3]]],[11,"not","nix::sys::timerfd","Returns the complement of this set of flags.",134,[[],["timerflags",3]]],[11,"not","","Returns the complement of this set of flags.",135,[[],["timersettimeflags",3]]],[11,"not","nix::unistd","Returns the complement of this set of flags.",151,[[],["accessflags",3]]],[11,"bitand","nix::fcntl","Returns the intersection between the two sets of flags.",6,[[["atflags",3]],["atflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",7,[[["oflag",3]],["oflag",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",8,[[["sealflag",3]],["sealflag",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",9,[[["fdflag",3]],["fdflag",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",12,[[["splicefflags",3]],["splicefflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",13,[[["fallocateflags",3]],["fallocateflags",3]]],[11,"bitand","nix::kmod","Returns the intersection between the two sets of flags.",15,[[["moduleinitflags",3]],["moduleinitflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",16,[[["deletemoduleflags",3]],["deletemoduleflags",3]]],[11,"bitand","nix::mount","Returns the intersection between the two sets of flags.",17,[[["msflags",3]],["msflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",18,[[["mntflags",3]],["mntflags",3]]],[11,"bitand","nix::mqueue","Returns the intersection between the two sets of flags.",19,[[["mq_oflag",3]],["mq_oflag",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",20,[[["fdflag",3]],["fdflag",3]]],[11,"bitand","nix::net::if_","Returns the intersection between the two sets of flags.",22,[[["interfaceflags",3]],["interfaceflags",3]]],[11,"bitand","nix::poll","Returns the intersection between the two sets of flags.",24,[[["pollflags",3]],["pollflags",3]]],[11,"bitand","nix::sched","Returns the intersection between the two sets of flags.",160,[[["cloneflags",3]],["cloneflags",3]]],[11,"bitand","nix::sys::epoll","Returns the intersection between the two sets of flags.",35,[[["epollflags",3]],["epollflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",37,[[["epollcreateflags",3]],["epollcreateflags",3]]],[11,"bitand","nix::sys::eventfd","Returns the intersection between the two sets of flags.",39,[[["efdflags",3]],["efdflags",3]]],[11,"bitand","nix::sys::memfd","Returns the intersection between the two sets of flags.",40,[[["memfdcreateflag",3]],["memfdcreateflag",3]]],[11,"bitand","nix::sys::mman","Returns the intersection between the two sets of flags.",41,[[["protflags",3]],["protflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",42,[[["mapflags",3]],["mapflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",43,[[["mremapflags",3]],["mremapflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",45,[[["msflags",3]],["msflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",46,[[["mlockallflags",3]],["mlockallflags",3]]],[11,"bitand","nix::sys::personality","Returns the intersection between the two sets of flags.",47,[[["persona",3]],["persona",3]]],[11,"bitand","nix::sys::ptrace","Returns the intersection between the two sets of flags.",162,[[["options",3]],["options",3]]],[11,"bitand","nix::sys::quota","Returns the intersection between the two sets of flags.",52,[[["quotavalidflags",3]],["quotavalidflags",3]]],[11,"bitand","nix::sys::signal","Returns the intersection between the two sets of flags.",57,[[["saflags",3]],["saflags",3]]],[11,"bitand","nix::sys::signalfd","Returns the intersection between the two sets of flags.",66,[[["sfdflags",3]],["sfdflags",3]]],[11,"bitand","nix::sys::socket","Returns the intersection between the two sets of flags.",88,[[["sockflag",3]],["sockflag",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",89,[[["msgflags",3]],["msgflags",3]]],[11,"bitand","nix::sys::stat","Returns the intersection between the two sets of flags.",102,[[["sflag",3]],["sflag",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",103,[[["mode",3]],["mode",3]]],[11,"bitand","nix::sys::statvfs","Returns the intersection between the two sets of flags.",108,[[["fsflags",3]],["fsflags",3]]],[11,"bitand","nix::sys::termios","Returns the intersection between the two sets of flags.",117,[[["inputflags",3]],["inputflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",118,[[["outputflags",3]],["outputflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",119,[[["controlflags",3]],["controlflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",120,[[["localflags",3]],["localflags",3]]],[11,"bitand","nix::sys::wait","Returns the intersection between the two sets of flags.",127,[[["waitpidflag",3]],["waitpidflag",3]]],[11,"bitand","nix::sys::inotify","Returns the intersection between the two sets of flags.",129,[[["addwatchflags",3]],["addwatchflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",130,[[["initflags",3]],["initflags",3]]],[11,"bitand","nix::sys::timerfd","Returns the intersection between the two sets of flags.",134,[[["timerflags",3]],["timerflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",135,[[["timersettimeflags",3]],["timersettimeflags",3]]],[11,"bitand","nix::unistd","Returns the intersection between the two sets of flags.",151,[[["accessflags",3]],["accessflags",3]]],[11,"bitor","nix::fcntl","Returns the union of the two sets of flags.",6,[[["atflags",3]],["atflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",7,[[["oflag",3]],["oflag",3]]],[11,"bitor","","Returns the union of the two sets of flags.",8,[[["sealflag",3]],["sealflag",3]]],[11,"bitor","","Returns the union of the two sets of flags.",9,[[["fdflag",3]],["fdflag",3]]],[11,"bitor","","Returns the union of the two sets of flags.",12,[[["splicefflags",3]],["splicefflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",13,[[["fallocateflags",3]],["fallocateflags",3]]],[11,"bitor","nix::kmod","Returns the union of the two sets of flags.",15,[[["moduleinitflags",3]],["moduleinitflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",16,[[["deletemoduleflags",3]],["deletemoduleflags",3]]],[11,"bitor","nix::mount","Returns the union of the two sets of flags.",17,[[["msflags",3]],["msflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",18,[[["mntflags",3]],["mntflags",3]]],[11,"bitor","nix::mqueue","Returns the union of the two sets of flags.",19,[[["mq_oflag",3]],["mq_oflag",3]]],[11,"bitor","","Returns the union of the two sets of flags.",20,[[["fdflag",3]],["fdflag",3]]],[11,"bitor","nix::net::if_","Returns the union of the two sets of flags.",22,[[["interfaceflags",3]],["interfaceflags",3]]],[11,"bitor","nix::poll","Returns the union of the two sets of flags.",24,[[["pollflags",3]],["pollflags",3]]],[11,"bitor","nix::sched","Returns the union of the two sets of flags.",160,[[["cloneflags",3]],["cloneflags",3]]],[11,"bitor","nix::sys::epoll","Returns the union of the two sets of flags.",35,[[["epollflags",3]],["epollflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",37,[[["epollcreateflags",3]],["epollcreateflags",3]]],[11,"bitor","nix::sys::eventfd","Returns the union of the two sets of flags.",39,[[["efdflags",3]],["efdflags",3]]],[11,"bitor","nix::sys::memfd","Returns the union of the two sets of flags.",40,[[["memfdcreateflag",3]],["memfdcreateflag",3]]],[11,"bitor","nix::sys::mman","Returns the union of the two sets of flags.",41,[[["protflags",3]],["protflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",42,[[["mapflags",3]],["mapflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",43,[[["mremapflags",3]],["mremapflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",45,[[["msflags",3]],["msflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",46,[[["mlockallflags",3]],["mlockallflags",3]]],[11,"bitor","nix::sys::personality","Returns the union of the two sets of flags.",47,[[["persona",3]],["persona",3]]],[11,"bitor","nix::sys::ptrace","Returns the union of the two sets of flags.",162,[[["options",3]],["options",3]]],[11,"bitor","nix::sys::quota","Returns the union of the two sets of flags.",52,[[["quotavalidflags",3]],["quotavalidflags",3]]],[11,"bitor","nix::sys::signal","Returns the union of the two sets of flags.",57,[[["saflags",3]],["saflags",3]]],[11,"bitor","nix::sys::signalfd","Returns the union of the two sets of flags.",66,[[["sfdflags",3]],["sfdflags",3]]],[11,"bitor","nix::sys::socket","Returns the union of the two sets of flags.",88,[[["sockflag",3]],["sockflag",3]]],[11,"bitor","","Returns the union of the two sets of flags.",89,[[["msgflags",3]],["msgflags",3]]],[11,"bitor","nix::sys::stat","Returns the union of the two sets of flags.",102,[[["sflag",3]],["sflag",3]]],[11,"bitor","","Returns the union of the two sets of flags.",103,[[["mode",3]],["mode",3]]],[11,"bitor","nix::sys::statvfs","Returns the union of the two sets of flags.",108,[[["fsflags",3]],["fsflags",3]]],[11,"bitor","nix::sys::termios","Returns the union of the two sets of flags.",117,[[["inputflags",3]],["inputflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",118,[[["outputflags",3]],["outputflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",119,[[["controlflags",3]],["controlflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",120,[[["localflags",3]],["localflags",3]]],[11,"bitor","nix::sys::wait","Returns the union of the two sets of flags.",127,[[["waitpidflag",3]],["waitpidflag",3]]],[11,"bitor","nix::sys::inotify","Returns the union of the two sets of flags.",129,[[["addwatchflags",3]],["addwatchflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",130,[[["initflags",3]],["initflags",3]]],[11,"bitor","nix::sys::timerfd","Returns the union of the two sets of flags.",134,[[["timerflags",3]],["timerflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",135,[[["timersettimeflags",3]],["timersettimeflags",3]]],[11,"bitor","nix::unistd","Returns the union of the two sets of flags.",151,[[["accessflags",3]],["accessflags",3]]],[11,"bitxor","nix::fcntl","Returns the left flags, but with all the right flags …",6,[[["atflags",3]],["atflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",7,[[["oflag",3]],["oflag",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",8,[[["sealflag",3]],["sealflag",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",9,[[["fdflag",3]],["fdflag",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",12,[[["splicefflags",3]],["splicefflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",13,[[["fallocateflags",3]],["fallocateflags",3]]],[11,"bitxor","nix::kmod","Returns the left flags, but with all the right flags …",15,[[["moduleinitflags",3]],["moduleinitflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",16,[[["deletemoduleflags",3]],["deletemoduleflags",3]]],[11,"bitxor","nix::mount","Returns the left flags, but with all the right flags …",17,[[["msflags",3]],["msflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",18,[[["mntflags",3]],["mntflags",3]]],[11,"bitxor","nix::mqueue","Returns the left flags, but with all the right flags …",19,[[["mq_oflag",3]],["mq_oflag",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",20,[[["fdflag",3]],["fdflag",3]]],[11,"bitxor","nix::net::if_","Returns the left flags, but with all the right flags …",22,[[["interfaceflags",3]],["interfaceflags",3]]],[11,"bitxor","nix::poll","Returns the left flags, but with all the right flags …",24,[[["pollflags",3]],["pollflags",3]]],[11,"bitxor","nix::sched","Returns the left flags, but with all the right flags …",160,[[["cloneflags",3]],["cloneflags",3]]],[11,"bitxor","nix::sys::epoll","Returns the left flags, but with all the right flags …",35,[[["epollflags",3]],["epollflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",37,[[["epollcreateflags",3]],["epollcreateflags",3]]],[11,"bitxor","nix::sys::eventfd","Returns the left flags, but with all the right flags …",39,[[["efdflags",3]],["efdflags",3]]],[11,"bitxor","nix::sys::memfd","Returns the left flags, but with all the right flags …",40,[[["memfdcreateflag",3]],["memfdcreateflag",3]]],[11,"bitxor","nix::sys::mman","Returns the left flags, but with all the right flags …",41,[[["protflags",3]],["protflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",42,[[["mapflags",3]],["mapflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",43,[[["mremapflags",3]],["mremapflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",45,[[["msflags",3]],["msflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",46,[[["mlockallflags",3]],["mlockallflags",3]]],[11,"bitxor","nix::sys::personality","Returns the left flags, but with all the right flags …",47,[[["persona",3]],["persona",3]]],[11,"bitxor","nix::sys::ptrace","Returns the left flags, but with all the right flags …",162,[[["options",3]],["options",3]]],[11,"bitxor","nix::sys::quota","Returns the left flags, but with all the right flags …",52,[[["quotavalidflags",3]],["quotavalidflags",3]]],[11,"bitxor","nix::sys::signal","Returns the left flags, but with all the right flags …",57,[[["saflags",3]],["saflags",3]]],[11,"bitxor","nix::sys::signalfd","Returns the left flags, but with all the right flags …",66,[[["sfdflags",3]],["sfdflags",3]]],[11,"bitxor","nix::sys::socket","Returns the left flags, but with all the right flags …",88,[[["sockflag",3]],["sockflag",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",89,[[["msgflags",3]],["msgflags",3]]],[11,"bitxor","nix::sys::stat","Returns the left flags, but with all the right flags …",102,[[["sflag",3]],["sflag",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",103,[[["mode",3]],["mode",3]]],[11,"bitxor","nix::sys::statvfs","Returns the left flags, but with all the right flags …",108,[[["fsflags",3]],["fsflags",3]]],[11,"bitxor","nix::sys::termios","Returns the left flags, but with all the right flags …",117,[[["inputflags",3]],["inputflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",118,[[["outputflags",3]],["outputflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",119,[[["controlflags",3]],["controlflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",120,[[["localflags",3]],["localflags",3]]],[11,"bitxor","nix::sys::wait","Returns the left flags, but with all the right flags …",127,[[["waitpidflag",3]],["waitpidflag",3]]],[11,"bitxor","nix::sys::inotify","Returns the left flags, but with all the right flags …",129,[[["addwatchflags",3]],["addwatchflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",130,[[["initflags",3]],["initflags",3]]],[11,"bitxor","nix::sys::timerfd","Returns the left flags, but with all the right flags …",134,[[["timerflags",3]],["timerflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",135,[[["timersettimeflags",3]],["timersettimeflags",3]]],[11,"bitxor","nix::unistd","Returns the left flags, but with all the right flags …",151,[[["accessflags",3]],["accessflags",3]]],[11,"bitand_assign","nix::fcntl","Disables all flags disabled in the set.",6,[[["atflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",7,[[["oflag",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",8,[[["sealflag",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",9,[[["fdflag",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",12,[[["splicefflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",13,[[["fallocateflags",3]]]],[11,"bitand_assign","nix::kmod","Disables all flags disabled in the set.",15,[[["moduleinitflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",16,[[["deletemoduleflags",3]]]],[11,"bitand_assign","nix::mount","Disables all flags disabled in the set.",17,[[["msflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",18,[[["mntflags",3]]]],[11,"bitand_assign","nix::mqueue","Disables all flags disabled in the set.",19,[[["mq_oflag",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",20,[[["fdflag",3]]]],[11,"bitand_assign","nix::net::if_","Disables all flags disabled in the set.",22,[[["interfaceflags",3]]]],[11,"bitand_assign","nix::poll","Disables all flags disabled in the set.",24,[[["pollflags",3]]]],[11,"bitand_assign","nix::sched","Disables all flags disabled in the set.",160,[[["cloneflags",3]]]],[11,"bitand_assign","nix::sys::epoll","Disables all flags disabled in the set.",35,[[["epollflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",37,[[["epollcreateflags",3]]]],[11,"bitand_assign","nix::sys::eventfd","Disables all flags disabled in the set.",39,[[["efdflags",3]]]],[11,"bitand_assign","nix::sys::memfd","Disables all flags disabled in the set.",40,[[["memfdcreateflag",3]]]],[11,"bitand_assign","nix::sys::mman","Disables all flags disabled in the set.",41,[[["protflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",42,[[["mapflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",43,[[["mremapflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",45,[[["msflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",46,[[["mlockallflags",3]]]],[11,"bitand_assign","nix::sys::personality","Disables all flags disabled in the set.",47,[[["persona",3]]]],[11,"bitand_assign","nix::sys::ptrace","Disables all flags disabled in the set.",162,[[["options",3]]]],[11,"bitand_assign","nix::sys::quota","Disables all flags disabled in the set.",52,[[["quotavalidflags",3]]]],[11,"bitand_assign","nix::sys::signal","Disables all flags disabled in the set.",57,[[["saflags",3]]]],[11,"bitand_assign","nix::sys::signalfd","Disables all flags disabled in the set.",66,[[["sfdflags",3]]]],[11,"bitand_assign","nix::sys::socket","Disables all flags disabled in the set.",88,[[["sockflag",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",89,[[["msgflags",3]]]],[11,"bitand_assign","nix::sys::stat","Disables all flags disabled in the set.",102,[[["sflag",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",103,[[["mode",3]]]],[11,"bitand_assign","nix::sys::statvfs","Disables all flags disabled in the set.",108,[[["fsflags",3]]]],[11,"bitand_assign","nix::sys::termios","Disables all flags disabled in the set.",117,[[["inputflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",118,[[["outputflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",119,[[["controlflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",120,[[["localflags",3]]]],[11,"bitand_assign","nix::sys::wait","Disables all flags disabled in the set.",127,[[["waitpidflag",3]]]],[11,"bitand_assign","nix::sys::inotify","Disables all flags disabled in the set.",129,[[["addwatchflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",130,[[["initflags",3]]]],[11,"bitand_assign","nix::sys::timerfd","Disables all flags disabled in the set.",134,[[["timerflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",135,[[["timersettimeflags",3]]]],[11,"bitand_assign","nix::unistd","Disables all flags disabled in the set.",151,[[["accessflags",3]]]],[11,"bitor_assign","nix::fcntl","Adds the set of flags.",6,[[["atflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",7,[[["oflag",3]]]],[11,"bitor_assign","","Adds the set of flags.",8,[[["sealflag",3]]]],[11,"bitor_assign","","Adds the set of flags.",9,[[["fdflag",3]]]],[11,"bitor_assign","","Adds the set of flags.",12,[[["splicefflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",13,[[["fallocateflags",3]]]],[11,"bitor_assign","nix::kmod","Adds the set of flags.",15,[[["moduleinitflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",16,[[["deletemoduleflags",3]]]],[11,"bitor_assign","nix::mount","Adds the set of flags.",17,[[["msflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",18,[[["mntflags",3]]]],[11,"bitor_assign","nix::mqueue","Adds the set of flags.",19,[[["mq_oflag",3]]]],[11,"bitor_assign","","Adds the set of flags.",20,[[["fdflag",3]]]],[11,"bitor_assign","nix::net::if_","Adds the set of flags.",22,[[["interfaceflags",3]]]],[11,"bitor_assign","nix::poll","Adds the set of flags.",24,[[["pollflags",3]]]],[11,"bitor_assign","nix::sched","Adds the set of flags.",160,[[["cloneflags",3]]]],[11,"bitor_assign","nix::sys::epoll","Adds the set of flags.",35,[[["epollflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",37,[[["epollcreateflags",3]]]],[11,"bitor_assign","nix::sys::eventfd","Adds the set of flags.",39,[[["efdflags",3]]]],[11,"bitor_assign","nix::sys::memfd","Adds the set of flags.",40,[[["memfdcreateflag",3]]]],[11,"bitor_assign","nix::sys::mman","Adds the set of flags.",41,[[["protflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",42,[[["mapflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",43,[[["mremapflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",45,[[["msflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",46,[[["mlockallflags",3]]]],[11,"bitor_assign","nix::sys::personality","Adds the set of flags.",47,[[["persona",3]]]],[11,"bitor_assign","nix::sys::ptrace","Adds the set of flags.",162,[[["options",3]]]],[11,"bitor_assign","nix::sys::quota","Adds the set of flags.",52,[[["quotavalidflags",3]]]],[11,"bitor_assign","nix::sys::signal","Adds the set of flags.",57,[[["saflags",3]]]],[11,"bitor_assign","nix::sys::signalfd","Adds the set of flags.",66,[[["sfdflags",3]]]],[11,"bitor_assign","nix::sys::socket","Adds the set of flags.",88,[[["sockflag",3]]]],[11,"bitor_assign","","Adds the set of flags.",89,[[["msgflags",3]]]],[11,"bitor_assign","nix::sys::stat","Adds the set of flags.",102,[[["sflag",3]]]],[11,"bitor_assign","","Adds the set of flags.",103,[[["mode",3]]]],[11,"bitor_assign","nix::sys::statvfs","Adds the set of flags.",108,[[["fsflags",3]]]],[11,"bitor_assign","nix::sys::termios","Adds the set of flags.",117,[[["inputflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",118,[[["outputflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",119,[[["controlflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",120,[[["localflags",3]]]],[11,"bitor_assign","nix::sys::wait","Adds the set of flags.",127,[[["waitpidflag",3]]]],[11,"bitor_assign","nix::sys::inotify","Adds the set of flags.",129,[[["addwatchflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",130,[[["initflags",3]]]],[11,"bitor_assign","nix::sys::timerfd","Adds the set of flags.",134,[[["timerflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",135,[[["timersettimeflags",3]]]],[11,"bitor_assign","nix::unistd","Adds the set of flags.",151,[[["accessflags",3]]]],[11,"bitxor_assign","nix::fcntl","Toggles the set of flags.",6,[[["atflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",7,[[["oflag",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",8,[[["sealflag",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",9,[[["fdflag",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",12,[[["splicefflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",13,[[["fallocateflags",3]]]],[11,"bitxor_assign","nix::kmod","Toggles the set of flags.",15,[[["moduleinitflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",16,[[["deletemoduleflags",3]]]],[11,"bitxor_assign","nix::mount","Toggles the set of flags.",17,[[["msflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",18,[[["mntflags",3]]]],[11,"bitxor_assign","nix::mqueue","Toggles the set of flags.",19,[[["mq_oflag",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",20,[[["fdflag",3]]]],[11,"bitxor_assign","nix::net::if_","Toggles the set of flags.",22,[[["interfaceflags",3]]]],[11,"bitxor_assign","nix::poll","Toggles the set of flags.",24,[[["pollflags",3]]]],[11,"bitxor_assign","nix::sched","Toggles the set of flags.",160,[[["cloneflags",3]]]],[11,"bitxor_assign","nix::sys::epoll","Toggles the set of flags.",35,[[["epollflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",37,[[["epollcreateflags",3]]]],[11,"bitxor_assign","nix::sys::eventfd","Toggles the set of flags.",39,[[["efdflags",3]]]],[11,"bitxor_assign","nix::sys::memfd","Toggles the set of flags.",40,[[["memfdcreateflag",3]]]],[11,"bitxor_assign","nix::sys::mman","Toggles the set of flags.",41,[[["protflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",42,[[["mapflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",43,[[["mremapflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",45,[[["msflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",46,[[["mlockallflags",3]]]],[11,"bitxor_assign","nix::sys::personality","Toggles the set of flags.",47,[[["persona",3]]]],[11,"bitxor_assign","nix::sys::ptrace","Toggles the set of flags.",162,[[["options",3]]]],[11,"bitxor_assign","nix::sys::quota","Toggles the set of flags.",52,[[["quotavalidflags",3]]]],[11,"bitxor_assign","nix::sys::signal","Toggles the set of flags.",57,[[["saflags",3]]]],[11,"bitxor_assign","nix::sys::signalfd","Toggles the set of flags.",66,[[["sfdflags",3]]]],[11,"bitxor_assign","nix::sys::socket","Toggles the set of flags.",88,[[["sockflag",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",89,[[["msgflags",3]]]],[11,"bitxor_assign","nix::sys::stat","Toggles the set of flags.",102,[[["sflag",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",103,[[["mode",3]]]],[11,"bitxor_assign","nix::sys::statvfs","Toggles the set of flags.",108,[[["fsflags",3]]]],[11,"bitxor_assign","nix::sys::termios","Toggles the set of flags.",117,[[["inputflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",118,[[["outputflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",119,[[["controlflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",120,[[["localflags",3]]]],[11,"bitxor_assign","nix::sys::wait","Toggles the set of flags.",127,[[["waitpidflag",3]]]],[11,"bitxor_assign","nix::sys::inotify","Toggles the set of flags.",129,[[["addwatchflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",130,[[["initflags",3]]]],[11,"bitxor_assign","nix::sys::timerfd","Toggles the set of flags.",134,[[["timerflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",135,[[["timersettimeflags",3]]]],[11,"bitxor_assign","nix::unistd","Toggles the set of flags.",151,[[["accessflags",3]]]],[11,"hash","nix::dir","",0,[[]]],[11,"hash","","",156,[[]]],[11,"hash","","",157,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",1,[[]]],[11,"hash","nix::fcntl","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",5,[[]]],[11,"hash","nix::ifaddrs","",14,[[]]],[11,"hash","","",158,[[]]],[11,"hash","nix::kmod","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","nix::mount","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","nix::mqueue","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","nix::net::if_","",22,[[]]],[11,"hash","nix::poll","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","nix::pty","",26,[[]]],[11,"hash","","",159,[[]]],[11,"hash","nix::sched","",160,[[]]],[11,"hash","","",161,[[]]],[11,"hash","nix::sys::aio","",28,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",30,[[]]],[11,"hash","","",31,[[]]],[11,"hash","nix::sys::epoll","",35,[[]]],[11,"hash","","",36,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",38,[[]]],[11,"hash","nix::sys::eventfd","",39,[[]]],[11,"hash","nix::sys::memfd","",40,[[]]],[11,"hash","nix::sys::mman","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","","",43,[[]]],[11,"hash","","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",46,[[]]],[11,"hash","nix::sys::personality","",47,[[]]],[11,"hash","nix::sys::ptrace","",48,[[]]],[11,"hash","","",49,[[]]],[11,"hash","","",162,[[]]],[11,"hash","nix::sys::quota","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",52,[[]]],[11,"hash","","",53,[[]]],[11,"hash","nix::sys::reboot","",54,[[]]],[11,"hash","nix::sys::select","",55,[[]]],[11,"hash","nix::sys::signal","",56,[[]]],[11,"hash","","",165,[[]]],[11,"hash","","",57,[[]]],[11,"hash","","",58,[[]]],[11,"hash","","",59,[[]]],[11,"hash","","",60,[[]]],[11,"hash","","",61,[[]]],[11,"hash","","",62,[[]]],[11,"hash","","",164,[[]]],[11,"hash","nix::sys::signalfd","",66,[[]]],[11,"hash","","",67,[[]]],[11,"hash","nix::sys::socket","",75,[[]]],[11,"hash","","",77,[[]]],[11,"hash","","",79,[[]]],[11,"hash","","",80,[[]]],[11,"hash","","",81,[[]]],[11,"hash","","",78,[[]]],[11,"hash","","",76,[[]]],[11,"hash","","",83,[[]]],[11,"hash","","",84,[[]]],[11,"hash","","",82,[[]]],[11,"hash","","",85,[[]]],[11,"hash","nix::sys::socket::sockopt","",166,[[]]],[11,"hash","","",167,[[]]],[11,"hash","","",168,[[]]],[11,"hash","","",169,[[]]],[11,"hash","","",170,[[]]],[11,"hash","","",171,[[]]],[11,"hash","","",172,[[]]],[11,"hash","","",173,[[]]],[11,"hash","","",174,[[]]],[11,"hash","","",175,[[]]],[11,"hash","","",176,[[]]],[11,"hash","","",177,[[]]],[11,"hash","","",178,[[]]],[11,"hash","","",179,[[]]],[11,"hash","","",180,[[]]],[11,"hash","","",181,[[]]],[11,"hash","","",182,[[]]],[11,"hash","","",183,[[]]],[11,"hash","","",184,[[]]],[11,"hash","","",185,[[]]],[11,"hash","","",186,[[]]],[11,"hash","","",187,[[]]],[11,"hash","","",188,[[]]],[11,"hash","","",189,[[]]],[11,"hash","","",190,[[]]],[11,"hash","","",191,[[]]],[11,"hash","","",192,[[]]],[11,"hash","","",193,[[]]],[11,"hash","","",194,[[]]],[11,"hash","","",195,[[]]],[11,"hash","","",196,[[]]],[11,"hash","","",197,[[]]],[11,"hash","","",198,[[]]],[11,"hash","","",199,[[]]],[11,"hash","","",200,[[]]],[11,"hash","","",201,[[]]],[11,"hash","","",202,[[]]],[11,"hash","nix::sys::socket","",87,[[]]],[11,"hash","","",88,[[]]],[11,"hash","","",89,[[]]],[11,"hash","","",100,[[]]],[11,"hash","nix::sys::stat","",102,[[]]],[11,"hash","","",103,[[]]],[11,"hash","nix::sys::statvfs","",108,[[]]],[11,"hash","","",109,[[]]],[11,"hash","nix::sys::sysinfo","",110,[[]]],[11,"hash","nix::sys::termios","",112,[[]]],[11,"hash","","",113,[[]]],[11,"hash","","",114,[[]]],[11,"hash","","",115,[[]]],[11,"hash","","",116,[[]]],[11,"hash","","",117,[[]]],[11,"hash","","",118,[[]]],[11,"hash","","",119,[[]]],[11,"hash","","",120,[[]]],[11,"hash","nix::sys::time","",122,[[]]],[11,"hash","","",123,[[]]],[11,"hash","nix::sys::uio","",124,[[]]],[11,"hash","","",125,[[]]],[11,"hash","nix::sys::utsname","",126,[[]]],[11,"hash","nix::sys::wait","",127,[[]]],[11,"hash","","",128,[[]]],[11,"hash","nix::sys::inotify","",129,[[]]],[11,"hash","","",130,[[]]],[11,"hash","","",206,[[]]],[11,"hash","nix::sys::timerfd","",133,[[]]],[11,"hash","","",134,[[]]],[11,"hash","","",135,[[]]],[11,"hash","nix::time","",138,[[]]],[11,"hash","nix::ucontext","",139,[[]]],[11,"hash","nix::unistd","",140,[[]]],[11,"hash","","",141,[[]]],[11,"hash","","",142,[[]]],[11,"hash","","",149,[[]]],[11,"hash","","",150,[[]]],[11,"hash","","",151,[[]]],[11,"try_from","nix::sys::signal","",56,[[["c_int",6]],[["result",6],["signal",4]]]],[11,"try_from","nix::sys::termios","",112,[[["speed_t",6]],[["result",6],["baudrate",4]]]],[11,"from_str","nix::sys::signal","",56,[[],[["result",6],["signal",4]]]],[11,"from_iter","nix::fcntl","",6,[[["intoiterator",8]],["atflags",3]]],[11,"from_iter","","",7,[[["intoiterator",8]],["oflag",3]]],[11,"from_iter","","",8,[[["intoiterator",8]],["sealflag",3]]],[11,"from_iter","","",9,[[["intoiterator",8]],["fdflag",3]]],[11,"from_iter","","",12,[[["intoiterator",8]],["splicefflags",3]]],[11,"from_iter","","",13,[[["intoiterator",8]],["fallocateflags",3]]],[11,"from_iter","nix::kmod","",15,[[["intoiterator",8]],["moduleinitflags",3]]],[11,"from_iter","","",16,[[["intoiterator",8]],["deletemoduleflags",3]]],[11,"from_iter","nix::mount","",17,[[["intoiterator",8]],["msflags",3]]],[11,"from_iter","","",18,[[["intoiterator",8]],["mntflags",3]]],[11,"from_iter","nix::mqueue","",19,[[["intoiterator",8]],["mq_oflag",3]]],[11,"from_iter","","",20,[[["intoiterator",8]],["fdflag",3]]],[11,"from_iter","nix::net::if_","",22,[[["intoiterator",8]],["interfaceflags",3]]],[11,"from_iter","nix::poll","",24,[[["intoiterator",8]],["pollflags",3]]],[11,"from_iter","nix::sched","",160,[[["intoiterator",8]],["cloneflags",3]]],[11,"from_iter","nix::sys::epoll","",35,[[["intoiterator",8]],["epollflags",3]]],[11,"from_iter","","",37,[[["intoiterator",8]],["epollcreateflags",3]]],[11,"from_iter","nix::sys::eventfd","",39,[[["intoiterator",8]],["efdflags",3]]],[11,"from_iter","nix::sys::memfd","",40,[[["intoiterator",8]],["memfdcreateflag",3]]],[11,"from_iter","nix::sys::mman","",41,[[["intoiterator",8]],["protflags",3]]],[11,"from_iter","","",42,[[["intoiterator",8]],["mapflags",3]]],[11,"from_iter","","",43,[[["intoiterator",8]],["mremapflags",3]]],[11,"from_iter","","",45,[[["intoiterator",8]],["msflags",3]]],[11,"from_iter","","",46,[[["intoiterator",8]],["mlockallflags",3]]],[11,"from_iter","nix::sys::personality","",47,[[["intoiterator",8]],["persona",3]]],[11,"from_iter","nix::sys::ptrace","",162,[[["intoiterator",8]],["options",3]]],[11,"from_iter","nix::sys::quota","",52,[[["intoiterator",8]],["quotavalidflags",3]]],[11,"from_iter","nix::sys::signal","",57,[[["intoiterator",8]],["saflags",3]]],[11,"from_iter","nix::sys::signalfd","",66,[[["intoiterator",8]],["sfdflags",3]]],[11,"from_iter","nix::sys::socket","",88,[[["intoiterator",8]],["sockflag",3]]],[11,"from_iter","","",89,[[["intoiterator",8]],["msgflags",3]]],[11,"from_iter","nix::sys::stat","",102,[[["intoiterator",8]],["sflag",3]]],[11,"from_iter","","",103,[[["intoiterator",8]],["mode",3]]],[11,"from_iter","nix::sys::statvfs","",108,[[["intoiterator",8]],["fsflags",3]]],[11,"from_iter","nix::sys::termios","",117,[[["intoiterator",8]],["inputflags",3]]],[11,"from_iter","","",118,[[["intoiterator",8]],["outputflags",3]]],[11,"from_iter","","",119,[[["intoiterator",8]],["controlflags",3]]],[11,"from_iter","","",120,[[["intoiterator",8]],["localflags",3]]],[11,"from_iter","nix::sys::wait","",127,[[["intoiterator",8]],["waitpidflag",3]]],[11,"from_iter","nix::sys::inotify","",129,[[["intoiterator",8]],["addwatchflags",3]]],[11,"from_iter","","",130,[[["intoiterator",8]],["initflags",3]]],[11,"from_iter","nix::sys::timerfd","",134,[[["intoiterator",8]],["timerflags",3]]],[11,"from_iter","","",135,[[["intoiterator",8]],["timersettimeflags",3]]],[11,"from_iter","nix::unistd","",151,[[["intoiterator",8]],["accessflags",3]]],[11,"fmt","nix::fcntl","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","nix::kmod","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mount","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mqueue","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","nix::net::if_","",22,[[["formatter",3]],["result",6]]],[11,"fmt","nix::poll","",24,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sched","",160,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::epoll","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::eventfd","",39,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::memfd","",40,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::mman","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::personality","",47,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::ptrace","",162,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::quota","",52,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signal","",57,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signalfd","",66,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::socket","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::stat","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::statvfs","",108,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::termios","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::wait","",127,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::inotify","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::timerfd","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","nix::unistd","",151,[[["formatter",3]],["result",6]]],[11,"fmt","nix::fcntl","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","nix::kmod","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mount","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mqueue","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","nix::net::if_","",22,[[["formatter",3]],["result",6]]],[11,"fmt","nix::poll","",24,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sched","",160,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::epoll","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::eventfd","",39,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::memfd","",40,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::mman","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::personality","",47,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::ptrace","",162,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::quota","",52,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signal","",57,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signalfd","",66,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::socket","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::stat","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::statvfs","",108,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::termios","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::wait","",127,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::inotify","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::timerfd","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","nix::unistd","",151,[[["formatter",3]],["result",6]]],[11,"fmt","nix::fcntl","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","nix::kmod","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mount","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mqueue","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","nix::net::if_","",22,[[["formatter",3]],["result",6]]],[11,"fmt","nix::poll","",24,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sched","",160,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::epoll","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::eventfd","",39,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::memfd","",40,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::mman","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::personality","",47,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::ptrace","",162,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::quota","",52,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signal","",57,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signalfd","",66,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::socket","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::stat","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::statvfs","",108,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::termios","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::wait","",127,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::inotify","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::timerfd","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","nix::unistd","",151,[[["formatter",3]],["result",6]]],[11,"fmt","nix::fcntl","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","nix::kmod","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mount","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","nix::mqueue","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","nix::net::if_","",22,[[["formatter",3]],["result",6]]],[11,"fmt","nix::poll","",24,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sched","",160,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::epoll","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::eventfd","",39,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::memfd","",40,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::mman","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::personality","",47,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::ptrace","",162,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::quota","",52,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signal","",57,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::signalfd","",66,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::socket","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::stat","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::statvfs","",108,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::termios","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::wait","",127,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::inotify","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","nix::sys::timerfd","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","nix::unistd","",151,[[["formatter",3]],["result",6]]],[11,"read","nix::pty","",159,[[],["result",6]]],[11,"write","","",159,[[],["result",6]]],[11,"flush","","",159,[[],["result",6]]],[11,"as_raw_fd","nix::dir","",0,[[],["rawfd",6]]],[11,"as_raw_fd","nix::pty","",159,[[],["rawfd",6]]],[11,"as_raw_fd","nix::sys::signalfd","",67,[[],["rawfd",6]]],[11,"as_raw_fd","nix::sys::inotify","",132,[[],["rawfd",6]]],[11,"as_raw_fd","nix::sys::timerfd","",137,[[],["rawfd",6]]],[11,"from_raw_fd","nix::sys::inotify","",132,[[["rawfd",6]]]],[11,"from_raw_fd","nix::sys::timerfd","",137,[[["rawfd",6]]]],[11,"into_raw_fd","nix::pty","",159,[[],["rawfd",6]]],[18,"CLONE_VM","nix::sched","",160,null],[18,"CLONE_FS","","",160,null],[18,"CLONE_FILES","","",160,null],[18,"CLONE_SIGHAND","","",160,null],[18,"CLONE_PTRACE","","",160,null],[18,"CLONE_VFORK","","",160,null],[18,"CLONE_PARENT","","",160,null],[18,"CLONE_THREAD","","",160,null],[18,"CLONE_NEWNS","","",160,null],[18,"CLONE_SYSVSEM","","",160,null],[18,"CLONE_SETTLS","","",160,null],[18,"CLONE_PARENT_SETTID","","",160,null],[18,"CLONE_CHILD_CLEARTID","","",160,null],[18,"CLONE_DETACHED","","",160,null],[18,"CLONE_UNTRACED","","",160,null],[18,"CLONE_CHILD_SETTID","","",160,null],[18,"CLONE_NEWCGROUP","","",160,null],[18,"CLONE_NEWUTS","","",160,null],[18,"CLONE_NEWIPC","","",160,null],[18,"CLONE_NEWUSER","","",160,null],[18,"CLONE_NEWPID","","",160,null],[18,"CLONE_NEWNET","","",160,null],[18,"CLONE_IO","","",160,null],[11,"empty","","Returns an empty set of flags",160,[[],["cloneflags",3]]],[11,"all","","Returns the set containing all flags.",160,[[],["cloneflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",160,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",160,[[["c_int",6]],[["option",4],["cloneflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",160,[[["c_int",6]],["cloneflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",160,[[["c_int",6]],["cloneflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",160,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",160,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",160,[[["cloneflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",160,[[["cloneflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",160,[[["cloneflags",3]]]],[11,"remove","","Removes the specified flags in-place.",160,[[["cloneflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",160,[[["cloneflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",160,[[["cloneflags",3]]]],[11,"new","","Create a new and empty CpuSet.",161,[[],["cpuset",3]]],[11,"is_set","","Test to see if a CPU is in the CpuSet. <code>field</code> is the CPU …",161,[[],["result",6]]],[11,"set","","Add a CPU to CpuSet. <code>field</code> is the CPU id to add",161,[[],["result",6]]],[11,"unset","","Remove a CPU from CpuSet. <code>field</code> is the CPU id to remove",161,[[],["result",6]]],[11,"count","","Return the maximum number of CPU in CpuSet",161,[[]]],[18,"PTRACE_O_TRACESYSGOOD","nix::sys::ptrace","When delivering system call traps set a bit to allow …",162,null],[18,"PTRACE_O_TRACEFORK","","Stop tracee at next fork and start tracing the forked …",162,null],[18,"PTRACE_O_TRACEVFORK","","Stop tracee at next vfork call and trace the vforked …",162,null],[18,"PTRACE_O_TRACECLONE","","Stop tracee at next clone call and trace the cloned …",162,null],[18,"PTRACE_O_TRACEEXEC","","Stop tracee at next execve call.",162,null],[18,"PTRACE_O_TRACEVFORKDONE","","Stop tracee at vfork completion.",162,null],[18,"PTRACE_O_TRACEEXIT","","Stop tracee at next exit call. Stops before exit …",162,null],[18,"PTRACE_O_TRACESECCOMP","","Stop tracee when a SECCOMP_RET_TRACE rule is triggered. …",162,null],[18,"PTRACE_O_EXITKILL","","Send a SIGKILL to the tracee if the tracer exits.  This …",162,null],[11,"empty","","Returns an empty set of flags",162,[[],["options",3]]],[11,"all","","Returns the set containing all flags.",162,[[],["options",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",162,[[],["c_int",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",162,[[["c_int",6]],[["option",4],["options",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",162,[[["c_int",6]],["options",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",162,[[["c_int",6]],["options",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",162,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",162,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",162,[[["options",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",162,[[["options",3]]]],[11,"insert","","Inserts the specified flags in-place.",162,[[["options",3]]]],[11,"remove","","Removes the specified flags in-place.",162,[[["options",3]]]],[11,"toggle","","Toggles the specified flags in-place.",162,[[["options",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",162,[[["options",3]]]],[11,"new","nix::sys::signal","<strong>Note:</strong> this constructor does not allow the user to set the …",164,[[["sigevnotify",4]],["sigevent",3]]],[11,"sigevent","","",164,[[],["sigevent",3]]],[11,"new","nix::sys::socket","",83,[[],["netlinkaddr",3]]],[11,"pid","","",83,[[]]],[11,"groups","","",83,[[]]],[11,"new","","",84,[[],["algaddr",3]]],[11,"alg_type","","",84,[[],["cstr",3]]],[11,"alg_name","","",84,[[],["cstr",3]]],[11,"family","","Always AF_PACKET",82,[[],["addressfamily",4]]],[11,"protocol","","Physical-layer protocol",82,[[]]],[11,"ifindex","","Interface number",82,[[]]],[11,"hatype","","ARP hardware type",82,[[]]],[11,"pkttype","","Packet type",82,[[]]],[11,"halen","","Length of MAC address",82,[[]]],[11,"addr","","Physical-layer address (MAC)",82,[[]]],[11,"new","","",85,[[],["vsockaddr",3]]],[11,"cid","","Context Identifier (CID)",85,[[]]],[11,"port","","Port number",85,[[]]],[11,"from_i32","","Create a new <code>AddressFamily</code> from an integer value …",75,[[],[["option",4],["addressfamily",4]]]],[11,"from_std","","",77,[[["socketaddr",4]],["inetaddr",4]]],[11,"new","","",77,[[["ipaddr",4]],["inetaddr",4]]],[11,"ip","","Gets the IP address associated with this socket address.",77,[[],["ipaddr",4]]],[11,"port","","Gets the port number associated with this socket address",77,[[]]],[11,"to_std","","",77,[[],["socketaddr",4]]],[11,"to_str","","",77,[[],["string",3]]],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",79,[[],["ipaddr",4]]],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",79,[[],["ipaddr",4]]],[11,"from_std","","",79,[[["ipaddr",4]],["ipaddr",4]]],[11,"to_std","","",79,[[],["ipaddr",4]]],[11,"new","","",80,[[],["ipv4addr",3]]],[11,"from_std","","",80,[[["ipv4addr",3]],["ipv4addr",3]]],[11,"any","","",80,[[],["ipv4addr",3]]],[11,"octets","","",80,[[]]],[11,"to_std","","",80,[[],["ipv4addr",3]]],[11,"new","","",81,[[],["ipv6addr",3]]],[11,"from_std","","",81,[[["ipv6addr",3]],["ipv6addr",3]]],[11,"segments","","Return the eight 16-bit segments that make up this address",81,[[]]],[11,"to_std","","",81,[[],["ipv6addr",3]]],[11,"new","","Create a new sockaddr_un representing a filesystem path.",78,[[],[["result",6],["unixaddr",3]]]],[11,"new_abstract","","Create a new <code>sockaddr_un</code> representing an address in the …",78,[[],[["result",6],["unixaddr",3]]]],[11,"path","","If this address represents a filesystem path, return that …",78,[[],[["path",3],["option",4]]]],[11,"as_abstract","","If this address represents an abstract socket, return its …",78,[[],["option",4]]],[11,"new_inet","","",76,[[["inetaddr",4]],["sockaddr",4]]],[11,"new_unix","","",76,[[],[["result",6],["sockaddr",4]]]],[11,"new_netlink","","",76,[[],["sockaddr",4]]],[11,"new_alg","","",76,[[],["sockaddr",4]]],[11,"new_vsock","","",76,[[],["sockaddr",4]]],[11,"family","","",76,[[],["addressfamily",4]]],[11,"to_str","","",76,[[],["string",3]]],[11,"as_ffi_pair","","Conversion from nix\'s SockAddr type to the underlying …",76,[[]]]],"p":[[3,"Dir"],[4,"Type"],[3,"Entry"],[4,"Errno"],[8,"ErrnoSentinel"],[4,"PosixFadviseAdvice"],[3,"AtFlags"],[3,"OFlag"],[3,"SealFlag"],[3,"FdFlag"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"FallocateFlags"],[3,"InterfaceAddress"],[3,"ModuleInitFlags"],[3,"DeleteModuleFlags"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"InterfaceFlags"],[3,"PollFd"],[3,"PollFlags"],[3,"Winsize"],[3,"OpenptyResult"],[3,"ForkptyResult"],[4,"AioFsyncMode"],[4,"LioOpcode"],[4,"LioMode"],[4,"AioCancelStat"],[4,"Buffer"],[3,"AioCb"],[3,"LioCb"],[3,"EpollFlags"],[4,"EpollOp"],[3,"EpollCreateFlags"],[3,"EpollEvent"],[3,"EfdFlags"],[3,"MemFdCreateFlag"],[3,"ProtFlags"],[3,"MapFlags"],[3,"MRemapFlags"],[4,"MmapAdvise"],[3,"MsFlags"],[3,"MlockAllFlags"],[3,"Persona"],[4,"Request"],[4,"Event"],[4,"QuotaType"],[4,"QuotaFmt"],[3,"QuotaValidFlags"],[3,"Dqblk"],[4,"RebootMode"],[3,"FdSet"],[4,"Signal"],[3,"SaFlags"],[4,"SigmaskHow"],[3,"SigSet"],[4,"SigHandler"],[3,"SigAction"],[4,"SigevNotify"],[13,"SigevSignal"],[13,"SigevThreadId"],[3,"siginfo"],[3,"SfdFlags"],[3,"SignalFd"],[3,"cmsghdr"],[3,"msghdr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_storage"],[3,"sockaddr_un"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[3,"UnixAddr"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"LinkAddr"],[3,"NetlinkAddr"],[3,"AlgAddr"],[3,"VsockAddr"],[4,"SockType"],[4,"SockProtocol"],[3,"SockFlag"],[3,"MsgFlags"],[3,"UnixCredentials"],[3,"IpMembershipRequest"],[3,"Ipv6MembershipRequest"],[3,"RecvMsg"],[4,"ControlMessageOwned"],[4,"ControlMessage"],[3,"SendMmsgData"],[3,"RecvMmsgData"],[8,"GetSockOpt"],[8,"SetSockOpt"],[4,"Shutdown"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[4,"FchmodatFlags"],[4,"UtimensatFlags"],[3,"FsType"],[3,"Statfs"],[3,"FsFlags"],[3,"Statvfs"],[3,"SysInfo"],[3,"Termios"],[4,"BaudRate"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[4,"SpecialCharacterIndices"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[8,"TimeValLike"],[3,"TimeSpec"],[3,"TimeVal"],[3,"RemoteIoVec"],[3,"IoVec"],[3,"UtsName"],[3,"WaitPidFlag"],[4,"WaitStatus"],[3,"AddWatchFlags"],[3,"InitFlags"],[3,"InotifyEvent"],[3,"Inotify"],[4,"ClockId"],[3,"TimerFlags"],[3,"TimerSetTimeFlags"],[4,"Expiration"],[3,"TimerFd"],[3,"ClockId"],[3,"UContext"],[3,"Uid"],[3,"Gid"],[3,"Pid"],[4,"ForkResult"],[13,"Parent"],[4,"FchownatFlags"],[4,"Whence"],[4,"LinkatFlags"],[4,"UnlinkatFlags"],[4,"PathconfVar"],[4,"SysconfVar"],[3,"AccessFlags"],[3,"User"],[3,"Group"],[4,"Error"],[8,"NixPath"],[3,"Iter"],[3,"OwningIter"],[3,"InterfaceAddressIterator"],[3,"PtyMaster"],[3,"CloneFlags"],[3,"CpuSet"],[3,"Options"],[3,"Fds"],[3,"SigEvent"],[3,"SignalIterator"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"TcpKeepCount"],[3,"TcpKeepInterval"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[3,"BindToDevice"],[3,"OriginalDst"],[3,"ReceiveTimestamp"],[3,"IpTransparent"],[3,"Mark"],[3,"PassCred"],[3,"TcpCongestion"],[3,"Ipv4PacketInfo"],[3,"Ipv6RecvPacketInfo"],[3,"UdpGsoSegment"],[3,"UdpGroSegment"],[3,"AlgSetAeadAuthSize"],[3,"AlgSetKey"],[3,"CmsgIterator"],[3,"WatchDescriptor"],[6,"SessionId"]]},\
"num_cpus":{"doc":"A crate with utilities to determine the number of CPUs …","i":[[5,"get","num_cpus","Returns the number of available CPUs of the current …",null,[[]]],[5,"get_physical","","Returns the number of physical cores of the current …",null,[[]]]],"p":[]},\
"num_integer":{"doc":"Integer trait and functions.","i":[[8,"Roots","num_integer","Provides methods to compute an integer\'s square root, …",null,null],[10,"nth_root","","Returns the truncated principal <code>n</code>th root of an integer -- …",0,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer …",0,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots",8]],["roots",8]]],[5,"nth_root","","Returns the truncated principal <code>n</code>th root of an integer -- …",null,[[["roots",8]],["roots",8]]],[5,"sqrt","","Returns the truncated principal square root of an integer …",null,[[["roots",8]],["roots",8]]],[8,"Average","","Provides methods to compute the average of two integers, …",null,null],[10,"average_ceil","","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…",1,[[]]],[10,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>. …",1,[[]]],[5,"average_ceil","","Returns the ceiling value of the average of <code>x</code> and <code>y</code> -- …",null,[[["average",8]],["average",8]]],[5,"average_floor","","Returns the floor value of the average of <code>x</code> and <code>y</code> -- see …",null,[[["average",8]],["average",8]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",2,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",2,[[]]],[11,"div_ceil","","Ceiled integer division.",2,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",2,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",2,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple …",2,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",2,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",2,[[]]],[10,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",2,[[]]],[10,"is_multiple_of","","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.",2,[[]]],[10,"is_even","","Returns <code>true</code> if the number is even.",2,[[]]],[10,"is_odd","","Returns <code>true</code> if the number is odd.",2,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. …",2,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. …",2,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",2,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",2,[[]]],[3,"ExtendedGcd","","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",3,null],[12,"x","","",3,null],[12,"y","","",3,null],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer",8]]]],[5,"div_floor","","Floored integer division",null,[[["integer",8]],["integer",8]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer",8]],["integer",8]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer",8]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer",8]],["integer",8]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",null,[[["integer",8]],["integer",8]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",null,[[["integer",8]],["integer",8]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",null,[[["integer",8]]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[11,"new","","For a given n, iterate over all binomial coefficients …",4,[[],["iterbinomial",3]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer",8],["clone",8]],[["integer",8],["clone",8]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer",8],["clone",8]]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"into_iter","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"eq","","",3,[[["extendedgcd",3]]]],[11,"ne","","",3,[[["extendedgcd",3]]]],[11,"next","","",4,[[],["option",4]]],[11,"clone","","",3,[[],["extendedgcd",3]]],[11,"sqrt","","Returns the truncated principal square root of an integer …",0,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[]]]],"p":[[8,"Roots"],[8,"Average"],[8,"Integer"],[3,"ExtendedGcd"],[3,"IterBinomial"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","i":[[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,[[]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[]]],[0,"cast","num_traits","",null,null],[8,"ToPrimitive","num_traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",1,[[],["option",4]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",1,[[],["option",4]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",1,[[],["option",4]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",1,[[],["option",4]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",1,[[],["option",4]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",1,[[],["option",4]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",1,[[],["option",4]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",1,[[],["option",4]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",1,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",2,[[],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",2,[[],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",2,[[],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",2,[[],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",2,[[],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",2,[[],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",2,[[],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",2,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[["numcast",8]],[["numcast",8],["option",4]]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",3,[[["toprimitive",8]],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars …",null,null],[10,"as_","","Convert a value to another, using the <code>as</code> operator.",4,[[]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with …",null,null],[10,"infinity","","Returns positive infinity.",5,[[]]],[10,"neg_infinity","","Returns negative infinity.",5,[[]]],[10,"nan","","Returns NaN.",5,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",5,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",5,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",5,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",5,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",5,[[]]],[11,"is_nan","","Returns <code>true</code> if the number is NaN.",5,[[]]],[11,"is_infinite","","Returns <code>true</code> if the number is infinite.",5,[[]]],[11,"is_finite","","Returns <code>true</code> if the number is neither infinite or NaN.",5,[[]]],[11,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",5,[[]]],[10,"classify","","Returns the floating point category of the number. If …",5,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a …",5,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a …",5,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way …",5,[[]]],[11,"trunc","","Return the integer part of a number.",5,[[]]],[11,"fract","","Returns the fractional part of a number.",5,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>. Returns …",5,[[]]],[11,"signum","","Returns a number that represents the sign of <code>self</code>.",5,[[]]],[11,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …",5,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …",5,[[]]],[11,"min","","Returns the minimum of the two numbers.",5,[[]]],[11,"max","","Returns the maximum of the two numbers.",5,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the …",5,[[]]],[11,"powi","","Raise a number to an integer power.",5,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",5,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",5,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",5,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the <code>NaN</code> value.",6,[[]]],[10,"infinity","","Returns the infinite value.",6,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",6,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",6,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",6,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",6,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",6,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",6,[[]]],[10,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.",6,[[]]],[10,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",6,[[]]],[10,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",6,[[]]],[10,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",6,[[]]],[10,"classify","","Returns the floating point category of the number. If …",6,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a …",6,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",6,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",6,[[]]],[10,"trunc","","Return the integer part of a number.",6,[[]]],[10,"fract","","Returns the fractional part of a number.",6,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",6,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",6,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",6,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",6,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",6,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",6,[[]]],[10,"powi","","Raise a number to an integer power.",6,[[]]],[10,"powf","","Raise a number to a floating point power.",6,[[]]],[10,"sqrt","","Take the square root of a number.",6,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",6,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",6,[[]]],[10,"ln","","Returns the natural logarithm of the number.",6,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",6,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",6,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",6,[[]]],[11,"to_degrees","","Converts radians to degrees.",6,[[]]],[11,"to_radians","","Converts degrees to radians.",6,[[]]],[10,"max","","Returns the maximum of the two numbers.",6,[[]]],[10,"min","","Returns the minimum of the two numbers.",6,[[]]],[10,"abs_sub","","The positive difference of two numbers.",6,[[]]],[10,"cbrt","","Take the cubic root of a number.",6,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",6,[[]]],[10,"sin","","Computes the sine of a number (in radians).",6,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",6,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",6,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",6,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",6,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",6,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",6,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",6,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",6,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",6,[[]]],[10,"sinh","","Hyperbolic sine function.",6,[[]]],[10,"cosh","","Hyperbolic cosine function.",6,[[]]],[10,"tanh","","Hyperbolic tangent function.",6,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",6,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",6,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",6,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",6,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",7,[[]]],[10,"FRAC_1_PI","","Return <code>1.0 / π</code>.",7,[[]]],[10,"FRAC_1_SQRT_2","","Return <code>1.0 / sqrt(2.0)</code>.",7,[[]]],[10,"FRAC_2_PI","","Return <code>2.0 / π</code>.",7,[[]]],[10,"FRAC_2_SQRT_PI","","Return <code>2.0 / sqrt(π)</code>.",7,[[]]],[10,"FRAC_PI_2","","Return <code>π / 2.0</code>.",7,[[]]],[10,"FRAC_PI_3","","Return <code>π / 3.0</code>.",7,[[]]],[10,"FRAC_PI_4","","Return <code>π / 4.0</code>.",7,[[]]],[10,"FRAC_PI_6","","Return <code>π / 6.0</code>.",7,[[]]],[10,"FRAC_PI_8","","Return <code>π / 8.0</code>.",7,[[]]],[10,"LN_10","","Return <code>ln(10.0)</code>.",7,[[]]],[10,"LN_2","","Return <code>ln(2.0)</code>.",7,[[]]],[10,"LOG10_E","","Return <code>log10(e)</code>.",7,[[]]],[10,"LOG2_E","","Return <code>log2(e)</code>.",7,[[]]],[10,"PI","","Return Archimedes’ constant <code>π</code>.",7,[[]]],[10,"SQRT_2","","Return <code>sqrt(2.0)</code>.",7,[[]]],[11,"TAU","","Return the full circle constant <code>τ</code>.",7,[[]]],[11,"LOG10_2","","Return <code>log10(2.0)</code>.",7,[[]]],[11,"LOG2_10","","Return <code>log2(10.0)</code>.",7,[[]]],[0,"identities","num_traits","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for <code>Self</code>.",null,null],[10,"zero","","Returns the additive identity element of <code>Self</code>, <code>0</code>.",8,[[]]],[11,"set_zero","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.",8,[[]]],[10,"is_zero","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.",8,[[]]],[8,"One","","Defines a multiplicative identity element for <code>Self</code>.",null,null],[10,"one","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.",9,[[]]],[11,"set_one","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …",9,[[]]],[11,"is_one","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …",9,[[]]],[5,"zero","","Returns the additive identity, <code>0</code>.",null,[[],["zero",8]]],[5,"one","","Returns the multiplicative identity, <code>1</code>.",null,[[],["one",8]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation …",10,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation …",10,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary …",10,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary …",10,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",10,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",10,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",10,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s …",10,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s …",10,[[]]],[10,"to_be","","Convert <code>self</code> to big endian from the target\'s endianness.",10,[[]]],[10,"to_le","","Convert <code>self</code> to little endian from the target\'s …",10,[[]]],[10,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",10,[[]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns <code>None</code> instead of wrapping …",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow …",11,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns <code>None</code> instead of …",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If …",12,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns <code>None</code> instead of …",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or …",13,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns <code>None</code> instead of panicking …",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and …",14,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns <code>None</code> instead …",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for …",15,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns <code>None</code> if the result can\'t …",null,null],[10,"checked_neg","","Negates a number, returning <code>None</code> for results that can\'t …",16,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",17,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",18,[[],["option",4]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, …",null,null],[16,"Output","","The result after applying the operator.",19,null],[10,"inv","","Returns the multiplicative inverse of <code>self</code>.",19,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",20,null],[10,"mul_add","","Performs the fused multiply-add operation.",20,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",21,[[]]],[0,"overflowing","num_traits::ops","",null,null],[8,"OverflowingAdd","num_traits::ops::overflowing","Performs addition with a flag for overflow.",null,null],[10,"overflowing_add","","Returns a tuple of the sum along with a boolean …",22,[[]]],[8,"OverflowingSub","","Performs substraction with a flag for overflow.",null,null],[10,"overflowing_sub","","Returns a tuple of the difference along with a boolean …",23,[[]]],[8,"OverflowingMul","","Performs multiplication with a flag for overflow.",null,null],[10,"overflowing_mul","","Returns a tuple of the product along with a boolean …",24,[[]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at …",25,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating …",25,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds …",null,null],[10,"saturating_add","","Saturating addition. Computes <code>self + other</code>, saturating at …",26,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds …",null,null],[10,"saturating_sub","","Saturating subtraction. Computes <code>self - other</code>, saturating …",27,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric …",null,null],[10,"saturating_mul","","Saturating multiplication. Computes <code>self * other</code>, …",28,[[]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + other</code>, …",29,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - other</code>, …",30,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * other</code>, …",31,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",32,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",33,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",34,[[]]],[0,"pow","num_traits","",null,null],[8,"Pow","num_traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",35,null],[10,"pow","","Returns <code>self</code> to the power <code>rhs</code>.",35,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation …",null,[[["mul",8],["clone",8],["one",8]],[["mul",8],["clone",8],["one",8]]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[["one",8],["clone",8],["checkedmul",8]],[["clone",8],["one",8],["checkedmul",8],["option",4]]]],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can …",36,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",36,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",36,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",36,[[]]],[10,"floor","","Returns the largest integer less than or equal to a …",36,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",36,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",36,[[]]],[10,"trunc","","Return the integer part of a number.",36,[[]]],[10,"fract","","Returns the fractional part of a number.",36,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",36,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",36,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",36,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",36,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",36,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",36,[[]]],[10,"powi","","Raise a number to an integer power.",36,[[]]],[10,"powf","","Raise a number to a real number power.",36,[[]]],[10,"sqrt","","Take the square root of a number.",36,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",36,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",36,[[]]],[10,"ln","","Returns the natural logarithm of the number.",36,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",36,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",36,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",36,[[]]],[10,"to_degrees","","Converts radians to degrees.",36,[[]]],[10,"to_radians","","Converts degrees to radians.",36,[[]]],[10,"max","","Returns the maximum of the two numbers.",36,[[]]],[10,"min","","Returns the minimum of the two numbers.",36,[[]]],[10,"abs_sub","","The positive difference of two numbers.",36,[[]]],[10,"cbrt","","Take the cubic root of a number.",36,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",36,[[]]],[10,"sin","","Computes the sine of a number (in radians).",36,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",36,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",36,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",36,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",36,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",36,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",36,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",36,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",36,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",36,[[]]],[10,"sinh","","Hyperbolic sine function.",36,[[]]],[10,"cosh","","Hyperbolic cosine function.",36,[[]]],[10,"tanh","","Hyperbolic tangent function.",36,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",36,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",36,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",36,[[]]],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that …",null,null],[10,"abs","","Computes the absolute value.",37,[[]]],[10,"abs_sub","","The positive difference of two numbers.",37,[[]]],[10,"signum","","Returns the sign of the number.",37,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the …",37,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the …",37,[[]]],[5,"abs","","Computes the absolute value.",null,[[["signed",8]],["signed",8]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed",8]],["signed",8]]],[5,"signum","","Returns the sign of the number.",null,[[["signed",8]],["signed",8]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…",null,null],[16,"FromStrRadixErr","","",38,null],[10,"from_str_radix","","Convert from a string and radix (typically <code>2..=36</code>).",38,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for <code>Num</code> types which also implement numeric …",null,null],[8,"RefNum","","The trait for references which implement numeric …",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment …",null,null],[8,"NumAssign","","The trait for <code>Num</code> types which also implement assignment …",null,null],[8,"NumAssignRef","","The trait for <code>NumAssign</code> types which also implement …",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",39,null],[13,"Invalid","","",39,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",40,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord",8]],["partialord",8]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_string","","",40,[[],["string",3]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]]],"p":[[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"]]},\
"once_cell":{"doc":"Overview<code>once_cell</code> provides two new cell-like types, …","i":[[0,"unsync","once_cell","",null,null],[3,"OnceCell","once_cell::unsync","A cell which can be written to only once. It is not …",null,null],[11,"new","","Creates a new empty cell.",0,[[],["oncecell",3]]],[11,"get","","Gets a reference to the underlying value.",0,[[],["option",4]]],[11,"get_mut","","Gets a mutable reference to the underlying value.",0,[[],["option",4]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",0,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",0,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",0,[[],["result",4]]],[11,"take","","Takes the value out of this <code>OnceCell</code>, moving it back to …",0,[[],["option",4]]],[11,"into_inner","","Consumes the <code>OnceCell</code>, returning the wrapped value.",0,[[],["option",4]]],[3,"Lazy","","A value which is initialized on the first access.",null,null],[11,"new","","Creates a new lazy value with the given initializing …",1,[[],["lazy",3]]],[11,"into_value","","Consumes this <code>Lazy</code> returning the stored value.",1,[[["lazy",3]],["result",4]]],[11,"force","","Forces the evaluation of this lazy value and returns a …",1,[[["lazy",3]]]],[0,"sync","once_cell","",null,null],[3,"OnceCell","once_cell::sync","A thread-safe cell which can be written to only once.",null,null],[11,"new","","Creates a new empty cell.",2,[[],["oncecell",3]]],[11,"get","","Gets the reference to the underlying value.",2,[[],["option",4]]],[11,"get_mut","","Gets the mutable reference to the underlying value.",2,[[],["option",4]]],[11,"get_unchecked","","Get the reference to the underlying value, without …",2,[[]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",2,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",2,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",2,[[],["result",4]]],[11,"take","","Takes the value out of this <code>OnceCell</code>, moving it back to …",2,[[],["option",4]]],[11,"into_inner","","Consumes the <code>OnceCell</code>, returning the wrapped value. …",2,[[],["option",4]]],[3,"Lazy","","A value which is initialized on the first access.",null,null],[11,"new","","Creates a new lazy value with the given initializing …",3,[[],["lazy",3]]],[11,"into_value","","Consumes this <code>Lazy</code> returning the stored value.",3,[[["lazy",3]],["result",4]]],[11,"force","","Forces the evaluation of this lazy value and returns a …",3,[[["lazy",3]]]],[0,"race","once_cell","\\\"First one wins\\\" flavor of <code>OnceCell</code>.",null,null],[3,"OnceNonZeroUsize","once_cell::race","A thread-safe cell which can be written to only once.",null,null],[11,"new","","Creates a new empty cell.",4,[[],["oncenonzerousize",3]]],[11,"get","","Gets the underlying value.",4,[[],[["nonzerousize",3],["option",4]]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",4,[[["nonzerousize",3]],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",4,[[],["nonzerousize",3]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",4,[[],[["result",4],["nonzerousize",3]]]],[3,"OnceBool","","A thread-safe cell which can be written to only once.",null,null],[11,"new","","Creates a new empty cell.",5,[[],["oncebool",3]]],[11,"get","","Gets the underlying value.",5,[[],["option",4]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",5,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",5,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",5,[[],["result",4]]],[3,"OnceBox","","A thread-safe cell which can be written to only once.",null,null],[11,"from","once_cell::unsync","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","once_cell::sync","",2,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","once_cell::race","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"drop","","",6,[[]]],[11,"from","once_cell::unsync","",0,[[]]],[11,"from","once_cell::sync","",2,[[]]],[11,"clone","once_cell::unsync","",0,[[],["oncecell",3]]],[11,"clone","once_cell::sync","",2,[[],["oncecell",3]]],[11,"default","once_cell::unsync","",0,[[]]],[11,"default","","Creates a new lazy value using <code>Default</code> as the …",1,[[],["lazy",3]]],[11,"default","once_cell::sync","",2,[[],["oncecell",3]]],[11,"default","","Creates a new lazy value using <code>Default</code> as the …",3,[[],["lazy",3]]],[11,"default","once_cell::race","",4,[[],["oncenonzerousize",3]]],[11,"default","","",5,[[],["oncebool",3]]],[11,"default","","",6,[[]]],[11,"eq","once_cell::unsync","",0,[[]]],[11,"eq","once_cell::sync","",2,[[["oncecell",3]]]],[11,"deref","once_cell::unsync","",1,[[]]],[11,"deref","once_cell::sync","",3,[[]]],[11,"deref_mut","once_cell::unsync","",1,[[]]],[11,"deref_mut","once_cell::sync","",3,[[]]],[11,"fmt","once_cell::unsync","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","once_cell::sync","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","once_cell::race","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"new","","Creates a new empty cell.",6,[[],["oncebox",3]]],[11,"get","","Gets a reference to the underlying value.",6,[[],["option",4]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",6,[[["box",3]],[["result",4],["box",3]]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",6,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",6,[[],["result",4]]]],"p":[[3,"OnceCell"],[3,"Lazy"],[3,"OnceCell"],[3,"Lazy"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"OnceBox"]]},\
"pathdiff":{"doc":"","i":[[5,"diff_paths","pathdiff","Construct a relative path from a provided base directory …",null,[[],[["option",4],["pathbuf",3]]]]],"p":[]},\
"pest":{"doc":"pest. The Elegant Parserpest is a general purpose parser …","i":[[0,"error","pest","Types for different kinds of parsing failures.",null,null],[3,"Error","pest::error","Parse-related error type.",null,null],[12,"variant","","Variant of the error",0,null],[12,"location","","Location within the input string",0,null],[12,"line_col","","Line/column within the input string",0,null],[4,"ErrorVariant","","Different kinds of parsing errors.",null,null],[13,"ParsingError","","Generated parsing error with expected and unexpected <code>Rule</code>s",1,null],[12,"positives","pest::error::ErrorVariant","Positive attempts",2,null],[12,"negatives","","Negative attempts",2,null],[13,"CustomError","pest::error","Custom error with a message",1,null],[12,"message","pest::error::ErrorVariant","Short explanation",3,null],[4,"InputLocation","pest::error","Where an <code>Error</code> has occurred.",null,null],[13,"Pos","","<code>Error</code> was created by <code>Error::new_from_pos</code>",4,null],[13,"Span","","<code>Error</code> was created by <code>Error::new_from_span</code>",4,null],[4,"LineColLocation","","Line/column where an <code>Error</code> has occurred.",null,null],[13,"Pos","","Line/column pair if <code>Error</code> was created by …",5,null],[13,"Span","","Line/column pairs if <code>Error</code> was created by …",5,null],[11,"new_from_pos","","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Position</code>.",0,[[["errorvariant",4],["position",3]],["error",3]]],[11,"new_from_span","","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Span</code>.",0,[[["errorvariant",4],["span",3]],["error",3]]],[11,"with_path","","Returns <code>Error</code> variant with <code>path</code> which is shown when …",0,[[],["error",3]]],[11,"renamed_rules","","Renames all <code>Rule</code>s if this is a <code>ParsingError</code>. It does …",0,[[],["error",3]]],[0,"iterators","pest","Types and iterators for parser output.",null,null],[3,"FlatPairs","pest::iterators","An iterator over <code>Pair</code>s. It is created by <code>Pairs::flatten</code>.",null,null],[3,"Pair","","A matching pair of <code>Token</code>s and everything between them.",null,null],[3,"Pairs","","An iterator over <code>Pair</code>s. It is created by <code>pest::state</code> and …",null,null],[3,"Tokens","","An iterator over <code>Token</code>s. It is created by <code>Pair::tokens</code> …",null,null],[0,"prec_climber","pest","Constructs useful in infix operator parsing with the …",null,null],[4,"Assoc","pest::prec_climber","Associativity of an <code>Operator</code>.",null,null],[13,"Left","","Left <code>Operator</code> associativity",6,null],[13,"Right","","Right <code>Operator</code> associativity",6,null],[3,"Operator","","Infix operator used in <code>PrecClimber</code>.",null,null],[11,"new","","Creates a new <code>Operator</code> from a <code>Rule</code> and <code>Assoc</code>.",7,[[["assoc",4]],["operator",3]]],[3,"PrecClimber","","List of operators and precedences, which can perform …",null,null],[11,"new","","Creates a new <code>PrecClimber</code> from the <code>Operator</code>s contained in …",8,[[["vec",3],["operator",3]],["precclimber",3]]],[11,"climb","","Performs the precedence climbing algorithm on the <code>pairs</code> …",8,[[]]],[8,"Parser","pest","A trait with a single method that parses strings.",null,null],[10,"parse","","Parses a <code>&str</code> starting from <code>rule</code>.",9,[[],[["result",4],["pairs",3],["error",3]]]],[5,"state","","Creates a <code>ParserState</code> from a <code>&str</code>, supplying it to a …",null,[[],[["result",4],["error",3],["pairs",3]]]],[4,"Atomicity","","The current atomicity of a <code>ParserState</code>.",null,null],[13,"Atomic","","",10,null],[13,"CompoundAtomic","","",10,null],[13,"NonAtomic","","",10,null],[4,"Lookahead","","The current lookahead status of a <code>ParserState</code>.",null,null],[13,"Positive","","",11,null],[13,"Negative","","",11,null],[13,"None","","",11,null],[4,"MatchDir","","Match direction for the stack. Used in <code>PEEK[a..b]</code>/…",null,null],[13,"BottomToTop","","",12,null],[13,"TopToBottom","","",12,null],[6,"ParseResult","","Type alias to simplify specifying the return value of …",null,null],[3,"ParserState","","The complete state of a <code>Parser</code>.",null,null],[3,"Position","","A cursor position in a <code>&str</code> which provides useful methods …",null,null],[3,"Lines","","Line iterator for Spans, created by <code>Span::lines()</code>.",null,null],[3,"Span","","A span over a <code>&str</code>. It is created from either two <code>Position</code>…",null,null],[4,"Token","","A token generated by a <code>Parser</code>.",null,null],[13,"Start","","The starting <code>Position</code> of a matched <code>Rule</code>",13,null],[12,"rule","pest::Token","",14,null],[12,"pos","","",14,null],[13,"End","pest","The ending <code>Position</code> of a matched <code>Rule</code>",13,null],[12,"rule","pest::Token","",15,null],[12,"pos","","",15,null],[8,"RuleType","pest","A trait which parser rules must implement.",null,null],[14,"parses_to","","Testing tool that compares produced tokens.",null,null],[14,"fails_with","","Testing tool that compares produced errors.",null,null],[11,"from","pest::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","pest::iterators","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"into_iter","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","pest","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","pest::prec_climber","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","pest","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"into_iter","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"next_back","pest::iterators","",16,[[],["option",4]]],[11,"next_back","","",18,[[],["option",4]]],[11,"next_back","","",19,[[],["option",4]]],[11,"next","","",16,[[],["option",4]]],[11,"next","","",18,[[],["option",4]]],[11,"next","","",19,[[],["option",4]]],[11,"next","pest","",23,[[],["option",4]]],[11,"clone","pest::error","",0,[[],["error",3]]],[11,"clone","","",1,[[],["errorvariant",4]]],[11,"clone","","",4,[[],["inputlocation",4]]],[11,"clone","","",5,[[],["linecollocation",4]]],[11,"clone","pest::iterators","",16,[[],["flatpairs",3]]],[11,"clone","","",17,[[],["pair",3]]],[11,"clone","","",18,[[],["pairs",3]]],[11,"clone","","",19,[[],["tokens",3]]],[11,"clone","pest","",11,[[],["lookahead",4]]],[11,"clone","","",10,[[],["atomicity",4]]],[11,"clone","","",12,[[],["matchdir",4]]],[11,"clone","","",21,[[],["position",3]]],[11,"clone","pest::prec_climber","",6,[[],["assoc",4]]],[11,"clone","pest","",22,[[],["span",3]]],[11,"clone","","",13,[[],["token",4]]],[11,"cmp","","",21,[[["position",3]],["ordering",4]]],[11,"eq","pest::error","",0,[[["error",3]]]],[11,"ne","","",0,[[["error",3]]]],[11,"eq","","",1,[[["errorvariant",4]]]],[11,"ne","","",1,[[["errorvariant",4]]]],[11,"eq","","",4,[[["inputlocation",4]]]],[11,"ne","","",4,[[["inputlocation",4]]]],[11,"eq","","",5,[[["linecollocation",4]]]],[11,"ne","","",5,[[["linecollocation",4]]]],[11,"eq","pest::iterators","",17,[[["pair",3]]]],[11,"eq","","",18,[[["pairs",3]]]],[11,"eq","pest","",11,[[["lookahead",4]]]],[11,"eq","","",10,[[["atomicity",4]]]],[11,"eq","","",12,[[["matchdir",4]]]],[11,"eq","","",21,[[["position",3]]]],[11,"eq","pest::prec_climber","",6,[[["assoc",4]]]],[11,"eq","pest","",22,[[["span",3]]]],[11,"eq","","",13,[[["token",4]]]],[11,"ne","","",13,[[["token",4]]]],[11,"partial_cmp","","",21,[[["position",3]],[["option",4],["ordering",4]]]],[11,"fmt","pest::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","pest::iterators","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","pest","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","pest::prec_climber","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","pest","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","pest::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","pest::iterators","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"bitor","pest::prec_climber","",7,[[]]],[11,"hash","pest::error","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","pest::iterators","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","pest","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",13,[[]]],[11,"description","pest::error","",0,[[]]],[11,"tokens","pest::iterators","Returns the <code>Tokens</code> for these pairs.",16,[[],["tokens",3]]],[11,"as_rule","","Returns the <code>Rule</code> of the <code>Pair</code>.",17,[[]]],[11,"as_str","","Captures a slice from the <code>&str</code> defined by the token <code>Pair</code>.",17,[[]]],[11,"into_span","","Returns the <code>Span</code> defined by the <code>Pair</code>, consuming it.",17,[[],["span",3]]],[11,"as_span","","Returns the <code>Span</code> defined by the <code>Pair</code>, <strong>without</strong> consuming …",17,[[],["span",3]]],[11,"into_inner","","Returns the inner <code>Pairs</code> between the <code>Pair</code>, consuming it.",17,[[],["pairs",3]]],[11,"tokens","","Returns the <code>Tokens</code> for the <code>Pair</code>.",17,[[],["tokens",3]]],[11,"single","","Create a new <code>Pairs</code> iterator containing just the single …",18,[[["pair",3]]]],[11,"as_str","","Captures a slice from the <code>&str</code> defined by the starting …",18,[[]]],[11,"concat","","Captures inner token <code>Pair</code>s and concatenates resulting <code>&str</code>…",18,[[],["string",3]]],[11,"flatten","","Flattens the <code>Pairs</code>.",18,[[],["flatpairs",3]]],[11,"tokens","","Returns the <code>Tokens</code> for the <code>Pairs</code>.",18,[[],["tokens",3]]],[11,"peek","","Peek at the first inner <code>Pair</code> without changing the …",18,[[],[["option",4],["pair",3]]]],[11,"new","pest","Allocates a fresh <code>ParserState</code> object to the heap and …",20,[[],["box",3]]],[11,"position","","Returns a reference to the current <code>Position</code> of the …",20,[[],["position",3]]],[11,"atomicity","","Returns the current atomicity of the <code>ParserState</code>.",20,[[],["atomicity",4]]],[11,"rule","","Wrapper needed to generate tokens. This will associate …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"sequence","","Starts a sequence of transformations provided by <code>f</code> from …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"repeat","","Repeatedly applies the transformation provided by <code>f</code> from …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"optional","","Optionally applies the transformation provided by <code>f</code> from …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"match_char_by","","Attempts to match a single character based on a filter …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"match_string","","Attempts to match the given string. Returns <code>Ok</code> with the …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"match_insensitive","","Attempts to case-insensitively match the given string. …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"match_range","","Attempts to match a single character from the given …",20,[[["range",3],["box",3]],[["parseresult",6],["box",3]]]],[11,"skip","","Attempts to skip <code>n</code> characters forward. Returns <code>Ok</code> with …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"skip_until","","Attempts to skip forward until one of the given strings …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"start_of_input","","Attempts to match the start of the input. Returns <code>Ok</code> with …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"end_of_input","","Attempts to match the end of the input. Returns <code>Ok</code> with …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"lookahead","","Starts a lookahead transformation provided by <code>f</code> from the …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"atomic","","Transformation which stops <code>Token</code>s from being generated …",20,[[["box",3],["atomicity",4]],[["parseresult",6],["box",3]]]],[11,"stack_push","","Evaluates the result of closure <code>f</code> and pushes the span of …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"stack_peek","","Peeks the top of the stack and attempts to match the …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"stack_pop","","Pops the top of the stack and attempts to match the …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"stack_match_peek_slice","","Matches part of the state of the stack.",20,[[["option",4],["box",3],["matchdir",4]],[["parseresult",6],["box",3]]]],[11,"stack_match_peek","","Matches the full state of the stack.",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"stack_match_pop","","Matches the full state of the stack. This method will …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"stack_drop","","Drops the top of the stack. Returns <code>Ok(Box<ParserState>)</code> …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"restore_on_err","","Restores the original state of the <code>ParserState</code> when <code>f</code> …",20,[[["box",3]],[["parseresult",6],["box",3]]]],[11,"new","","Attempts to create a new <code>Position</code> at the given position. …",21,[[],[["option",4],["position",3]]]],[11,"from_start","","Creates a <code>Position</code> at the start of a <code>&str</code>.",21,[[],["position",3]]],[11,"pos","","Returns the byte position of this <code>Position</code> as a <code>usize</code>.",21,[[]]],[11,"span","","Creates a <code>Span</code> from two <code>Position</code>s.",21,[[["position",3]],["span",3]]],[11,"line_col","","Returns the line and column number of this <code>Position</code>.",21,[[]]],[11,"line_of","","Returns the entire line of the input that contains this …",21,[[]]],[11,"new","","Attempts to create a new span. Will return <code>None</code> if …",22,[[],[["option",4],["span",3]]]],[11,"start","","Returns the <code>Span</code>\'s start byte position as a <code>usize</code>.",22,[[]]],[11,"end","","Returns the <code>Span</code>\'s end byte position as a <code>usize</code>.",22,[[]]],[11,"start_pos","","Returns the <code>Span</code>\'s start <code>Position</code>.",22,[[],["position",3]]],[11,"end_pos","","Returns the <code>Span</code>\'s end <code>Position</code>.",22,[[],["position",3]]],[11,"split","","Splits the <code>Span</code> into a pair of <code>Position</code>s.",22,[[]]],[11,"as_str","","Captures a slice from the <code>&str</code> defined by the <code>Span</code>.",22,[[]]],[11,"lines","","Iterates over all lines (partially) covered by this span.",22,[[],["lines",3]]]],"p":[[3,"Error"],[4,"ErrorVariant"],[13,"ParsingError"],[13,"CustomError"],[4,"InputLocation"],[4,"LineColLocation"],[4,"Assoc"],[3,"Operator"],[3,"PrecClimber"],[8,"Parser"],[4,"Atomicity"],[4,"Lookahead"],[4,"MatchDir"],[4,"Token"],[13,"Start"],[13,"End"],[3,"FlatPairs"],[3,"Pair"],[3,"Pairs"],[3,"Tokens"],[3,"ParserState"],[3,"Position"],[3,"Span"],[3,"Lines"]]},\
"petgraph":{"doc":"<code>petgraph</code> is a graph data structure library.","i":[[0,"visit","petgraph","Graph traits and graph traversals.",null,null],[8,"FilterNode","petgraph::visit","A graph filter for nodes.",null,null],[10,"include_node","","Return true to have the node be part of the graph",0,[[]]],[3,"NodeFiltered","","A node-filtering graph adaptor.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"NodeFilteredNeighbors","","A filtered neighbors iterator.",null,null],[3,"NodeFilteredNodes","","A filtered node references iterator.",null,null],[3,"NodeFilteredEdgeReferences","","A filtered edges iterator.",null,null],[3,"NodeFilteredEdges","","A filtered edges iterator.",null,null],[8,"FilterEdge","","A graph filter for edges",null,null],[10,"include_edge","","Return true to have the edge be part of the graph",2,[[]]],[3,"EdgeFiltered","","An edge-filtering graph adaptor.",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"EdgeFilteredNeighbors","","A filtered neighbors iterator.",null,null],[3,"EdgeFilteredEdges","","A filtered edges iterator.",null,null],[3,"EdgeFilteredNeighborsDirected","","A filtered neighbors-directed iterator.",null,null],[3,"Reversed","","An edge-reversing graph adaptor.",null,null],[12,"0","","",4,null],[3,"ReversedEdges","","A reversed edges iterator.",null,null],[3,"ReversedEdgeReference","","A reversed edge reference",null,null],[3,"ReversedEdgeReferences","","A reversed edge references iterator.",null,null],[3,"Time","","Strictly monotonically increasing event time for a depth …",null,null],[12,"0","","",5,null],[4,"DfsEvent","","A depth first search (DFS) visitor event.",null,null],[13,"Discover","","",6,null],[13,"TreeEdge","","An edge of the tree formed by the traversal.",6,null],[13,"BackEdge","","An edge to an already visited node.",6,null],[13,"CrossForwardEdge","","A cross or forward edge.",6,null],[13,"Finish","","All edges from a node have been reported.",6,null],[4,"Control","","Control flow for <code>depth_first_search</code> callbacks.",null,null],[13,"Continue","","Continue the DFS traversal as normal.",7,null],[13,"Prune","","Prune the current node from the DFS traversal. No more …",7,null],[13,"Break","","Stop the DFS traversal and return the provided value.",7,null],[8,"ControlFlow","","Control flow for callbacks.",null,null],[10,"continuing","","",8,[[]]],[10,"should_break","","",8,[[]]],[10,"should_prune","","",8,[[]]],[5,"depth_first_search","","A recursive depth first search.",null,[[]]],[3,"Dfs","","Visit nodes of a graph in a depth-first-search (DFS) …",null,null],[12,"stack","","The stack of nodes to visit",9,null],[12,"discovered","","The map of discovered nodes",9,null],[3,"DfsPostOrder","","Visit nodes in a depth-first-search (DFS) emitting nodes …",null,null],[12,"stack","","The stack of nodes to visit",10,null],[12,"discovered","","The map of discovered nodes",10,null],[12,"finished","","The map of finished nodes",10,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",11,null],[12,"discovered","","The map of discovered nodes",11,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[8,"Walker","","A walker is a traversal state, but where part of the …",null,null],[16,"Item","","",12,null],[10,"walk_next","","Advance to the next item",12,[[],["option",4]]],[11,"iter","","Create an iterator out of the walker and given <code>context</code>.",12,[[],["walkeriter",3]]],[3,"WalkerIter","","A walker and its context wrapped into an iterator.",null,null],[8,"GraphBase","","Base graph trait: defines the associated node identifier …",null,null],[16,"EdgeId","","edge identifier",13,null],[16,"NodeId","","node identifier",13,null],[8,"GraphRef","","A copyable reference to a graph.",null,null],[8,"IntoNeighbors","","Access to the neighbors of each node",null,null],[16,"Neighbors","","",14,null],[10,"neighbors","","Return an iterator of the neighbors of node <code>a</code>.",14,[[]]],[8,"IntoNeighborsDirected","","Access to the neighbors of each node, through incoming or …",null,null],[16,"NeighborsDirected","","",15,null],[10,"neighbors_directed","","",15,[[["direction",4]]]],[8,"IntoEdges","","Access to the edges of each node.",null,null],[16,"Edges","","",16,null],[10,"edges","","",16,[[]]],[8,"IntoEdgesDirected","","Access to all edges of each node, in the specified …",null,null],[16,"EdgesDirected","","",17,null],[10,"edges_directed","","",17,[[["direction",4]]]],[8,"IntoNodeIdentifiers","","Access to the sequence of the graph’s <code>NodeId</code>s.",null,null],[16,"NodeIdentifiers","","",18,null],[10,"node_identifiers","","",18,[[]]],[8,"Data","","Define associated data for nodes and edges",null,null],[16,"NodeWeight","","",19,null],[16,"EdgeWeight","","",19,null],[8,"EdgeRef","","An edge reference.",null,null],[16,"NodeId","","",20,null],[16,"EdgeId","","",20,null],[16,"Weight","","",20,null],[10,"source","","The source node of the edge.",20,[[]]],[10,"target","","The target node of the edge.",20,[[]]],[10,"weight","","A reference to the weight of the edge.",20,[[]]],[10,"id","","The edge’s identifier.",20,[[]]],[8,"NodeRef","","A node reference.",null,null],[16,"NodeId","","",21,null],[16,"Weight","","",21,null],[10,"id","","",21,[[]]],[10,"weight","","",21,[[]]],[8,"IntoNodeReferences","","Access to the sequence of the graph’s nodes",null,null],[16,"NodeRef","","",22,null],[16,"NodeReferences","","",22,null],[10,"node_references","","",22,[[]]],[8,"IntoEdgeReferences","","Access to the sequence of the graph’s edges",null,null],[16,"EdgeRef","","",23,null],[16,"EdgeReferences","","",23,null],[10,"edge_references","","",23,[[]]],[8,"GraphProp","","Edge kind property (directed or undirected edges)",null,null],[16,"EdgeType","","The kind edges in the graph.",24,null],[11,"is_directed","","",24,[[]]],[8,"NodeIndexable","","The graph’s <code>NodeId</code>s map to indices",null,null],[10,"node_bound","","Return an upper bound of the node indices in the graph …",25,[[]]],[10,"to_index","","Convert <code>a</code> to an integer index.",25,[[]]],[10,"from_index","","Convert <code>i</code> to a node index",25,[[]]],[8,"NodeCount","","A graph with a known node count.",null,null],[10,"node_count","","",26,[[]]],[8,"NodeCompactIndexable","","The graph’s <code>NodeId</code>s map to indices, in a range without …",null,null],[8,"VisitMap","","A mapping for storing the visited status for NodeId <code>N</code>.",null,null],[10,"visit","","Mark <code>a</code> as visited.",27,[[]]],[10,"is_visited","","Return whether <code>a</code> has been visited before.",27,[[]]],[8,"Visitable","","A graph that can create a map that tracks the visited …",null,null],[16,"Map","","The associated map type",28,null],[10,"visit_map","","Create a new visitor map",28,[[]]],[10,"reset_map","","Reset the visitor map (and resize to new size of graph if …",28,[[]]],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph.",null,null],[16,"AdjMatrix","","The associated adjacency matrix type",29,null],[10,"adjacency_matrix","","Create the adjacency matrix",29,[[]]],[10,"is_adjacent","","Return true if there is an edge from <code>a</code> to <code>b</code>, false …",29,[[]]],[0,"data","petgraph","Graph traits for associated data and graph construction.",null,null],[8,"DataMap","petgraph::data","Access node and edge weights (associated data).",null,null],[10,"node_weight","","",30,[[],["option",4]]],[10,"edge_weight","","",30,[[],["option",4]]],[8,"DataMapMut","","Access node and edge weights mutably.",null,null],[10,"node_weight_mut","","",31,[[],["option",4]]],[10,"edge_weight_mut","","",31,[[],["option",4]]],[8,"Build","","A graph that can be extended with further nodes and edges",null,null],[10,"add_node","","",32,[[]]],[11,"add_edge","","Add a new edge. If parallel edges (duplicate) are not …",32,[[],["option",4]]],[10,"update_edge","","Add or update the edge from <code>a</code> to <code>b</code>. Return the id of the …",32,[[]]],[8,"Create","","A graph that can be created",null,null],[10,"with_capacity","","",33,[[]]],[4,"Element","","A graph element.",null,null],[13,"Node","","A graph node.",34,null],[12,"weight","petgraph::data::Element","",35,null],[13,"Edge","petgraph::data","A graph edge.",34,null],[12,"source","petgraph::data::Element","",36,null],[12,"target","","",36,null],[12,"weight","","",36,null],[8,"FromElements","petgraph::data","Create a graph from an iterator of elements.",null,null],[11,"from_elements","","",37,[[]]],[8,"ElementIterator","","Iterator adaptors for iterators of <code>Element</code>.",null,null],[11,"filter_elements","","Create an iterator adaptor that filters graph elements.",38,[[],["filterelements",3]]],[3,"FilterElements","","An iterator that filters graph elements.",null,null],[0,"algo","petgraph","Graph algorithms.",null,null],[0,"dominators","petgraph::algo","Compute dominators of a control-flow graph.",null,null],[3,"Dominators","petgraph::algo::dominators","The dominance relation for some graph and root.",null,null],[11,"root","","Get the root node used to construct these dominance …",39,[[]]],[11,"immediate_dominator","","Get the immediate dominator of the given node.",39,[[],["option",4]]],[11,"strict_dominators","","Iterate over the given node\'s strict dominators.",39,[[],[["dominatorsiter",3],["option",4]]]],[11,"dominators","","Iterate over all of the given node\'s dominators …",39,[[],[["dominatorsiter",3],["option",4]]]],[3,"DominatorsIter","","Iterator for a node\'s dominators.",null,null],[5,"simple_fast","","This is an implementation of the engineered \\\"Simple, Fast …",null,[[],["dominators",3]]],[5,"astar","petgraph::algo","[Generic] A* shortest path algorithm.",null,[[],["option",4]]],[5,"dijkstra","","[Generic] Dijkstra\'s shortest path algorithm.",null,[[["option",4]],["hashmap",3]]],[5,"is_isomorphic","","[Graph] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …",null,[[["graph",3]]]],[5,"is_isomorphic_matching","","[Graph] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …",null,[[["graph",3]]]],[5,"all_simple_paths","","Returns iterator that produces all simple paths from <code>from</code> …",null,[[["option",4]]]],[5,"connected_components","","[Generic] Return the number of connected components of …",null,[[]]],[5,"is_cyclic_undirected","","[Generic] Return <code>true</code> if the input graph contains a cycle.",null,[[]]],[5,"toposort","","[Generic] Perform a topological sort of a directed graph.",null,[[["dfsspace",3],["option",4]],[["vec",3],["cycle",3],["result",4]]]],[5,"is_cyclic_directed","","[Generic] Return <code>true</code> if the input directed graph …",null,[[]]],[3,"DfsSpace","","Workspace for a graph traversal.",null,null],[11,"new","","",40,[[]]],[5,"has_path_connecting","","[Generic] Check if there exists a path starting at <code>from</code> …",null,[[["dfsspace",3],["option",4]]]],[5,"scc","","Renamed to <code>kosaraju_scc</code>.",null,[[],[["vec",3],["vec",3]]]],[5,"kosaraju_scc","","[Generic] Compute the <em>strongly connected components</em> using …",null,[[],[["vec",3],["vec",3]]]],[5,"tarjan_scc","","[Generic] Compute the <em>strongly connected components</em> using …",null,[[],[["vec",3],["vec",3]]]],[5,"condensation","","[Graph] Condense every strongly connected component into …",null,[[["graph",3]],[["vec",3],["graph",3]]]],[5,"min_spanning_tree","","[Generic] Compute a <em>minimum spanning tree</em> of a graph.",null,[[],["minspanningtree",3]]],[3,"MinSpanningTree","","An iterator producing a minimum spanning forest of a …",null,null],[3,"Cycle","","An algorithm error: a cycle was found in the graph.",null,null],[11,"node_id","","Return a node id that participates in the cycle",41,[[]]],[3,"NegativeCycle","","An algorithm error: a cycle of negative weights was found …",null,null],[5,"bellman_ford","","[Generic] Compute shortest paths from node <code>source</code> to all …",null,[[],[["result",4],["negativecycle",3]]]],[5,"is_bipartite_undirected","","Return <code>true</code> if the graph is bipartite. A graph is …",null,[[]]],[8,"Measure","","Associated data that can be used for measures (such as …",null,null],[8,"FloatMeasure","","A floating-point measure.",null,null],[10,"zero","","",42,[[]]],[10,"infinite","","",42,[[]]],[0,"csr","petgraph","Compressed Sparse Row (CSR) is a sparse adjacency matrix …",null,null],[6,"NodeIndex","petgraph::csr","Csr node index type, a plain integer.",null,null],[6,"EdgeIndex","","Csr edge index type, a plain integer.",null,null],[3,"Csr","","Compressed Sparse Row (<code>CSR</code>) is a sparse adjacency matrix …",null,null],[11,"new","","Create an empty <code>Csr</code>.",43,[[]]],[11,"with_nodes","","Create a new <code>Csr</code> with <code>n</code> nodes. <code>N</code> must implement <code>Default</code> …",43,[[]]],[3,"EdgesNotSorted","","Csr creation error: edges were not in sorted order.",null,null],[11,"from_sorted_edges","","Create a new <code>Csr</code> from a sorted sequence of edges",43,[[],[["edgesnotsorted",3],["result",4]]]],[11,"node_count","","",43,[[]]],[11,"edge_count","","",43,[[]]],[11,"is_directed","","",43,[[]]],[11,"clear_edges","","Remove all edges",43,[[]]],[11,"add_node","","Adds a new node with the given weight, returning the …",43,[[],["nodeindex",6]]],[11,"add_edge","","Return <code>true</code> if the edge was added",43,[[["nodeindex",6]]]],[11,"contains_edge","","Computes in <strong>O(log |V|)</strong> time.",43,[[["nodeindex",6]]]],[11,"out_degree","","Computes in <strong>O(1)</strong> time.",43,[[["nodeindex",6]]]],[11,"neighbors_slice","","Computes in <strong>O(1)</strong> time.",43,[[["nodeindex",6]]]],[11,"edges_slice","","Computes in <strong>O(1)</strong> time.",43,[[["nodeindex",6]]]],[11,"edges","","Return an iterator of all edges of <code>a</code>.",43,[[["nodeindex",6]],["edges",3]]],[3,"Edges","","",null,null],[3,"EdgeReference","","",null,null],[11,"weight","","Access the edge’s weight.",44,[[]]],[3,"EdgeReferences","","",null,null],[3,"Neighbors","","",null,null],[3,"NodeIdentifiers","","",null,null],[0,"dot","petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","petgraph::dot","<code>Dot</code> implements output to graphviz .dot format for a graph.",null,null],[11,"new","","Create a <code>Dot</code> formatting wrapper with default …",45,[[]]],[11,"with_config","","Create a <code>Dot</code> formatting wrapper with custom configuration.",45,[[]]],[11,"with_attr_getters","","",45,[[["fn",8],["fn",8]]]],[4,"Config","","<code>Dot</code> configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",46,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",46,null],[13,"EdgeNoLabel","","Use no edge labels.",46,null],[13,"NodeNoLabel","","Use no node labels.",46,null],[13,"GraphContentOnly","","Do not print the graph/digraph string.",46,null],[0,"graphmap","petgraph","<code>GraphMap<N, E, Ty></code> is a graph datastructure where node …",null,null],[6,"UnGraphMap","petgraph::graphmap","A <code>GraphMap</code> with undirected edges.",null,null],[6,"DiGraphMap","","A <code>GraphMap</code> with directed edges.",null,null],[3,"GraphMap","","<code>GraphMap<N, E, Ty></code> is a graph datastructure using an …",null,null],[8,"NodeTrait","","A trait group for <code>GraphMap</code>\'s node identifier.",null,null],[11,"new","","Create a new <code>GraphMap</code>",47,[[]]],[11,"with_capacity","","Create a new <code>GraphMap</code> with estimated capacity.",47,[[]]],[11,"capacity","","Return the current node and edge capacity of the graph.",47,[[]]],[11,"is_directed","","Whether the graph has directed edges.",47,[[]]],[11,"from_edges","","Create a new <code>GraphMap</code> from an iterable of edges.",47,[[]]],[11,"node_count","","Return the number of nodes in the graph.",47,[[]]],[11,"edge_count","","Return the number of edges in the graph.",47,[[]]],[11,"clear","","Remove all nodes and edges",47,[[]]],[11,"add_node","","Add node <code>n</code> to the graph.",47,[[]]],[11,"remove_node","","Return <code>true</code> if node <code>n</code> was removed.",47,[[]]],[11,"contains_node","","Return <code>true</code> if the node is contained in the graph.",47,[[]]],[11,"add_edge","","Add an edge connecting <code>a</code> and <code>b</code> to the graph, with …",47,[[],["option",4]]],[11,"remove_edge","","Remove edge from <code>a</code> to <code>b</code> from the graph and return the …",47,[[],["option",4]]],[11,"contains_edge","","Return <code>true</code> if the edge connecting <code>a</code> with <code>b</code> is contained …",47,[[]]],[11,"nodes","","Return an iterator over the nodes of the graph.",47,[[],["nodes",3]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting …",47,[[],["neighbors",3]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge …",47,[[["direction",4]],["neighborsdirected",3]]],[11,"edges","","Return an iterator of target nodes with an edge starting …",47,[[],["edges",3]]],[11,"edge_weight","","Return a reference to the edge weight connecting <code>a</code> with <code>b</code>…",47,[[],["option",4]]],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting <code>a</code>…",47,[[],["option",4]]],[11,"all_edges","","Return an iterator over all edges of the graph with their …",47,[[],["alledges",3]]],[11,"all_edges_mut","","Return an iterator over all edges of the graph in …",47,[[],["alledgesmut",3]]],[11,"into_graph","","Return a <code>Graph</code> that corresponds to this <code>GraphMap</code>.",47,[[],["graph",3]]],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"NeighborsDirected","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"AllEdgesMut","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer …",null,null],[12,"0","","",48,null],[3,"NodeIdentifiers","","",null,null],[3,"NodeReferences","","",null,null],[0,"unionfind","petgraph","<code>UnionFind<K></code> is a disjoint-set data structure.",null,null],[3,"UnionFind","petgraph::unionfind","<code>UnionFind<K></code> is a disjoint-set data structure. It tracks …",null,null],[11,"new","","Create a new <code>UnionFind</code> of <code>n</code> disjoint sets.",49,[[]]],[11,"find","","Return the representative for <code>x</code>.",49,[[]]],[11,"find_mut","","Return the representative for <code>x</code>.",49,[[]]],[11,"equiv","","Returns <code>true</code> if the given elements belong to the same …",49,[[]]],[11,"union","","Unify the two sets containing <code>x</code> and <code>y</code>.",49,[[]]],[11,"into_labeling","","Return a vector mapping each element to its …",49,[[],["vec",3]]],[0,"prelude","petgraph","Commonly used items.",null,null],[0,"graph","","<code>Graph<N, E, Ty, Ix></code> is a graph datastructure using an …",null,null],[5,"edge_index","petgraph::graph","Short version of <code>EdgeIndex::new</code>",null,[[],[["indextype",8],["edgeindex",3]]]],[5,"node_index","","Short version of <code>NodeIndex::new</code>",null,[[],[["indextype",8],["nodeindex",3]]]],[6,"DefaultIx","","The default integer type for graph indices. <code>u32</code> is the …",null,null],[6,"DiGraph","","A <code>Graph</code> with directed edges.",null,null],[3,"Edge","","The graph\'s edge type.",null,null],[12,"weight","","Associated edge data.",50,null],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[3,"EdgeReference","","Reference to a <code>Graph</code> edge.",null,null],[3,"EdgeReferences","","Iterator over all edges of a graph.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"Edges","","Iterator over the edges of from or to a node",null,null],[3,"EdgesConnecting","","Iterator over the multiple directed edges connecting a …",null,null],[3,"Externals","","An iterator over either the nodes without edges to them …",null,null],[3,"Frozen","","<code>Frozen</code> is a graph wrapper.",null,null],[3,"Graph","","<code>Graph<N, E, Ty, Ix></code> is a graph datastructure using an …",null,null],[8,"GraphIndex","","A  <code>GraphIndex</code> is a node or edge index.",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and …",null,null],[10,"new","","",51,[[]]],[10,"index","","",51,[[]]],[10,"max","","",51,[[]]],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Node","","The graph\'s node type.",null,null],[12,"weight","","Associated node data.",52,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"NodeReferences","","Iterator over all nodes of a graph.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[6,"UnGraph","","A <code>Graph</code> with undirected edges.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through …",null,null],[4,"Direction","petgraph","Edge direction.",null,null],[13,"Outgoing","","An <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.",53,null],[13,"Incoming","","An <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.",53,null],[11,"opposite","","Return the opposite <code>Direction</code>.",53,[[],["direction",4]]],[11,"index","","Return <code>0</code> for <code>Outgoing</code> and <code>1</code> for <code>Incoming</code>.",53,[[]]],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[8,"EdgeType","","A graph\'s edge type determines whether it has directed …",null,null],[10,"is_directed","","",54,[[]]],[8,"IntoWeightedEdge","","Convert an element like <code>(i, j)</code> or <code>(i, j, w)</code> into a triple …",null,null],[16,"NodeId","","",55,null],[10,"into_weighted_edge","","",55,[[]]],[11,"from","petgraph::visit","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"into_iter","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"into_iter","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"into_iter","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"into_iter","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"into_iter","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"into_iter","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"into_iter","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"into_iter","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"into_iter","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"into_iter","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","petgraph::data","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"equivalent","","",34,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"into_iter","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","petgraph::algo::dominators","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"into_iter","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","petgraph::algo","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"into_iter","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","petgraph::csr","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"into_iter","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"into_iter","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"into_iter","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","petgraph::dot","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"equivalent","","",46,[[]]],[11,"from","petgraph::graph","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"equivalent","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"equivalent","","",78,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"into_iter","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"into_iter","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"into_iter","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"into_iter","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"into_iter","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"into_iter","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"into_iter","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"into_iter","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"into_iter","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"into_iter","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","petgraph::graphmap","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"into_iter","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"into_iter","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"into_iter","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"into_iter","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"into_iter","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"into_iter","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"equivalent","","",48,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"into_iter","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"into_iter","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","petgraph::unionfind","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","petgraph","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"equivalent","","",53,[[]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"continuing","petgraph::visit","",7,[[]]],[11,"should_break","","",7,[[]]],[11,"should_prune","","",7,[[]]],[11,"walk_next","","",9,[[],["option",4]]],[11,"walk_next","","",10,[[],["option",4]]],[11,"walk_next","","",11,[[],["option",4]]],[11,"walk_next","","",56,[[],["option",4]]],[11,"source","","",66,[[]]],[11,"target","","",66,[[]]],[11,"weight","","",66,[[]]],[11,"id","","",66,[[]]],[11,"source","petgraph::csr","",44,[[]]],[11,"target","","",44,[[]]],[11,"weight","","",44,[[]]],[11,"id","","",44,[[]]],[11,"source","petgraph::graph","",89,[[]]],[11,"target","","",89,[[]]],[11,"weight","","",89,[[]]],[11,"id","","",89,[[]]],[11,"add_node","","",79,[[]]],[11,"add_edge","","",79,[[],["option",4]]],[11,"update_edge","","",79,[[]]],[11,"add_node","petgraph::graphmap","",47,[[]]],[11,"add_edge","","",47,[[],["option",4]]],[11,"update_edge","","",47,[[]]],[11,"with_capacity","petgraph::graph","",79,[[]]],[11,"with_capacity","petgraph::graphmap","",47,[[]]],[11,"from_elements","petgraph::graph","",79,[[]]],[11,"from_elements","petgraph::graphmap","",47,[[]]],[11,"index","petgraph::graph","",77,[[]]],[11,"is_node_index","","",77,[[]]],[11,"index","","",78,[[]]],[11,"is_node_index","","",78,[[]]],[11,"is_directed","petgraph","",101,[[]]],[11,"is_directed","","",102,[[]]],[11,"neighbors","petgraph::visit","",4,[[]]],[11,"neighbors_directed","","",4,[[["direction",4]]]],[11,"edges","","",4,[[]]],[11,"edges_directed","","",4,[[["direction",4]]]],[11,"node_identifiers","","",4,[[]]],[11,"node_references","","",4,[[]]],[11,"edge_references","","",4,[[]]],[11,"node_bound","petgraph::graph","",79,[[]]],[11,"to_index","","",79,[[["nodeindex",3]]]],[11,"from_index","","",79,[[]]],[11,"node_bound","petgraph::visit","",1,[[]]],[11,"to_index","","",1,[[]]],[11,"from_index","","",1,[[]]],[11,"node_bound","","",3,[[]]],[11,"to_index","","",3,[[]]],[11,"from_index","","",3,[[]]],[11,"node_bound","","",4,[[]]],[11,"to_index","","",4,[[]]],[11,"from_index","","",4,[[]]],[11,"node_bound","petgraph::csr","",43,[[]]],[11,"to_index","","",43,[[]]],[11,"from_index","","",43,[[]]],[11,"node_bound","petgraph::graph","",92,[[]]],[11,"to_index","","",92,[[]]],[11,"from_index","","",92,[[]]],[11,"node_bound","petgraph::graphmap","",47,[[]]],[11,"to_index","","",47,[[]]],[11,"from_index","","",47,[[]]],[11,"node_count","petgraph::graph","",79,[[]]],[11,"node_count","petgraph::visit","",3,[[]]],[11,"node_count","","",4,[[]]],[11,"node_count","petgraph::csr","",43,[[]]],[11,"node_count","petgraph::graph","",92,[[]]],[11,"node_count","petgraph::graphmap","",47,[[]]],[11,"visit_map","petgraph::graph","",79,[[],["fixedbitset",3]]],[11,"reset_map","","",79,[[]]],[11,"visit_map","petgraph::graphmap","",47,[[],["hashset",3]]],[11,"reset_map","","",47,[[]]],[11,"visit_map","petgraph::visit","",1,[[]]],[11,"reset_map","","",1,[[]]],[11,"visit_map","","",3,[[]]],[11,"reset_map","","",3,[[]]],[11,"visit_map","","",4,[[]]],[11,"reset_map","","",4,[[]]],[11,"visit_map","petgraph::csr","",43,[[],["fixedbitset",3]]],[11,"reset_map","","",43,[[]]],[11,"visit_map","petgraph::graph","",92,[[]]],[11,"reset_map","","",92,[[]]],[11,"adjacency_matrix","petgraph::graphmap","",47,[[]]],[11,"is_adjacent","","",47,[[]]],[11,"adjacency_matrix","petgraph::graph","",92,[[]]],[11,"is_adjacent","","",92,[[]]],[11,"adjacency_matrix","","",79,[[],["fixedbitset",3]]],[11,"is_adjacent","","",79,[[["nodeindex",3],["fixedbitset",3]]]],[11,"node_weight","petgraph::visit","",1,[[],["option",4]]],[11,"edge_weight","","",1,[[],["option",4]]],[11,"node_weight","","",4,[[],["option",4]]],[11,"edge_weight","","",4,[[],["option",4]]],[11,"node_weight","petgraph::graph","",79,[[],["option",4]]],[11,"edge_weight","","",79,[[],["option",4]]],[11,"node_weight","","",92,[[],["option",4]]],[11,"edge_weight","","",92,[[],["option",4]]],[11,"node_weight_mut","petgraph::visit","",4,[[],["option",4]]],[11,"edge_weight_mut","","",4,[[],["option",4]]],[11,"node_weight_mut","petgraph::graph","",79,[[],["option",4]]],[11,"edge_weight_mut","","",79,[[],["option",4]]],[11,"node_weight_mut","","",92,[[],["option",4]]],[11,"edge_weight_mut","","",92,[[],["option",4]]],[11,"from","","",77,[[]]],[11,"from","","",78,[[]]],[11,"next_back","","",87,[[],["option",4]]],[11,"next_back","","",88,[[],["option",4]]],[11,"next_back","","",90,[[],["option",4]]],[11,"next_back","","",91,[[],["option",4]]],[11,"next_back","petgraph::graphmap","",97,[[],["option",4]]],[11,"next_back","","",98,[[],["option",4]]],[11,"extend","","",47,[[]]],[11,"next","petgraph::visit","",57,[[],["option",4]]],[11,"next","","",58,[[],["option",4]]],[11,"next","","",59,[[],["option",4]]],[11,"next","","",60,[[],["option",4]]],[11,"next","","",61,[[],["option",4]]],[11,"next","","",62,[[],["option",4]]],[11,"next","","",63,[[],["option",4]]],[11,"next","","",64,[[],["option",4]]],[11,"next","","",65,[[],["option",4]]],[11,"next","","",67,[[],["option",4]]],[11,"next","petgraph::data","",68,[[],["option",4]]],[11,"next","petgraph::algo::dominators","",69,[[],["option",4]]],[11,"next","petgraph::algo","",70,[[],["option",4]]],[11,"next","petgraph::csr","",73,[[],["option",4]]],[11,"next","","",74,[[],["option",4]]],[11,"next","","",75,[[],["option",4]]],[11,"size_hint","","",75,[[]]],[11,"next","","",76,[[],["option",4]]],[11,"size_hint","","",76,[[]]],[11,"next","petgraph::graph","",80,[[],[["option",4],["nodeindex",3]]]],[11,"next","","",81,[[],[["option",4],["nodeindex",3]]]],[11,"next","","",82,[[],["option",4]]],[11,"next","","",83,[[],[["option",4],["edgereference",3]]]],[11,"next","","",84,[[],["option",4]]],[11,"size_hint","","",84,[[]]],[11,"next","","",85,[[],["option",4]]],[11,"size_hint","","",85,[[]]],[11,"next","","",87,[[],["option",4]]],[11,"size_hint","","",87,[[]]],[11,"next","","",88,[[],["option",4]]],[11,"size_hint","","",88,[[]]],[11,"next","","",90,[[],["option",4]]],[11,"size_hint","","",90,[[]]],[11,"next","","",91,[[],["option",4]]],[11,"size_hint","","",91,[[]]],[11,"next","petgraph::graphmap","",93,[[],["option",4]]],[11,"size_hint","","",93,[[]]],[11,"next","","",94,[[],["option",4]]],[11,"next","","",95,[[],["option",4]]],[11,"next","","",96,[[],["option",4]]],[11,"next","","",97,[[],["option",4]]],[11,"size_hint","","",97,[[]]],[11,"count","","",97,[[]]],[11,"nth","","",97,[[],["option",4]]],[11,"last","","",97,[[],["option",4]]],[11,"next","","",98,[[],["option",4]]],[11,"size_hint","","",98,[[]]],[11,"count","","",98,[[]]],[11,"nth","","",98,[[],["option",4]]],[11,"last","","",98,[[],["option",4]]],[11,"next","","",99,[[],["option",4]]],[11,"next","","",100,[[],["option",4]]],[11,"clone","petgraph::visit","",5,[[],["time",3]]],[11,"clone","","",6,[[],["dfsevent",4]]],[11,"clone","","",7,[[],["control",4]]],[11,"clone","","",9,[[],["dfs",3]]],[11,"clone","","",10,[[],["dfspostorder",3]]],[11,"clone","","",11,[[],["bfs",3]]],[11,"clone","","",56,[[],["topo",3]]],[11,"clone","","",57,[[],["walkeriter",3]]],[11,"clone","","",1,[[],["nodefiltered",3]]],[11,"clone","","",3,[[],["edgefiltered",3]]],[11,"clone","","",4,[[],["reversed",3]]],[11,"clone","","",66,[[],["reversededgereference",3]]],[11,"clone","petgraph::data","",34,[[],["element",4]]],[11,"clone","petgraph::algo::dominators","",39,[[],["dominators",3]]],[11,"clone","petgraph::algo","",40,[[],["dfsspace",3]]],[11,"clone","","",41,[[],["cycle",3]]],[11,"clone","","",71,[[],["negativecycle",3]]],[11,"clone","petgraph::csr","",43,[[]]],[11,"clone","","",72,[[],["edgesnotsorted",3]]],[11,"clone","","",73,[[],["edges",3]]],[11,"clone","","",44,[[]]],[11,"clone","","",75,[[],["neighbors",3]]],[11,"clone","petgraph::graph","",77,[[],["nodeindex",3]]],[11,"clone","","",78,[[],["edgeindex",3]]],[11,"clone","","",52,[[]]],[11,"clone","","",50,[[]]],[11,"clone","","",79,[[]]],[11,"clone_from","","",79,[[]]],[11,"clone","","",81,[[]]],[11,"clone","","",82,[[]]],[11,"clone","","",86,[[]]],[11,"clone","","",87,[[],["nodeindices",3]]],[11,"clone","","",88,[[],["edgeindices",3]]],[11,"clone","","",89,[[]]],[11,"clone","petgraph::graphmap","",47,[[],["graphmap",3]]],[11,"clone","","",48,[[]]],[11,"clone","petgraph::unionfind","",49,[[],["unionfind",3]]],[11,"clone","petgraph","",53,[[]]],[11,"clone","","",101,[[]]],[11,"clone","","",102,[[]]],[11,"default","petgraph::visit","",5,[[],["time",3]]],[11,"default","","",7,[[]]],[11,"default","","",9,[[]]],[11,"default","","",10,[[]]],[11,"default","","",11,[[]]],[11,"default","","",56,[[]]],[11,"default","petgraph::algo","",40,[[]]],[11,"default","petgraph::csr","",43,[[]]],[11,"default","petgraph::graph","",77,[[],["nodeindex",3]]],[11,"default","","",78,[[],["edgeindex",3]]],[11,"default","","",79,[[]]],[11,"default","petgraph::graphmap","",47,[[]]],[11,"cmp","petgraph::visit","",5,[[["time",3]],["ordering",4]]],[11,"cmp","petgraph::graph","",77,[[["nodeindex",3]],["ordering",4]]],[11,"cmp","","",78,[[["edgeindex",3]],["ordering",4]]],[11,"cmp","petgraph::graphmap","Ptr is ordered by pointer value, i.e. an arbitrary but …",48,[[["ptr",3]],["ordering",4]]],[11,"cmp","petgraph","",53,[[["direction",4]],["ordering",4]]],[11,"eq","petgraph::visit","",5,[[["time",3]]]],[11,"ne","","",5,[[["time",3]]]],[11,"eq","petgraph::data","",34,[[["element",4]]]],[11,"ne","","",34,[[["element",4]]]],[11,"eq","petgraph::algo","",41,[[["cycle",3]]]],[11,"ne","","",41,[[["cycle",3]]]],[11,"eq","","",71,[[["negativecycle",3]]]],[11,"ne","","",71,[[["negativecycle",3]]]],[11,"eq","petgraph::dot","",46,[[["config",4]]]],[11,"ne","","",46,[[["config",4]]]],[11,"eq","petgraph::graph","",77,[[["nodeindex",3]]]],[11,"ne","","",77,[[["nodeindex",3]]]],[11,"eq","","",78,[[["edgeindex",3]]]],[11,"ne","","",78,[[["edgeindex",3]]]],[11,"eq","","",89,[[]]],[11,"eq","petgraph::graphmap","Ptr compares by pointer equality, i.e if they point to …",48,[[["ptr",3]]]],[11,"eq","petgraph","",53,[[["direction",4]]]],[11,"partial_cmp","petgraph::visit","",5,[[["time",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["time",3]]]],[11,"le","","",5,[[["time",3]]]],[11,"gt","","",5,[[["time",3]]]],[11,"ge","","",5,[[["time",3]]]],[11,"partial_cmp","petgraph::graph","",77,[[["nodeindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",77,[[["nodeindex",3]]]],[11,"le","","",77,[[["nodeindex",3]]]],[11,"gt","","",77,[[["nodeindex",3]]]],[11,"ge","","",77,[[["nodeindex",3]]]],[11,"partial_cmp","","",78,[[["edgeindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",78,[[["edgeindex",3]]]],[11,"le","","",78,[[["edgeindex",3]]]],[11,"gt","","",78,[[["edgeindex",3]]]],[11,"ge","","",78,[[["edgeindex",3]]]],[11,"partial_cmp","petgraph::graphmap","",48,[[["ptr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","petgraph","",53,[[["direction",4]],[["option",4],["ordering",4]]]],[11,"deref","petgraph::graph","",92,[[]]],[11,"deref","petgraph::graphmap","",48,[[]]],[11,"fmt","petgraph::visit","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::data","",34,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::algo::dominators","",39,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::algo","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::csr","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::dot","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::graph","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::graphmap","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::unionfind","",49,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","petgraph::dot","",45,[[["formatter",3]],["result",6]]],[11,"index","petgraph::csr","",43,[[["nodeindex",6]]]],[11,"index","petgraph::graph","",79,[[["nodeindex",3]]]],[11,"index","","",79,[[["edgeindex",3]]]],[11,"index","","",92,[[]]],[11,"index","petgraph::graphmap","",47,[[]]],[11,"index_mut","petgraph::csr","",43,[[["nodeindex",6]]]],[11,"index_mut","petgraph::graph","",79,[[["nodeindex",3]]]],[11,"index_mut","","",79,[[["edgeindex",3]]]],[11,"index_mut","","",92,[[]]],[11,"index_mut","petgraph::graphmap","",47,[[]]],[11,"hash","petgraph::visit","",5,[[]]],[11,"hash","petgraph::graph","",77,[[]]],[11,"hash","","",78,[[]]],[11,"hash","petgraph::graphmap","",48,[[]]],[11,"hash","petgraph","",53,[[]]],[11,"from_iter","petgraph::graphmap","",47,[[]]],[11,"breaking","petgraph::visit","",7,[[],["control",4]]],[11,"break_value","","Get the value in <code>Control::Break(_)</code>, if present.",7,[[],["option",4]]],[11,"new","","Create a new <strong>Dfs</strong>, using the graph\'s visitor map, and put <strong>…",9,[[]]],[11,"from_parts","","Create a <code>Dfs</code> from a vector and a visit map",9,[[["vec",3]]]],[11,"reset","","Clear the visit state",9,[[]]],[11,"empty","","Create a new <strong>Dfs</strong> using the graph\'s visitor map, and no …",9,[[]]],[11,"move_to","","Keep the discovered map, but clear the visit stack and …",9,[[]]],[11,"next","","Return the next node in the dfs, or <strong>None</strong> if the traversal …",9,[[],["option",4]]],[11,"new","","Create a new <code>DfsPostOrder</code> using the graph\'s visitor map, …",10,[[]]],[11,"empty","","Create a new <code>DfsPostOrder</code> using the graph\'s visitor map, …",10,[[]]],[11,"reset","","Clear the visit state",10,[[]]],[11,"move_to","","Keep the discovered and finished map, but clear the visit …",10,[[]]],[11,"next","","Return the next node in the traversal, or <code>None</code> if the …",10,[[],["option",4]]],[11,"new","","Create a new <strong>Bfs</strong>, using the graph\'s visitor map, and put <strong>…",11,[[]]],[11,"next","","Return the next node in the bfs, or <strong>None</strong> if the traversal …",11,[[],["option",4]]],[11,"new","","Create a new <code>Topo</code>, using the graph\'s visitor map, and put …",56,[[]]],[11,"reset","","Clear visited state, and put all initial nodes in the to …",56,[[]]],[11,"next","","Return the next node in the current topological order …",56,[[],["option",4]]],[11,"iter","","Create an iterator out of the walker and given <code>context</code>.",12,[[],["walkeriter",3]]],[11,"context","","",57,[[]]],[11,"inner_ref","","",57,[[]]],[11,"inner_mut","","",57,[[]]],[11,"from_fn","","Create an <code>NodeFiltered</code> adaptor from the closure <code>filter</code>.",1,[[]]],[11,"from_fn","","Create an <code>EdgeFiltered</code> adaptor from the closure <code>filter</code>.",3,[[]]],[11,"as_unreversed","","Return the original, unreversed edge reference.",66,[[]]],[11,"into_unreversed","","Consume <code>self</code> and return the original, unreversed edge …",66,[[]]],[11,"new","petgraph::graph","Create a new <code>Frozen</code> from a mutable reference to a graph.",92,[[]]],[11,"index_twice_mut","","Index the <code>Graph</code> by two indices, any combination of node …",92,[[]]],[11,"new","","",77,[[]]],[11,"index","","",77,[[]]],[11,"end","","",77,[[]]],[11,"new","","",78,[[]]],[11,"index","","",78,[[]]],[11,"end","","An invalid <code>EdgeIndex</code> used to denote absence of an edge, …",78,[[]]],[11,"next_edge","","Accessor for data structure internals: the first edge in …",52,[[["direction",4]],["edgeindex",3]]],[11,"next_edge","","Accessor for data structure internals: the next edge for …",50,[[["direction",4]],["edgeindex",3]]],[11,"source","","Return the source node index.",50,[[],["nodeindex",3]]],[11,"target","","Return the target node index.",50,[[],["nodeindex",3]]],[11,"new","","Create a new <code>Graph</code> with directed edges.",79,[[]]],[11,"new_undirected","","Create a new <code>Graph</code> with undirected edges.",79,[[]]],[11,"with_capacity","","Create a new <code>Graph</code> with estimated capacity.",79,[[]]],[11,"node_count","","Return the number of nodes (vertices) in the graph.",79,[[]]],[11,"edge_count","","Return the number of edges in the graph.",79,[[]]],[11,"is_directed","","Whether the graph has directed edges or not.",79,[[]]],[11,"add_node","","Add a node (also called vertex) with associated data …",79,[[],["nodeindex",3]]],[11,"node_weight","","Access the weight for node <code>a</code>.",79,[[["nodeindex",3]],["option",4]]],[11,"node_weight_mut","","Access the weight for node <code>a</code>, mutably.",79,[[["nodeindex",3]],["option",4]]],[11,"add_edge","","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …",79,[[["nodeindex",3]],["edgeindex",3]]],[11,"update_edge","","Add or update an edge from <code>a</code> to <code>b</code>. If the edge already …",79,[[["nodeindex",3]],["edgeindex",3]]],[11,"edge_weight","","Access the weight for edge <code>e</code>.",79,[[["edgeindex",3]],["option",4]]],[11,"edge_weight_mut","","Access the weight for edge <code>e</code>, mutably.",79,[[["edgeindex",3]],["option",4]]],[11,"edge_endpoints","","Access the source and target nodes for <code>e</code>.",79,[[["edgeindex",3]],["option",4]]],[11,"remove_node","","Remove <code>a</code> from the graph if it exists, and return its …",79,[[["nodeindex",3]],["option",4]]],[11,"remove_edge","","Remove an edge and return its edge weight, or <code>None</code> if it …",79,[[["edgeindex",3]],["option",4]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting …",79,[[["nodeindex",3]],["neighbors",3]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge …",79,[[["nodeindex",3],["direction",4]],["neighbors",3]]],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge …",79,[[["nodeindex",3]],["neighbors",3]]],[11,"edges","","Return an iterator of all edges of <code>a</code>.",79,[[["nodeindex",3]],["edges",3]]],[11,"edges_directed","","Return an iterator of all edges of <code>a</code>, in the specified …",79,[[["nodeindex",3],["direction",4]],["edges",3]]],[11,"edges_connecting","","Return an iterator over all the edges connecting <code>a</code> and <code>b</code>.",79,[[["nodeindex",3]],["edgesconnecting",3]]],[11,"contains_edge","","Lookup if there is an edge from <code>a</code> to <code>b</code>.",79,[[["nodeindex",3]]]],[11,"find_edge","","Lookup an edge from <code>a</code> to <code>b</code>.",79,[[["nodeindex",3]],[["option",4],["edgeindex",3]]]],[11,"find_edge_undirected","","Lookup an edge between <code>a</code> and <code>b</code>, in either direction.",79,[[["nodeindex",3]],["option",4]]],[11,"externals","","Return an iterator over either the nodes without edges to …",79,[[["direction",4]],["externals",3]]],[11,"node_indices","","Return an iterator over the node indices of the graph.",79,[[],["nodeindices",3]]],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node …",79,[[],["nodeweightsmut",3]]],[11,"edge_indices","","Return an iterator over the edge indices of the graph",79,[[],["edgeindices",3]]],[11,"edge_references","","Create an iterator over all edges, in indexed order.",79,[[],["edgereferences",3]]],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge …",79,[[],["edgeweightsmut",3]]],[11,"raw_nodes","","Access the internal node array.",79,[[]]],[11,"raw_edges","","Access the internal edge array.",79,[[]]],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of …",79,[[]]],[11,"first_edge","","Accessor for data structure internals: the first edge in …",79,[[["nodeindex",3],["direction",4]],[["option",4],["edgeindex",3]]]],[11,"next_edge","","Accessor for data structure internals: the next edge for …",79,[[["edgeindex",3],["direction",4]],[["option",4],["edgeindex",3]]]],[11,"index_twice_mut","","Index the <code>Graph</code> by two indices, any combination of node …",79,[[]]],[11,"reverse","","Reverse the direction of all edges",79,[[]]],[11,"clear","","Remove all nodes and edges",79,[[]]],[11,"clear_edges","","Remove all edges",79,[[]]],[11,"capacity","","Return the current node and edge capacity of the graph.",79,[[]]],[11,"reserve_nodes","","Reserves capacity for at least <code>additional</code> more nodes to …",79,[[]]],[11,"reserve_edges","","Reserves capacity for at least <code>additional</code> more edges to …",79,[[]]],[11,"reserve_exact_nodes","","Reserves the minimum capacity for exactly <code>additional</code> more …",79,[[]]],[11,"reserve_exact_edges","","Reserves the minimum capacity for exactly <code>additional</code> more …",79,[[]]],[11,"shrink_to_fit_nodes","","Shrinks the capacity of the underlying nodes collection …",79,[[]]],[11,"shrink_to_fit_edges","","Shrinks the capacity of the underlying edges collection …",79,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the graph as much as possible.",79,[[]]],[11,"retain_nodes","","Keep all nodes that return <code>true</code> from the <code>visit</code> closure, …",79,[[]]],[11,"retain_edges","","Keep all edges that return <code>true</code> from the <code>visit</code> closure, …",79,[[]]],[11,"from_edges","","Create a new <code>Graph</code> from an iterable of edges.",79,[[]]],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",79,[[]]],[11,"map","","Create a new <code>Graph</code> by mapping node and edge weights to …",79,[[],["graph",3]]],[11,"filter_map","","Create a new <code>Graph</code> by mapping nodes and edges. A node or …",79,[[],["graph",3]]],[11,"into_edge_type","","Convert the graph into either undirected or directed. No …",79,[[],["graph",3]]],[11,"detach","","Return a “walker” object that can be used to step …",81,[[],["walkneighbors",3]]],[11,"next","","Step to the next edge and its endpoint node in the walk …",86,[[["graph",3]],["option",4]]],[11,"next_node","","",86,[[["graph",3]],[["option",4],["nodeindex",3]]]],[11,"next_edge","","",86,[[["graph",3]],[["option",4],["edgeindex",3]]]],[11,"weight","","Access the edge’s weight.",89,[[]]]],"p":[[8,"FilterNode"],[3,"NodeFiltered"],[8,"FilterEdge"],[3,"EdgeFiltered"],[3,"Reversed"],[3,"Time"],[4,"DfsEvent"],[4,"Control"],[8,"ControlFlow"],[3,"Dfs"],[3,"DfsPostOrder"],[3,"Bfs"],[8,"Walker"],[8,"GraphBase"],[8,"IntoNeighbors"],[8,"IntoNeighborsDirected"],[8,"IntoEdges"],[8,"IntoEdgesDirected"],[8,"IntoNodeIdentifiers"],[8,"Data"],[8,"EdgeRef"],[8,"NodeRef"],[8,"IntoNodeReferences"],[8,"IntoEdgeReferences"],[8,"GraphProp"],[8,"NodeIndexable"],[8,"NodeCount"],[8,"VisitMap"],[8,"Visitable"],[8,"GetAdjacencyMatrix"],[8,"DataMap"],[8,"DataMapMut"],[8,"Build"],[8,"Create"],[4,"Element"],[13,"Node"],[13,"Edge"],[8,"FromElements"],[8,"ElementIterator"],[3,"Dominators"],[3,"DfsSpace"],[3,"Cycle"],[8,"FloatMeasure"],[3,"Csr"],[3,"EdgeReference"],[3,"Dot"],[4,"Config"],[3,"GraphMap"],[3,"Ptr"],[3,"UnionFind"],[3,"Edge"],[8,"IndexType"],[3,"Node"],[4,"Direction"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[3,"Topo"],[3,"WalkerIter"],[3,"NodeFilteredNeighbors"],[3,"NodeFilteredNodes"],[3,"NodeFilteredEdgeReferences"],[3,"NodeFilteredEdges"],[3,"EdgeFilteredNeighbors"],[3,"EdgeFilteredEdges"],[3,"EdgeFilteredNeighborsDirected"],[3,"ReversedEdges"],[3,"ReversedEdgeReference"],[3,"ReversedEdgeReferences"],[3,"FilterElements"],[3,"DominatorsIter"],[3,"MinSpanningTree"],[3,"NegativeCycle"],[3,"EdgesNotSorted"],[3,"Edges"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"NodeIdentifiers"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"EdgesConnecting"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"EdgeReference"],[3,"NodeReferences"],[3,"EdgeReferences"],[3,"Frozen"],[3,"Nodes"],[3,"Neighbors"],[3,"NeighborsDirected"],[3,"Edges"],[3,"AllEdges"],[3,"AllEdgesMut"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[4,"Directed"],[4,"Undirected"]]},\
"ppv_lite86":{"doc":"","i":[[0,"x86_64","ppv_lite86","",null,null],[3,"YesS3","ppv_lite86::x86_64","",null,null],[3,"NoS3","","",null,null],[3,"YesS4","","",null,null],[3,"NoS4","","",null,null],[3,"YesA1","","",null,null],[3,"NoA1","","",null,null],[3,"YesA2","","",null,null],[3,"NoA2","","",null,null],[3,"YesNI","","",null,null],[3,"NoNI","","",null,null],[3,"SseMachine","","",null,null],[3,"Avx2Machine","","",null,null],[6,"SSE2","","",null,null],[6,"SSSE3","","",null,null],[6,"SSE41","","",null,null],[6,"AVX","","AVX but not AVX2: only 128-bit integer operations, but …",null,null],[6,"AVX2","","",null,null],[19,"vec128_storage","","Generic wrapper for unparameterized storage of any of the …",null,null],[19,"vec256_storage","","",null,null],[11,"new128","","",0,[[]]],[11,"split128","","",0,[[]]],[19,"vec512_storage","","",null,null],[11,"new128","","",1,[[]]],[11,"split128","","",1,[[]]],[8,"AndNot","ppv_lite86","",null,null],[16,"Output","","",2,null],[10,"andnot","","",2,[[]]],[8,"BSwap","","",null,null],[10,"bswap","","",3,[[]]],[8,"ArithOps","","Ops that depend on word size",null,null],[8,"BitOps0","","Ops that are independent of word size and endian",null,null],[8,"BitOps32","","",null,null],[8,"BitOps64","","",null,null],[8,"BitOps128","","",null,null],[8,"RotateEachWord32","","",null,null],[10,"rotate_each_word_right7","","",4,[[]]],[10,"rotate_each_word_right8","","",4,[[]]],[10,"rotate_each_word_right11","","",4,[[]]],[10,"rotate_each_word_right12","","",4,[[]]],[10,"rotate_each_word_right16","","",4,[[]]],[10,"rotate_each_word_right20","","",4,[[]]],[10,"rotate_each_word_right24","","",4,[[]]],[10,"rotate_each_word_right25","","",4,[[]]],[8,"RotateEachWord64","","",null,null],[10,"rotate_each_word_right32","","",5,[[]]],[8,"RotateEachWord128","","",null,null],[8,"UnsafeFrom","","",null,null],[10,"unsafe_from","","",6,[[]]],[8,"Vec2","","A vector composed of two elements, which may be words or …",null,null],[10,"extract","","",7,[[]]],[10,"insert","","",7,[[]]],[8,"Vec4","","A vector composed of four elements, which may be words or …",null,null],[10,"extract","","",8,[[]]],[10,"insert","","",8,[[]]],[8,"Words4","","A vector composed of four words; depending on their size, …",null,null],[10,"shuffle1230","","",9,[[]]],[10,"shuffle2301","","",9,[[]]],[10,"shuffle3012","","",9,[[]]],[8,"LaneWords4","","A vector composed one or more lanes each composed of four …",null,null],[10,"shuffle_lane_words1230","","",10,[[]]],[10,"shuffle_lane_words2301","","",10,[[]]],[10,"shuffle_lane_words3012","","",10,[[]]],[8,"Swap64","","Exchange neigboring ranges of bits of the specified size",null,null],[10,"swap1","","",11,[[]]],[10,"swap2","","",11,[[]]],[10,"swap4","","",11,[[]]],[10,"swap8","","",11,[[]]],[10,"swap16","","",11,[[]]],[10,"swap32","","",11,[[]]],[10,"swap64","","",11,[[]]],[8,"u32x4","","",null,null],[8,"u64x2","","",null,null],[8,"u128x1","","",null,null],[8,"u32x4x2","","",null,null],[8,"u64x2x2","","",null,null],[8,"u64x4","","",null,null],[8,"u128x2","","",null,null],[8,"u32x4x4","","",null,null],[8,"u64x2x4","","",null,null],[8,"u128x4","","",null,null],[8,"MultiLane","","A vector composed of multiple 128-bit lanes.",null,null],[10,"to_lanes","","Split a multi-lane vector into single-lane vectors.",12,[[]]],[10,"from_lanes","","Build a multi-lane vector from individual lanes.",12,[[]]],[8,"VZip","","Combine single vectors into a multi-lane vector.",null,null],[10,"vzip","","",13,[[]]],[8,"Machine","","",null,null],[16,"u32x4","","",14,null],[16,"u64x2","","",14,null],[16,"u128x1","","",14,null],[16,"u32x4x2","","",14,null],[16,"u64x2x2","","",14,null],[16,"u64x4","","",14,null],[16,"u128x2","","",14,null],[16,"u32x4x4","","",14,null],[16,"u64x2x4","","",14,null],[16,"u128x4","","",14,null],[11,"unpack","","",14,[[],["store",8]]],[11,"vec","","",14,[[]]],[11,"read_le","","",14,[[]]],[11,"read_be","","",14,[[]]],[10,"instance","","SafetyCaller must ensure the type of Self is appropriate …",14,[[]]],[8,"Store","","",null,null],[10,"unpack","","SafetyCaller must ensure the type of Self is appropriate …",15,[[]]],[8,"StoreBytes","","",null,null],[10,"unsafe_read_le","","SafetyCaller must ensure the type of Self is appropriate …",16,[[]]],[10,"unsafe_read_be","","SafetyCaller must ensure the type of Self is appropriate …",16,[[]]],[10,"write_le","","",16,[[]]],[10,"write_be","","",16,[[]]],[14,"dispatch","","Generate the full set of optimized implementations to …",null,null],[14,"dispatch_light128","","Generate only the basic implementations necessary to be …",null,null],[14,"dispatch_light256","","Generate only the basic implementations necessary to be …",null,null],[11,"from","ppv_lite86::x86_64","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"instance","","",27,[[]]],[11,"instance","","",28,[[]]],[11,"unpack","","",29,[[["vec128_storage",19]]]],[11,"eq","","",29,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[]]],[11,"into","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into","","",1,[[]]],[11,"clone","","",17,[[],["yess3",3]]],[11,"clone","","",18,[[],["nos3",3]]],[11,"clone","","",19,[[],["yess4",3]]],[11,"clone","","",20,[[],["nos4",3]]],[11,"clone","","",21,[[],["yesa1",3]]],[11,"clone","","",22,[[],["noa1",3]]],[11,"clone","","",23,[[],["yesa2",3]]],[11,"clone","","",24,[[],["noa2",3]]],[11,"clone","","",25,[[],["yesni",3]]],[11,"clone","","",26,[[],["noni",3]]],[11,"clone","","",27,[[],["ssemachine",3]]],[11,"clone","","",28,[[],["avx2machine",3]]],[11,"clone","","",29,[[],["vec128_storage",19]]],[11,"clone","","",0,[[],["vec256_storage",19]]],[11,"clone","","",1,[[],["vec512_storage",19]]],[11,"default","","",29,[[]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"unpack","ppv_lite86","",14,[[],["store",8]]],[11,"vec","","",14,[[]]],[11,"read_le","","",14,[[]]],[11,"read_be","","",14,[[]]]],"p":[[19,"vec256_storage"],[19,"vec512_storage"],[8,"AndNot"],[8,"BSwap"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"UnsafeFrom"],[8,"Vec2"],[8,"Vec4"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"MultiLane"],[8,"VZip"],[8,"Machine"],[8,"Store"],[8,"StoreBytes"],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[3,"SseMachine"],[3,"Avx2Machine"],[19,"vec128_storage"]]},\
"pretty_assertions":{"doc":"Pretty AssertionsWhen writing tests in Rust, you\'ll …","i":[[3,"Style","pretty_assertions","A style is a collection of properties that can format a …",null,null],[12,"foreground","","The style\'s foreground colour, if it has one.",0,null],[12,"background","","The style\'s background colour, if it has one.",0,null],[12,"is_bold","","Whether this style is bold.",0,null],[12,"is_dimmed","","Whether this style is dimmed.",0,null],[12,"is_italic","","Whether this style is italic.",0,null],[12,"is_underline","","Whether this style is underlined.",0,null],[12,"is_blink","","Whether this style is blinking.",0,null],[12,"is_reverse","","Whether this style has reverse colours.",0,null],[12,"is_hidden","","Whether this style is hidden.",0,null],[12,"is_strikethrough","","Whether this style is struckthrough.",0,null],[3,"Comparison","","A comparison of two values.",null,null],[11,"new","","Store two values to be compared in future.",1,[[],["comparison",3]]],[14,"assert_eq","","Asserts that two expressions are equal to each other …",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"eq","","",0,[[["style",3]]]],[11,"ne","","",0,[[["style",3]]]],[11,"from","","You can turn a <code>Colour</code> into a <code>Style</code> with the foreground …",0,[[["colour",4]],["style",3]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"default","","Returns a style with <em>no</em> properties set. Formatting text …",0,[[],["style",3]]],[11,"clone","","",0,[[],["style",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"prefix","","The prefix bytes for this style. These are the bytes that …",0,[[],["prefix",3]]],[11,"infix","","The infix bytes between this style and <code>next</code> style. These …",0,[[["style",3]],["infix",3]]],[11,"suffix","","The suffix for this style. These are the bytes that tell …",0,[[],["suffix",3]]],[11,"new","","Creates a new Style with no properties set.",0,[[],["style",3]]],[11,"bold","","Returns a <code>Style</code> with the bold property set.",0,[[],["style",3]]],[11,"dimmed","","Returns a <code>Style</code> with the dimmed property set.",0,[[],["style",3]]],[11,"italic","","Returns a <code>Style</code> with the italic property set.",0,[[],["style",3]]],[11,"underline","","Returns a <code>Style</code> with the underline property set.",0,[[],["style",3]]],[11,"blink","","Returns a <code>Style</code> with the blink property set.",0,[[],["style",3]]],[11,"reverse","","Returns a <code>Style</code> with the reverse property set.",0,[[],["style",3]]],[11,"hidden","","Returns a <code>Style</code> with the hidden property set.",0,[[],["style",3]]],[11,"strikethrough","","Returns a <code>Style</code> with the strikethrough property set.",0,[[],["style",3]]],[11,"fg","","Returns a <code>Style</code> with the foreground colour property set.",0,[[["colour",4]],["style",3]]],[11,"on","","Returns a <code>Style</code> with the background colour property set.",0,[[["colour",4]],["style",3]]],[11,"is_plain","","Return true if this <code>Style</code> has no actual styles, and can …",0,[[]]],[11,"paint","","Paints the given text with this colour, returning an ANSI …",0,[[],["ansigenericstring",3]]]],"p":[[3,"Style"],[3,"Comparison"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the …","i":[[0,"token_stream","proc_macro2","Public implementation details for the <code>TokenStream</code> type, …",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over <code>TokenStream</code>\'s <code>TokenTree</code>s.",null,null],[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a …",null,null],[3,"LexError","","Error returned from <code>TokenStream::from_str</code>.",null,null],[11,"new","","Returns an empty <code>TokenStream</code> containing no token trees.",0,[[],["tokenstream",3]]],[11,"empty","","",0,[[],["tokenstream",3]]],[11,"is_empty","","Checks if this <code>TokenStream</code> is empty.",0,[[]]],[3,"Span","","A region of source code, along with macro expansion …",null,null],[11,"call_site","","The span of the invocation of the current procedural …",1,[[],["span",3]]],[11,"unwrap","","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.",1,[[],["span",3]]],[4,"TokenTree","","A single token or a delimited sequence of token trees …",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",2,null],[13,"Ident","","An identifier.",2,null],[13,"Punct","","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).",2,null],[13,"Literal","","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…",2,null],[11,"span","","Returns the span of this tree, delegating to the <code>span</code> …",2,[[],["span",3]]],[11,"set_span","","Configures the span for <em>only this token</em>.",2,[[["span",3]]]],[3,"Group","","A delimited token stream.",null,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","<code>( ... )</code>",3,null],[13,"Brace","","<code>{ ... }</code>",3,null],[13,"Bracket","","<code>[ ... ]</code>",3,null],[13,"None","","<code>Ø ... Ø</code>",3,null],[11,"new","","Creates a new <code>Group</code> with the given delimiter and token …",4,[[["delimiter",4],["tokenstream",3]],["group",3]]],[11,"delimiter","","Returns the delimiter of this <code>Group</code>",4,[[],["delimiter",4]]],[11,"stream","","Returns the <code>TokenStream</code> of tokens that are delimited in …",4,[[],["tokenstream",3]]],[11,"span","","Returns the span for the delimiters of this token stream, …",4,[[],["span",3]]],[11,"set_span","","Configures the span for this <code>Group</code>\'s delimiters, but not …",4,[[["span",3]]]],[3,"Punct","","An <code>Punct</code> is an single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>…",null,null],[4,"Spacing","","Whether an <code>Punct</code> is followed immediately by another <code>Punct</code> …",null,null],[13,"Alone","","E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.",5,null],[13,"Joint","","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'#</code>.",5,null],[11,"new","","Creates a new <code>Punct</code> from the given character and spacing.",6,[[["spacing",4]],["punct",3]]],[11,"as_char","","Returns the value of this punctuation character as <code>char</code>.",6,[[]]],[11,"spacing","","Returns the spacing of this punctuation character, …",6,[[],["spacing",4]]],[11,"span","","Returns the span for this punctuation character.",6,[[],["span",3]]],[11,"set_span","","Configure the span for this punctuation character.",6,[[["span",3]]]],[3,"Ident","","A word of Rust code, which may be a keyword or legal …",null,null],[11,"new","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …",7,[[["span",3]],["ident",3]]],[11,"span","","Returns the span of this <code>Ident</code>.",7,[[],["span",3]]],[11,"set_span","","Configures the span of this <code>Ident</code>, possibly changing its …",7,[[["span",3]]]],[3,"Literal","","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …",null,null],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u128_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"i128_suffixed","","Creates a new suffixed integer literal with the specified …",8,[[],["literal",3]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"u128_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"i128_unsuffixed","","Creates a new unsuffixed integer literal with the …",8,[[],["literal",3]]],[11,"f64_unsuffixed","","",8,[[],["literal",3]]],[11,"f64_suffixed","","",8,[[],["literal",3]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[],["literal",3]]],[11,"f32_suffixed","","",8,[[],["literal",3]]],[11,"string","","",8,[[],["literal",3]]],[11,"character","","",8,[[],["literal",3]]],[11,"byte_string","","",8,[[],["literal",3]]],[11,"span","","",8,[[],["span",3]]],[11,"set_span","","",8,[[["span",3]]]],[11,"from","proc_macro2::token_stream","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","proc_macro2","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",1,[[["span",3]],["span",3]]],[11,"from","","",0,[[["tokenstream",3]],["tokenstream",3]]],[11,"from","","",2,[[["group",3]],["tokentree",4]]],[11,"from","","",2,[[["ident",3]],["tokentree",4]]],[11,"from","","",2,[[["punct",3]],["tokentree",4]]],[11,"from","","",2,[[["literal",3]],["tokentree",4]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"into_iter","","",0,[[],["intoiter",3]]],[11,"next","proc_macro2::token_stream","",9,[[],[["option",4],["tokentree",4]]]],[11,"clone","proc_macro2","",0,[[],["tokenstream",3]]],[11,"clone","","",1,[[],["span",3]]],[11,"clone","","",2,[[],["tokentree",4]]],[11,"clone","","",4,[[],["group",3]]],[11,"clone","","",3,[[],["delimiter",4]]],[11,"clone","","",6,[[],["punct",3]]],[11,"clone","","",5,[[],["spacing",4]]],[11,"clone","","",7,[[],["ident",3]]],[11,"clone","","",8,[[],["literal",3]]],[11,"clone","proc_macro2::token_stream","",9,[[],["intoiter",3]]],[11,"default","proc_macro2","",0,[[]]],[11,"cmp","","",7,[[["ident",3]],["ordering",4]]],[11,"eq","","",3,[[["delimiter",4]]]],[11,"eq","","",5,[[["spacing",4]]]],[11,"eq","","",7,[[["ident",3]]]],[11,"eq","","",7,[[]]],[11,"partial_cmp","","",7,[[["ident",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","proc_macro2::token_stream","",9,[[["formatter",3]],["result",6]]],[11,"fmt","proc_macro2","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","","",7,[[]]],[11,"from_str","","",0,[[],[["result",4],["lexerror",3],["tokenstream",3]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]]],"p":[[3,"TokenStream"],[3,"Span"],[4,"TokenTree"],[4,"Delimiter"],[3,"Group"],[4,"Spacing"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"],[3,"LexError"]]},\
"proc_macro_error":{"doc":"proc-macro-errorThis crate aims to make error reporting …","i":[[23,"proc_macro_error","proc_macro_error","",null,null],[0,"dummy","","Facility to emit dummy implementations (or whatever) in …",null,null],[5,"set_dummy","proc_macro_error::dummy","Sets dummy token stream which will be appended to …",null,[[["tokenstream",3]],[["option",4],["tokenstream",3]]]],[5,"append_dummy","","Same as [<code>set_dummy</code>] but, instead of resetting, appends …",null,[[["tokenstream",3]]]],[3,"Diagnostic","proc_macro_error","Represents a single diagnostic message",null,null],[8,"DiagnosticExt","","A collection of methods that do not exist in …",null,null],[10,"spanned_range","","Create a new diagnostic message that points to the …",0,[[["level",4],["spanrange",3],["string",3]]]],[10,"span_range_error","","Add another error message to self such that it will be …",0,[[["string",3],["spanrange",3]]]],[10,"span_range_help","","Attach a \\\"help\\\" note to your main message, the note will …",0,[[["string",3],["spanrange",3]]]],[10,"span_range_note","","Attach a note to your main message, the note will have …",0,[[["string",3],["spanrange",3]]]],[4,"Level","","Represents a diagnostic level",null,null],[13,"Error","","",1,null],[13,"Warning","","",1,null],[3,"SpanRange","","",null,null],[12,"first","","",2,null],[12,"last","","",2,null],[11,"single_span","","Create a range with the <code>first</code> and <code>last</code> spans being the …",2,[[["span",3]]]],[11,"call_site","","Create a <code>SpanRange</code> resolving at call site.",2,[[]]],[11,"from_tokens","","Construct span range from a <code>TokenStream</code>. This method …",2,[[["totokens",8]]]],[11,"join_range","","Join two span ranges. The resulting range will start at …",2,[[["spanrange",3]]]],[11,"collapse","","Collapse the range into single span, preserving as much …",2,[[],["span",3]]],[8,"ResultExt","","This traits expands <code>Result<T, Into<Diagnostic>></code> with some …",null,null],[16,"Ok","","",3,null],[10,"unwrap_or_abort","","Behaves like <code>Result::unwrap</code>: if self is <code>Ok</code> yield the …",3,[[]]],[10,"expect_or_abort","","Behaves like <code>Result::expect</code>: if self is <code>Ok</code> yield the …",3,[[]]],[8,"OptionExt","","This traits expands <code>Option</code> with some handy shortcuts.",null,null],[16,"Some","","",4,null],[10,"expect_or_abort","","Behaves like <code>Option::expect</code>: if self is <code>Some</code> yield the …",4,[[]]],[5,"abort_if_dirty","","Abort macro execution and display all the emitted errors, …",null,[[]]],[14,"diagnostic","","Build <code>Diagnostic</code> instance from provided arguments.",null,null],[14,"abort","","Abort proc-macro execution right now and display the …",null,null],[14,"abort_call_site","","Shortcut for <code>abort!(Span::call_site(), msg...)</code>. This macro…",null,null],[14,"emit_error","","Emit an error while not aborting the proc-macro right …",null,null],[14,"emit_call_site_error","","Shortcut for <code>emit_error!(Span::call_site(), ...)</code>. This …",null,null],[14,"emit_warning","","Emit a warning. Warnings are not errors and compilation …",null,null],[14,"emit_call_site_warning","","Shortcut for <code>emit_warning!(Span::call_site(), ...)</code>.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"span","","",5,[[],["span",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"spanned_range","","",5,[[["level",4],["spanrange",3],["string",3]]]],[11,"span_range_error","","",5,[[["string",3],["spanrange",3]]]],[11,"span_range_help","","",5,[[["string",3],["spanrange",3]]]],[11,"span_range_note","","",5,[[["string",3],["spanrange",3]]]],[11,"from","","",5,[[["error",3]]]],[11,"clone","","",2,[[],["spanrange",3]]],[11,"eq","","",1,[[["level",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"to_tokens","","",5,[[["tokenstream",3]]]],[11,"new","","Create a new diagnostic message that points to …",5,[[["level",4],["string",3]]]],[11,"spanned","","Create a new diagnostic message that points to the <code>span</code>",5,[[["level",4],["string",3],["span",3]]]],[11,"span_error","","Add another error message to self such that it will be …",5,[[["string",3],["span",3]]]],[11,"span_help","","Attach a \\\"help\\\" note to your main message, the note will …",5,[[["string",3],["span",3]]]],[11,"help","","Attach a \\\"help\\\" note to your main message.",5,[[["string",3]]]],[11,"span_note","","Attach a note to your main message, the note will have …",5,[[["string",3],["span",3]]]],[11,"note","","Attach a note to your main message",5,[[["string",3]]]],[11,"message","","The message of main warning/error (no notes attached)",5,[[]]],[11,"abort","","Abort the proc-macro\'s execution and display the …",5,[[]]],[11,"emit","","Display the diagnostic while not aborting macro execution.",5,[[]]]],"p":[[8,"DiagnosticExt"],[4,"Level"],[3,"SpanRange"],[8,"ResultExt"],[8,"OptionExt"],[3,"Diagnostic"]]},\
"proc_macro_error_attr":{"doc":"This is <code>#[proc_macro_error]</code> attribute to be used with …","i":[[23,"proc_macro_error","proc_macro_error_attr","",null,null]],"p":[]},\
"proptest":{"doc":"Proptest Reference DocumentationThis is the reference …","i":[[0,"arbitrary","proptest","Defines the <code>Arbitrary</code> trait and related free functions …",null,null],[0,"functor","proptest::arbitrary","Provides higher order <code>Arbitrary</code> traits. This is mainly …",null,null],[8,"ArbitraryF1","proptest::arbitrary::functor","<code>ArbitraryF1</code> lets you lift a <code>Strategy</code> to unary type …",null,null],[16,"Parameters","","The type of parameters that <code>lift1_with</code> accepts for …",0,null],[11,"lift1","","Lifts a given <code>Strategy</code> to a new <code>Strategy</code> for the …",0,[[],["boxedstrategy",3]]],[10,"lift1_with","","Lifts a given <code>Strategy</code> to a new <code>Strategy</code> for the …",0,[[],["boxedstrategy",3]]],[8,"ArbitraryF2","","<code>ArbitraryF2</code> lets you lift <code>Strategy</code> to binary type …",null,null],[16,"Parameters","","The type of parameters that <code>lift2_with</code> accepts for …",1,null],[11,"lift2","","Lifts two given strategies to a new <code>Strategy</code> for the …",1,[[],["boxedstrategy",3]]],[10,"lift2_with","","Lifts two given strategies to a new <code>Strategy</code> for the …",1,[[],["boxedstrategy",3]]],[8,"Arbitrary","proptest::arbitrary","Arbitrary determines a canonical <code>Strategy</code> for the …",null,null],[16,"Parameters","","The type of parameters that <code>arbitrary_with</code> accepts for …",2,null],[11,"arbitrary","","Generates a <code>Strategy</code> for producing arbitrary values of …",2,[[]]],[10,"arbitrary_with","","Generates a <code>Strategy</code> for producing arbitrary values of …",2,[[]]],[16,"Strategy","","The type of <code>Strategy</code> used to generate values of type <code>Self</code>.",2,null],[6,"StrategyFor","","<code>StrategyFor</code> allows you to mention the type of <code>Strategy</code> …",null,null],[6,"ParamsFor","","<code>ParamsFor</code> allows you to mention the type of <code>Parameters</code> …",null,null],[5,"any","","Generates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code>. …",null,[[],[["strategyfor",6],["arbitrary",8]]]],[5,"any_with","","Generates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code> with …",null,[[["arbitrary",8],["paramsfor",6]],[["strategyfor",6],["arbitrary",8]]]],[5,"arbitrary","","Generates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code>. …",null,[[]]],[5,"arbitrary_with","","Generates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code> with …",null,[[]]],[6,"SMapped","","A static map from a strategy of <code>I</code> to <code>O</code>.",null,null],[6,"Mapped","","A normal map from a strategy of <code>I</code> to <code>O</code>.",null,null],[0,"array","proptest","Support for strategies producing fixed-length arrays.",null,null],[3,"UniformArrayStrategy","proptest::array","A <code>Strategy</code> which generates fixed-size arrays containing …",null,null],[11,"new","","Directly create a <code>UniformArrayStrategy</code>.",3,[[]]],[3,"ArrayValueTree","","A <code>ValueTree</code> operating over a fixed-size array.",null,null],[5,"uniform1","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform2","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform3","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform4","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform5","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform6","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform7","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform8","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform9","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform10","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform11","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform12","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform13","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform14","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform15","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform16","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform17","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform18","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform19","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform20","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform21","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform22","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform23","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform24","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform25","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform26","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform27","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform28","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform29","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[5,"uniform30","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform31","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["strategy",8],["uniformarraystrategy",3]]]],[5,"uniform32","","Create a strategy to generate fixed-length arrays.",null,[[["strategy",8]],[["uniformarraystrategy",3],["strategy",8]]]],[0,"bits","proptest","Strategies for working with bit sets.",null,null],[0,"u8","proptest::bits","",null,null],[17,"ANY","proptest::bits::u8","Generates integers where all bits may be set.",null,null],[5,"between","","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"u16","proptest::bits","",null,null],[17,"ANY","proptest::bits::u16","Generates integers where all bits may be set.",null,null],[5,"between","","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"u32","proptest::bits","",null,null],[17,"ANY","proptest::bits::u32","Generates integers where all bits may be set.",null,null],[5,"between","","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"u64","proptest::bits","",null,null],[17,"ANY","proptest::bits::u64","Generates integers where all bits may be set.",null,null],[5,"between","","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"i8","proptest::bits","",null,null],[17,"ANY","proptest::bits::i8","Generates integers where all bits may be set.",null,null],[5,"between","","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"i16","proptest::bits","",null,null],[17,"ANY","proptest::bits::i16","Generates integers where all bits may be set.",null,null],[5,"between","","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"i32","proptest::bits","",null,null],[17,"ANY","proptest::bits::i32","Generates integers where all bits may be set.",null,null],[5,"between","","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"i64","proptest::bits","",null,null],[17,"ANY","proptest::bits::i64","Generates integers where all bits may be set.",null,null],[5,"between","","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"usize","proptest::bits","",null,null],[5,"between","proptest::bits::usize","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"isize","proptest::bits","",null,null],[5,"between","proptest::bits::isize","Generates values where bits between the given bounds may …",null,[[],["bitsetstrategy",3]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[],["bitsetstrategy",3]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],["sampledbitsetstrategy",3]]],[0,"bitset","proptest::bits","",null,null],[5,"between","proptest::bits::bitset","Generates values where bits between the given bounds may …",null,[[],[["bitset",3],["bitsetstrategy",3]]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[["bitset",3]],[["bitset",3],["bitsetstrategy",3]]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],[["bitset",3],["sampledbitsetstrategy",3]]]],[0,"bool_vec","proptest::bits","",null,null],[5,"between","proptest::bits::bool_vec","Generates values where bits between the given bounds may …",null,[[],[["vec",3],["bitsetstrategy",3]]]],[5,"masked","","Generates values where any bits set in <code>mask</code> (and no …",null,[[["vec",3]],[["vec",3],["bitsetstrategy",3]]]],[5,"sampled","","Create a strategy which generates values where bits …",null,[[],[["vec",3],["sampledbitsetstrategy",3]]]],[8,"BitSetLike","proptest::bits","Trait for types which can be handled with <code>BitSetStrategy</code>.",null,null],[10,"new_bitset","","Create a new value of <code>Self</code> with space for up to <code>max</code> bits, …",4,[[]]],[10,"len","","Return an upper bound on the greatest bit set <em>plus one</em>.",4,[[]]],[10,"test","","Test whether the given bit is set.",4,[[]]],[10,"set","","Set the given bit.",4,[[]]],[10,"clear","","Clear the given bit.",4,[[]]],[11,"count","","Return the number of bits set.",4,[[]]],[3,"BitSetStrategy","","Generates values as a set of bits between the two bounds.",null,null],[11,"new","","Create a strategy which generates values where bits …",5,[[]]],[11,"masked","","Create a strategy which generates values where any bits …",5,[[]]],[3,"SampledBitSetStrategy","","Generates bit sets with a particular number of bits set.",null,null],[11,"new","","Create a strategy which generates values where bits …",6,[[]]],[3,"BitSetValueTree","","Value tree produced by <code>BitSetStrategy</code> and …",null,null],[0,"bool","proptest","Strategies for generating <code>bool</code> values.",null,null],[3,"Any","proptest::bool","The type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates boolean values by picking <code>true</code> or <code>false</code> …",null,null],[5,"weighted","","Generates boolean values by picking <code>true</code> with the given …",null,[[],["weighted",3]]],[3,"Weighted","","The return type from <code>weighted()</code>.",null,null],[3,"BoolValueTree","","The <code>ValueTree</code> to shrink booleans to false.",null,null],[0,"char","proptest","Strategies for generating <code>char</code> values.",null,null],[17,"DEFAULT_SPECIAL_CHARS","proptest::char","A default set of characters to consider as \\\"special\\\" …",null,null],[17,"DEFAULT_PREFERRED_RANGES","","A default sequence of ranges used preferentially when …",null,null],[5,"select_char","","Selects a random character the way <code>CharStrategy</code> does.",null,[[]]],[3,"CharStrategy","","Strategy for generating <code>char</code>s.",null,null],[11,"new","","Construct a new <code>CharStrategy</code> with the parameters it will …",7,[[["cow",4],["cow",4]]]],[11,"new_borrowed","","Same as <code>CharStrategy::new()</code> but using <code>Cow::Borrowed</code> for …",7,[[]]],[5,"any","","Creates a <code>CharStrategy</code> which picks from literally any …",null,[[],["charstrategy",3]]],[5,"range","","Creates a <code>CharStrategy</code> which selects characters within …",null,[[],["charstrategy",3]]],[5,"ranges","","Creates a <code>CharStrategy</code> which selects characters within …",null,[[["cow",4]],["charstrategy",3]]],[3,"CharValueTree","","The <code>ValueTree</code> corresponding to <code>CharStrategy</code>.",null,null],[0,"collection","proptest","Strategies for generating <code>std::collections</code> of values.",null,null],[3,"SizeRange","proptest::collection","The minimum and maximum range/bounds on the size of a …",null,null],[5,"size_range","","Creates a <code>SizeRange</code> from some value that is convertible …",null,[[],["sizerange",3]]],[11,"new","","Creates a <code>SizeBounds</code> from a <code>RangeInclusive<usize></code>.",8,[[["rangeinclusive",3]]]],[11,"with","","Merges self together with some other argument producing a …",8,[[]]],[11,"lift","","Merges self together with some other argument generated …",8,[[]]],[3,"VecStrategy","","Strategy to create <code>Vec</code>s with a length in a certain range.",null,null],[5,"vec","","Create a strategy to generate <code>Vec</code>s containing elements …",null,[[["strategy",8]],[["vecstrategy",3],["strategy",8]]]],[3,"VecDequeStrategy","","Strategy to create <code>VecDeque</code>s with a length in a certain …",null,null],[3,"VecDequeValueTree","","<code>ValueTree</code> corresponding to <code>VecDequeStrategy</code>.",null,null],[5,"vec_deque","","Create a strategy to generate <code>VecDeque</code>s containing …",null,[[["strategy",8]],[["strategy",8],["vecdequestrategy",3]]]],[3,"LinkedListStrategy","","Strategy to create <code>LinkedList</code>s with a length in a certain …",null,null],[3,"LinkedListValueTree","","<code>ValueTree</code> corresponding to <code>LinkedListStrategy</code>.",null,null],[5,"linked_list","","Create a strategy to generate <code>LinkedList</code>s containing …",null,[[["strategy",8]],[["linkedliststrategy",3],["strategy",8]]]],[3,"BinaryHeapStrategy","","Strategy to create <code>BinaryHeap</code>s with a length in a certain …",null,null],[3,"BinaryHeapValueTree","","<code>ValueTree</code> corresponding to <code>BinaryHeapStrategy</code>.",null,null],[5,"binary_heap","","Create a strategy to generate <code>BinaryHeap</code>s containing …",null,[[["strategy",8]],[["binaryheapstrategy",3],["strategy",8]]]],[3,"HashSetStrategy","","Strategy to create <code>HashSet</code>s with a length in a certain …",null,null],[3,"HashSetValueTree","","<code>ValueTree</code> corresponding to <code>HashSetStrategy</code>.",null,null],[5,"hash_set","","Create a strategy to generate <code>HashSet</code>s containing …",null,[[["strategy",8]],[["strategy",8],["hashsetstrategy",3]]]],[3,"BTreeSetStrategy","","Strategy to create <code>BTreeSet</code>s with a length in a certain …",null,null],[3,"BTreeSetValueTree","","<code>ValueTree</code> corresponding to <code>BTreeSetStrategy</code>.",null,null],[5,"btree_set","","Create a strategy to generate <code>BTreeSet</code>s containing …",null,[[["strategy",8]],[["btreesetstrategy",3],["strategy",8]]]],[3,"HashMapStrategy","","Strategy to create <code>HashMap</code>s with a length in a certain …",null,null],[3,"HashMapValueTree","","<code>ValueTree</code> corresponding to <code>HashMapStrategy</code>.",null,null],[5,"hash_map","","Create a strategy to generate <code>HashMap</code>s containing keys …",null,[[["strategy",8]],[["strategy",8],["hashmapstrategy",3]]]],[3,"BTreeMapStrategy","","Strategy to create <code>BTreeMap</code>s with a length in a certain …",null,null],[3,"BTreeMapValueTree","","<code>ValueTree</code> corresponding to <code>BTreeMapStrategy</code>.",null,null],[5,"btree_map","","Create a strategy to generate <code>BTreeMap</code>s containing keys …",null,[[["strategy",8]],[["btreemapstrategy",3],["strategy",8]]]],[3,"VecValueTree","","<code>ValueTree</code> corresponding to <code>VecStrategy</code>.",null,null],[0,"num","proptest","Strategies to generate numeric values (as opposed to …",null,null],[0,"i8","proptest::num","",null,null],[3,"Any","proptest::num::i8","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",9,[[]]],[0,"i16","proptest::num","",null,null],[3,"Any","proptest::num::i16","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",10,[[]]],[0,"i32","proptest::num","",null,null],[3,"Any","proptest::num::i32","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",11,[[]]],[0,"i64","proptest::num","",null,null],[3,"Any","proptest::num::i64","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",12,[[]]],[0,"i128","proptest::num","",null,null],[3,"Any","proptest::num::i128","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",13,[[]]],[0,"isize","proptest::num","",null,null],[3,"Any","proptest::num::isize","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",14,[[]]],[0,"u8","proptest::num","",null,null],[3,"Any","proptest::num::u8","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",15,[[]]],[11,"new_above","","Creates a new binary searcher which will not search below …",15,[[]]],[0,"u16","proptest::num","",null,null],[3,"Any","proptest::num::u16","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",16,[[]]],[11,"new_above","","Creates a new binary searcher which will not search below …",16,[[]]],[0,"u32","proptest::num","",null,null],[3,"Any","proptest::num::u32","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",17,[[]]],[11,"new_above","","Creates a new binary searcher which will not search below …",17,[[]]],[0,"u64","proptest::num","",null,null],[3,"Any","proptest::num::u64","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",18,[[]]],[11,"new_above","","Creates a new binary searcher which will not search below …",18,[[]]],[0,"u128","proptest::num","",null,null],[3,"Any","proptest::num::u128","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",19,[[]]],[11,"new_above","","Creates a new binary searcher which will not search below …",19,[[]]],[0,"usize","proptest::num","",null,null],[3,"Any","proptest::num::usize","Type of the <code>ANY</code> constant.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, …",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",20,[[]]],[11,"new_above","","Creates a new binary searcher which will not search below …",20,[[]]],[0,"f32","proptest::num","",null,null],[3,"Any","proptest::num::f32","Strategies which produce floating-point values from …",null,null],[17,"POSITIVE","","Generates positive floats",null,null],[17,"NEGATIVE","","Generates negative floats.",null,null],[17,"NORMAL","","Generates \\\"normal\\\" floats.",null,null],[17,"SUBNORMAL","","Generates subnormal floats.",null,null],[17,"ZERO","","Generates zero-valued floats.",null,null],[17,"INFINITE","","Generates infinity floats.",null,null],[17,"QUIET_NAN","","Generates \\\"Quiet NaN\\\" floats.",null,null],[17,"SIGNALING_NAN","","Generates \\\"Signaling NaN\\\" floats if allowed by the …",null,null],[17,"ANY","","Generates literally arbitrary floating-point values, …",null,null],[3,"BinarySearch","","Shrinks a float towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",21,[[]]],[0,"f64","proptest::num","",null,null],[3,"Any","proptest::num::f64","Strategies which produce floating-point values from …",null,null],[17,"POSITIVE","","Generates positive floats",null,null],[17,"NEGATIVE","","Generates negative floats.",null,null],[17,"NORMAL","","Generates \\\"normal\\\" floats.",null,null],[17,"SUBNORMAL","","Generates subnormal floats.",null,null],[17,"ZERO","","Generates zero-valued floats.",null,null],[17,"INFINITE","","Generates infinity floats.",null,null],[17,"QUIET_NAN","","Generates \\\"Quiet NaN\\\" floats.",null,null],[17,"SIGNALING_NAN","","Generates \\\"Signaling NaN\\\" floats if allowed by the …",null,null],[17,"ANY","","Generates literally arbitrary floating-point values, …",null,null],[3,"BinarySearch","","Shrinks a float towards 0, using binary search to find …",null,null],[11,"new","","Creates a new binary searcher starting at the given value.",22,[[]]],[0,"strategy","proptest","Defines the core traits used by Proptest.",null,null],[0,"statics","proptest::strategy","Modified versions of the normal strategy combinators …",null,null],[8,"FilterFn","proptest::strategy::statics","Essentially <code>Fn (&T) -> bool</code>.",null,null],[10,"apply","","Test whether <code>t</code> passes the filter.",23,[[]]],[3,"Filter","","Static version of <code>strategy::Filter</code>.",null,null],[11,"new","","Adapt strategy <code>source</code> to reject values which do not pass …",24,[[["reason",3]]]],[8,"MapFn","","Essentially <code>Fn (T) -> Output</code>.",null,null],[16,"Output","","",25,null],[10,"apply","","Map <code>T</code> to <code>Output</code>.",25,[[]]],[3,"Map","","Static version of <code>strategy::Map</code>.",null,null],[11,"new","","Adapt strategy <code>source</code> by applying <code>fun</code> to values it …",26,[[]]],[3,"Filter","proptest::strategy","<code>Strategy</code> and <code>ValueTree</code> filter adaptor.",null,null],[3,"FilterMap","","<code>Strategy</code> and <code>ValueTree</code> filter_map adaptor.",null,null],[3,"FilterMapValueTree","","<code>ValueTree</code> corresponding to <code>FilterMap</code>.",null,null],[3,"Flatten","","Adaptor that flattens a <code>Strategy</code> which produces other …",null,null],[3,"FlattenValueTree","","The <code>ValueTree</code> produced by <code>Flatten</code>.",null,null],[3,"IndFlatten","","Similar to <code>Flatten</code>, but does not shrink the input …",null,null],[3,"IndFlattenMap","","Similar to <code>Map</code> plus <code>Flatten</code>, but does not shrink the …",null,null],[3,"Fuse","","Adaptor for <code>Strategy</code> and <code>ValueTree</code> which guards <code>simplify()</code>…",null,null],[3,"Just","","A <code>Strategy</code> which always produces a single value value and …",null,null],[12,"0","","The value produced by this strategy.",27,null],[3,"LazyJust","","A <code>Strategy</code> which always produces a single value value and …",null,null],[6,"LazyJustFn","","Shorthand for <code>LazyJust<T, fn () -> T></code>.",null,null],[3,"LazyValueTree","","Represents a value tree that is initialized on the first …",null,null],[3,"LazyValueTree","","Represents a value tree that is initialized on the first …",null,null],[3,"Map","","<code>Strategy</code> and <code>ValueTree</code> map adaptor.",null,null],[3,"MapInto","","<code>Strategy</code> and <code>ValueTree</code> map into adaptor.",null,null],[3,"Perturb","","<code>Strategy</code> perturbation adaptor.",null,null],[3,"PerturbValueTree","","<code>ValueTree</code> perturbation adaptor.",null,null],[3,"Recursive","","Return type from <code>Strategy::prop_recursive()</code>.",null,null],[3,"Shuffle","","<code>Strategy</code> shuffle adaptor.",null,null],[8,"Shuffleable","","A value which can be used with the <code>prop_shuffle</code> …",null,null],[10,"shuffle_len","","Return the length of this collection.",28,[[]]],[10,"shuffle_swap","","Swap the elements at the given indices.",28,[[]]],[3,"ShuffleValueTree","","<code>ValueTree</code> shuffling adaptor.",null,null],[6,"NewTree","","A new <code>ValueTree</code> from a <code>Strategy</code> when <code>Ok</code> or otherwise <code>Err</code> …",null,null],[8,"Strategy","","A strategy for producing arbitrary values of a given type.",null,null],[16,"Tree","","The value tree generated by this <code>Strategy</code>.",29,null],[16,"Value","","The type of value used by functions under test generated …",29,null],[10,"new_tree","","Generate a new value tree from the given runner.",29,[[["testrunner",3]],["newtree",6]]],[11,"prop_map","","Returns a strategy which produces values transformed by …",29,[[["fn",8]],[["map",3],["fn",8]]]],[11,"prop_map_into","","Returns a strategy which produces values of type <code>O</code> by …",29,[[],[["mapinto",3],["debug",8]]]],[11,"prop_perturb","","Returns a strategy which produces values transformed by …",29,[[["fn",8]],[["perturb",3],["fn",8]]]],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies …",29,[[["fn",8]],[["map",3],["flatten",3]]]],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies …",29,[[["fn",8]],[["map",3],["indflatten",3]]]],[11,"prop_ind_flat_map2","","Similar to <code>prop_ind_flat_map()</code>, but produces 2-tuples …",29,[[["fn",8]],[["indflattenmap",3],["fn",8]]]],[11,"prop_filter","","Returns a strategy which only produces values accepted by …",29,[[["fn",8],["reason",3],["into",8]],[["fn",8],["filter",3]]]],[11,"prop_filter_map","","Returns a strategy which only produces transformed values …",29,[[["fn",8]],[["fn",8],["filtermap",3]]]],[11,"prop_union","","Returns a strategy which picks uniformly from <code>self</code> and …",29,[[],["union",3]]],[11,"prop_recursive","","Generate a recursive structure with <code>self</code> items as leaves.",29,[[["fn",8]],[["fn",8],["recursive",3]]]],[11,"prop_shuffle","","Shuffle the contents of the values produced by this …",29,[[],["shuffle",3]]],[11,"boxed","","Erases the type of this <code>Strategy</code> so it can be passed …",29,[[],["boxedstrategy",3]]],[11,"sboxed","","Erases the type of this <code>Strategy</code> so it can be passed …",29,[[],["sboxedstrategy",3]]],[11,"no_shrink","","Wraps this strategy to prevent values from being subject …",29,[[],["noshrink",3]]],[8,"ValueTree","","A generated value and its associated shrinker.",null,null],[16,"Value","","The type of the value produced by this <code>ValueTree</code>.",30,null],[10,"current","","Returns the current value.",30,[[]]],[10,"simplify","","Attempts to simplify the current value. Notionally, this …",30,[[]]],[10,"complicate","","Attempts to partially undo the last simplification. …",30,[[]]],[3,"NoShrink","","Wraps a <code>Strategy</code> or <code>ValueTree</code> to suppress shrinking of …",null,null],[3,"BoxedStrategy","","A boxed <code>Strategy</code> trait object as produced by …",null,null],[3,"SBoxedStrategy","","A boxed <code>Strategy</code> trait object which is also <code>Sync</code> and <code>Send</code>…",null,null],[3,"CheckStrategySanityOptions","","Options passed to <code>check_strategy_sanity()</code>.",null,null],[12,"strict_complicate_after_simplify","","If true (the default), require that <code>complicate()</code> return …",31,null],[12,"error_on_local_rejects","","If true, cause local rejects to return an error instead …",31,null],[5,"check_strategy_sanity","","Run some tests on the given <code>Strategy</code> to ensure that it …",null,[[["strategy",8],["option",4],["checkstrategysanityoptions",3]]]],[6,"W","","A <strong>relative</strong> <code>weight</code> of a particular <code>Strategy</code> corresponding …",null,null],[6,"WA","","A <strong>relative</strong> <code>weight</code> of a particular <code>Strategy</code> corresponding …",null,null],[3,"Union","","A <code>Strategy</code> which picks from one of several delegate …",null,null],[3,"UnionValueTree","","<code>ValueTree</code> corresponding to <code>Union</code>.",null,null],[3,"TupleUnion","","Similar to <code>Union</code>, but internally uses a tuple to hold the …",null,null],[3,"TupleUnionValueTree","","<code>ValueTree</code> type produced by <code>TupleUnion</code>.",null,null],[5,"float_to_weight","","Convert a floating-point weight in the range (0.0,1.0) to …",null,[[]]],[0,"test_runner","proptest","State and functions for running proptest tests.",null,null],[3,"Config","proptest::test_runner","Configuration for how a proptest test should be run.",null,null],[12,"cases","","The number of successful test cases that must execute for …",32,null],[12,"max_local_rejects","","The maximum number of individual inputs that may be …",32,null],[12,"max_global_rejects","","The maximum number of combined inputs that may be …",32,null],[12,"max_flat_map_regens","","The maximum number of times all <code>Flatten</code> combinators will …",32,null],[12,"failure_persistence","","Indicates whether and how to persist failed test results.",32,null],[12,"source_file","","File location of the current test, relevant for …",32,null],[12,"test_name","","The fully-qualified name of the test being run, as would …",32,null],[12,"fork","","If true, tests are run in a subprocess.",32,null],[12,"timeout","","If non-zero, tests are run in a subprocess and each …",32,null],[12,"max_shrink_time","","If non-zero, give up the shrinking process after this …",32,null],[12,"max_shrink_iters","","Give up on shrinking if more than this number of …",32,null],[12,"result_cache","","A function to create new result caches.",32,null],[12,"verbose","","Set to non-zero values to cause proptest to emit …",32,null],[12,"rng_algorithm","","The RNG algorithm to use when not using a user-provided …",32,null],[4,"TestCaseError","","Errors which can be returned from test cases to indicate …",null,null],[13,"Reject","","The input was not valid for the test case. This does not …",33,null],[13,"Fail","","The code under test failed the test.",33,null],[6,"TestCaseResult","","Convenience for the type returned by test cases.",null,null],[4,"TestError","","A failure state from running test cases for a single test.",null,null],[13,"Abort","","The test was aborted for the given reason, for example, …",34,null],[13,"Fail","","A failing test case was found. The string indicates where …",34,null],[4,"FileFailurePersistence","","Describes how failing test cases are persisted.",null,null],[13,"Off","","Completely disables persistence of failing test cases.",35,null],[13,"SourceParallel","","The path given to <code>TestRunner::set_source_file()</code> is …",35,null],[13,"WithSource","","The path given to <code>TestRunner::set_source_file()</code> is …",35,null],[13,"Direct","","The string given in this option is directly used as a …",35,null],[3,"MapFailurePersistence","","Failure persistence option that loads and saves seeds in …",null,null],[12,"map","","Backing map, keyed by source_file.",36,null],[3,"PersistedSeed","","Opaque struct representing a seed which can be persisted.",null,null],[8,"FailurePersistence","","Provides external persistence for historical test …",null,null],[11,"load_persisted_failures2","","Supply seeds associated with the given <code>source_file</code> that …",37,[[["option",4]],[["persistedseed",3],["vec",3]]]],[11,"load_persisted_failures","","Use <code>load_persisted_failures2</code> instead.",37,[[["option",4]],["vec",3]]],[11,"save_persisted_failure2","","Store a new failure-generating seed associated with the …",37,[[["persistedseed",3],["option",4],["debug",8]]]],[11,"save_persisted_failure","","Use <code>save_persisted_failures2</code> instead.",37,[[["option",4],["debug",8]]]],[10,"box_clone","","Delegate method for producing a trait object usable with …",37,[[],[["box",3],["failurepersistence",8]]]],[10,"eq","","Equality testing delegate required due to constraints of …",37,[[["failurepersistence",8]]]],[10,"as_any","","Assistant method for trait object comparison.",37,[[],["any",8]]],[3,"Reason","","The reason for why something, such as a generated value, …",null,null],[3,"ResultCacheKey","","A key used for the result cache.",null,null],[8,"ResultCache","","An object which can cache the outcomes of tests.",null,null],[10,"key","","Convert the given cache key into a <code>u64</code> representing that …",38,[[["resultcachekey",3]]]],[10,"put","","Save <code>result</code> as the outcome associated with the test input …",38,[[["testcaseresult",6]]]],[10,"get","","If <code>put()</code> has been called with a semantically equivalent …",38,[[],[["testcaseresult",6],["option",4]]]],[5,"basic_result_cache","","A basic result cache.",null,[[],[["resultcache",8],["box",3]]]],[5,"noop_result_cache","","A result cache that does nothing.",null,[[],[["resultcache",8],["box",3]]]],[4,"RngAlgorithm","","Identifies a particular RNG algorithm supported by …",null,null],[13,"XorShift","","The XorShift algorithm. This was the default up through …",39,null],[13,"ChaCha","","The ChaCha algorithm. This became the default with …",39,null],[13,"PassThrough","","This is not an actual RNG algorithm, but instead returns …",39,null],[13,"Recorder","","This is equivalent to the <code>ChaCha</code> RNG, with the addition …",39,null],[3,"TestRng","","Proptest\'s random number generator.",null,null],[3,"TestRunner","","State used when running a proptest test.",null,null],[0,"tuple","proptest","Support for combining strategies into tuples.",null,null],[3,"TupleValueTree","proptest::tuple","Common <code>ValueTree</code> implementation for all tuple strategies.",null,null],[11,"new","","Create a new <code>TupleValueTree</code> wrapping <code>inner</code>.",40,[[]]],[0,"option","proptest","Strategies for generating <code>std::Option</code> values.",null,null],[5,"prob","proptest::option","Creates a <code>Probability</code> from some value that is convertible …",null,[[],["probability",3]]],[3,"Probability","","A probability in the range <code>[0.0, 1.0]</code> with a default of …",null,null],[3,"OptionStrategy","","Strategy which generates <code>Option</code> values whose inner <code>Some</code> …",null,null],[3,"OptionValueTree","","<code>ValueTree</code> type corresponding to <code>OptionStrategy</code>.",null,null],[5,"of","","Return a strategy producing <code>Optional</code> values wrapping …",null,[[["strategy",8]],[["optionstrategy",3],["strategy",8]]]],[5,"weighted","","Return a strategy producing <code>Optional</code> values wrapping …",null,[[["strategy",8]],[["optionstrategy",3],["strategy",8]]]],[0,"result","proptest","Strategies for combining delegate strategies into …",null,null],[3,"MaybeOk","proptest::result","Strategy which generates <code>Result</code>s using <code>Ok</code> and <code>Err</code> values …",null,null],[3,"MaybeOkValueTree","","<code>ValueTree</code> type corresponding to <code>MaybeOk</code>.",null,null],[3,"MaybeErr","","Strategy which generates <code>Result</code>s using <code>Ok</code> and <code>Err</code> values …",null,null],[3,"MaybeErrValueTree","","<code>ValueTree</code> type corresponding to <code>MaybeErr</code>.",null,null],[5,"maybe_ok","","Create a strategy for <code>Result</code>s where <code>Ok</code> values are taken …",null,[[["strategy",8]],[["strategy",8],["maybeok",3]]]],[5,"maybe_ok_weighted","","Create a strategy for <code>Result</code>s where <code>Ok</code> values are taken …",null,[[["strategy",8]],[["strategy",8],["maybeok",3]]]],[5,"maybe_err","","Create a strategy for <code>Result</code>s where <code>Ok</code> values are taken …",null,[[["strategy",8]],[["strategy",8],["maybeerr",3]]]],[5,"maybe_err_weighted","","Create a strategy for <code>Result</code>s where <code>Ok</code> values are taken …",null,[[["strategy",8]],[["strategy",8],["maybeerr",3]]]],[0,"sample","proptest","Strategies for generating values by taking samples of …",null,null],[5,"subsequence","proptest::sample","Sample subsequences whose size are within <code>size</code> from the …",null,[[],[["subsequence",3],["clone",8]]]],[3,"Subsequence","","Strategy to generate <code>Vec</code>s by sampling a subsequence from …",null,null],[3,"SubsequenceValueTree","","<code>ValueTree</code> type for <code>Subsequence</code>.",null,null],[3,"Select","","Strategy to produce one value from a fixed collection of …",null,null],[3,"SelectValueTree","","<code>ValueTree</code> corresponding to <code>Select</code>.",null,null],[5,"select","","Create a strategy which uniformly selects one value from …",null,[[],[["debug",8],["clone",8],["select",3]]]],[3,"Index","","A stand-in for an index into a slice or similar …",null,null],[11,"index","","Return the real index that would be used to index a …",41,[[]]],[11,"get","","Return a reference to the element in <code>slice</code> that this <code>Index</code>…",41,[[]]],[11,"get_mut","","Return a mutable reference to the element in <code>slice</code> that …",41,[[]]],[3,"IndexStrategy","","Strategy to create <code>Index</code>es.",null,null],[3,"IndexValueTree","","<code>ValueTree</code> corresponding to <code>IndexStrategy</code>.",null,null],[3,"Selector","","A value for picking random values out of iterators.",null,null],[3,"SelectorStrategy","","Strategy to create <code>Selector</code>s.",null,null],[3,"SelectorValueTree","","<code>ValueTree</code> corresponding to <code>SelectorStrategy</code>.",null,null],[11,"select","","Pick a random element from iterable <code>it</code>.",42,[[["intoiterator",8]]]],[11,"try_select","","Pick a random element from iterable <code>it</code>.",42,[[["intoiterator",8]],["option",4]]],[0,"string","proptest","Strategies for generating strings and byte strings from …",null,null],[3,"StringParam","proptest::string","Wraps the regex that forms the <code>Strategy</code> for <code>String</code> so …",null,null],[4,"Error","","Errors which may occur when preparing a regular …",null,null],[13,"RegexSyntax","","The string passed as the regex was not syntactically …",43,null],[13,"UnsupportedRegex","","The regex was syntactically valid, but contains elements …",43,null],[3,"RegexGeneratorStrategy","","Strategy which generates values (i.e., <code>String</code> or <code>Vec<u8></code>) …",null,null],[3,"RegexGeneratorValueTree","","<code>ValueTree</code> corresponding to <code>RegexGeneratorStrategy</code>.",null,null],[5,"string_regex","","Creates a strategy which generates strings matching the …",null,[[],[["regexgeneratorstrategy",3],["error",4],["result",4]]]],[5,"string_regex_parsed","","Like <code>string_regex()</code>, but allows providing a pre-parsed …",null,[[["hir",3]],[["regexgeneratorstrategy",3],["error",4],["result",4]]]],[5,"bytes_regex","","Creates a strategy which generates byte strings matching …",null,[[],[["regexgeneratorstrategy",3],["error",4],["result",4]]]],[5,"bytes_regex_parsed","","Like <code>bytes_regex()</code>, but allows providing a pre-parsed …",null,[[["hir",3]],[["regexgeneratorstrategy",3],["error",4],["result",4]]]],[0,"prelude","proptest","Re-exports the most commonly-needed APIs of proptest.",null,null],[8,"Rng","proptest::prelude","An automatically-implemented extension trait on [<code>RngCore</code>] …",null,null],[11,"gen","","Return a random value supporting the <code>Standard</code> …",44,[[]]],[11,"gen_range","","Generate a random value in the given range.",44,[[]]],[11,"sample","","Sample a new value, using the given distribution.",44,[[]]],[11,"sample_iter","","Create an iterator that generates values using the given …",44,[[],["distiter",3]]],[11,"fill","","Fill any type implementing [<code>Fill</code>] with random data",44,[[]]],[11,"try_fill","","Fill any type implementing <code>Fill</code> with random data",44,[[],[["error",3],["result",4]]]],[11,"gen_bool","","Return a bool with a probability <code>p</code> of being true.",44,[[]]],[11,"gen_ratio","","Return a bool with a probability of <code>numerator/denominator</code> …",44,[[]]],[8,"RngCore","","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random <code>u32</code>.",45,[[]]],[10,"next_u64","","Return the next random <code>u64</code>.",45,[[]]],[10,"fill_bytes","","Fill <code>dest</code> with random data.",45,[[]]],[10,"try_fill_bytes","","Fill <code>dest</code> entirely with random data.",45,[[],[["error",3],["result",4]]]],[0,"prop","","Re-exports the entire public API of proptest so that an …",null,null],[5,"any","","Generates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code>. …",null,[[],[["strategyfor",6],["arbitrary",8]]]],[5,"any_with","","Generates a <code>Strategy</code> producing <code>Arbitrary</code> values of <code>A</code> with …",null,[[["arbitrary",8],["paramsfor",6]],[["strategyfor",6],["arbitrary",8]]]],[8,"Arbitrary","","Arbitrary determines a canonical <code>Strategy</code> for the …",null,null],[16,"Parameters","","The type of parameters that <code>arbitrary_with</code> accepts for …",2,null],[11,"arbitrary","proptest::arbitrary","Generates a <code>Strategy</code> for producing arbitrary values of …",2,[[]]],[10,"arbitrary_with","proptest::prelude","Generates a <code>Strategy</code> for producing arbitrary values of …",2,[[]]],[16,"Strategy","","The type of <code>Strategy</code> used to generate values of type <code>Self</code>.",2,null],[3,"BoxedStrategy","","A boxed <code>Strategy</code> trait object as produced by …",null,null],[3,"Just","","A <code>Strategy</code> which always produces a single value value and …",null,null],[12,"0","","The value produced by this strategy.",27,null],[3,"SBoxedStrategy","","A boxed <code>Strategy</code> trait object which is also <code>Sync</code> and <code>Send</code>…",null,null],[8,"Strategy","","A strategy for producing arbitrary values of a given type.",null,null],[16,"Tree","","The value tree generated by this <code>Strategy</code>.",29,null],[16,"Value","","The type of value used by functions under test generated …",29,null],[10,"new_tree","","Generate a new value tree from the given runner.",29,[[["testrunner",3]],["newtree",6]]],[11,"prop_map","proptest::strategy","Returns a strategy which produces values transformed by …",29,[[["fn",8]],[["map",3],["fn",8]]]],[11,"prop_map_into","","Returns a strategy which produces values of type <code>O</code> by …",29,[[],[["mapinto",3],["debug",8]]]],[11,"prop_perturb","","Returns a strategy which produces values transformed by …",29,[[["fn",8]],[["perturb",3],["fn",8]]]],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies …",29,[[["fn",8]],[["map",3],["flatten",3]]]],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies …",29,[[["fn",8]],[["map",3],["indflatten",3]]]],[11,"prop_ind_flat_map2","","Similar to <code>prop_ind_flat_map()</code>, but produces 2-tuples …",29,[[["fn",8]],[["indflattenmap",3],["fn",8]]]],[11,"prop_filter","","Returns a strategy which only produces values accepted by …",29,[[["fn",8],["reason",3],["into",8]],[["fn",8],["filter",3]]]],[11,"prop_filter_map","","Returns a strategy which only produces transformed values …",29,[[["fn",8]],[["fn",8],["filtermap",3]]]],[11,"prop_union","","Returns a strategy which picks uniformly from <code>self</code> and …",29,[[],["union",3]]],[11,"prop_recursive","","Generate a recursive structure with <code>self</code> items as leaves.",29,[[["fn",8]],[["fn",8],["recursive",3]]]],[11,"prop_shuffle","","Shuffle the contents of the values produced by this …",29,[[],["shuffle",3]]],[11,"boxed","","Erases the type of this <code>Strategy</code> so it can be passed …",29,[[],["boxedstrategy",3]]],[11,"sboxed","","Erases the type of this <code>Strategy</code> so it can be passed …",29,[[],["sboxedstrategy",3]]],[11,"no_shrink","","Wraps this strategy to prevent values from being subject …",29,[[],["noshrink",3]]],[3,"ProptestConfig","proptest::prelude","Configuration for how a proptest test should be run.",null,null],[12,"cases","","The number of successful test cases that must execute for …",32,null],[12,"max_local_rejects","","The maximum number of individual inputs that may be …",32,null],[12,"max_global_rejects","","The maximum number of combined inputs that may be …",32,null],[12,"max_flat_map_regens","","The maximum number of times all <code>Flatten</code> combinators will …",32,null],[12,"failure_persistence","","Indicates whether and how to persist failed test results.",32,null],[12,"source_file","","File location of the current test, relevant for …",32,null],[12,"test_name","","The fully-qualified name of the test being run, as would …",32,null],[12,"fork","","If true, tests are run in a subprocess.",32,null],[12,"timeout","","If non-zero, tests are run in a subprocess and each …",32,null],[12,"max_shrink_time","","If non-zero, give up the shrinking process after this …",32,null],[12,"max_shrink_iters","","Give up on shrinking if more than this number of …",32,null],[12,"result_cache","","A function to create new result caches.",32,null],[12,"verbose","","Set to non-zero values to cause proptest to emit …",32,null],[12,"rng_algorithm","","The RNG algorithm to use when not using a user-provided …",32,null],[4,"TestCaseError","","Errors which can be returned from test cases to indicate …",null,null],[13,"Reject","","The input was not valid for the test case. This does not …",33,null],[13,"Fail","","The code under test failed the test.",33,null],[14,"proptest","proptest","Easily define <code>proptest</code> tests.",null,null],[14,"prop_assume","","Rejects the test input if assumptions are not met.",null,null],[14,"prop_oneof","","Produce a strategy which picks one of the listed choices.",null,null],[14,"prop_compose","","Convenience to define functions which produce new …",null,null],[14,"prop_assert","","Similar to <code>assert!</code> from std, but returns a test failure …",null,null],[14,"prop_assert_eq","","Similar to <code>assert_eq!</code> from std, but returns a test …",null,null],[14,"prop_assert_ne","","Similar to <code>assert_ne!</code> from std, but returns a test …",null,null],[11,"from","proptest::array","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"vzip","","",3,[[]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"vzip","","",46,[[]]],[11,"from","proptest::bits","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"vzip","","",6,[[]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"vzip","","",47,[[]]],[11,"from","proptest::bool","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"vzip","","",50,[[]]],[11,"from","proptest::char","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"vzip","","",7,[[]]],[11,"from","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"vzip","","",51,[[]]],[11,"from","proptest::collection","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"vzip","","",8,[[]]],[11,"from","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"vzip","","",57,[[]]],[11,"from","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"vzip","","",60,[[]]],[11,"from","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"vzip","","",62,[[]]],[11,"from","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"vzip","","",63,[[]]],[11,"from","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"vzip","","",67,[[]]],[11,"from","proptest::num::i8","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"into","","",68,[[]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"vzip","","",68,[[]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"vzip","","",9,[[]]],[11,"from","proptest::num::i16","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"vzip","","",69,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"vzip","","",10,[[]]],[11,"from","proptest::num::i32","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"into","","",70,[[]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"vzip","","",70,[[]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"vzip","","",11,[[]]],[11,"from","proptest::num::i64","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"vzip","","",71,[[]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"vzip","","",12,[[]]],[11,"from","proptest::num::i128","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"vzip","","",72,[[]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"vzip","","",13,[[]]],[11,"from","proptest::num::isize","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"vzip","","",73,[[]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"vzip","","",14,[[]]],[11,"from","proptest::num::u8","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"into","","",74,[[]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"vzip","","",74,[[]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"vzip","","",15,[[]]],[11,"from","proptest::num::u16","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"vzip","","",75,[[]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"vzip","","",16,[[]]],[11,"from","proptest::num::u32","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"vzip","","",76,[[]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"vzip","","",17,[[]]],[11,"from","proptest::num::u64","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"vzip","","",77,[[]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"vzip","","",18,[[]]],[11,"from","proptest::num::u128","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"vzip","","",78,[[]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"vzip","","",19,[[]]],[11,"from","proptest::num::usize","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"into","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"vzip","","",79,[[]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"vzip","","",20,[[]]],[11,"from","proptest::num::f32","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"into","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"vzip","","",80,[[]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"vzip","","",21,[[]]],[11,"from","proptest::num::f64","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"into","","",81,[[]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"vzip","","",81,[[]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"vzip","","",22,[[]]],[11,"from","proptest::strategy","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"into","","",82,[[]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"vzip","","",82,[[]]],[11,"from","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"into","","",83,[[]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"vzip","","",83,[[]]],[11,"from","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"into","","",84,[[]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"vzip","","",84,[[]]],[11,"from","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"into","","",85,[[]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"vzip","","",85,[[]]],[11,"from","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"into","","",86,[[]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"vzip","","",86,[[]]],[11,"from","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"into","","",87,[[]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"vzip","","",87,[[]]],[11,"from","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"into","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"into","","",89,[[]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"vzip","","",89,[[]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"vzip","","",27,[[]]],[11,"from","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"into","","",90,[[]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"vzip","","",90,[[]]],[11,"from","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"into","","",91,[[]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"vzip","","",91,[[]]],[11,"from","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"into","","",92,[[]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"vzip","","",92,[[]]],[11,"from","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"into","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"vzip","","",93,[[]]],[11,"from","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"into","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"vzip","","",94,[[]]],[11,"from","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"into","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"vzip","","",95,[[]]],[11,"from","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"into","","",96,[[]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"vzip","","",96,[[]]],[11,"from","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"into","","",97,[[]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"vzip","","",97,[[]]],[11,"from","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"into","","",98,[[]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"vzip","","",98,[[]]],[11,"from","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"into","","",99,[[]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"vzip","","",99,[[]]],[11,"from","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"into","","",100,[[]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"vzip","","",100,[[]]],[11,"from","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"into","","",101,[[]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"vzip","","",101,[[]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"vzip","","",31,[[]]],[11,"from","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"into","","",102,[[]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"vzip","","",102,[[]]],[11,"from","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"into","","",103,[[]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"vzip","","",103,[[]]],[11,"from","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"into","","",104,[[]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"vzip","","",104,[[]]],[11,"from","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"into","","",105,[[]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"vzip","","",105,[[]]],[11,"from","proptest::strategy::statics","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"vzip","","",24,[[]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"vzip","","",26,[[]]],[11,"from","proptest::test_runner","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"vzip","","",36,[[]]],[11,"from","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"into","","",106,[[]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"to_string","","",106,[[],["string",3]]],[11,"vzip","","",106,[[]]],[11,"from","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"into","","",107,[[]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"to_string","","",107,[[],["string",3]]],[11,"vzip","","",107,[[]]],[11,"from","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"into","","",108,[[]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"into","","",109,[[]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"vzip","","",109,[[]]],[11,"from","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"into","","",110,[[]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"to_string","","",110,[[],["string",3]]],[11,"vzip","","",110,[[]]],[11,"from","proptest::tuple","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"vzip","","",40,[[]]],[11,"from","proptest::option","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"into","","",111,[[]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"vzip","","",111,[[]]],[11,"from","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"into","","",112,[[]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"vzip","","",112,[[]]],[11,"from","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"into","","",113,[[]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"vzip","","",113,[[]]],[11,"from","proptest::result","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"into","","",114,[[]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"vzip","","",114,[[]]],[11,"from","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"into","","",115,[[]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"vzip","","",115,[[]]],[11,"from","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"into","","",116,[[]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"vzip","","",116,[[]]],[11,"from","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"into","","",117,[[]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"vzip","","",117,[[]]],[11,"from","proptest::sample","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"into","","",118,[[]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"vzip","","",118,[[]]],[11,"from","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"into","","",119,[[]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"vzip","","",119,[[]]],[11,"from","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"into","","",120,[[]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"vzip","","",120,[[]]],[11,"from","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"into","","",121,[[]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"vzip","","",121,[[]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"vzip","","",41,[[]]],[11,"from","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"into","","",122,[[]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"vzip","","",122,[[]]],[11,"from","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"into","","",123,[[]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"vzip","","",123,[[]]],[11,"from","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"vzip","","",42,[[]]],[11,"from","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"into","","",124,[[]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"vzip","","",124,[[]]],[11,"from","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"into","","",125,[[]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"vzip","","",125,[[]]],[11,"from","proptest::string","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"to_string","","",43,[[],["string",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"into","","",126,[[]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"vzip","","",126,[[]]],[11,"from","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"into","","",127,[[]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"vzip","","",127,[[]]],[11,"from","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"into","","",128,[[]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"vzip","","",128,[[]]],[11,"read","proptest::prelude","",45,[[],[["result",4],["error",3]]]],[11,"arbitrary_with","proptest::sample","",41,[[],["indexstrategy",3]]],[11,"arbitrary_with","","",42,[[],["selectorstrategy",3]]],[11,"arbitrary_with","proptest::option","",111,[[]]],[11,"arbitrary_with","proptest::collection","",8,[[]]],[11,"new_tree","proptest::array","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",3,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::bits","",5,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",6,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::bool","",48,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",49,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::char","",7,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::collection","",53,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",55,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",57,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",59,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",61,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",63,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",65,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",52,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::i8","",68,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::i16","",69,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::i32","",70,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::i64","",71,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::i128","",72,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::isize","",73,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::u8","",74,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::u16","",75,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::u32","",76,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::u64","",77,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::u128","",78,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::usize","",79,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::f32","",80,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::num::f64","",81,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::strategy","",82,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",83,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",85,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",87,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",88,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",89,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",27,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",90,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",92,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",93,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",94,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",96,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",97,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",99,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",100,[[["testrunner",3]],["newtree",6]]],[11,"boxed","","",100,[[],["boxedstrategy",3]]],[11,"new_tree","","",101,[[["testrunner",3]],["newtree",6]]],[11,"sboxed","","",101,[[],["sboxedstrategy",3]]],[11,"boxed","","",101,[[],["boxedstrategy",3]]],[11,"new_tree","","",102,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",104,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::strategy::statics","",24,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",26,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::option","",112,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::result","",114,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",116,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::sample","",118,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",120,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",122,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","","",124,[[["testrunner",3]],["newtree",6]]],[11,"new_tree","proptest::string","",127,[[["testrunner",3]],["newtree",6]]],[11,"current","proptest::array","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","","",46,[[]]],[11,"simplify","","",46,[[]]],[11,"complicate","","",46,[[]]],[11,"current","proptest::bits","",47,[[]]],[11,"simplify","","",47,[[]]],[11,"complicate","","",47,[[]]],[11,"current","proptest::bool","",50,[[]]],[11,"simplify","","",50,[[]]],[11,"complicate","","",50,[[]]],[11,"current","proptest::char","",51,[[]]],[11,"simplify","","",51,[[]]],[11,"complicate","","",51,[[]]],[11,"current","proptest::collection","",54,[[]]],[11,"simplify","","",54,[[]]],[11,"complicate","","",54,[[]]],[11,"current","","",56,[[]]],[11,"simplify","","",56,[[]]],[11,"complicate","","",56,[[]]],[11,"current","","",58,[[]]],[11,"simplify","","",58,[[]]],[11,"complicate","","",58,[[]]],[11,"current","","",60,[[]]],[11,"simplify","","",60,[[]]],[11,"complicate","","",60,[[]]],[11,"current","","",62,[[]]],[11,"simplify","","",62,[[]]],[11,"complicate","","",62,[[]]],[11,"current","","",64,[[]]],[11,"simplify","","",64,[[]]],[11,"complicate","","",64,[[]]],[11,"current","","",66,[[]]],[11,"simplify","","",66,[[]]],[11,"complicate","","",66,[[]]],[11,"current","","",67,[[],["vec",3]]],[11,"simplify","","",67,[[]]],[11,"complicate","","",67,[[]]],[11,"current","proptest::num::i8","",9,[[]]],[11,"simplify","","",9,[[]]],[11,"complicate","","",9,[[]]],[11,"current","proptest::num::i16","",10,[[]]],[11,"simplify","","",10,[[]]],[11,"complicate","","",10,[[]]],[11,"current","proptest::num::i32","",11,[[]]],[11,"simplify","","",11,[[]]],[11,"complicate","","",11,[[]]],[11,"current","proptest::num::i64","",12,[[]]],[11,"simplify","","",12,[[]]],[11,"complicate","","",12,[[]]],[11,"current","proptest::num::i128","",13,[[]]],[11,"simplify","","",13,[[]]],[11,"complicate","","",13,[[]]],[11,"current","proptest::num::isize","",14,[[]]],[11,"simplify","","",14,[[]]],[11,"complicate","","",14,[[]]],[11,"current","proptest::num::u8","",15,[[]]],[11,"simplify","","",15,[[]]],[11,"complicate","","",15,[[]]],[11,"current","proptest::num::u16","",16,[[]]],[11,"simplify","","",16,[[]]],[11,"complicate","","",16,[[]]],[11,"current","proptest::num::u32","",17,[[]]],[11,"simplify","","",17,[[]]],[11,"complicate","","",17,[[]]],[11,"current","proptest::num::u64","",18,[[]]],[11,"simplify","","",18,[[]]],[11,"complicate","","",18,[[]]],[11,"current","proptest::num::u128","",19,[[]]],[11,"simplify","","",19,[[]]],[11,"complicate","","",19,[[]]],[11,"current","proptest::num::usize","",20,[[]]],[11,"simplify","","",20,[[]]],[11,"complicate","","",20,[[]]],[11,"current","proptest::num::f32","",21,[[]]],[11,"simplify","","",21,[[]]],[11,"complicate","","",21,[[]]],[11,"current","proptest::num::f64","",22,[[]]],[11,"simplify","","",22,[[]]],[11,"complicate","","",22,[[]]],[11,"current","proptest::strategy","",82,[[]]],[11,"simplify","","",82,[[]]],[11,"complicate","","",82,[[]]],[11,"current","","",84,[[]]],[11,"simplify","","",84,[[]]],[11,"complicate","","",84,[[]]],[11,"current","","",86,[[]]],[11,"simplify","","",86,[[]]],[11,"complicate","","",86,[[]]],[11,"current","","",89,[[]]],[11,"simplify","","",89,[[]]],[11,"complicate","","",89,[[]]],[11,"simplify","","",27,[[]]],[11,"complicate","","",27,[[]]],[11,"current","","",27,[[]]],[11,"simplify","","",90,[[]]],[11,"complicate","","",90,[[]]],[11,"current","","",90,[[]]],[11,"current","","",92,[[]]],[11,"simplify","","",92,[[]]],[11,"complicate","","",92,[[]]],[11,"current","","",93,[[]]],[11,"simplify","","",93,[[]]],[11,"complicate","","",93,[[]]],[11,"current","","",95,[[]]],[11,"simplify","","",95,[[]]],[11,"complicate","","",95,[[]]],[11,"current","","",98,[[]]],[11,"simplify","","",98,[[]]],[11,"complicate","","",98,[[]]],[11,"current","","",99,[[]]],[11,"simplify","","",99,[[]]],[11,"complicate","","",99,[[]]],[11,"current","","",103,[[]]],[11,"simplify","","",103,[[]]],[11,"complicate","","",103,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","","",105,[[]]],[11,"simplify","","",105,[[]]],[11,"complicate","","",105,[[]]],[11,"current","proptest::strategy::statics","",24,[[]]],[11,"simplify","","",24,[[]]],[11,"complicate","","",24,[[]]],[11,"current","","",26,[[]]],[11,"simplify","","",26,[[]]],[11,"complicate","","",26,[[]]],[11,"current","proptest::tuple","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","","",40,[[]]],[11,"simplify","","",40,[[]]],[11,"complicate","","",40,[[]]],[11,"current","proptest::option","",113,[[]]],[11,"simplify","","",113,[[]]],[11,"complicate","","",113,[[]]],[11,"current","proptest::result","",115,[[]]],[11,"simplify","","",115,[[]]],[11,"complicate","","",115,[[]]],[11,"current","","",117,[[]]],[11,"simplify","","",117,[[]]],[11,"complicate","","",117,[[]]],[11,"current","proptest::sample","",119,[[]]],[11,"simplify","","",119,[[]]],[11,"complicate","","",119,[[]]],[11,"current","","",121,[[]]],[11,"simplify","","",121,[[]]],[11,"complicate","","",121,[[]]],[11,"current","","",123,[[]]],[11,"simplify","","",123,[[]]],[11,"complicate","","",123,[[]]],[11,"current","","",125,[[],["selector",3]]],[11,"simplify","","",125,[[]]],[11,"complicate","","",125,[[]]],[11,"current","proptest::string","",128,[[]]],[11,"simplify","","",128,[[]]],[11,"complicate","","",128,[[]]],[11,"load_persisted_failures2","proptest::test_runner","",35,[[["option",4]],[["persistedseed",3],["vec",3]]]],[11,"save_persisted_failure2","","",35,[[["persistedseed",3],["debug",8],["option",4]]]],[11,"box_clone","","",35,[[],[["box",3],["failurepersistence",8]]]],[11,"eq","","",35,[[["failurepersistence",8]]]],[11,"as_any","","",35,[[],["any",8]]],[11,"load_persisted_failures2","","",36,[[["option",4]],[["persistedseed",3],["vec",3]]]],[11,"save_persisted_failure2","","",36,[[["persistedseed",3],["option",4],["debug",8]]]],[11,"box_clone","","",36,[[],[["box",3],["failurepersistence",8]]]],[11,"eq","","",36,[[["failurepersistence",8]]]],[11,"as_any","","",36,[[],["any",8]]],[11,"from","proptest::collection","",8,[[]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[["rangeto",3]]]],[11,"from","","",8,[[["range",3]]]],[11,"from","","",8,[[["rangeinclusive",3]]]],[11,"from","","",8,[[["rangetoinclusive",3]]]],[11,"from","proptest::test_runner","",33,[[]]],[11,"from","","",107,[[]]],[11,"from","","",107,[[["string",3]]]],[11,"from","","",107,[[["box",3]]]],[11,"from","proptest::option","Creates a <code>Probability</code> from a <code>f64</code>.",111,[[]]],[11,"from","proptest::string","",126,[[]]],[11,"from","","",43,[[["parseerror",4]],["error",4]]],[11,"fmt","proptest::array","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::bits","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::bool","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::char","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::collection","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::i8","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::i16","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::i32","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::i64","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::i128","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::isize","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::u8","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::u16","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::u32","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::u64","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::u128","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::usize","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::f32","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::num::f64","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::strategy","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::strategy::statics","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::test_runner","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::tuple","",40,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::option","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",113,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::result","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::sample","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::string","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::test_runner","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","proptest::string","",43,[[["formatter",3]],["result",6]]],[11,"eq","proptest::collection","",8,[[["sizerange",3]]]],[11,"ne","","",8,[[["sizerange",3]]]],[11,"eq","proptest::test_runner","",32,[[["config",3]]]],[11,"ne","","",32,[[["config",3]]]],[11,"eq","","",34,[[["testerror",4]]]],[11,"ne","","",34,[[["testerror",4]]]],[11,"eq","","",35,[[["filefailurepersistence",4]]]],[11,"ne","","",35,[[["filefailurepersistence",4]]]],[11,"eq","","",36,[[["mapfailurepersistence",3]]]],[11,"ne","","",36,[[["mapfailurepersistence",3]]]],[11,"eq","","",106,[[["persistedseed",3]]]],[11,"ne","","",106,[[["persistedseed",3]]]],[11,"eq","","",37,[[["failurepersistence",8]]]],[11,"eq","","",107,[[["reason",3]]]],[11,"ne","","",107,[[["reason",3]]]],[11,"eq","","",39,[[["rngalgorithm",4]]]],[11,"eq","proptest::option","",111,[[["probability",3]]]],[11,"ne","","",111,[[["probability",3]]]],[11,"eq","proptest::string","",126,[[["stringparam",3]]]],[11,"ne","","",126,[[["stringparam",3]]]],[11,"cmp","proptest::test_runner","",106,[[["persistedseed",3]],["ordering",4]]],[11,"cmp","","",107,[[["reason",3]],["ordering",4]]],[11,"cmp","proptest::string","",126,[[["stringparam",3]],["ordering",4]]],[11,"partial_cmp","proptest::test_runner","",106,[[["persistedseed",3]],[["option",4],["ordering",4]]]],[11,"lt","","",106,[[["persistedseed",3]]]],[11,"le","","",106,[[["persistedseed",3]]]],[11,"gt","","",106,[[["persistedseed",3]]]],[11,"ge","","",106,[[["persistedseed",3]]]],[11,"partial_cmp","","",107,[[["reason",3]],[["option",4],["ordering",4]]]],[11,"lt","","",107,[[["reason",3]]]],[11,"le","","",107,[[["reason",3]]]],[11,"gt","","",107,[[["reason",3]]]],[11,"ge","","",107,[[["reason",3]]]],[11,"partial_cmp","proptest::string","",126,[[["stringparam",3]],[["option",4],["ordering",4]]]],[11,"lt","","",126,[[["stringparam",3]]]],[11,"le","","",126,[[["stringparam",3]]]],[11,"gt","","",126,[[["stringparam",3]]]],[11,"ge","","",126,[[["stringparam",3]]]],[11,"add","proptest::collection","",8,[[]]],[11,"bitor","proptest::num::f32","",80,[[]]],[11,"bitor","proptest::num::f64","",81,[[]]],[11,"bitor_assign","proptest::num::f32","",80,[[]]],[11,"bitor_assign","proptest::num::f64","",81,[[]]],[11,"hash","proptest::collection","",8,[[]]],[11,"hash","proptest::test_runner","",107,[[]]],[11,"hash","proptest::string","",126,[[]]],[11,"from_str","proptest::test_runner","",106,[[],["result",4]]],[11,"from_str","","",39,[[],["result",4]]],[11,"clone","proptest::array","",3,[[],["uniformarraystrategy",3]]],[11,"clone","","",46,[[],["arrayvaluetree",3]]],[11,"clone","proptest::bits","",5,[[],["bitsetstrategy",3]]],[11,"clone","","",6,[[],["sampledbitsetstrategy",3]]],[11,"clone","","",47,[[],["bitsetvaluetree",3]]],[11,"clone","proptest::bool","",48,[[],["any",3]]],[11,"clone","","",49,[[],["weighted",3]]],[11,"clone","","",50,[[],["boolvaluetree",3]]],[11,"clone","proptest::char","",7,[[],["charstrategy",3]]],[11,"clone","","",51,[[],["charvaluetree",3]]],[11,"clone","proptest::collection","",8,[[],["sizerange",3]]],[11,"clone","","",52,[[],["vecstrategy",3]]],[11,"clone","","",53,[[],["vecdequestrategy",3]]],[11,"clone","","",54,[[],["vecdequevaluetree",3]]],[11,"clone","","",55,[[],["linkedliststrategy",3]]],[11,"clone","","",56,[[],["linkedlistvaluetree",3]]],[11,"clone","","",57,[[],["binaryheapstrategy",3]]],[11,"clone","","",58,[[],["binaryheapvaluetree",3]]],[11,"clone","","",59,[[],["hashsetstrategy",3]]],[11,"clone","","",60,[[],["hashsetvaluetree",3]]],[11,"clone","","",61,[[],["btreesetstrategy",3]]],[11,"clone","","",62,[[],["btreesetvaluetree",3]]],[11,"clone","","",63,[[],["hashmapstrategy",3]]],[11,"clone","","",64,[[],["hashmapvaluetree",3]]],[11,"clone","","",65,[[],["btreemapstrategy",3]]],[11,"clone","","",66,[[],["btreemapvaluetree",3]]],[11,"clone","","",67,[[],["vecvaluetree",3]]],[11,"clone","proptest::num::i8","",68,[[],["any",3]]],[11,"clone","","",9,[[],["binarysearch",3]]],[11,"clone","proptest::num::i16","",69,[[],["any",3]]],[11,"clone","","",10,[[],["binarysearch",3]]],[11,"clone","proptest::num::i32","",70,[[],["any",3]]],[11,"clone","","",11,[[],["binarysearch",3]]],[11,"clone","proptest::num::i64","",71,[[],["any",3]]],[11,"clone","","",12,[[],["binarysearch",3]]],[11,"clone","proptest::num::i128","",72,[[],["any",3]]],[11,"clone","","",13,[[],["binarysearch",3]]],[11,"clone","proptest::num::isize","",73,[[],["any",3]]],[11,"clone","","",14,[[],["binarysearch",3]]],[11,"clone","proptest::num::u8","",74,[[],["any",3]]],[11,"clone","","",15,[[],["binarysearch",3]]],[11,"clone","proptest::num::u16","",75,[[],["any",3]]],[11,"clone","","",16,[[],["binarysearch",3]]],[11,"clone","proptest::num::u32","",76,[[],["any",3]]],[11,"clone","","",17,[[],["binarysearch",3]]],[11,"clone","proptest::num::u64","",77,[[],["any",3]]],[11,"clone","","",18,[[],["binarysearch",3]]],[11,"clone","proptest::num::u128","",78,[[],["any",3]]],[11,"clone","","",19,[[],["binarysearch",3]]],[11,"clone","proptest::num::usize","",79,[[],["any",3]]],[11,"clone","","",20,[[],["binarysearch",3]]],[11,"clone","proptest::num::f32","",80,[[],["any",3]]],[11,"clone","","",21,[[],["binarysearch",3]]],[11,"clone","proptest::num::f64","",81,[[],["any",3]]],[11,"clone","","",22,[[],["binarysearch",3]]],[11,"clone","proptest::strategy","",82,[[]]],[11,"clone","","",83,[[]]],[11,"clone","","",84,[[]]],[11,"clone","","",85,[[],["flatten",3]]],[11,"clone","","",86,[[]]],[11,"clone","","",87,[[],["indflatten",3]]],[11,"clone","","",88,[[]]],[11,"clone","","",89,[[],["fuse",3]]],[11,"clone","","",27,[[],["just",3]]],[11,"clone","","",90,[[]]],[11,"clone","","",91,[[]]],[11,"clone","","",92,[[]]],[11,"clone","","",93,[[]]],[11,"clone","","",94,[[]]],[11,"clone","","",95,[[]]],[11,"clone","","",96,[[]]],[11,"clone","","",97,[[],["shuffle",3]]],[11,"clone","","",98,[[],["shufflevaluetree",3]]],[11,"clone","","",99,[[],["noshrink",3]]],[11,"clone","","",100,[[]]],[11,"clone","","",101,[[]]],[11,"clone","","",31,[[],["checkstrategysanityoptions",3]]],[11,"clone","","",102,[[],["union",3]]],[11,"clone","","",103,[[]]],[11,"clone","","",104,[[],["tupleunion",3]]],[11,"clone","","",105,[[],["tupleunionvaluetree",3]]],[11,"clone","proptest::strategy::statics","",24,[[],["filter",3]]],[11,"clone","","",26,[[],["map",3]]],[11,"clone","proptest::test_runner","",32,[[],["config",3]]],[11,"clone","","",33,[[],["testcaseerror",4]]],[11,"clone","","",34,[[],["testerror",4]]],[11,"clone","","",35,[[],["filefailurepersistence",4]]],[11,"clone","","",36,[[],["mapfailurepersistence",3]]],[11,"clone","","",106,[[],["persistedseed",3]]],[11,"clone","","",107,[[],["reason",3]]],[11,"clone","","",39,[[],["rngalgorithm",4]]],[11,"clone","","",109,[[],["testrng",3]]],[11,"clone","","",110,[[],["testrunner",3]]],[11,"clone","proptest::tuple","",40,[[],["tuplevaluetree",3]]],[11,"clone","proptest::option","",111,[[],["probability",3]]],[11,"clone","","",112,[[],["optionstrategy",3]]],[11,"clone","","",113,[[]]],[11,"clone","proptest::result","",114,[[],["maybeok",3]]],[11,"clone","","",116,[[],["maybeerr",3]]],[11,"clone","","",115,[[]]],[11,"clone","","",117,[[]]],[11,"clone","proptest::sample","",118,[[],["subsequence",3]]],[11,"clone","","",119,[[],["subsequencevaluetree",3]]],[11,"clone","","",120,[[],["select",3]]],[11,"clone","","",121,[[],["selectvaluetree",3]]],[11,"clone","","",41,[[],["index",3]]],[11,"clone","","",122,[[],["indexstrategy",3]]],[11,"clone","","",123,[[],["indexvaluetree",3]]],[11,"clone","","",42,[[],["selector",3]]],[11,"clone","proptest::string","",126,[[],["stringparam",3]]],[11,"default","proptest::collection","Constructs a <code>SizeRange</code> equivalent to <code>size_range(0..100)</code>.",8,[[]]],[11,"default","proptest::strategy","",31,[[]]],[11,"default","proptest::test_runner","",32,[[]]],[11,"default","","",35,[[]]],[11,"default","","",36,[[],["mapfailurepersistence",3]]],[11,"default","","",39,[[]]],[11,"default","","",110,[[]]],[11,"default","proptest::option","The default probability is 0.5, or 50% chance.",111,[[]]],[11,"default","proptest::string","",126,[[]]],[11,"description","proptest::test_runner","",34,[[]]],[11,"source","proptest::string","",43,[[],[["error",8],["option",4]]]],[11,"next_u32","proptest::test_runner","",109,[[]]],[11,"next_u64","","",109,[[]]],[11,"fill_bytes","","",109,[[]]],[11,"try_fill_bytes","","",109,[[],[["error",3],["result",4]]]],[11,"arbitrary","proptest::arbitrary","Generates a <code>Strategy</code> for producing arbitrary values of …",2,[[]]],[11,"new","proptest::strategy","Wrap <code>source</code> to flatten it.",85,[[]]],[11,"new","","Wrap the given <code>T</code> in <code>Fuse</code>.",89,[[]]],[11,"may_simplify","","Return whether a call to <code>simplify()</code> may be productive.",89,[[]]],[11,"disallow_simplify","","Disallow any further calls to <code>simplify()</code> until a call to …",89,[[]]],[11,"may_complicate","","Return whether a call to <code>complicate()</code> may be productive.",89,[[]]],[11,"disallow_complicate","","Disallow any further calls to <code>complicate()</code> until a call to…",89,[[]]],[11,"freeze","","Prevent any further shrinking operations from occurring.",89,[[]]],[11,"new","","Constructs a <code>LazyJust</code> strategy given the function/closure …",90,[[]]],[11,"prop_map","","Returns a strategy which produces values transformed by …",29,[[["fn",8]],[["map",3],["fn",8]]]],[11,"prop_map_into","","Returns a strategy which produces values of type <code>O</code> by …",29,[[],[["mapinto",3],["debug",8]]]],[11,"prop_perturb","","Returns a strategy which produces values transformed by …",29,[[["fn",8]],[["perturb",3],["fn",8]]]],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies …",29,[[["fn",8]],[["map",3],["flatten",3]]]],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies …",29,[[["fn",8]],[["map",3],["indflatten",3]]]],[11,"prop_ind_flat_map2","","Similar to <code>prop_ind_flat_map()</code>, but produces 2-tuples …",29,[[["fn",8]],[["indflattenmap",3],["fn",8]]]],[11,"prop_filter","","Returns a strategy which only produces values accepted by …",29,[[["fn",8],["reason",3],["into",8]],[["fn",8],["filter",3]]]],[11,"prop_filter_map","","Returns a strategy which only produces transformed values …",29,[[["fn",8]],[["fn",8],["filtermap",3]]]],[11,"prop_union","","Returns a strategy which picks uniformly from <code>self</code> and …",29,[[],["union",3]]],[11,"prop_recursive","","Generate a recursive structure with <code>self</code> items as leaves.",29,[[["fn",8]],[["fn",8],["recursive",3]]]],[11,"prop_shuffle","","Shuffle the contents of the values produced by this …",29,[[],["shuffle",3]]],[11,"boxed","","Erases the type of this <code>Strategy</code> so it can be passed …",29,[[],["boxedstrategy",3]]],[11,"sboxed","","Erases the type of this <code>Strategy</code> so it can be passed …",29,[[],["sboxedstrategy",3]]],[11,"no_shrink","","Wraps this strategy to prevent values from being subject …",29,[[],["noshrink",3]]],[11,"new","","Create a strategy which selects uniformly from the given …",102,[[]]],[11,"new_weighted","","Create a strategy which selects from the given delegate …",102,[[["w",6],["vec",3]]]],[11,"or","","Add <code>other</code> as an additional alternate strategy with weight …",102,[[]]],[11,"new","","Wrap <code>tuple</code> in a <code>TupleUnion</code>.",104,[[]]],[11,"with_cases","proptest::test_runner","Constructs a <code>Config</code> only differing from the <code>default()</code> in …",32,[[]]],[11,"with_source_file","","Constructs a <code>Config</code> only differing from the <code>default()</code> in …",32,[[]]],[11,"clone_with_source_file","","Constructs a <code>Config</code> only differing from the provided …",32,[[]]],[11,"fork","","Return whether this configuration implies forking.",32,[[]]],[11,"timeout","","Returns the configured timeout.",32,[[]]],[11,"max_shrink_iters","","Returns the configured limit on shrinking iterations.",32,[[]]],[11,"reject","","Rejects the generated test input as invalid for this test …",33,[[]]],[11,"fail","","The code under test failed the test.",33,[[]]],[11,"load_persisted_failures2","","Supply seeds associated with the given <code>source_file</code> that …",37,[[["option",4]],[["persistedseed",3],["vec",3]]]],[11,"load_persisted_failures","","Use <code>load_persisted_failures2</code> instead.",37,[[["option",4]],["vec",3]]],[11,"save_persisted_failure2","","Store a new failure-generating seed associated with the …",37,[[["persistedseed",3],["option",4],["debug",8]]]],[11,"save_persisted_failure","","Use <code>save_persisted_failures2</code> instead.",37,[[["option",4],["debug",8]]]],[11,"message","","Return the message for this <code>Reason</code>.",107,[[]]],[11,"value_debug","","Return the test input value as an <code>&dyn Debug</code>.",108,[[],["debug",8]]],[11,"from_seed","","Create a new RNG with the given algorithm and seed.",109,[[["rngalgorithm",4]]]],[11,"bytes_used","","Dumps the bytes obtained from the RNG so far (only works …",109,[[],["vec",3]]],[11,"deterministic_rng","","Returns a <code>TestRng</code> with a particular hard-coded seed.",109,[[["rngalgorithm",4]]]],[11,"new","","Create a fresh <code>TestRunner</code> with the given configuration.",110,[[["config",3]]]],[11,"deterministic","","Create a fresh <code>TestRunner</code> with the standard deterministic …",110,[[]]],[11,"new_with_rng","","Create a fresh <code>TestRunner</code> with the given configuration …",110,[[["testrng",3],["config",3]]]],[11,"rng","","Returns the RNG for this test run.",110,[[],["testrng",3]]],[11,"new_rng","","Create a new, independent but deterministic RNG from the …",110,[[],["testrng",3]]],[11,"config","","Returns the configuration of this runner.",110,[[],["config",3]]],[11,"bytes_used","","Dumps the bytes obtained from the RNG so far (only works …",110,[[],["vec",3]]],[11,"run","","Run test cases against <code>f</code>, choosing inputs via <code>strategy</code>.",110,[[],[["testerror",4],["result",4]]]],[11,"run_one","","Run one specific test case against this runner.",110,[[["valuetree",8]],[["result",4],["testerror",4]]]],[11,"reject_local","","Update the state to account for a local rejection from …",110,[[],[["result",4],["reason",3]]]],[11,"flat_map_regen","","Increment the counter of flat map regenerations and …",110,[[]]],[11,"new","proptest::option","Creates a <code>Probability</code> from a <code>f64</code>.",111,[[]]],[11,"with","","Merges self together with some other argument producing a …",111,[[]]],[11,"lift","","Merges self together with some other argument generated …",111,[[]]]],"p":[[8,"ArbitraryF1"],[8,"ArbitraryF2"],[8,"Arbitrary"],[3,"UniformArrayStrategy"],[8,"BitSetLike"],[3,"BitSetStrategy"],[3,"SampledBitSetStrategy"],[3,"CharStrategy"],[3,"SizeRange"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[3,"BinarySearch"],[8,"FilterFn"],[3,"Filter"],[8,"MapFn"],[3,"Map"],[3,"Just"],[8,"Shuffleable"],[8,"Strategy"],[8,"ValueTree"],[3,"CheckStrategySanityOptions"],[3,"Config"],[4,"TestCaseError"],[4,"TestError"],[4,"FileFailurePersistence"],[3,"MapFailurePersistence"],[8,"FailurePersistence"],[8,"ResultCache"],[4,"RngAlgorithm"],[3,"TupleValueTree"],[3,"Index"],[3,"Selector"],[4,"Error"],[8,"Rng"],[8,"RngCore"],[3,"ArrayValueTree"],[3,"BitSetValueTree"],[3,"Any"],[3,"Weighted"],[3,"BoolValueTree"],[3,"CharValueTree"],[3,"VecStrategy"],[3,"VecDequeStrategy"],[3,"VecDequeValueTree"],[3,"LinkedListStrategy"],[3,"LinkedListValueTree"],[3,"BinaryHeapStrategy"],[3,"BinaryHeapValueTree"],[3,"HashSetStrategy"],[3,"HashSetValueTree"],[3,"BTreeSetStrategy"],[3,"BTreeSetValueTree"],[3,"HashMapStrategy"],[3,"HashMapValueTree"],[3,"BTreeMapStrategy"],[3,"BTreeMapValueTree"],[3,"VecValueTree"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Any"],[3,"Filter"],[3,"FilterMap"],[3,"FilterMapValueTree"],[3,"Flatten"],[3,"FlattenValueTree"],[3,"IndFlatten"],[3,"IndFlattenMap"],[3,"Fuse"],[3,"LazyJust"],[3,"LazyValueTree"],[3,"Map"],[3,"MapInto"],[3,"Perturb"],[3,"PerturbValueTree"],[3,"Recursive"],[3,"Shuffle"],[3,"ShuffleValueTree"],[3,"NoShrink"],[3,"BoxedStrategy"],[3,"SBoxedStrategy"],[3,"Union"],[3,"UnionValueTree"],[3,"TupleUnion"],[3,"TupleUnionValueTree"],[3,"PersistedSeed"],[3,"Reason"],[3,"ResultCacheKey"],[3,"TestRng"],[3,"TestRunner"],[3,"Probability"],[3,"OptionStrategy"],[3,"OptionValueTree"],[3,"MaybeOk"],[3,"MaybeOkValueTree"],[3,"MaybeErr"],[3,"MaybeErrValueTree"],[3,"Subsequence"],[3,"SubsequenceValueTree"],[3,"Select"],[3,"SelectValueTree"],[3,"IndexStrategy"],[3,"IndexValueTree"],[3,"SelectorStrategy"],[3,"SelectorValueTree"],[3,"StringParam"],[3,"RegexGeneratorStrategy"],[3,"RegexGeneratorValueTree"]]},\
"proptest_derive":{"doc":"This is the API documentation for the <code>proptest-derive</code> …","i":[[24,"Arbitrary","proptest_derive","See module level documentation for more information.",null,null]],"p":[]},\
"proptest_ext":{"doc":"","i":[[3,"ValueGenerator","proptest_ext","Context for generating single values out of strategies.",null,null],[11,"new","","Creates a new value generator with the default RNG.",0,[[]]],[11,"deterministic","","Creates a new value generator with a deterministic RNG.",0,[[]]],[11,"partial_clone","","Does a \\\"partial clone\\\" of the <code>ValueGenerator</code>, creating a …",0,[[]]],[11,"generate","","Generates a single value for this strategy.",0,[[["strategy",8]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"default","","",0,[[],["valuegenerator",3]]]],"p":[[3,"ValueGenerator"]]},\
"quick_error":{"doc":"A macro which makes errors easy to write","i":[[3,"Context","quick_error","Generic context type",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","Result extension trait adding a <code>context</code> method",null,null],[10,"context","","The method is use to add context information to current …",1,[[],[["result",4],["context",3]]]],[14,"quick_error","","Main macro that does all the work",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"Context"],[8,"ResultExt"]]},\
"quote":{"doc":"This crate provides the <code>quote!</code> macro for turning Rust …","i":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending …",null,null],[10,"append","","For use by <code>ToTokens</code> implementations.",0,[[]]],[10,"append_all","","For use by <code>ToTokens</code> implementations.",0,[[]]],[10,"append_separated","","For use by <code>ToTokens</code> implementations.",0,[[]]],[10,"append_terminated","","For use by <code>ToTokens</code> implementations.",0,[[]]],[8,"ToTokens","","Types that can be interpolated inside a <code>quote!</code> invocation.",null,null],[10,"to_tokens","","Write <code>self</code> to the given <code>TokenStream</code>.",1,[[["tokenstream",3]]]],[11,"into_token_stream","","Convert <code>self</code> directly into a <code>TokenStream</code> object.",1,[[],["tokenstream",3]]],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as <code>quote!</code>, but applies a given span to all tokens …",null,null],[11,"into_token_stream","","Convert <code>self</code> directly into a <code>TokenStream</code> object.",1,[[],["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"ToTokens"]]},\
"rand":{"doc":"Utilities for random number generation","i":[[8,"CryptoRng","rand","A marker trait used to indicate that an [<code>RngCore</code>] or …",null,null],[3,"Error","","Error type of random number generators",null,null],[8,"RngCore","","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random <code>u32</code>.",0,[[]]],[10,"next_u64","","Return the next random <code>u64</code>.",0,[[]]],[10,"fill_bytes","","Fill <code>dest</code> with random data.",0,[[]]],[10,"try_fill_bytes","","Fill <code>dest</code> entirely with random data.",0,[[],[["error",3],["result",4]]]],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types …",1,null],[10,"from_seed","","Create a new PRNG using the given seed.",1,[[]]],[11,"seed_from_u64","","Create a new PRNG using a <code>u64</code> seed.",1,[[]]],[11,"from_rng","","Create a new PRNG seeded from another <code>Rng</code>.",1,[[],[["error",3],["result",4]]]],[11,"from_entropy","","Creates a new instance of the RNG seeded via <code>getrandom</code>.",1,[[]]],[0,"distributions","","Generating random samples from probability distributions",null,null],[0,"uniform","rand::distributions","A distribution uniformly sampling numbers within a given …",null,null],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",null,null],[11,"new","","Create a new <code>Uniform</code> instance which samples uniformly …",2,[[],["uniform",3]]],[11,"new_inclusive","","Create a new <code>Uniform</code> instance which samples uniformly …",2,[[],["uniform",3]]],[8,"SampleUniform","","Helper trait for creating objects using the correct …",null,null],[16,"Sampler","","The <code>UniformSampler</code> implementation supporting type <code>X</code>.",3,null],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",null,null],[16,"X","","The type sampled by this implementation.",4,null],[10,"new","","Construct self, with inclusive lower bound and exclusive …",4,[[]]],[10,"new_inclusive","","Construct self, with inclusive bounds <code>[low, high]</code>.",4,[[]]],[10,"sample","","Sample a value.",4,[[]]],[11,"sample_single","","Sample a single value uniformly from a range with …",4,[[]]],[11,"sample_single_inclusive","","Sample a single value uniformly from a range with …",4,[[]]],[8,"SampleBorrow","","Helper trait similar to <code>Borrow</code> but implemented only for …",null,null],[10,"borrow","","Immutably borrows from an owned value. See <code>Borrow::borrow</code>",5,[[]]],[8,"SampleRange","","Range that supports generating a single sample …",null,null],[10,"sample_single","","Generate a sample from the given range.",6,[[]]],[10,"is_empty","","Check whether the range is empty.",6,[[]]],[3,"UniformInt","","The back-end implementing [<code>UniformSampler</code>] for integer …",null,null],[3,"UniformChar","","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.",null,null],[3,"UniformFloat","","The back-end implementing [<code>UniformSampler</code>] for …",null,null],[3,"UniformDuration","","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.",null,null],[0,"weighted","rand::distributions","Weighted index sampling",null,null],[0,"alias_method","rand::distributions::weighted","",null,null],[3,"WeightedIndex","rand::distributions::weighted::alias_method","",null,null],[11,"new","","",7,[[["vec",3]],[["result",4],["weightederror",4]]]],[8,"Weight","","",null,null],[3,"WeightedIndex","rand::distributions::weighted","A distribution using weighted sampling of discrete items",null,null],[4,"WeightedError","","Error type returned from <code>WeightedIndex::new</code>.",null,null],[13,"NoItem","","The provided weight collection contains no items.",8,null],[13,"InvalidWeight","","A weight is either less than zero, greater than the …",8,null],[13,"AllWeightsZero","","All items in the provided weight collection are zero.",8,null],[13,"TooMany","","Too many weights are provided (length greater than …",8,null],[11,"new","","Creates a new a <code>WeightedIndex</code> [<code>Distribution</code>] using the …",9,[[],[["result",4],["weightederror",4],["weightedindex",3]]]],[11,"update_weights","","Update a subset of weights, without changing the number …",9,[[],[["weightederror",4],["result",4]]]],[3,"Bernoulli","rand::distributions","The Bernoulli distribution.",null,null],[4,"BernoulliError","","Error type returned from <code>Bernoulli::new</code>.",null,null],[13,"InvalidProbability","","<code>p < 0</code> or <code>p > 1</code>.",10,null],[3,"Open01","","A distribution to sample floating point numbers uniformly …",null,null],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly …",null,null],[3,"Alphanumeric","","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …",null,null],[3,"Uniform","","Sample values uniformly between two bounds.",null,null],[4,"WeightedError","","Error type returned from <code>WeightedIndex::new</code>.",null,null],[13,"NoItem","","The provided weight collection contains no items.",8,null],[13,"InvalidWeight","","A weight is either less than zero, greater than the …",8,null],[13,"AllWeightsZero","","All items in the provided weight collection are zero.",8,null],[13,"TooMany","","Too many weights are provided (length greater than …",8,null],[3,"WeightedIndex","","A distribution using weighted sampling of discrete items",null,null],[8,"Distribution","","Types (distributions) that can be used to create a random …",null,null],[10,"sample","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …",11,[[]]],[11,"sample_iter","","Create an iterator that generates random values of <code>T</code>, …",11,[[],["distiter",3]]],[3,"DistIter","","An iterator that generates random values of <code>T</code> with …",null,null],[3,"Standard","","A generic random value distribution, implemented for many …",null,null],[0,"prelude","rand","Convenience re-export of common members",null,null],[0,"rngs","","Random number generators and adapters",null,null],[3,"OsRng","rand::rngs","A random number generator that retrieves randomness from …",null,null],[0,"adapter","","Wrappers / adapters forming RNGs",null,null],[3,"ReadError","rand::rngs::adapter","<code>ReadRng</code> error type",null,null],[3,"ReadRng","","An RNG that reads random bytes straight from any type …",null,null],[3,"ReseedingRng","","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …",null,null],[0,"mock","rand::rngs","Mock random number generator",null,null],[3,"StepRng","rand::rngs::mock","A simple implementation of <code>RngCore</code> for testing purposes.",null,null],[11,"new","","Create a <code>StepRng</code>, yielding an arithmetic sequence …",12,[[]]],[3,"StdRng","rand::rngs","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …",null,null],[3,"ThreadRng","","A reference to the thread-local generator",null,null],[0,"seq","rand","Sequence-related functionality",null,null],[0,"index","rand::seq","Low-level API for sampling indices",null,null],[4,"IndexVec","rand::seq::index","A vector of indices.",null,null],[11,"len","","Returns the number of indices",13,[[]]],[11,"is_empty","","Returns <code>true</code> if the length is 0.",13,[[]]],[11,"index","","Return the value at the given <code>index</code>.",13,[[]]],[11,"into_vec","","Return result as a <code>Vec<usize></code>. Conversion may or may not …",13,[[],["vec",3]]],[11,"iter","","Iterate over the indices as a sequence of <code>usize</code> values",13,[[],["indexveciter",4]]],[4,"IndexVecIter","","Return type of <code>IndexVec::iter</code>.",null,null],[4,"IndexVecIntoIter","","Return type of <code>IndexVec::into_iter</code>.",null,null],[5,"sample","","Randomly sample exactly <code>amount</code> distinct indices from …",null,[[],["indexvec",4]]],[5,"sample_weighted","","Randomly sample exactly <code>amount</code> distinct indices from …",null,[[],[["indexvec",4],["result",4],["weightederror",4]]]],[8,"SliceRandom","rand::seq","Extension trait on slices, providing random mutation and …",null,null],[16,"Item","","The element type.",14,null],[10,"choose","","Returns a reference to one random element of the slice, …",14,[[],["option",4]]],[10,"choose_mut","","Returns a mutable reference to one random element of the …",14,[[],["option",4]]],[10,"choose_multiple","","Chooses <code>amount</code> elements from the slice at random, without …",14,[[],["slicechooseiter",3]]],[10,"choose_weighted","","Similar to <code>choose</code>, but where the likelihood of each …",14,[[],[["result",4],["weightederror",4]]]],[10,"choose_weighted_mut","","Similar to <code>choose_mut</code>, but where the likelihood of each …",14,[[],[["result",4],["weightederror",4]]]],[10,"choose_multiple_weighted","","Similar to <code>choose_multiple</code>, but where the likelihood of …",14,[[],[["slicechooseiter",3],["result",4],["weightederror",4]]]],[10,"shuffle","","Shuffle a mutable slice in place.",14,[[]]],[10,"partial_shuffle","","Shuffle a slice in place, but exit early.",14,[[]]],[8,"IteratorRandom","","Extension trait on iterators, providing random sampling …",null,null],[11,"choose","","Choose one element at random from the iterator.",15,[[],["option",4]]],[11,"choose_stable","","Choose one element at random from the iterator.",15,[[],["option",4]]],[11,"choose_multiple_fill","","Collects values at random from the iterator into a …",15,[[]]],[11,"choose_multiple","","Collects <code>amount</code> values at random from the iterator into a …",15,[[],["vec",3]]],[3,"SliceChooseIter","","An iterator over multiple slice elements.",null,null],[5,"thread_rng","rand","Retrieve the lazily-initialized thread-local random …",null,[[],["threadrng",3]]],[8,"Fill","","Types which may be filled with random data",null,null],[10,"try_fill","","Fill self with random data",16,[[],[["result",4],["error",3]]]],[8,"Rng","","An automatically-implemented extension trait on [<code>RngCore</code>] …",null,null],[11,"gen","","Return a random value supporting the <code>Standard</code> …",17,[[]]],[11,"gen_range","","Generate a random value in the given range.",17,[[]]],[11,"sample","","Sample a new value, using the given distribution.",17,[[["distribution",8]]]],[11,"sample_iter","","Create an iterator that generates values using the given …",17,[[],["distiter",3]]],[11,"fill","","Fill any type implementing [<code>Fill</code>] with random data",17,[[]]],[11,"try_fill","","Fill any type implementing <code>Fill</code> with random data",17,[[],[["result",4],["error",3]]]],[11,"gen_bool","","Return a bool with a probability <code>p</code> of being true.",17,[[]]],[11,"gen_ratio","","Return a bool with a probability of <code>numerator/denominator</code> …",17,[[]]],[5,"random","","Generates a random value using the thread-local random …",null,[[]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_string","","",18,[[],["string",3]]],[11,"vzip","","",18,[[]]],[11,"from","rand::distributions","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"vzip","","",19,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"vzip","","",2,[[]]],[11,"from","rand::distributions::uniform","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"vzip","","",23,[[]]],[11,"from","rand::distributions::weighted::alias_method","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","rand::distributions::weighted","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"vzip","","",9,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"vzip","","",8,[[]]],[11,"from","rand::distributions","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"into_iter","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"vzip","","",28,[[]]],[11,"from","rand::rngs","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"vzip","","",29,[[]]],[11,"from","rand::rngs::adapter","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_string","","",31,[[],["string",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"vzip","","",32,[[]]],[11,"from","rand::rngs::mock","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"vzip","","",12,[[]]],[11,"from","rand::rngs","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"vzip","","",34,[[]]],[11,"from","rand::seq::index","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"vzip","","",13,[[]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"into_iter","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"into_iter","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"vzip","","",36,[[]]],[11,"from","rand::seq","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"into_iter","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"source","rand","",18,[[],[["error",8],["option",4]]]],[11,"default","rand::rngs","",29,[[],["osrng",3]]],[11,"read","rand","",0,[[],[["result",4],["error",3]]]],[11,"fmt","rand::rngs","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","rand","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",18,[[["nonzerou32",3]],["error",3]]],[11,"from","","",18,[[["error",3]],["error",3]]],[11,"next_u32","rand::rngs","",29,[[]]],[11,"next_u64","","",29,[[]]],[11,"fill_bytes","","",29,[[]]],[11,"try_fill_bytes","","",29,[[],[["error",3],["result",4]]]],[11,"fmt","rand","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","rand::rngs","",29,[[],["osrng",3]]],[11,"new","rand::distributions::uniform","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",21,[[]]],[11,"new_inclusive","","",21,[[]]],[11,"sample","","",21,[[]]],[11,"new","","",22,[[]]],[11,"new_inclusive","","",22,[[]]],[11,"sample","","",22,[[]]],[11,"sample_single","","",22,[[]]],[11,"new","","",22,[[]]],[11,"new_inclusive","","",22,[[]]],[11,"sample","","",22,[[]]],[11,"sample_single","","",22,[[]]],[11,"new","","",23,[[]]],[11,"new_inclusive","","",23,[[]]],[11,"sample","","",23,[[],["duration",3]]],[11,"sample","rand::distributions","",19,[[]]],[11,"sample","","",2,[[]]],[11,"sample","rand::distributions::weighted","",9,[[]]],[11,"sample","rand::distributions","",28,[[]]],[11,"sample","","",24,[[]]],[11,"sample","","",25,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",24,[[]]],[11,"sample","","",25,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[],["nonzerou8",3]]],[11,"sample","","",28,[[],["nonzerou16",3]]],[11,"sample","","",28,[[],["nonzerou32",3]]],[11,"sample","","",28,[[],["nonzerou64",3]]],[11,"sample","","",28,[[],["nonzerou128",3]]],[11,"sample","","",28,[[],["nonzerousize",3]]],[11,"sample","","",28,[[]]],[11,"sample","","",26,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[],["option",4]]],[11,"sample","","",28,[[],["wrapping",3]]],[11,"from","","",2,[[["range",3]],["uniform",3]]],[11,"from","","",2,[[["rangeinclusive",3]],["uniform",3]]],[11,"from","rand::seq::index","",13,[[["vec",3]]]],[11,"from","","",13,[[["vec",3]]]],[11,"fmt","rand::distributions","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions::uniform","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions::weighted::alias_method","",7,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions::weighted","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","rand::rngs::adapter","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","rand::rngs::mock","",12,[[["formatter",3]],["result",6]]],[11,"fmt","rand::rngs","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","rand::seq::index","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","rand::seq","",37,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions","",10,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions::weighted","",8,[[["formatter",3]],["result",6]]],[11,"fmt","rand::rngs::adapter","",31,[[["formatter",3]],["result",6]]],[11,"eq","rand::distributions","",10,[[["bernoullierror",4]]]],[11,"eq","rand::distributions::weighted","",8,[[["weightederror",4]]]],[11,"eq","rand::rngs::mock","",12,[[["steprng",3]]]],[11,"ne","","",12,[[["steprng",3]]]],[11,"eq","rand::rngs","",33,[[["stdrng",3]]]],[11,"ne","","",33,[[["stdrng",3]]]],[11,"eq","rand::seq::index","",13,[[["indexvec",4]]]],[11,"len","rand::seq","",37,[[]]],[11,"next","rand::distributions","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","rand::seq::index","",35,[[],["option",4]]],[11,"size_hint","","",35,[[]]],[11,"next","","",36,[[],["option",4]]],[11,"size_hint","","",36,[[]]],[11,"next","rand::seq","",37,[[],["option",4]]],[11,"size_hint","","",37,[[]]],[11,"into_iter","rand::seq::index","Convert into an iterator over the indices as a sequence …",13,[[],["indexvecintoiter",4]]],[11,"clone","rand::distributions","",19,[[],["bernoulli",3]]],[11,"clone","","",10,[[],["bernoullierror",4]]],[11,"clone","","",2,[[],["uniform",3]]],[11,"clone","rand::distributions::uniform","",20,[[],["uniformint",3]]],[11,"clone","","",21,[[],["uniformchar",3]]],[11,"clone","","",22,[[],["uniformfloat",3]]],[11,"clone","","",23,[[],["uniformduration",3]]],[11,"clone","rand::distributions::weighted","",9,[[],["weightedindex",3]]],[11,"clone","","",8,[[],["weightederror",4]]],[11,"clone","rand::distributions","",24,[[],["openclosed01",3]]],[11,"clone","","",25,[[],["open01",3]]],[11,"clone","","",28,[[],["standard",3]]],[11,"clone","rand::rngs::adapter","",32,[[],["reseedingrng",3]]],[11,"clone","rand::rngs::mock","",12,[[],["steprng",3]]],[11,"clone","rand::rngs","",33,[[],["stdrng",3]]],[11,"clone","","",34,[[],["threadrng",3]]],[11,"clone","rand::seq::index","",13,[[],["indexvec",4]]],[11,"clone","","",36,[[],["indexvecintoiter",4]]],[11,"default","rand::rngs","",34,[[],["threadrng",3]]],[11,"source","rand::rngs::adapter","",31,[[],[["error",8],["option",4]]]],[11,"next_u32","","",30,[[]]],[11,"next_u64","","",30,[[]]],[11,"fill_bytes","","",30,[[]]],[11,"try_fill_bytes","","",30,[[],[["result",4],["error",3]]]],[11,"next_u32","","",32,[[]]],[11,"next_u64","","",32,[[]]],[11,"fill_bytes","","",32,[[]]],[11,"try_fill_bytes","","",32,[[],[["result",4],["error",3]]]],[11,"next_u32","rand::rngs::mock","",12,[[]]],[11,"next_u64","","",12,[[]]],[11,"fill_bytes","","",12,[[]]],[11,"try_fill_bytes","","",12,[[],[["result",4],["error",3]]]],[11,"next_u32","rand::rngs","",33,[[]]],[11,"next_u64","","",33,[[]]],[11,"fill_bytes","","",33,[[]]],[11,"try_fill_bytes","","",33,[[],[["result",4],["error",3]]]],[11,"next_u32","","",34,[[]]],[11,"next_u64","","",34,[[]]],[11,"fill_bytes","","",34,[[]]],[11,"try_fill_bytes","","",34,[[],[["result",4],["error",3]]]],[11,"from_seed","","",33,[[]]],[11,"from_rng","","",33,[[["rngcore",8]],[["result",4],["error",3]]]],[18,"CUSTOM_START","rand","Codes at or above this point can be used by users to …",18,null],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive …",18,null],[11,"new","","Construct from any type supporting <code>std::error::Error</code>",18,[[],["error",3]]],[11,"inner","","Reference the inner error (<code>std</code> only)",18,[[],["error",8]]],[11,"take_inner","","Unwrap the inner error (<code>std</code> only)",18,[[],[["global",3],["box",3],["error",8]]]],[11,"raw_os_error","","Extract the raw OS error code (if this error came from …",18,[[],["option",4]]],[11,"code","","Retrieve the error code, if any.",18,[[],[["option",4],["nonzerou32",3]]]],[11,"new","rand::distributions","Construct a new <code>Bernoulli</code> with the given probability of …",19,[[],[["bernoulli",3],["bernoullierror",4],["result",4]]]],[11,"from_ratio","","Construct a new <code>Bernoulli</code> with the probability of success …",19,[[],[["bernoulli",3],["bernoullierror",4],["result",4]]]],[11,"gen","rand","Return a random value supporting the <code>Standard</code> …",17,[[]]],[11,"gen_range","","Generate a random value in the given range.",17,[[]]],[11,"sample","","Sample a new value, using the given distribution.",17,[[["distribution",8]]]],[11,"sample_iter","","Create an iterator that generates values using the given …",17,[[],["distiter",3]]],[11,"fill","","Fill any type implementing [<code>Fill</code>] with random data",17,[[]]],[11,"try_fill","","Fill any type implementing <code>Fill</code> with random data",17,[[],[["result",4],["error",3]]]],[11,"gen_bool","","Return a bool with a probability <code>p</code> of being true.",17,[[]]],[11,"gen_ratio","","Return a bool with a probability of <code>numerator/denominator</code> …",17,[[]]],[11,"new","rand::rngs::adapter","Create a new <code>ReadRng</code> from a <code>Read</code>.",30,[[],["readrng",3]]],[11,"new","","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …",32,[[]]],[11,"reseed","","Reseed the internal PRNG.",32,[[],[["result",4],["error",3]]]]],"p":[[8,"RngCore"],[8,"SeedableRng"],[3,"Uniform"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[8,"SampleRange"],[3,"WeightedIndex"],[4,"WeightedError"],[3,"WeightedIndex"],[4,"BernoulliError"],[8,"Distribution"],[3,"StepRng"],[4,"IndexVec"],[8,"SliceRandom"],[8,"IteratorRandom"],[8,"Fill"],[8,"Rng"],[3,"Error"],[3,"Bernoulli"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"OpenClosed01"],[3,"Open01"],[3,"Alphanumeric"],[3,"DistIter"],[3,"Standard"],[3,"OsRng"],[3,"ReadRng"],[3,"ReadError"],[3,"ReseedingRng"],[3,"StdRng"],[3,"ThreadRng"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"],[3,"SliceChooseIter"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","i":[[3,"ChaCha12Core","rand_chacha","ChaCha with 12 rounds",null,null],[3,"ChaCha12Rng","","A cryptographically secure random number generator that …",null,null],[3,"ChaCha20Core","","ChaCha with 20 rounds",null,null],[3,"ChaCha20Rng","","A cryptographically secure random number generator that …",null,null],[3,"ChaCha8Core","","ChaCha with 8 rounds",null,null],[3,"ChaCha8Rng","","A cryptographically secure random number generator that …",null,null],[6,"ChaChaRng","","ChaCha with 20 rounds",null,null],[6,"ChaChaCore","","ChaCha with 20 rounds, low-level interface",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",1,[[["chacha20core",3]]]],[11,"from","","",3,[[["chacha12core",3]]]],[11,"from","","",5,[[["chacha8core",3]]]],[11,"clone","","",0,[[],["chacha20core",3]]],[11,"clone","","",1,[[],["chacha20rng",3]]],[11,"clone","","",2,[[],["chacha12core",3]]],[11,"clone","","",3,[[],["chacha12rng",3]]],[11,"clone","","",4,[[],["chacha8core",3]]],[11,"clone","","",5,[[],["chacha8rng",3]]],[11,"eq","","",0,[[["chacha20core",3]]]],[11,"ne","","",0,[[["chacha20core",3]]]],[11,"eq","","",1,[[["chacha20rng",3]]]],[11,"eq","","",2,[[["chacha12core",3]]]],[11,"ne","","",2,[[["chacha12core",3]]]],[11,"eq","","",3,[[["chacha12rng",3]]]],[11,"eq","","",4,[[["chacha8core",3]]]],[11,"ne","","",4,[[["chacha8core",3]]]],[11,"eq","","",5,[[["chacha8rng",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"generate","","",0,[[]]],[11,"generate","","",2,[[]]],[11,"generate","","",4,[[]]],[11,"next_u32","","",1,[[]]],[11,"next_u64","","",1,[[]]],[11,"fill_bytes","","",1,[[]]],[11,"try_fill_bytes","","",1,[[],[["result",4],["error",3]]]],[11,"next_u32","","",3,[[]]],[11,"next_u64","","",3,[[]]],[11,"fill_bytes","","",3,[[]]],[11,"try_fill_bytes","","",3,[[],[["result",4],["error",3]]]],[11,"next_u32","","",5,[[]]],[11,"next_u64","","",5,[[]]],[11,"fill_bytes","","",5,[[]]],[11,"try_fill_bytes","","",5,[[],[["result",4],["error",3]]]],[11,"from_seed","","",0,[[]]],[11,"from_seed","","",1,[[]]],[11,"from_seed","","",2,[[]]],[11,"from_seed","","",3,[[]]],[11,"from_seed","","",4,[[]]],[11,"from_seed","","",5,[[]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit …",1,[[]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit …",1,[[]]],[11,"set_stream","","Set the stream number.",1,[[]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit …",3,[[]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit …",3,[[]]],[11,"set_stream","","Set the stream number.",3,[[]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit …",5,[[]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit …",5,[[]]],[11,"set_stream","","Set the stream number.",5,[[]]]],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"]]},\
"rand_core":{"doc":"Random number generation traits","i":[[0,"block","rand_core","The <code>BlockRngCore</code> trait and implementation helpers",null,null],[8,"BlockRngCore","rand_core::block","A trait for RNGs which do not generate random numbers …",null,null],[16,"Item","","Results element type, e.g. <code>u32</code>.",0,null],[16,"Results","","Results type. This is the \'block\' an RNG implementing …",0,null],[10,"generate","","Generate a new block of results.",0,[[]]],[3,"BlockRng","","A wrapper type implementing [<code>RngCore</code>] for some type …",null,null],[12,"core","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …",1,null],[11,"new","","Create a new <code>BlockRng</code> from an existing RNG implementing …",1,[[],["blockrng",3]]],[11,"index","","Get the index into the result buffer.",1,[[]]],[11,"reset","","Reset the number of available results. This will force a …",1,[[]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the …",1,[[]]],[3,"BlockRng64","","A wrapper type implementing [<code>RngCore</code>] for some type …",null,null],[12,"core","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …",2,null],[11,"new","","Create a new <code>BlockRng</code> from an existing RNG implementing …",2,[[],["blockrng64",3]]],[11,"index","","Get the index into the result buffer.",2,[[]]],[11,"reset","","Reset the number of available results. This will force a …",2,[[]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the …",2,[[]]],[0,"impls","rand_core","Helper functions for implementing <code>RngCore</code> functions.",null,null],[5,"next_u64_via_u32","rand_core::impls","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.",null,[[]]],[5,"fill_bytes_via_next","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …",null,[[]]],[5,"fill_via_u32_chunks","","Implement <code>fill_bytes</code> by reading chunks from the output …",null,[[]]],[5,"fill_via_u64_chunks","","Implement <code>fill_bytes</code> by reading chunks from the output …",null,[[]]],[5,"next_u32_via_fill","","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.",null,[[]]],[5,"next_u64_via_fill","","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.",null,[[]]],[0,"le","rand_core","Little-Endian utilities",null,null],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.",null,[[]]],[5,"read_u64_into","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.",null,[[]]],[3,"Error","rand_core","Error type of random number generators",null,null],[3,"OsRng","","A random number generator that retrieves randomness from …",null,null],[8,"RngCore","","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random <code>u32</code>.",3,[[]]],[10,"next_u64","","Return the next random <code>u64</code>.",3,[[]]],[10,"fill_bytes","","Fill <code>dest</code> with random data.",3,[[]]],[10,"try_fill_bytes","","Fill <code>dest</code> entirely with random data.",3,[[],[["result",4],["error",3]]]],[8,"CryptoRng","","A marker trait used to indicate that an [<code>RngCore</code>] or …",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types …",4,null],[10,"from_seed","","Create a new PRNG using the given seed.",4,[[]]],[11,"seed_from_u64","","Create a new PRNG using a <code>u64</code> seed.",4,[[]]],[11,"from_rng","","Create a new PRNG seeded from another <code>Rng</code>.",4,[[["rngcore",8]],[["error",3],["result",4]]]],[11,"from_entropy","","Creates a new instance of the RNG seeded via <code>getrandom</code>.",4,[[]]],[11,"from","rand_core::block","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","rand_core","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_string","","",5,[[],["string",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"next_u32","rand_core::block","",1,[[]]],[11,"next_u64","","",1,[[]]],[11,"fill_bytes","","",1,[[]]],[11,"try_fill_bytes","","",1,[[],[["result",4],["error",3]]]],[11,"next_u32","","",2,[[]]],[11,"next_u64","","",2,[[]]],[11,"fill_bytes","","",2,[[]]],[11,"try_fill_bytes","","",2,[[],[["result",4],["error",3]]]],[11,"next_u32","rand_core","",6,[[]]],[11,"next_u64","","",6,[[]]],[11,"fill_bytes","","",6,[[]]],[11,"try_fill_bytes","","",6,[[],[["result",4],["error",3]]]],[11,"from_seed","rand_core::block","",1,[[]]],[11,"seed_from_u64","","",1,[[]]],[11,"from_rng","","",1,[[["rngcore",8]],[["error",3],["result",4]]]],[11,"from_seed","","",2,[[]]],[11,"seed_from_u64","","",2,[[]]],[11,"from_rng","","",2,[[["rngcore",8]],[["error",3],["result",4]]]],[11,"from","rand_core","",5,[[["nonzerou32",3]]]],[11,"from","","",5,[[["error",3]]]],[11,"fmt","rand_core::block","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","rand_core","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"clone","rand_core::block","",1,[[],["blockrng",3]]],[11,"clone","","",2,[[],["blockrng64",3]]],[11,"clone","rand_core","",6,[[],["osrng",3]]],[11,"default","","",6,[[],["osrng",3]]],[11,"source","","",5,[[],[["option",4],["error",8]]]],[11,"read","","",3,[[],[["result",4],["error",3]]]],[18,"CUSTOM_START","","Codes at or above this point can be used by users to …",5,null],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive …",5,null],[11,"new","","Construct from any type supporting <code>std::error::Error</code>",5,[[]]],[11,"inner","","Reference the inner error (<code>std</code> only)",5,[[],["error",8]]],[11,"take_inner","","Unwrap the inner error (<code>std</code> only)",5,[[],[["box",3],["error",8]]]],[11,"raw_os_error","","Extract the raw OS error code (if this error came from …",5,[[],["option",4]]],[11,"code","","Retrieve the error code, if any.",5,[[],[["option",4],["nonzerou32",3]]]]],"p":[[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"],[3,"Error"],[3,"OsRng"]]},\
"rand_xorshift":{"doc":"The xorshift random number generator.","i":[[3,"XorShiftRng","rand_xorshift","An Xorshift random number generator.",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["xorshiftrng",3]]]],[11,"ne","","",0,[[["xorshiftrng",3]]]],[11,"clone","","",0,[[],["xorshiftrng",3]]],[11,"next_u32","","",0,[[]]],[11,"next_u64","","",0,[[]]],[11,"fill_bytes","","",0,[[]]],[11,"try_fill_bytes","","",0,[[],[["result",4],["error",3]]]],[11,"from_seed","","",0,[[]]],[11,"from_rng","","",0,[[["rngcore",8]],[["result",4],["error",3]]]]],"p":[[3,"XorShiftRng"]]},\
"rayon":{"doc":"Data-parallelism library that makes it easy to convert …","i":[[3,"FnContext","rayon","Provides the calling context to a closure called by …",null,null],[3,"ThreadBuilder","","Thread builder used for customization via …",null,null],[3,"ThreadPool","","Represents a user created thread-pool.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new <code>ThreadPool</code> or to configure the …",null,null],[5,"current_num_threads","","Returns the number of threads in the current registry. If …",null,[[]]],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index …",null,[[],["option",4]]],[5,"join","","Takes two closures and <em>potentially</em> runs them in parallel. …",null,[[]]],[5,"join_context","","Identical to <code>join</code>, except that the closures have a …",null,[[]]],[5,"scope","","Creates a \\\"fork-join\\\" scope <code>s</code> and invokes the closure …",null,[[]]],[3,"Scope","","Represents a fork-join scope which can be used to spawn …",null,null],[5,"scope_fifo","","Creates a \\\"fork-join\\\" scope <code>s</code> with FIFO order, and …",null,[[]]],[3,"ScopeFifo","","Represents a fork-join scope which can be used to spawn …",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the …",null,[[]]],[5,"spawn_fifo","","Fires off a task into the Rayon threadpool in the …",null,[[]]],[0,"collections","","Parallel iterator types for standard collections",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps…",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary …",null,null],[3,"Drain","","Draining parallel iterator that moves out of a binary …",null,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for …",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree …",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for …",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree …",null,null],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash …",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash …",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[3,"Drain","","Draining parallel iterator that moves out of a hash map, …",null,null],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash …",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash …",null,null],[3,"Drain","","Draining parallel iterator that moves out of a hash set, …",null,null],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for …",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked …",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked …",null,null],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for …",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a …",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a …",null,null],[3,"Drain","","Draining parallel iterator that moves a range out of a …",null,null],[0,"iter","rayon","Traits for writing parallel programs using an …",null,null],[4,"Either","rayon::iter","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …",null,null],[13,"Left","","A value of type <code>L</code>.",0,null],[13,"Right","","A value of type <code>R</code>.",0,null],[0,"plumbing","","Traits and functions used to implement parallel …",null,null],[8,"ProducerCallback","rayon::iter::plumbing","The <code>ProducerCallback</code> trait is a kind of generic closure, …",null,null],[16,"Output","","The type of value returned by this callback. Analogous to …",1,null],[10,"callback","","Invokes the callback with the given producer as argument. …",1,[[]]],[8,"Producer","","A <code>Producer</code> is effectively a \\\"splittable <code>IntoIterator</code>\\\". …",null,null],[16,"Item","","The type of item that will be produced by this producer …",2,null],[16,"IntoIter","","The type of iterator we will become.",2,null],[10,"into_iter","","Convert <code>self</code> into an iterator; at this point, no more …",2,[[]]],[11,"min_len","","The minimum number of items that we will process …",2,[[]]],[11,"max_len","","The maximum number of items that we will process …",2,[[]]],[10,"split_at","","Split into two producers; one produces items <code>0..index</code>, the…",2,[[]]],[11,"fold_with","","Iterate the producer, feeding each element to <code>folder</code>, and …",2,[[]]],[8,"Consumer","","A consumer is effectively a generalized \\\"fold\\\" operation, …",null,null],[16,"Folder","","The type of folder that this consumer can be converted …",3,null],[16,"Reducer","","The type of reducer that is produced if this consumer is …",3,null],[16,"Result","","The type of result that this consumer will ultimately …",3,null],[10,"split_at","","Divide the consumer into two consumers, one processing …",3,[[]]],[10,"into_folder","","Convert the consumer into a folder that can consume items …",3,[[]]],[10,"full","","Hint whether this <code>Consumer</code> would like to stop processing …",3,[[]]],[8,"Folder","","The <code>Folder</code> trait encapsulates the standard fold operation…",null,null],[16,"Result","","The type of result that will ultimately be produced by …",4,null],[10,"consume","","Consume next item and return new sequential state.",4,[[]]],[11,"consume_iter","","Consume items from the iterator until full, and return …",4,[[]]],[10,"complete","","Finish consuming items, produce final result.",4,[[]]],[10,"full","","Hint whether this <code>Folder</code> would like to stop processing …",4,[[]]],[8,"Reducer","","The reducer is the final step of a <code>Consumer</code> -- after a …",null,null],[10,"reduce","","Reduce two final results into one; this is executed after …",5,[[]]],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These …",null,null],[10,"split_off_left","","Splits off a \\\"left\\\" consumer and returns it. The <code>self</code> …",6,[[]]],[10,"to_reducer","","Creates a reducer that can be used to combine the results …",6,[[]]],[8,"UnindexedProducer","","A variant on <code>Producer</code> which does not know its exact …",null,null],[16,"Item","","The type of item returned by this producer.",7,null],[10,"split","","Split midway into a new producer if possible, otherwise …",7,[[]]],[10,"fold_with","","Iterate the producer, feeding each element to <code>folder</code>, and …",7,[[]]],[5,"bridge","","This helper function is used to \\\"connect\\\" a parallel …",null,[[]]],[5,"bridge_producer_consumer","","This helper function is used to \\\"connect\\\" a producer and a…",null,[[]]],[5,"bridge_unindexed","","A variant of <code>bridge_producer_consumer</code> where the producer …",null,[[]]],[3,"Chain","rayon::iter","<code>Chain</code> is an iterator that joins <code>b</code> after <code>a</code> in one …",null,null],[3,"Chunks","","<code>Chunks</code> is an iterator that groups elements of an …",null,null],[3,"Cloned","","<code>Cloned</code> is an iterator that clones the elements of an …",null,null],[3,"Copied","","<code>Copied</code> is an iterator that copies the elements of an …",null,null],[5,"empty","","Creates a parallel iterator that produces nothing.",null,[[],[["send",8],["empty",3]]]],[3,"Empty","","Iterator adaptor for the <code>empty()</code> function.",null,null],[3,"Enumerate","","<code>Enumerate</code> is an iterator that returns the current count …",null,null],[3,"Filter","","<code>Filter</code> takes a predicate <code>filter_op</code> and filters out …",null,null],[3,"FilterMap","","<code>FilterMap</code> creates an iterator that uses <code>filter_op</code> to both …",null,null],[3,"FlatMap","","<code>FlatMap</code> maps each element to a parallel iterator, then …",null,null],[3,"FlatMapIter","","<code>FlatMapIter</code> maps each element to a serial iterator, then …",null,null],[3,"Flatten","","<code>Flatten</code> turns each element to a parallel iterator, then …",null,null],[3,"FlattenIter","","<code>FlattenIter</code> turns each element to a serial iterator, then …",null,null],[3,"Fold","","<code>Fold</code> is an iterator that applies a function over an …",null,null],[3,"FoldWith","","<code>FoldWith</code> is an iterator that applies a function over an …",null,null],[3,"Inspect","","<code>Inspect</code> is an iterator that calls a function with a …",null,null],[3,"Interleave","","<code>Interleave</code> is an iterator that interleaves elements of …",null,null],[3,"InterleaveShortest","","<code>InterleaveShortest</code> is an iterator that works similarly to …",null,null],[3,"Intersperse","","<code>Intersperse</code> is an iterator that inserts a particular item …",null,null],[3,"MaxLen","","<code>MaxLen</code> is an iterator that imposes a maximum length on …",null,null],[3,"MinLen","","<code>MinLen</code> is an iterator that imposes a minimum length on …",null,null],[3,"Map","","<code>Map</code> is an iterator that transforms the elements of an …",null,null],[3,"MapInit","","<code>MapInit</code> is an iterator that transforms the elements of an …",null,null],[3,"MapWith","","<code>MapWith</code> is an iterator that transforms the elements of an …",null,null],[3,"MultiZip","","<code>MultiZip</code> is an iterator that zips up a tuple of parallel …",null,null],[5,"once","","Creates a parallel iterator that produces an element …",null,[[["send",8]],[["once",3],["send",8]]]],[3,"Once","","Iterator adaptor for the <code>once()</code> function.",null,null],[3,"PanicFuse","","<code>PanicFuse</code> is an adaptor that wraps an iterator with a …",null,null],[3,"IterBridge","","<code>IterBridge</code> is a parallel iterator that wraps a sequential …",null,null],[8,"ParallelBridge","","Conversion trait to convert an <code>Iterator</code> to a …",null,null],[10,"par_bridge","","Creates a bridge from this type to a <code>ParallelIterator</code>.",8,[[],["iterbridge",3]]],[3,"Positions","","<code>Positions</code> takes a predicate <code>predicate</code> and filters out …",null,null],[5,"repeat","","Creates a parallel iterator that endlessly repeats <code>elt</code> (by…",null,[[["send",8],["clone",8]],[["repeat",3],["send",8],["clone",8]]]],[5,"repeatn","","Creates a parallel iterator that produces <code>n</code> repeats of <code>elt</code>…",null,[[["send",8],["clone",8]],[["repeatn",3],["send",8],["clone",8]]]],[3,"Repeat","","Iterator adaptor for the <code>repeat()</code> function.",null,null],[3,"RepeatN","","Iterator adaptor for the <code>repeatn()</code> function.",null,null],[3,"Rev","","<code>Rev</code> is an iterator that produces elements in reverse …",null,null],[3,"Skip","","<code>Skip</code> is an iterator that skips over the first <code>n</code> elements. …",null,null],[5,"split","","The <code>split</code> function takes arbitrary data and a closure …",null,[[],["split",3]]],[3,"Split","","<code>Split</code> is a parallel iterator using arbitrary data and a …",null,null],[3,"Take","","<code>Take</code> is an iterator that iterates over the first <code>n</code> …",null,null],[3,"TryFold","","<code>TryFold</code> is an iterator that applies a function over an …",null,null],[3,"TryFoldWith","","<code>TryFoldWith</code> is an iterator that applies a function over …",null,null],[3,"Update","","<code>Update</code> is an iterator that mutates the elements of an …",null,null],[3,"WhileSome","","<code>WhileSome</code> is an iterator that yields the <code>Some</code> elements of …",null,null],[3,"Zip","","<code>Zip</code> is an iterator that zips up <code>a</code> and <code>b</code> into a single …",null,null],[3,"ZipEq","","An <code>IndexedParallelIterator</code> that iterates over two …",null,null],[3,"StepBy","","<code>StepBy</code> is an iterator that skips <code>n</code> elements between each …",null,null],[8,"IntoParallelIterator","","<code>IntoParallelIterator</code> implements the conversion to a …",null,null],[16,"Iter","","The parallel iterator type that will be created.",9,null],[16,"Item","","The type of item that the parallel iterator will produce.",9,null],[10,"into_par_iter","","Converts <code>self</code> into a parallel iterator.",9,[[]]],[8,"IntoParallelRefIterator","","<code>IntoParallelRefIterator</code> implements the conversion to a …",null,null],[16,"Iter","","The type of the parallel iterator that will be returned.",10,null],[16,"Item","","The type of item that the parallel iterator will produce. …",10,null],[10,"par_iter","","Converts <code>self</code> into a parallel iterator.",10,[[]]],[8,"IntoParallelRefMutIterator","","<code>IntoParallelRefMutIterator</code> implements the conversion to a …",null,null],[16,"Iter","","The type of iterator that will be created.",11,null],[16,"Item","","The type of item that will be produced; this is typically …",11,null],[10,"par_iter_mut","","Creates the parallel iterator from <code>self</code>.",11,[[]]],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",null,null],[16,"Item","","The type of item that this parallel iterator produces. …",12,null],[11,"for_each","","Executes <code>OP</code> on each item produced by the iterator, in …",12,[[]]],[11,"for_each_with","","Executes <code>OP</code> on the given <code>init</code> value with each item …",12,[[]]],[11,"for_each_init","","Executes <code>OP</code> on a value returned by <code>init</code> with each item …",12,[[]]],[11,"try_for_each","","Executes a fallible <code>OP</code> on each item produced by the …",12,[[]]],[11,"try_for_each_with","","Executes a fallible <code>OP</code> on the given <code>init</code> value with each …",12,[[]]],[11,"try_for_each_init","","Executes a fallible <code>OP</code> on a value returned by <code>init</code> with …",12,[[]]],[11,"count","","Counts the number of items in this parallel iterator.",12,[[]]],[11,"map","","Applies <code>map_op</code> to each item of this iterator, producing a …",12,[[],["map",3]]],[11,"map_with","","Applies <code>map_op</code> to the given <code>init</code> value with each item of …",12,[[],["mapwith",3]]],[11,"map_init","","Applies <code>map_op</code> to a value returned by <code>init</code> with each item …",12,[[],["mapinit",3]]],[11,"cloned","","Creates an iterator which clones all of its elements.  …",12,[[],["cloned",3]]],[11,"copied","","Creates an iterator which copies all of its elements.  …",12,[[],["copied",3]]],[11,"inspect","","Applies <code>inspect_op</code> to a reference to each item of this …",12,[[],["inspect",3]]],[11,"update","","Mutates each item of this iterator before yielding it.",12,[[],["update",3]]],[11,"filter","","Applies <code>filter_op</code> to each item of this iterator, …",12,[[],["filter",3]]],[11,"filter_map","","Applies <code>filter_op</code> to each item of this iterator to get an …",12,[[],["filtermap",3]]],[11,"flat_map","","Applies <code>map_op</code> to each item of this iterator to get …",12,[[],["flatmap",3]]],[11,"flat_map_iter","","Applies <code>map_op</code> to each item of this iterator to get …",12,[[],["flatmapiter",3]]],[11,"flatten","","An adaptor that flattens parallel-iterable <code>Item</code>s into one …",12,[[],["flatten",3]]],[11,"flatten_iter","","An adaptor that flattens serial-iterable <code>Item</code>s into one …",12,[[],["flatteniter",3]]],[11,"reduce","","Reduces the items in the iterator into one item using <code>op</code>. …",12,[[]]],[11,"reduce_with","","Reduces the items in the iterator into one item using <code>op</code>. …",12,[[],["option",4]]],[11,"try_reduce","","Reduces the items in the iterator into one item using a …",12,[[]]],[11,"try_reduce_with","","Reduces the items in the iterator into one item using a …",12,[[],["option",4]]],[11,"fold","","Parallel fold is similar to sequential fold except that …",12,[[],["fold",3]]],[11,"fold_with","","Applies <code>fold_op</code> to the given <code>init</code> value with each item of …",12,[[],["foldwith",3]]],[11,"try_fold","","Performs a fallible parallel fold.",12,[[],["tryfold",3]]],[11,"try_fold_with","","Performs a fallible parallel fold with a cloneable <code>init</code> …",12,[[],["tryfoldwith",3]]],[11,"sum","","Sums up the items in the iterator.",12,[[]]],[11,"product","","Multiplies all the items in the iterator.",12,[[]]],[11,"min","","Computes the minimum of all the items in the iterator. If …",12,[[],["option",4]]],[11,"min_by","","Computes the minimum of all the items in the iterator …",12,[[],["option",4]]],[11,"min_by_key","","Computes the item that yields the minimum value for the …",12,[[],["option",4]]],[11,"max","","Computes the maximum of all the items in the iterator. If …",12,[[],["option",4]]],[11,"max_by","","Computes the maximum of all the items in the iterator …",12,[[],["option",4]]],[11,"max_by_key","","Computes the item that yields the maximum value for the …",12,[[],["option",4]]],[11,"chain","","Takes two iterators and creates a new iterator over both.",12,[[],["chain",3]]],[11,"find_any","","Searches for <strong>some</strong> item in the parallel iterator that …",12,[[],["option",4]]],[11,"find_first","","Searches for the sequentially <strong>first</strong> item in the parallel …",12,[[],["option",4]]],[11,"find_last","","Searches for the sequentially <strong>last</strong> item in the parallel …",12,[[],["option",4]]],[11,"find_map_any","","Applies the given predicate to the items in the parallel …",12,[[],["option",4]]],[11,"find_map_first","","Applies the given predicate to the items in the parallel …",12,[[],["option",4]]],[11,"find_map_last","","Applies the given predicate to the items in the parallel …",12,[[],["option",4]]],[11,"any","","Searches for <strong>some</strong> item in the parallel iterator that …",12,[[]]],[11,"all","","Tests that every item in the parallel iterator matches …",12,[[]]],[11,"while_some","","Creates an iterator over the <code>Some</code> items of this iterator, …",12,[[],["whilesome",3]]],[11,"panic_fuse","","Wraps an iterator with a fuse in case of panics, to halt …",12,[[],["panicfuse",3]]],[11,"collect","","Creates a fresh collection containing all the elements …",12,[[]]],[11,"unzip","","Unzips the items of a parallel iterator into a pair of …",12,[[]]],[11,"partition","","Partitions the items of a parallel iterator into a pair …",12,[[]]],[11,"partition_map","","Partitions and maps the items of a parallel iterator into …",12,[[]]],[11,"intersperse","","Intersperses clones of an element between items of this …",12,[[],["intersperse",3]]],[10,"drive_unindexed","","Internal method used to define the behavior of this …",12,[[]]],[11,"opt_len","","Internal method used to define the behavior of this …",12,[[],["option",4]]],[8,"IndexedParallelIterator","","An iterator that supports \\\"random access\\\" to its data, …",null,null],[11,"collect_into_vec","","Collects the results of the iterator into the specified …",13,[[["vec",3]]]],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified …",13,[[["vec",3],["vec",3]]]],[11,"zip","","Iterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …",13,[[],["zip",3]]],[11,"zip_eq","","The same as <code>Zip</code>, but requires that both iterators have …",13,[[],["zipeq",3]]],[11,"interleave","","Interleaves elements of this iterator and the other given …",13,[[],["interleave",3]]],[11,"interleave_shortest","","Interleaves elements of this iterator and the other given …",13,[[],["interleaveshortest",3]]],[11,"chunks","","Splits an iterator up into fixed-size chunks.",13,[[],["chunks",3]]],[11,"cmp","","Lexicographically compares the elements of this …",13,[[],["ordering",4]]],[11,"partial_cmp","","Lexicographically compares the elements of this …",13,[[],[["option",4],["ordering",4]]]],[11,"eq","","Determines if the elements of this <code>ParallelIterator</code> are …",13,[[]]],[11,"ne","","Determines if the elements of this <code>ParallelIterator</code> are …",13,[[]]],[11,"lt","","Determines if the elements of this <code>ParallelIterator</code> are …",13,[[]]],[11,"le","","Determines if the elements of this <code>ParallelIterator</code> are …",13,[[]]],[11,"gt","","Determines if the elements of this <code>ParallelIterator</code> are …",13,[[]]],[11,"ge","","Determines if the elements of this <code>ParallelIterator</code> are …",13,[[]]],[11,"enumerate","","Yields an index along with each item.",13,[[],["enumerate",3]]],[11,"step_by","","Creates an iterator that steps by the given amount",13,[[],["stepby",3]]],[11,"skip","","Creates an iterator that skips the first <code>n</code> elements.",13,[[],["skip",3]]],[11,"take","","Creates an iterator that yields the first <code>n</code> elements.",13,[[],["take",3]]],[11,"position_any","","Searches for <strong>some</strong> item in the parallel iterator that …",13,[[],["option",4]]],[11,"position_first","","Searches for the sequentially <strong>first</strong> item in the parallel …",13,[[],["option",4]]],[11,"position_last","","Searches for the sequentially <strong>last</strong> item in the parallel …",13,[[],["option",4]]],[11,"positions","","Searches for items in the parallel iterator that match …",13,[[],["positions",3]]],[11,"rev","","Produces a new iterator with the elements of this …",13,[[],["rev",3]]],[11,"with_min_len","","Sets the minimum length of iterators desired to process …",13,[[],["minlen",3]]],[11,"with_max_len","","Sets the maximum length of iterators desired to process …",13,[[],["maxlen",3]]],[10,"len","","Produces an exact count of how many items this iterator …",13,[[]]],[10,"drive","","Internal method used to define the behavior of this …",13,[[["consumer",8]]]],[10,"with_producer","","Internal method used to define the behavior of this …",13,[[["producercallback",8]]]],[8,"FromParallelIterator","","<code>FromParallelIterator</code> implements the creation of a …",null,null],[10,"from_par_iter","","Creates an instance of the collection from the parallel …",14,[[]]],[8,"ParallelExtend","","<code>ParallelExtend</code> extends an existing collection with items …",null,null],[10,"par_extend","","Extends an instance of the collection with the elements …",15,[[]]],[8,"ParallelDrainFull","","<code>ParallelDrainFull</code> creates a parallel iterator that moves …",null,null],[16,"Iter","","The draining parallel iterator type that will be created.",16,null],[16,"Item","","The type of item that the parallel iterator will produce. …",16,null],[10,"par_drain","","Returns a draining parallel iterator over an entire …",16,[[]]],[8,"ParallelDrainRange","","<code>ParallelDrainRange</code> creates a parallel iterator that moves …",null,null],[16,"Iter","","The draining parallel iterator type that will be created.",17,null],[16,"Item","","The type of item that the parallel iterator will produce. …",17,null],[10,"par_drain","","Returns a draining parallel iterator over a range of the …",17,[[["rangebounds",8]]]],[0,"option","rayon","Parallel iterator types for options",null,null],[3,"IntoIter","rayon::option","A parallel iterator over the value in <code>Some</code> variant of an …",null,null],[3,"Iter","","A parallel iterator over a reference to the <code>Some</code> variant …",null,null],[3,"IterMut","","A parallel iterator over a mutable reference to the <code>Some</code> …",null,null],[0,"prelude","rayon","The rayon prelude imports the various <code>ParallelIterator</code> …",null,null],[8,"ParallelBridge","rayon::prelude","Conversion trait to convert an <code>Iterator</code> to a …",null,null],[10,"par_bridge","","Creates a bridge from this type to a <code>ParallelIterator</code>.",8,[[],["iterbridge",3]]],[0,"range","rayon","Parallel iterator types for ranges, the type for values …",null,null],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all …",null,null],[0,"range_inclusive","rayon","Parallel iterator types for inclusive ranges, the type …",null,null],[3,"Iter","rayon::range_inclusive","Parallel iterator over an inclusive range, implemented …",null,null],[0,"result","rayon","Parallel iterator types for results",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[0,"slice","rayon","Parallel iterator types for slices",null,null],[8,"ParallelSlice","rayon::slice","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the …",18,[[]]],[11,"par_split","","Returns a parallel iterator over subslices separated by …",18,[[],["split",3]]],[11,"par_windows","","Returns a parallel iterator over all contiguous windows …",18,[[],["windows",3]]],[11,"par_chunks","","Returns a parallel iterator over at most <code>chunk_size</code> …",18,[[],["chunks",3]]],[11,"par_chunks_exact","","Returns a parallel iterator over <code>chunk_size</code> elements of …",18,[[],["chunksexact",3]]],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement …",19,[[]]],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices …",19,[[],["splitmut",3]]],[11,"par_chunks_mut","","Returns a parallel iterator over at most <code>chunk_size</code> …",19,[[],["chunksmut",3]]],[11,"par_chunks_exact_mut","","Returns a parallel iterator over <code>chunk_size</code> elements of …",19,[[],["chunksexactmut",3]]],[11,"par_sort","","Sorts the slice in parallel.",19,[[]]],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",19,[[]]],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction …",19,[[]]],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the …",19,[[]]],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, …",19,[[]]],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction …",19,[[]]],[3,"Iter","","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks …",null,null],[3,"ChunksExact","","Parallel iterator over immutable non-overlapping chunks …",null,null],[11,"remainder","","Return the remainder of the original slice that is not …",20,[[]]],[3,"Windows","","Parallel iterator over immutable overlapping windows of a …",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of …",null,null],[3,"ChunksExactMut","","Parallel iterator over mutable non-overlapping chunks of …",null,null],[11,"into_remainder","","Return the remainder of the original slice that is not …",21,[[]]],[11,"remainder","","Return the remainder of the original slice that is not …",21,[[]]],[11,"take_remainder","","Return the remainder of the original slice that is not …",21,[[]]],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a …",null,null],[0,"str","rayon","Parallel iterator types for strings",null,null],[8,"ParallelString","rayon::str","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement …",22,[[]]],[11,"par_chars","","Returns a parallel iterator over the characters of a …",22,[[],["chars",3]]],[11,"par_char_indices","","Returns a parallel iterator over the characters of a …",22,[[],["charindices",3]]],[11,"par_bytes","","Returns a parallel iterator over the bytes of a string.",22,[[],["bytes",3]]],[11,"par_encode_utf16","","Returns a parallel iterator over a string encoded as …",22,[[],["encodeutf16",3]]],[11,"par_split","","Returns a parallel iterator over substrings separated by a…",22,[[["pattern",8]],[["pattern",8],["split",3]]]],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by …",22,[[["pattern",8]],[["splitterminator",3],["pattern",8]]]],[11,"par_lines","","Returns a parallel iterator over the lines of a string, …",22,[[],["lines",3]]],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a …",22,[[],["splitwhitespace",3]]],[11,"par_matches","","Returns a parallel iterator over substrings that match a …",22,[[["pattern",8]],[["matches",3],["pattern",8]]]],[11,"par_match_indices","","Returns a parallel iterator over substrings that match a …",22,[[["pattern",8]],[["matchindices",3],["pattern",8]]]],[3,"Chars","","Parallel iterator over the characters of a string",null,null],[3,"CharIndices","","Parallel iterator over the characters of a string, with …",null,null],[3,"Bytes","","Parallel iterator over the bytes of a string",null,null],[3,"EncodeUtf16","","Parallel iterator over a string encoded as UTF-16",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a …",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[3,"Matches","","Parallel iterator over substrings that match a pattern",null,null],[3,"MatchIndices","","Parallel iterator over substrings that match a pattern, …",null,null],[0,"string","rayon","This module contains the parallel iterator types for …",null,null],[3,"Drain","rayon::string","Draining parallel iterator that moves a range of …",null,null],[0,"vec","rayon","Parallel iterator types for vectors (<code>Vec<T></code>)",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[3,"Drain","","Draining parallel iterator that moves a range out of a …",null,null],[11,"from","rayon","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"init","","",24,[[]]],[11,"deref","","",24,[[]]],[11,"deref_mut","","",24,[[]]],[11,"drop","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"init","","",25,[[]]],[11,"deref","","",25,[[]]],[11,"deref_mut","","",25,[[]]],[11,"drop","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"init","","",26,[[]]],[11,"deref","","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"drop","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"into_par_iter","rayon::collections::binary_heap","",30,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"init","","",30,[[]]],[11,"deref","","",30,[[]]],[11,"deref_mut","","",30,[[]]],[11,"drop","","",30,[[]]],[11,"into_par_iter","","",31,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"init","","",31,[[]]],[11,"deref","","",31,[[]]],[11,"deref_mut","","",31,[[]]],[11,"drop","","",31,[[]]],[11,"into_par_iter","","",32,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"init","","",32,[[]]],[11,"deref","","",32,[[]]],[11,"deref_mut","","",32,[[]]],[11,"drop","","",32,[[]]],[11,"into_par_iter","rayon::collections::btree_map","",33,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"init","","",33,[[]]],[11,"deref","","",33,[[]]],[11,"deref_mut","","",33,[[]]],[11,"drop","","",33,[[]]],[11,"into_par_iter","","",34,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"init","","",34,[[]]],[11,"deref","","",34,[[]]],[11,"deref_mut","","",34,[[]]],[11,"drop","","",34,[[]]],[11,"into_par_iter","","",35,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"init","","",35,[[]]],[11,"deref","","",35,[[]]],[11,"deref_mut","","",35,[[]]],[11,"drop","","",35,[[]]],[11,"into_par_iter","rayon::collections::btree_set","",36,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"init","","",36,[[]]],[11,"deref","","",36,[[]]],[11,"deref_mut","","",36,[[]]],[11,"drop","","",36,[[]]],[11,"into_par_iter","","",37,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"init","","",37,[[]]],[11,"deref","","",37,[[]]],[11,"deref_mut","","",37,[[]]],[11,"drop","","",37,[[]]],[11,"into_par_iter","rayon::collections::hash_map","",38,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"init","","",38,[[]]],[11,"deref","","",38,[[]]],[11,"deref_mut","","",38,[[]]],[11,"drop","","",38,[[]]],[11,"into_par_iter","","",39,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"init","","",39,[[]]],[11,"deref","","",39,[[]]],[11,"deref_mut","","",39,[[]]],[11,"drop","","",39,[[]]],[11,"into_par_iter","","",40,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"init","","",40,[[]]],[11,"deref","","",40,[[]]],[11,"deref_mut","","",40,[[]]],[11,"drop","","",40,[[]]],[11,"into_par_iter","","",41,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"init","","",41,[[]]],[11,"deref","","",41,[[]]],[11,"deref_mut","","",41,[[]]],[11,"drop","","",41,[[]]],[11,"into_par_iter","rayon::collections::hash_set","",42,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"init","","",42,[[]]],[11,"deref","","",42,[[]]],[11,"deref_mut","","",42,[[]]],[11,"drop","","",42,[[]]],[11,"into_par_iter","","",43,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"init","","",43,[[]]],[11,"deref","","",43,[[]]],[11,"deref_mut","","",43,[[]]],[11,"drop","","",43,[[]]],[11,"into_par_iter","","",44,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"init","","",44,[[]]],[11,"deref","","",44,[[]]],[11,"deref_mut","","",44,[[]]],[11,"drop","","",44,[[]]],[11,"into_par_iter","rayon::collections::linked_list","",45,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"init","","",45,[[]]],[11,"deref","","",45,[[]]],[11,"deref_mut","","",45,[[]]],[11,"drop","","",45,[[]]],[11,"into_par_iter","","",46,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"init","","",46,[[]]],[11,"deref","","",46,[[]]],[11,"deref_mut","","",46,[[]]],[11,"drop","","",46,[[]]],[11,"into_par_iter","","",47,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"init","","",47,[[]]],[11,"deref","","",47,[[]]],[11,"deref_mut","","",47,[[]]],[11,"drop","","",47,[[]]],[11,"into_par_iter","rayon::collections::vec_deque","",48,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"init","","",48,[[]]],[11,"deref","","",48,[[]]],[11,"deref_mut","","",48,[[]]],[11,"drop","","",48,[[]]],[11,"into_par_iter","","",49,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"init","","",49,[[]]],[11,"deref","","",49,[[]]],[11,"deref_mut","","",49,[[]]],[11,"drop","","",49,[[]]],[11,"into_par_iter","","",50,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"init","","",50,[[]]],[11,"deref","","",50,[[]]],[11,"deref_mut","","",50,[[]]],[11,"drop","","",50,[[]]],[11,"into_par_iter","","",51,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"init","","",51,[[]]],[11,"deref","","",51,[[]]],[11,"deref_mut","","",51,[[]]],[11,"drop","","",51,[[]]],[11,"into_par_iter","rayon::iter","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"into_par_iter","","",52,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"init","","",52,[[]]],[11,"deref","","",52,[[]]],[11,"deref_mut","","",52,[[]]],[11,"drop","","",52,[[]]],[11,"into_par_iter","","",53,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"init","","",53,[[]]],[11,"deref","","",53,[[]]],[11,"deref_mut","","",53,[[]]],[11,"drop","","",53,[[]]],[11,"into_par_iter","","",54,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"init","","",54,[[]]],[11,"deref","","",54,[[]]],[11,"deref_mut","","",54,[[]]],[11,"drop","","",54,[[]]],[11,"into_par_iter","","",55,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"init","","",55,[[]]],[11,"deref","","",55,[[]]],[11,"deref_mut","","",55,[[]]],[11,"drop","","",55,[[]]],[11,"into_par_iter","","",56,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"init","","",56,[[]]],[11,"deref","","",56,[[]]],[11,"deref_mut","","",56,[[]]],[11,"drop","","",56,[[]]],[11,"into_par_iter","","",57,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"init","","",57,[[]]],[11,"deref","","",57,[[]]],[11,"deref_mut","","",57,[[]]],[11,"drop","","",57,[[]]],[11,"into_par_iter","","",58,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"init","","",58,[[]]],[11,"deref","","",58,[[]]],[11,"deref_mut","","",58,[[]]],[11,"drop","","",58,[[]]],[11,"into_par_iter","","",59,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"init","","",59,[[]]],[11,"deref","","",59,[[]]],[11,"deref_mut","","",59,[[]]],[11,"drop","","",59,[[]]],[11,"into_par_iter","","",60,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"init","","",60,[[]]],[11,"deref","","",60,[[]]],[11,"deref_mut","","",60,[[]]],[11,"drop","","",60,[[]]],[11,"into_par_iter","","",61,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"init","","",61,[[]]],[11,"deref","","",61,[[]]],[11,"deref_mut","","",61,[[]]],[11,"drop","","",61,[[]]],[11,"into_par_iter","","",62,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"init","","",62,[[]]],[11,"deref","","",62,[[]]],[11,"deref_mut","","",62,[[]]],[11,"drop","","",62,[[]]],[11,"into_par_iter","","",63,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"init","","",63,[[]]],[11,"deref","","",63,[[]]],[11,"deref_mut","","",63,[[]]],[11,"drop","","",63,[[]]],[11,"into_par_iter","","",64,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"init","","",64,[[]]],[11,"deref","","",64,[[]]],[11,"deref_mut","","",64,[[]]],[11,"drop","","",64,[[]]],[11,"into_par_iter","","",65,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"init","","",65,[[]]],[11,"deref","","",65,[[]]],[11,"deref_mut","","",65,[[]]],[11,"drop","","",65,[[]]],[11,"into_par_iter","","",66,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"init","","",66,[[]]],[11,"deref","","",66,[[]]],[11,"deref_mut","","",66,[[]]],[11,"drop","","",66,[[]]],[11,"into_par_iter","","",67,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"init","","",67,[[]]],[11,"deref","","",67,[[]]],[11,"deref_mut","","",67,[[]]],[11,"drop","","",67,[[]]],[11,"into_par_iter","","",68,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"init","","",68,[[]]],[11,"deref","","",68,[[]]],[11,"deref_mut","","",68,[[]]],[11,"drop","","",68,[[]]],[11,"into_par_iter","","",69,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"init","","",69,[[]]],[11,"deref","","",69,[[]]],[11,"deref_mut","","",69,[[]]],[11,"drop","","",69,[[]]],[11,"into_par_iter","","",70,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"init","","",70,[[]]],[11,"deref","","",70,[[]]],[11,"deref_mut","","",70,[[]]],[11,"drop","","",70,[[]]],[11,"into_par_iter","","",71,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"init","","",71,[[]]],[11,"deref","","",71,[[]]],[11,"deref_mut","","",71,[[]]],[11,"drop","","",71,[[]]],[11,"into_par_iter","","",72,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"init","","",72,[[]]],[11,"deref","","",72,[[]]],[11,"deref_mut","","",72,[[]]],[11,"drop","","",72,[[]]],[11,"into_par_iter","","",73,[[]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"init","","",73,[[]]],[11,"deref","","",73,[[]]],[11,"deref_mut","","",73,[[]]],[11,"drop","","",73,[[]]],[11,"into_par_iter","","",74,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"init","","",74,[[]]],[11,"deref","","",74,[[]]],[11,"deref_mut","","",74,[[]]],[11,"drop","","",74,[[]]],[11,"into_par_iter","","",75,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"init","","",75,[[]]],[11,"deref","","",75,[[]]],[11,"deref_mut","","",75,[[]]],[11,"drop","","",75,[[]]],[11,"into_par_iter","","",76,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"init","","",76,[[]]],[11,"deref","","",76,[[]]],[11,"deref_mut","","",76,[[]]],[11,"drop","","",76,[[]]],[11,"into_par_iter","","",77,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"init","","",77,[[]]],[11,"deref","","",77,[[]]],[11,"deref_mut","","",77,[[]]],[11,"drop","","",77,[[]]],[11,"into_par_iter","","",78,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"init","","",78,[[]]],[11,"deref","","",78,[[]]],[11,"deref_mut","","",78,[[]]],[11,"drop","","",78,[[]]],[11,"into_par_iter","","",79,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"init","","",79,[[]]],[11,"deref","","",79,[[]]],[11,"deref_mut","","",79,[[]]],[11,"drop","","",79,[[]]],[11,"into_par_iter","","",80,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"init","","",80,[[]]],[11,"deref","","",80,[[]]],[11,"deref_mut","","",80,[[]]],[11,"drop","","",80,[[]]],[11,"into_par_iter","","",81,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"init","","",81,[[]]],[11,"deref","","",81,[[]]],[11,"deref_mut","","",81,[[]]],[11,"drop","","",81,[[]]],[11,"into_par_iter","","",82,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"init","","",82,[[]]],[11,"deref","","",82,[[]]],[11,"deref_mut","","",82,[[]]],[11,"drop","","",82,[[]]],[11,"into_par_iter","","",83,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"init","","",83,[[]]],[11,"deref","","",83,[[]]],[11,"deref_mut","","",83,[[]]],[11,"drop","","",83,[[]]],[11,"into_par_iter","","",84,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"init","","",84,[[]]],[11,"deref","","",84,[[]]],[11,"deref_mut","","",84,[[]]],[11,"drop","","",84,[[]]],[11,"into_par_iter","","",85,[[]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"init","","",85,[[]]],[11,"deref","","",85,[[]]],[11,"deref_mut","","",85,[[]]],[11,"drop","","",85,[[]]],[11,"into_par_iter","","",86,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"init","","",86,[[]]],[11,"deref","","",86,[[]]],[11,"deref_mut","","",86,[[]]],[11,"drop","","",86,[[]]],[11,"into_par_iter","","",87,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"init","","",87,[[]]],[11,"deref","","",87,[[]]],[11,"deref_mut","","",87,[[]]],[11,"drop","","",87,[[]]],[11,"into_par_iter","","",88,[[]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"init","","",88,[[]]],[11,"deref","","",88,[[]]],[11,"deref_mut","","",88,[[]]],[11,"drop","","",88,[[]]],[11,"into_par_iter","","",89,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"init","","",89,[[]]],[11,"deref","","",89,[[]]],[11,"deref_mut","","",89,[[]]],[11,"drop","","",89,[[]]],[11,"into_par_iter","","",90,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"init","","",90,[[]]],[11,"deref","","",90,[[]]],[11,"deref_mut","","",90,[[]]],[11,"drop","","",90,[[]]],[11,"into_par_iter","","",91,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"init","","",91,[[]]],[11,"deref","","",91,[[]]],[11,"deref_mut","","",91,[[]]],[11,"drop","","",91,[[]]],[11,"into_par_iter","","",92,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"init","","",92,[[]]],[11,"deref","","",92,[[]]],[11,"deref_mut","","",92,[[]]],[11,"drop","","",92,[[]]],[11,"into_par_iter","rayon::option","",93,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"init","","",93,[[]]],[11,"deref","","",93,[[]]],[11,"deref_mut","","",93,[[]]],[11,"drop","","",93,[[]]],[11,"into_par_iter","","",94,[[]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"init","","",94,[[]]],[11,"deref","","",94,[[]]],[11,"deref_mut","","",94,[[]]],[11,"drop","","",94,[[]]],[11,"into_par_iter","","",95,[[]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"init","","",95,[[]]],[11,"deref","","",95,[[]]],[11,"deref_mut","","",95,[[]]],[11,"drop","","",95,[[]]],[11,"into_par_iter","rayon::range","",96,[[]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"init","","",96,[[]]],[11,"deref","","",96,[[]]],[11,"deref_mut","","",96,[[]]],[11,"drop","","",96,[[]]],[11,"into_par_iter","rayon::range_inclusive","",97,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"init","","",97,[[]]],[11,"deref","","",97,[[]]],[11,"deref_mut","","",97,[[]]],[11,"drop","","",97,[[]]],[11,"into_par_iter","rayon::result","",98,[[]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"init","","",98,[[]]],[11,"deref","","",98,[[]]],[11,"deref_mut","","",98,[[]]],[11,"drop","","",98,[[]]],[11,"into_par_iter","","",99,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"init","","",99,[[]]],[11,"deref","","",99,[[]]],[11,"deref_mut","","",99,[[]]],[11,"drop","","",99,[[]]],[11,"into_par_iter","","",100,[[]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"init","","",100,[[]]],[11,"deref","","",100,[[]]],[11,"deref_mut","","",100,[[]]],[11,"drop","","",100,[[]]],[11,"into_par_iter","rayon::slice","",101,[[]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"init","","",101,[[]]],[11,"deref","","",101,[[]]],[11,"deref_mut","","",101,[[]]],[11,"drop","","",101,[[]]],[11,"into_par_iter","","",102,[[]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"init","","",102,[[]]],[11,"deref","","",102,[[]]],[11,"deref_mut","","",102,[[]]],[11,"drop","","",102,[[]]],[11,"into_par_iter","","",20,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"init","","",20,[[]]],[11,"deref","","",20,[[]]],[11,"deref_mut","","",20,[[]]],[11,"drop","","",20,[[]]],[11,"into_par_iter","","",103,[[]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"init","","",103,[[]]],[11,"deref","","",103,[[]]],[11,"deref_mut","","",103,[[]]],[11,"drop","","",103,[[]]],[11,"into_par_iter","","",104,[[]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"init","","",104,[[]]],[11,"deref","","",104,[[]]],[11,"deref_mut","","",104,[[]]],[11,"drop","","",104,[[]]],[11,"into_par_iter","","",105,[[]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"init","","",105,[[]]],[11,"deref","","",105,[[]]],[11,"deref_mut","","",105,[[]]],[11,"drop","","",105,[[]]],[11,"into_par_iter","","",21,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"into_par_iter","","",106,[[]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"init","","",106,[[]]],[11,"deref","","",106,[[]]],[11,"deref_mut","","",106,[[]]],[11,"drop","","",106,[[]]],[11,"into_par_iter","","",107,[[]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"init","","",107,[[]]],[11,"deref","","",107,[[]]],[11,"deref_mut","","",107,[[]]],[11,"drop","","",107,[[]]],[11,"into_par_iter","rayon::str","",108,[[]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"init","","",108,[[]]],[11,"deref","","",108,[[]]],[11,"deref_mut","","",108,[[]]],[11,"drop","","",108,[[]]],[11,"into_par_iter","","",109,[[]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"init","","",109,[[]]],[11,"deref","","",109,[[]]],[11,"deref_mut","","",109,[[]]],[11,"drop","","",109,[[]]],[11,"into_par_iter","","",110,[[]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"init","","",110,[[]]],[11,"deref","","",110,[[]]],[11,"deref_mut","","",110,[[]]],[11,"drop","","",110,[[]]],[11,"into_par_iter","","",111,[[]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"init","","",111,[[]]],[11,"deref","","",111,[[]]],[11,"deref_mut","","",111,[[]]],[11,"drop","","",111,[[]]],[11,"into_par_iter","","",112,[[]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"init","","",112,[[]]],[11,"deref","","",112,[[]]],[11,"deref_mut","","",112,[[]]],[11,"drop","","",112,[[]]],[11,"into_par_iter","","",113,[[]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"init","","",113,[[]]],[11,"deref","","",113,[[]]],[11,"deref_mut","","",113,[[]]],[11,"drop","","",113,[[]]],[11,"into_par_iter","","",114,[[]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"init","","",114,[[]]],[11,"deref","","",114,[[]]],[11,"deref_mut","","",114,[[]]],[11,"drop","","",114,[[]]],[11,"into_par_iter","","",115,[[]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"init","","",115,[[]]],[11,"deref","","",115,[[]]],[11,"deref_mut","","",115,[[]]],[11,"drop","","",115,[[]]],[11,"into_par_iter","","",116,[[]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"init","","",116,[[]]],[11,"deref","","",116,[[]]],[11,"deref_mut","","",116,[[]]],[11,"drop","","",116,[[]]],[11,"into_par_iter","","",117,[[]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"init","","",117,[[]]],[11,"deref","","",117,[[]]],[11,"deref_mut","","",117,[[]]],[11,"drop","","",117,[[]]],[11,"into_par_iter","rayon::string","",118,[[]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"init","","",118,[[]]],[11,"deref","","",118,[[]]],[11,"deref_mut","","",118,[[]]],[11,"drop","","",118,[[]]],[11,"into_par_iter","rayon::vec","",119,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"init","","",119,[[]]],[11,"deref","","",119,[[]]],[11,"deref_mut","","",119,[[]]],[11,"drop","","",119,[[]]],[11,"into_par_iter","","",120,[[]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"init","","",120,[[]]],[11,"deref","","",120,[[]]],[11,"deref_mut","","",120,[[]]],[11,"drop","","",120,[[]]],[11,"fmt","rayon::iter","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",0,[[["either",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["either",4]]]],[11,"le","","",0,[[["either",4]]]],[11,"gt","","",0,[[["either",4]]]],[11,"ge","","",0,[[["either",4]]]],[11,"read","","",0,[[],[["result",4],["error",3]]]],[11,"read_to_end","","",0,[[["vec",3]],[["result",4],["error",3]]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"fold","","",0,[[]]],[11,"count","","",0,[[]]],[11,"last","","",0,[[],["option",4]]],[11,"nth","","",0,[[],["option",4]]],[11,"collect","","",0,[[]]],[11,"all","","",0,[[]]],[11,"from","","",0,[[["result",4]],["either",4]]],[11,"deref","","",0,[[]]],[11,"as_mut","","",0,[[],["osstr",3]]],[11,"as_mut","","",0,[[],["cstr",3]]],[11,"as_mut","","",0,[[],["path",3]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[],["cstr",3]]],[11,"as_ref","","",0,[[],["path",3]]],[11,"as_ref","","",0,[[],["osstr",3]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"extend","","",0,[[]]],[11,"description","","",0,[[]]],[11,"cause","","",0,[[],[["option",4],["error",8]]]],[11,"into","","",0,[[],["result",4]]],[11,"clone","","",0,[[],["either",4]]],[11,"next_back","","",0,[[],["option",4]]],[11,"cmp","","",0,[[["either",4]],["ordering",4]]],[11,"eq","","",0,[[["either",4]]]],[11,"ne","","",0,[[["either",4]]]],[11,"write","","",0,[[],[["result",4],["error",3]]]],[11,"flush","","",0,[[],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"deref_mut","","",0,[[]]],[11,"fill_buf","","",0,[[],[["result",4],["error",3]]]],[11,"consume","","",0,[[]]],[11,"fmt","rayon","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"default","","",27,[[],[["defaultspawn",3],["threadpoolbuilder",3]]]],[11,"description","","",26,[[]]],[11,"source","","",26,[[],[["error",8],["option",4]]]],[11,"fmt","","",27,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",23,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",28,[[["formatter",3]],[["result",4],["error",3]]]],[11,"drop","","",25,[[]]],[11,"drive_unindexed","rayon::collections::binary_heap","",30,[[]]],[11,"opt_len","","",30,[[],["option",4]]],[11,"drive_unindexed","","",31,[[]]],[11,"opt_len","","",31,[[],["option",4]]],[11,"drive_unindexed","","",32,[[]]],[11,"opt_len","","",32,[[],["option",4]]],[11,"drive_unindexed","rayon::collections::btree_map","",33,[[]]],[11,"opt_len","","",33,[[],["option",4]]],[11,"drive_unindexed","","",34,[[]]],[11,"opt_len","","",34,[[],["option",4]]],[11,"drive_unindexed","","",35,[[]]],[11,"opt_len","","",35,[[],["option",4]]],[11,"drive_unindexed","rayon::collections::btree_set","",36,[[]]],[11,"opt_len","","",36,[[],["option",4]]],[11,"drive_unindexed","","",37,[[]]],[11,"opt_len","","",37,[[],["option",4]]],[11,"drive_unindexed","rayon::collections::hash_map","",38,[[]]],[11,"opt_len","","",38,[[],["option",4]]],[11,"drive_unindexed","","",39,[[]]],[11,"opt_len","","",39,[[],["option",4]]],[11,"drive_unindexed","","",40,[[]]],[11,"opt_len","","",40,[[],["option",4]]],[11,"drive_unindexed","","",41,[[]]],[11,"opt_len","","",41,[[],["option",4]]],[11,"drive_unindexed","rayon::collections::hash_set","",42,[[]]],[11,"opt_len","","",42,[[],["option",4]]],[11,"drive_unindexed","","",43,[[]]],[11,"opt_len","","",43,[[],["option",4]]],[11,"drive_unindexed","","",44,[[]]],[11,"opt_len","","",44,[[],["option",4]]],[11,"drive_unindexed","rayon::collections::linked_list","",45,[[]]],[11,"opt_len","","",45,[[],["option",4]]],[11,"drive_unindexed","","",46,[[]]],[11,"opt_len","","",46,[[],["option",4]]],[11,"drive_unindexed","","",47,[[]]],[11,"opt_len","","",47,[[],["option",4]]],[11,"drive_unindexed","rayon::collections::vec_deque","",48,[[]]],[11,"opt_len","","",48,[[],["option",4]]],[11,"drive_unindexed","","",49,[[]]],[11,"opt_len","","",49,[[],["option",4]]],[11,"drive_unindexed","","",50,[[]]],[11,"opt_len","","",50,[[],["option",4]]],[11,"drive_unindexed","","",51,[[]]],[11,"opt_len","","",51,[[],["option",4]]],[11,"drive_unindexed","rayon::iter","",52,[[]]],[11,"opt_len","","",52,[[],["option",4]]],[11,"drive_unindexed","","",53,[[]]],[11,"opt_len","","",53,[[],["option",4]]],[11,"drive_unindexed","","",54,[[]]],[11,"opt_len","","",54,[[],["option",4]]],[11,"drive_unindexed","","",55,[[]]],[11,"opt_len","","",55,[[],["option",4]]],[11,"drive_unindexed","","",56,[[]]],[11,"opt_len","","",56,[[],["option",4]]],[11,"drive_unindexed","","",57,[[]]],[11,"opt_len","","",57,[[],["option",4]]],[11,"drive_unindexed","","",58,[[]]],[11,"drive_unindexed","","",59,[[]]],[11,"drive_unindexed","","",60,[[]]],[11,"drive_unindexed","","",61,[[]]],[11,"drive_unindexed","","",62,[[]]],[11,"drive_unindexed","","",63,[[]]],[11,"drive_unindexed","","",64,[[]]],[11,"drive_unindexed","","",65,[[]]],[11,"drive_unindexed","","",66,[[]]],[11,"opt_len","","",66,[[],["option",4]]],[11,"drive_unindexed","","",67,[[]]],[11,"opt_len","","",67,[[],["option",4]]],[11,"drive_unindexed","","",68,[[]]],[11,"opt_len","","",68,[[],["option",4]]],[11,"drive_unindexed","","",69,[[]]],[11,"opt_len","","",69,[[],["option",4]]],[11,"drive_unindexed","","",70,[[]]],[11,"opt_len","","",70,[[],["option",4]]],[11,"drive_unindexed","","",71,[[]]],[11,"opt_len","","",71,[[],["option",4]]],[11,"drive_unindexed","","",72,[[]]],[11,"opt_len","","",72,[[],["option",4]]],[11,"drive_unindexed","","",73,[[]]],[11,"opt_len","","",73,[[],["option",4]]],[11,"drive_unindexed","","",74,[[]]],[11,"opt_len","","",74,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",75,[[]]],[11,"opt_len","","",75,[[],["option",4]]],[11,"drive_unindexed","","",76,[[]]],[11,"opt_len","","",76,[[],["option",4]]],[11,"drive_unindexed","","",77,[[]]],[11,"opt_len","","",77,[[],["option",4]]],[11,"drive_unindexed","","",78,[[]]],[11,"drive_unindexed","","",79,[[]]],[11,"drive_unindexed","","",80,[[]]],[11,"drive_unindexed","","",81,[[]]],[11,"opt_len","","",81,[[],["option",4]]],[11,"drive_unindexed","","",82,[[]]],[11,"opt_len","","",82,[[],["option",4]]],[11,"drive_unindexed","","",83,[[]]],[11,"opt_len","","",83,[[],["option",4]]],[11,"drive_unindexed","","",84,[[]]],[11,"drive_unindexed","","",85,[[]]],[11,"opt_len","","",85,[[],["option",4]]],[11,"drive_unindexed","","",86,[[]]],[11,"drive_unindexed","","",87,[[]]],[11,"drive_unindexed","","",88,[[]]],[11,"opt_len","","",88,[[],["option",4]]],[11,"drive_unindexed","","",89,[[]]],[11,"drive_unindexed","","",90,[[]]],[11,"opt_len","","",90,[[],["option",4]]],[11,"drive_unindexed","","",91,[[]]],[11,"opt_len","","",91,[[],["option",4]]],[11,"drive_unindexed","","",92,[[]]],[11,"opt_len","","",92,[[],["option",4]]],[11,"drive_unindexed","rayon::option","",93,[[]]],[11,"opt_len","","",93,[[],["option",4]]],[11,"drive_unindexed","","",94,[[]]],[11,"opt_len","","",94,[[],["option",4]]],[11,"drive_unindexed","","",95,[[]]],[11,"opt_len","","",95,[[],["option",4]]],[11,"drive_unindexed","rayon::range","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","","",96,[[]]],[11,"opt_len","","",96,[[],["option",4]]],[11,"drive_unindexed","rayon::range_inclusive","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","","",97,[[]]],[11,"opt_len","","",97,[[],["option",4]]],[11,"drive_unindexed","rayon::result","",98,[[]]],[11,"opt_len","","",98,[[],["option",4]]],[11,"drive_unindexed","","",99,[[]]],[11,"opt_len","","",99,[[],["option",4]]],[11,"drive_unindexed","","",100,[[]]],[11,"opt_len","","",100,[[],["option",4]]],[11,"drive_unindexed","rayon::slice","",101,[[]]],[11,"opt_len","","",101,[[],["option",4]]],[11,"drive_unindexed","","",102,[[]]],[11,"opt_len","","",102,[[],["option",4]]],[11,"drive_unindexed","","",20,[[]]],[11,"opt_len","","",20,[[],["option",4]]],[11,"drive_unindexed","","",103,[[]]],[11,"opt_len","","",103,[[],["option",4]]],[11,"drive_unindexed","","",104,[[]]],[11,"opt_len","","",104,[[],["option",4]]],[11,"drive_unindexed","","",105,[[]]],[11,"opt_len","","",105,[[],["option",4]]],[11,"drive_unindexed","","",21,[[]]],[11,"opt_len","","",21,[[],["option",4]]],[11,"drive_unindexed","","",106,[[]]],[11,"drive_unindexed","","",107,[[]]],[11,"drive_unindexed","rayon::str","",108,[[]]],[11,"drive_unindexed","","",109,[[]]],[11,"drive_unindexed","","",110,[[]]],[11,"drive_unindexed","","",111,[[]]],[11,"drive_unindexed","","",112,[[]]],[11,"drive_unindexed","","",113,[[]]],[11,"drive_unindexed","","",114,[[]]],[11,"drive_unindexed","","",115,[[]]],[11,"drive_unindexed","","",116,[[]]],[11,"drive_unindexed","","",117,[[]]],[11,"drive_unindexed","rayon::string","",118,[[]]],[11,"drive_unindexed","rayon::vec","",119,[[]]],[11,"opt_len","","",119,[[],["option",4]]],[11,"drive_unindexed","","",120,[[]]],[11,"opt_len","","",120,[[],["option",4]]],[11,"drive_unindexed","rayon::iter","",0,[[]]],[11,"opt_len","","",0,[[],["option",4]]],[11,"drive","rayon::collections::binary_heap","",30,[[]]],[11,"len","","",30,[[]]],[11,"with_producer","","",30,[[]]],[11,"drive","","",31,[[]]],[11,"len","","",31,[[]]],[11,"with_producer","","",31,[[]]],[11,"drive","","",32,[[]]],[11,"len","","",32,[[]]],[11,"with_producer","","",32,[[]]],[11,"drive","rayon::collections::vec_deque","",48,[[]]],[11,"len","","",48,[[]]],[11,"with_producer","","",48,[[]]],[11,"drive","","",49,[[]]],[11,"len","","",49,[[]]],[11,"with_producer","","",49,[[]]],[11,"drive","","",50,[[]]],[11,"len","","",50,[[]]],[11,"with_producer","","",50,[[]]],[11,"drive","","",51,[[]]],[11,"len","","",51,[[]]],[11,"with_producer","","",51,[[]]],[11,"drive","rayon::iter","",52,[[]]],[11,"len","","",52,[[]]],[11,"with_producer","","",52,[[]]],[11,"drive","","",53,[[]]],[11,"len","","",53,[[]]],[11,"with_producer","","",53,[[]]],[11,"drive","","",54,[[]]],[11,"len","","",54,[[]]],[11,"with_producer","","",54,[[]]],[11,"drive","","",55,[[]]],[11,"len","","",55,[[]]],[11,"with_producer","","",55,[[]]],[11,"drive","","",56,[[]]],[11,"len","","",56,[[]]],[11,"with_producer","","",56,[[]]],[11,"drive","","",57,[[["consumer",8]]]],[11,"len","","",57,[[]]],[11,"with_producer","","",57,[[]]],[11,"drive","","",66,[[]]],[11,"len","","",66,[[]]],[11,"with_producer","","",66,[[]]],[11,"drive","","",67,[[]]],[11,"len","","",67,[[]]],[11,"with_producer","","",67,[[]]],[11,"drive","","",68,[[]]],[11,"len","","",68,[[]]],[11,"with_producer","","",68,[[]]],[11,"drive","","",69,[[]]],[11,"len","","",69,[[]]],[11,"with_producer","","",69,[[]]],[11,"drive","","",70,[[["consumer",8]]]],[11,"len","","",70,[[]]],[11,"with_producer","","",70,[[]]],[11,"drive","","",71,[[["consumer",8]]]],[11,"len","","",71,[[]]],[11,"with_producer","","",71,[[]]],[11,"drive","","",72,[[]]],[11,"len","","",72,[[]]],[11,"with_producer","","",72,[[]]],[11,"drive","","",73,[[]]],[11,"len","","",73,[[]]],[11,"with_producer","","",73,[[]]],[11,"drive","","",74,[[]]],[11,"len","","",74,[[]]],[11,"with_producer","","",74,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",75,[[]]],[11,"len","","",75,[[]]],[11,"with_producer","","",75,[[]]],[11,"drive","","",76,[[]]],[11,"len","","",76,[[]]],[11,"with_producer","","",76,[[]]],[11,"drive","","",77,[[]]],[11,"len","","",77,[[]]],[11,"with_producer","","",77,[[]]],[11,"drive","","",81,[[]]],[11,"with_producer","","",81,[[]]],[11,"len","","",81,[[]]],[11,"drive","","",82,[[["consumer",8]]]],[11,"len","","",82,[[]]],[11,"with_producer","","",82,[[]]],[11,"len","","",83,[[]]],[11,"drive","","",83,[[["consumer",8]]]],[11,"with_producer","","",83,[[]]],[11,"len","","",85,[[]]],[11,"drive","","",85,[[["consumer",8]]]],[11,"with_producer","","",85,[[]]],[11,"drive","","",88,[[]]],[11,"len","","",88,[[]]],[11,"with_producer","","",88,[[]]],[11,"drive","","",90,[[]]],[11,"len","","",90,[[]]],[11,"with_producer","","",90,[[]]],[11,"drive","","",91,[[]]],[11,"len","","",91,[[]]],[11,"with_producer","","",91,[[]]],[11,"drive","","",92,[[["consumer",8]]]],[11,"len","","",92,[[]]],[11,"with_producer","","",92,[[]]],[11,"drive","rayon::option","",93,[[]]],[11,"len","","",93,[[]]],[11,"with_producer","","",93,[[]]],[11,"drive","","",94,[[]]],[11,"len","","",94,[[]]],[11,"with_producer","","",94,[[]]],[11,"drive","","",95,[[]]],[11,"len","","",95,[[]]],[11,"with_producer","","",95,[[]]],[11,"drive","rayon::range","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","","",96,[[]]],[11,"len","","",96,[[]]],[11,"with_producer","","",96,[[]]],[11,"drive","rayon::range_inclusive","",97,[[]]],[11,"len","","",97,[[]]],[11,"with_producer","","",97,[[]]],[11,"drive","","",97,[[]]],[11,"len","","",97,[[]]],[11,"with_producer","","",97,[[]]],[11,"drive","","",97,[[]]],[11,"len","","",97,[[]]],[11,"with_producer","","",97,[[]]],[11,"drive","","",97,[[]]],[11,"len","","",97,[[]]],[11,"with_producer","","",97,[[]]],[11,"drive","","",97,[[]]],[11,"len","","",97,[[]]],[11,"with_producer","","",97,[[]]],[11,"drive","rayon::result","",98,[[]]],[11,"len","","",98,[[]]],[11,"with_producer","","",98,[[]]],[11,"drive","","",99,[[]]],[11,"len","","",99,[[]]],[11,"with_producer","","",99,[[]]],[11,"drive","","",100,[[]]],[11,"len","","",100,[[]]],[11,"with_producer","","",100,[[]]],[11,"drive","rayon::slice","",101,[[]]],[11,"len","","",101,[[]]],[11,"with_producer","","",101,[[]]],[11,"drive","","",102,[[]]],[11,"len","","",102,[[]]],[11,"with_producer","","",102,[[]]],[11,"drive","","",20,[[]]],[11,"len","","",20,[[]]],[11,"with_producer","","",20,[[]]],[11,"drive","","",103,[[]]],[11,"len","","",103,[[]]],[11,"with_producer","","",103,[[]]],[11,"drive","","",104,[[]]],[11,"len","","",104,[[]]],[11,"with_producer","","",104,[[]]],[11,"drive","","",105,[[]]],[11,"len","","",105,[[]]],[11,"with_producer","","",105,[[]]],[11,"drive","","",21,[[]]],[11,"len","","",21,[[]]],[11,"with_producer","","",21,[[]]],[11,"drive","rayon::vec","",119,[[]]],[11,"len","","",119,[[]]],[11,"with_producer","","",119,[[]]],[11,"drive","","",120,[[]]],[11,"len","","",120,[[]]],[11,"with_producer","","",120,[[]]],[11,"drive","rayon::iter","",0,[[]]],[11,"len","","",0,[[]]],[11,"with_producer","","",0,[[]]],[11,"par_extend","","",0,[[]]],[11,"drop","rayon::collections::binary_heap","",32,[[]]],[11,"drop","rayon::collections::vec_deque","",51,[[]]],[11,"drop","rayon::string","",118,[[]]],[11,"drop","rayon::vec","",120,[[]]],[11,"clone","rayon::collections::binary_heap","",30,[[],["intoiter",3]]],[11,"clone","","",31,[[]]],[11,"clone","rayon::collections::btree_map","",34,[[]]],[11,"clone","rayon::collections::btree_set","",37,[[]]],[11,"clone","rayon::collections::hash_map","",39,[[]]],[11,"clone","rayon::collections::hash_set","",43,[[]]],[11,"clone","rayon::collections::linked_list","",45,[[],["intoiter",3]]],[11,"clone","","",46,[[]]],[11,"clone","rayon::collections::vec_deque","",48,[[],["intoiter",3]]],[11,"clone","","",49,[[]]],[11,"clone","rayon::iter","",52,[[],["chain",3]]],[11,"clone","","",53,[[],["chunks",3]]],[11,"clone","","",54,[[],["cloned",3]]],[11,"clone","","",55,[[],["copied",3]]],[11,"clone","","",56,[[]]],[11,"clone","","",57,[[],["enumerate",3]]],[11,"clone","","",58,[[],["filter",3]]],[11,"clone","","",59,[[],["filtermap",3]]],[11,"clone","","",60,[[],["flatmap",3]]],[11,"clone","","",61,[[],["flatmapiter",3]]],[11,"clone","","",62,[[],["flatten",3]]],[11,"clone","","",63,[[],["flatteniter",3]]],[11,"clone","","",64,[[],["fold",3]]],[11,"clone","","",65,[[],["foldwith",3]]],[11,"clone","","",66,[[],["inspect",3]]],[11,"clone","","",67,[[],["interleave",3]]],[11,"clone","","",68,[[],["interleaveshortest",3]]],[11,"clone","","",69,[[],["intersperse",3]]],[11,"clone","","",70,[[],["minlen",3]]],[11,"clone","","",71,[[],["maxlen",3]]],[11,"clone","","",72,[[],["map",3]]],[11,"clone","","",73,[[],["mapwith",3]]],[11,"clone","","",74,[[],["mapinit",3]]],[11,"clone","","",75,[[],["multizip",3]]],[11,"clone","","",76,[[],["once",3]]],[11,"clone","","",77,[[],["panicfuse",3]]],[11,"clone","","",78,[[],["iterbridge",3]]],[11,"clone","","",79,[[],["positions",3]]],[11,"clone","","",80,[[],["repeat",3]]],[11,"clone","","",81,[[],["repeatn",3]]],[11,"clone","","",82,[[],["rev",3]]],[11,"clone","","",83,[[],["skip",3]]],[11,"clone","","",84,[[],["split",3]]],[11,"clone","","",85,[[],["take",3]]],[11,"clone","","",86,[[],["tryfold",3]]],[11,"clone","","",87,[[],["tryfoldwith",3]]],[11,"clone","","",88,[[],["update",3]]],[11,"clone","","",89,[[],["whilesome",3]]],[11,"clone","","",90,[[],["zip",3]]],[11,"clone","","",91,[[],["zipeq",3]]],[11,"clone","","",92,[[],["stepby",3]]],[11,"clone","rayon::option","",93,[[],["intoiter",3]]],[11,"clone","","",94,[[]]],[11,"clone","rayon::range","",96,[[],["iter",3]]],[11,"clone","rayon::range_inclusive","",97,[[],["iter",3]]],[11,"clone","rayon::result","",98,[[],["intoiter",3]]],[11,"clone","","",99,[[]]],[11,"clone","rayon::slice","",101,[[]]],[11,"clone","","",102,[[]]],[11,"clone","","",20,[[]]],[11,"clone","","",103,[[]]],[11,"clone","","",106,[[]]],[11,"clone","rayon::str","",108,[[],["chars",3]]],[11,"clone","","",109,[[],["charindices",3]]],[11,"clone","","",110,[[],["bytes",3]]],[11,"clone","","",111,[[],["encodeutf16",3]]],[11,"clone","","",112,[[],["split",3]]],[11,"clone","","",113,[[],["splitterminator",3]]],[11,"clone","","",114,[[],["lines",3]]],[11,"clone","","",115,[[],["splitwhitespace",3]]],[11,"clone","","",116,[[],["matches",3]]],[11,"clone","","",117,[[],["matchindices",3]]],[11,"clone","rayon::vec","",119,[[],["intoiter",3]]],[11,"fmt","rayon::collections::binary_heap","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::collections::btree_map","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::collections::btree_set","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::collections::hash_map","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::collections::hash_set","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::collections::linked_list","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::collections::vec_deque","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::iter","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::option","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::range","",96,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::range_inclusive","",97,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::result","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::slice","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::str","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::string","",118,[[["formatter",3]],["result",6]]],[11,"fmt","rayon::vec","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"migrated","rayon","Returns <code>true</code> if the closure was called from a different …",23,[[]]],[11,"index","","Gets the index of this thread in the pool, within …",24,[[]]],[11,"name","","Gets the string that was specified by …",24,[[],["option",4]]],[11,"stack_size","","Gets the value that was specified by …",24,[[],["option",4]]],[11,"run","","Executes the main loop for this thread. This will not …",24,[[]]],[11,"new","","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.",25,[[["configuration",3]],[["box",3],["result",4],["threadpool",3]]]],[11,"install","","Executes <code>op</code> within the threadpool. Any attempts to use …",25,[[]]],[11,"current_num_threads","","Returns the (current) number of threads in the thread …",25,[[]]],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, …",25,[[],["option",4]]],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has …",25,[[],["option",4]]],[11,"join","","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …",25,[[]]],[11,"scope","","Creates a scope that executes within this thread-pool. …",25,[[]]],[11,"scope_fifo","","Creates a scope that executes within this thread-pool. …",25,[[]]],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This …",25,[[]]],[11,"spawn_fifo","","Spawns an asynchronous task in this thread-pool. This …",25,[[]]],[11,"new","","Creates and returns a valid rayon thread pool builder, …",27,[[],[["defaultspawn",3],["threadpoolbuilder",3]]]],[11,"build","","Creates a new <code>ThreadPool</code> initialized using this …",27,[[],[["threadpoolbuilderror",3],["result",4],["threadpool",3]]]],[11,"build_global","","Initializes the global thread pool. This initialization is…",27,[[],[["threadpoolbuilderror",3],["result",4]]]],[11,"build_scoped","","Creates a scoped <code>ThreadPool</code> initialized using this …",27,[[],[["threadpoolbuilderror",3],["result",4]]]],[11,"spawn_handler","","Sets a custom function for spawning threads.",27,[[],[["customspawn",3],["threadpoolbuilder",3]]]],[11,"thread_name","","Sets a closure which takes a thread index and returns the …",27,[[],["threadpoolbuilder",3]]],[11,"num_threads","","Sets the number of threads to be used in the rayon …",27,[[],["threadpoolbuilder",3]]],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to …",27,[[],["threadpoolbuilder",3]]],[11,"stack_size","","Sets the stack size of the worker threads",27,[[],["threadpoolbuilder",3]]],[11,"breadth_first","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …",27,[[],["threadpoolbuilder",3]]],[11,"start_handler","","Sets a callback to be invoked on thread start.",27,[[],["threadpoolbuilder",3]]],[11,"exit_handler","","Sets a callback to be invoked on thread exit.",27,[[],["threadpoolbuilder",3]]],[11,"spawn","","Spawns a job into the fork-join scope <code>self</code>. This job will …",28,[[]]],[11,"spawn_fifo","","Spawns a job into the fork-join scope <code>self</code>. This job will …",29,[[]]],[11,"is_left","rayon::iter","Return true if the value is the <code>Left</code> variant.",0,[[]]],[11,"is_right","","Return true if the value is the <code>Right</code> variant.",0,[[]]],[11,"left","","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.",0,[[],["option",4]]],[11,"right","","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.",0,[[],["option",4]]],[11,"as_ref","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.",0,[[],["either",4]]],[11,"as_mut","","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.",0,[[],["either",4]]],[11,"flip","","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.",0,[[],["either",4]]],[11,"map_left","","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …",0,[[],["either",4]]],[11,"map_right","","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …",0,[[],["either",4]]],[11,"either","","Apply one of two functions depending on contents, …",0,[[]]],[11,"either_with","","Like <code>either</code>, but provide some context to whichever of the …",0,[[]]],[11,"left_and_then","","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …",0,[[],["either",4]]],[11,"right_and_then","","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …",0,[[],["either",4]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[],["either",4]]],[11,"left_or","","Return left value or given value",0,[[]]],[11,"left_or_default","","Return left or a default",0,[[]]],[11,"left_or_else","","Returns left value or computes it from a closure",0,[[]]],[11,"right_or","","Return right value or given value",0,[[]]],[11,"right_or_default","","Return right or a default",0,[[]]],[11,"right_or_else","","Returns right value or computes it from a closure",0,[[]]],[11,"unwrap_left","","Returns the left value",0,[[]]],[11,"unwrap_right","","Returns the right value",0,[[]]],[11,"expect_left","","Returns the left value",0,[[]]],[11,"expect_right","","Returns the right value",0,[[]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[]]],[11,"map","","Map <code>f</code> over the contained value and return the result in …",0,[[],["either",4]]],[11,"take","","Takes only <code>n</code> repeats of the element, similar to the …",80,[[],["repeatn",3]]],[11,"zip","","Iterates tuples, repeating the element with items from …",80,[[],[["repeatn",3],["zip",3]]]]],"p":[[4,"Either"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[8,"ParallelBridge"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[8,"ParallelDrainFull"],[8,"ParallelDrainRange"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"ChunksExact"],[3,"ChunksExactMut"],[8,"ParallelString"],[3,"FnContext"],[3,"ThreadBuilder"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"Chain"],[3,"Chunks"],[3,"Cloned"],[3,"Copied"],[3,"Empty"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"FlatMapIter"],[3,"Flatten"],[3,"FlattenIter"],[3,"Fold"],[3,"FoldWith"],[3,"Inspect"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"MinLen"],[3,"MaxLen"],[3,"Map"],[3,"MapWith"],[3,"MapInit"],[3,"MultiZip"],[3,"Once"],[3,"PanicFuse"],[3,"IterBridge"],[3,"Positions"],[3,"Repeat"],[3,"RepeatN"],[3,"Rev"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Update"],[3,"WhileSome"],[3,"Zip"],[3,"ZipEq"],[3,"StepBy"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"]]},\
"rayon_core":{"doc":"Under construction","i":[[5,"join","rayon_core","Takes two closures and <em>potentially</em> runs them in parallel. …",null,[[]]],[5,"join_context","","Identical to <code>join</code>, except that the closures have a …",null,[[]]],[3,"ThreadBuilder","","Thread builder used for customization via …",null,null],[5,"scope","","Creates a \\\"fork-join\\\" scope <code>s</code> and invokes the closure …",null,[[]]],[3,"Scope","","Represents a fork-join scope which can be used to spawn …",null,null],[5,"scope_fifo","","Creates a \\\"fork-join\\\" scope <code>s</code> with FIFO order, and …",null,[[]]],[3,"ScopeFifo","","Represents a fork-join scope which can be used to spawn …",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the …",null,[[]]],[5,"spawn_fifo","","Fires off a task into the Rayon threadpool in the …",null,[[]]],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether …",null,[[],["option",4]]],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index …",null,[[],["option",4]]],[3,"ThreadPool","","Represents a user created thread-pool.",null,null],[5,"current_num_threads","","Returns the number of threads in the current registry. If …",null,[[]]],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new <code>ThreadPool</code> or to configure the …",null,null],[3,"Configuration","","Contains the rayon thread pool configuration. Use …",null,null],[11,"new","","Creates and returns a valid rayon thread pool builder, …",0,[[]]],[11,"build","","Creates a new <code>ThreadPool</code> initialized using this …",0,[[],[["result",4],["threadpoolbuilderror",3],["threadpool",3]]]],[11,"build_global","","Initializes the global thread pool. This initialization is…",0,[[],[["threadpoolbuilderror",3],["result",4]]]],[11,"build_scoped","","Creates a scoped <code>ThreadPool</code> initialized using this …",0,[[],[["threadpoolbuilderror",3],["result",4]]]],[11,"spawn_handler","","Sets a custom function for spawning threads.",0,[[],[["threadpoolbuilder",3],["customspawn",3]]]],[11,"thread_name","","Sets a closure which takes a thread index and returns the …",0,[[]]],[11,"num_threads","","Sets the number of threads to be used in the rayon …",0,[[]]],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to …",0,[[]]],[11,"stack_size","","Sets the stack size of the worker threads",0,[[]]],[11,"breadth_first","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …",0,[[]]],[11,"start_handler","","Sets a callback to be invoked on thread start.",0,[[]]],[11,"exit_handler","","Sets a callback to be invoked on thread exit.",0,[[]]],[11,"new","","Creates and return a valid rayon thread pool …",1,[[],["configuration",3]]],[11,"build","","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.",1,[[],[["threadpool",3],["box",3],["result",4]]]],[11,"thread_name","","Deprecated in favor of <code>ThreadPoolBuilder::thread_name</code>.",1,[[]]],[11,"num_threads","","Deprecated in favor of <code>ThreadPoolBuilder::num_threads</code>.",1,[[],["configuration",3]]],[11,"panic_handler","","Deprecated in favor of <code>ThreadPoolBuilder::panic_handler</code>.",1,[[],["configuration",3]]],[11,"stack_size","","Deprecated in favor of <code>ThreadPoolBuilder::stack_size</code>.",1,[[]]],[11,"breadth_first","","Deprecated in favor of <code>ThreadPoolBuilder::breadth_first</code>.",1,[[]]],[11,"start_handler","","Deprecated in favor of <code>ThreadPoolBuilder::start_handler</code>.",1,[[],["configuration",3]]],[11,"exit_handler","","Deprecated in favor of <code>ThreadPoolBuilder::exit_handler</code>.",1,[[],["configuration",3]]],[5,"initialize","","Deprecated in favor of <code>ThreadPoolBuilder::build_global</code>.",null,[[["configuration",3]],[["box",3],["result",4]]]],[3,"FnContext","","Provides the calling context to a closure called by …",null,null],[11,"migrated","","Returns <code>true</code> if the closure was called from a different …",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"drop","","",6,[[]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"description","","",7,[[]]],[11,"source","","",7,[[],[["option",4],["error",8]]]],[11,"index","","Gets the index of this thread in the pool, within …",3,[[]]],[11,"name","","Gets the string that was specified by …",3,[[],["option",4]]],[11,"stack_size","","Gets the value that was specified by …",3,[[],["option",4]]],[11,"run","","Executes the main loop for this thread. This will not …",3,[[]]],[11,"spawn","","Spawns a job into the fork-join scope <code>self</code>. This job will …",4,[[]]],[11,"spawn_fifo","","Spawns a job into the fork-join scope <code>self</code>. This job will …",5,[[]]],[11,"new","","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.",6,[[["configuration",3]],[["box",3],["result",4],["threadpool",3]]]],[11,"install","","Executes <code>op</code> within the threadpool. Any attempts to use …",6,[[]]],[11,"current_num_threads","","Returns the (current) number of threads in the thread …",6,[[]]],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, …",6,[[],["option",4]]],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has …",6,[[],["option",4]]],[11,"join","","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …",6,[[]]],[11,"scope","","Creates a scope that executes within this thread-pool. …",6,[[]]],[11,"scope_fifo","","Creates a scope that executes within this thread-pool. …",6,[[]]],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This …",6,[[]]],[11,"spawn_fifo","","Spawns an asynchronous task in this thread-pool. This …",6,[[]]]],"p":[[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"],[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"]]},\
"regex":{"doc":"This crate provides a library for parsing, compiling, and …","i":[[0,"bytes","regex","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary …",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a …",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture …",null,null],[3,"Split","","Yields all substrings delimited by a regular expression …",null,null],[3,"SplitN","","Yields at most <code>N</code> substrings delimited by a regular …",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw …",null,null],[3,"Captures","","Captures represents a group of captured byte strings for …",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the …",null,null],[8,"Replacer","","Replacer describes types that can be used to replace …",null,null],[10,"replace_append","","Appends text to <code>dst</code> to replace the current match.",0,[[["captures",3],["vec",3]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",0,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",0,[[],["replacerref",3]]],[3,"ReplacerRef","","By-reference adaptor for a <code>Replacer</code>",null,null],[3,"NoExpand","","<code>NoExpand</code> indicates literal byte string replacement.",null,null],[12,"0","","",1,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions …",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex …",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex …",null,null],[11,"new","","Create a new regular expression builder with the given …",2,[[],["regexbuilder",3]]],[11,"build","","Consume the builder and compile the regular expression.",2,[[],[["error",4],["result",4],["regex",3]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",2,[[],["regexbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",2,[[],["regexbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",2,[[],["regexbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",2,[[],["regexbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",2,[[],["regexbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",2,[[],["regexbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",2,[[],["regexbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",2,[[],["regexbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",2,[[],["regexbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",2,[[],["regexbuilder",3]]],[11,"new","","Create a new regular expression builder with the given …",3,[[],["regexsetbuilder",3]]],[11,"build","","Consume the builder and compile the regular expressions …",3,[[],[["result",4],["regexset",3],["error",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",3,[[],["regexsetbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",3,[[],["regexsetbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",3,[[],["regexsetbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",3,[[],["regexsetbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",3,[[],["regexsetbuilder",3]]],[11,"start","","Returns the starting byte offset of the match in the …",4,[[]]],[11,"end","","Returns the ending byte offset of the match in the …",4,[[]]],[11,"range","","Returns the range over the starting and ending byte …",4,[[],["range",3]]],[11,"as_bytes","","Returns the matched text.",4,[[]]],[11,"new","","Compiles a regular expression. Once compiled, it can be …",5,[[],[["error",4],["result",4],["regex",3]]]],[11,"is_match","","Returns true if and only if there is a match for the …",5,[[]]],[11,"find","","Returns the start and end byte range of the …",5,[[],[["match",3],["option",4]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping …",5,[[],["matches",3]]],[11,"captures","","Returns the capture groups corresponding to the …",5,[[],[["captures",3],["option",4]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture …",5,[[],["capturematches",3]]],[11,"split","","Returns an iterator of substrings of <code>text</code> delimited by a …",5,[[],["split",3]]],[11,"splitn","","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …",5,[[],["splitn",3]]],[11,"replace","","Replaces the leftmost-first match with the replacement …",5,[[["replacer",8]],["cow",4]]],[11,"replace_all","","Replaces all non-overlapping matches in <code>text</code> with the …",5,[[["replacer",8]],["cow",4]]],[11,"replacen","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …",5,[[["replacer",8]],["cow",4]]],[11,"shortest_match","","Returns the end location of a match in the text given.",5,[[],["option",4]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search …",5,[[],["option",4]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at …",5,[[]]],[11,"find_at","","Returns the same as find, but starts the search at the …",5,[[],[["match",3],["option",4]]]],[11,"captures_read","","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …",5,[[["capturelocations",3]],[["match",3],["option",4]]]],[11,"captures_read_at","","Returns the same as <code>captures_read</code>, but starts the search …",5,[[["capturelocations",3]],[["match",3],["option",4]]]],[11,"as_str","","Returns the original string of this regex.",5,[[]]],[11,"capture_names","","Returns an iterator over the capture names.",5,[[],["capturenames",3]]],[11,"captures_len","","Returns the number of captures.",5,[[]]],[11,"capture_locations","","Returns an empty set of capture locations that can be …",5,[[],["capturelocations",3]]],[11,"get","","Returns the start and end positions of the Nth capture …",6,[[],["option",4]]],[11,"len","","Returns the total number of capturing groups.",6,[[]]],[11,"get","","Returns the match associated with the capture group at …",7,[[],[["match",3],["option",4]]]],[11,"name","","Returns the match for the capture group named <code>name</code>. If …",7,[[],[["match",3],["option",4]]]],[11,"iter","","An iterator that yields all capturing matches in the …",7,[[],["subcapturematches",3]]],[11,"expand","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …",7,[[["vec",3]]]],[11,"len","","Returns the number of captured groups.",7,[[]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",0,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",0,[[],["replacerref",3]]],[11,"new","","Create a new regex set with the given regular expressions.",8,[[],[["result",4],["regexset",3],["error",4]]]],[11,"empty","","Create a new empty regex set.",8,[[],["regexset",3]]],[11,"is_match","","Returns true if and only if one of the regexes in this …",8,[[]]],[11,"matches","","Returns the set of regular expressions that match in the …",8,[[],["setmatches",3]]],[11,"len","","Returns the total number of regular expressions in this …",8,[[]]],[11,"is_empty","","Returns <code>true</code> if this set contains no regular expressions.",8,[[]]],[11,"patterns","","Returns the patterns that this set will match on.",8,[[]]],[11,"matched_any","","Whether this set contains any matches.",9,[[]]],[11,"matched","","Whether the regex at the given index matched.",9,[[]]],[11,"len","","The total number of regexes in the set that created these …",9,[[]]],[11,"iter","","Returns an iterator over indexes in the regex that …",9,[[],["setmatchesiter",3]]],[4,"Error","regex","An error that occurred during parsing or compiling a …",null,null],[13,"Syntax","","A syntax error.",10,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The …",10,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexBuilder","","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions …",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex …",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex …",null,null],[5,"escape","","Escapes all regular expression meta characters in <code>text</code>.",null,[[],["string",3]]],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw …",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture …",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured strings for a …",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a …",null,null],[3,"NoExpand","","<code>NoExpand</code> indicates literal string replacement.",null,null],[12,"0","","",11,null],[3,"Regex","","A compiled regular expression for matching Unicode …",null,null],[8,"Replacer","","Replacer describes types that can be used to replace …",null,null],[10,"replace_append","","Appends text to <code>dst</code> to replace the current match.",12,[[["string",3],["captures",3]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",12,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",12,[[],["replacerref",3]]],[3,"ReplacerRef","","By-reference adaptor for a <code>Replacer</code>",null,null],[3,"Split","","Yields all substrings delimited by a regular expression …",null,null],[3,"SplitN","","Yields at most <code>N</code> substrings delimited by a regular …",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the …",null,null],[11,"from","regex::bytes","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","regex","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"into_iter","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"into_iter","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"into_iter","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"replace_append","regex::bytes","",19,[[["captures",3],["vec",3]]]],[11,"no_expansion","","",19,[[],[["cow",4],["option",4]]]],[11,"replace_append","","",1,[[["captures",3],["vec",3]]]],[11,"no_expansion","","",1,[[],[["cow",4],["option",4]]]],[11,"replace_append","regex","",38,[[["string",3],["captures",3]]]],[11,"no_expansion","","",38,[[],[["option",4],["cow",4]]]],[11,"replace_append","","",11,[[["string",3],["captures",3]]]],[11,"no_expansion","","",11,[[],[["option",4],["cow",4]]]],[11,"next_back","","",26,[[],["option",4]]],[11,"next_back","","",27,[[],["option",4]]],[11,"next_back","regex::bytes","",20,[[],["option",4]]],[11,"next_back","","",21,[[],["option",4]]],[11,"into_iter","regex","",25,[[]]],[11,"into_iter","regex::bytes","",9,[[]]],[11,"next","","",13,[[],[["match",3],["option",4]]]],[11,"next","","",14,[[],[["captures",3],["option",4]]]],[11,"next","","",15,[[],["option",4]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"next","","",17,[[],[["option",4],["option",4]]]],[11,"size_hint","","",17,[[]]],[11,"count","","",17,[[]]],[11,"next","","",18,[[],[["option",4],["option",4]]]],[11,"next","regex","",26,[[],["option",4]]],[11,"size_hint","","",26,[[]]],[11,"next","","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","regex::bytes","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"next","","",21,[[],["option",4]]],[11,"size_hint","","",21,[[]]],[11,"next","regex","",30,[[],[["option",4],["option",4]]]],[11,"size_hint","","",30,[[]]],[11,"count","","",30,[[]]],[11,"next","","",31,[[],["option",4]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"next","","",35,[[],[["option",4],["option",4]]]],[11,"next","","",36,[[],[["captures",3],["option",4]]]],[11,"next","","",37,[[],[["match",3],["option",4]]]],[11,"clone","","",10,[[],["error",4]]],[11,"clone","regex::bytes","",4,[[],["match",3]]],[11,"clone","","",5,[[],["regex",3]]],[11,"clone","","",17,[[],["capturenames",3]]],[11,"clone","","",6,[[],["capturelocations",3]]],[11,"clone","","",18,[[],["subcapturematches",3]]],[11,"clone","","",1,[[],["noexpand",3]]],[11,"clone","regex","",24,[[],["regexset",3]]],[11,"clone","","",25,[[],["setmatches",3]]],[11,"clone","","",27,[[],["setmatchesiter",3]]],[11,"clone","regex::bytes","",8,[[],["regexset",3]]],[11,"clone","","",9,[[],["setmatches",3]]],[11,"clone","","",21,[[],["setmatchesiter",3]]],[11,"clone","regex","",28,[[],["match",3]]],[11,"clone","","",29,[[],["regex",3]]],[11,"clone","","",30,[[],["capturenames",3]]],[11,"clone","","",33,[[],["capturelocations",3]]],[11,"clone","","",35,[[],["subcapturematches",3]]],[11,"clone","","",11,[[],["noexpand",3]]],[11,"eq","","",10,[[["error",4]]]],[11,"ne","","",10,[[["error",4]]]],[11,"eq","regex::bytes","",4,[[["match",3]]]],[11,"ne","","",4,[[["match",3]]]],[11,"eq","regex","",28,[[["match",3]]]],[11,"ne","","",28,[[["match",3]]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",2,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",22,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",3,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",23,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","Shows the original regular expression.",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","Shows the original regular expression.",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","Shows the original regular expression.",5,[[["formatter",3]],["result",6]]],[11,"fmt","regex","Shows the original regular expression.",29,[[["formatter",3]],["result",6]]],[11,"index","regex::bytes","",7,[[]]],[11,"index","","",7,[[]]],[11,"index","regex","",34,[[]]],[11,"index","","",34,[[]]],[11,"from_str","regex::bytes","Attempts to parse a string into a regular expression",5,[[],[["error",4],["result",4],["regex",3]]]],[11,"from_str","regex","Attempts to parse a string into a regular expression",29,[[],[["regex",3],["error",4],["result",4]]]],[11,"description","","",10,[[]]],[11,"new","","Create a new regular expression builder with the given …",22,[[],["regexbuilder",3]]],[11,"build","","Consume the builder and compile the regular expression.",22,[[],[["regex",3],["error",4],["result",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",22,[[],["regexbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",22,[[],["regexbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",22,[[],["regexbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",22,[[],["regexbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",22,[[],["regexbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",22,[[],["regexbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",22,[[],["regexbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",22,[[],["regexbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",22,[[],["regexbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",22,[[],["regexbuilder",3]]],[11,"new","","Create a new regular expression builder with the given …",23,[[],["regexsetbuilder",3]]],[11,"build","","Consume the builder and compile the regular expressions …",23,[[],[["error",4],["regexset",3],["result",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",23,[[],["regexsetbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",23,[[],["regexsetbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",23,[[],["regexsetbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",23,[[],["regexsetbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",23,[[],["regexsetbuilder",3]]],[11,"new","","Create a new regex set with the given regular expressions.",24,[[],[["error",4],["regexset",3],["result",4]]]],[11,"empty","","Create a new empty regex set.",24,[[],["regexset",3]]],[11,"is_match","","Returns true if and only if one of the regexes in this …",24,[[]]],[11,"matches","","Returns the set of regular expressions that match in the …",24,[[],["setmatches",3]]],[11,"len","","Returns the total number of regular expressions in this …",24,[[]]],[11,"is_empty","","Returns <code>true</code> if this set contains no regular expressions.",24,[[]]],[11,"patterns","","Returns the patterns that this set will match on.",24,[[]]],[11,"matched_any","","Whether this set contains any matches.",25,[[]]],[11,"matched","","Whether the regex at the given index matched.",25,[[]]],[11,"len","","The total number of regexes in the set that created these …",25,[[]]],[11,"iter","","Returns an iterator over indexes in the regex that …",25,[[],["setmatchesiter",3]]],[11,"start","","Returns the starting byte offset of the match in the …",28,[[]]],[11,"end","","Returns the ending byte offset of the match in the …",28,[[]]],[11,"range","","Returns the range over the starting and ending byte …",28,[[],["range",3]]],[11,"as_str","","Returns the matched text.",28,[[]]],[11,"new","","Compiles a regular expression. Once compiled, it can be …",29,[[],[["regex",3],["error",4],["result",4]]]],[11,"is_match","","Returns true if and only if there is a match for the …",29,[[]]],[11,"find","","Returns the start and end byte range of the …",29,[[],[["match",3],["option",4]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping …",29,[[],["matches",3]]],[11,"captures","","Returns the capture groups corresponding to the …",29,[[],[["captures",3],["option",4]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture …",29,[[],["capturematches",3]]],[11,"split","","Returns an iterator of substrings of <code>text</code> delimited by a …",29,[[],["split",3]]],[11,"splitn","","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …",29,[[],["splitn",3]]],[11,"replace","","Replaces the leftmost-first match with the replacement …",29,[[["replacer",8]],["cow",4]]],[11,"replace_all","","Replaces all non-overlapping matches in <code>text</code> with the …",29,[[["replacer",8]],["cow",4]]],[11,"replacen","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …",29,[[["replacer",8]],["cow",4]]],[11,"shortest_match","","Returns the end location of a match in the text given.",29,[[],["option",4]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search …",29,[[],["option",4]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at …",29,[[]]],[11,"find_at","","Returns the same as find, but starts the search at the …",29,[[],[["match",3],["option",4]]]],[11,"captures_read","","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …",29,[[["capturelocations",3]],[["match",3],["option",4]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at …",29,[[["capturelocations",3]],[["match",3],["option",4]]]],[11,"as_str","","Returns the original string of this regex.",29,[[]]],[11,"capture_names","","Returns an iterator over the capture names.",29,[[],["capturenames",3]]],[11,"captures_len","","Returns the number of captures.",29,[[]]],[11,"capture_locations","","Returns an empty set of capture locations that can be …",29,[[],["capturelocations",3]]],[11,"get","","Returns the start and end positions of the Nth capture …",33,[[],["option",4]]],[11,"len","","Returns the total number of capturing groups.",33,[[]]],[11,"get","","Returns the match associated with the capture group at …",34,[[],[["match",3],["option",4]]]],[11,"name","","Returns the match for the capture group named <code>name</code>. If …",34,[[],[["match",3],["option",4]]]],[11,"iter","","An iterator that yields all capturing matches in the …",34,[[],["subcapturematches",3]]],[11,"expand","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …",34,[[["string",3]]]],[11,"len","","Returns the number of captured groups.",34,[[]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",12,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",12,[[],["replacerref",3]]]],"p":[[8,"Replacer"],[3,"NoExpand"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"CaptureLocations"],[3,"Captures"],[3,"RegexSet"],[3,"SetMatches"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"]]},\
"regex_automata":{"doc":"A low level regular expression library that uses …","i":[[0,"dense","regex_automata","Types and routines specific to dense DFAs.",null,null],[4,"DenseDFA","regex_automata::dense","A dense table-based deterministic finite automaton (DFA).",null,null],[13,"Standard","","A standard DFA that does not use premultiplication or …",0,null],[13,"ByteClass","","A DFA that shrinks its alphabet to a set of equivalence …",0,null],[13,"Premultiplied","","A DFA that premultiplies all of its state identifiers in …",0,null],[13,"PremultipliedByteClass","","The default configuration of a DFA, which uses byte …",0,null],[3,"Standard","","A standard dense DFA that does not use premultiplication …",null,null],[3,"ByteClass","","A dense DFA that shrinks its alphabet.",null,null],[3,"Premultiplied","","A dense DFA that premultiplies all of its state …",null,null],[3,"PremultipliedByteClass","","The default configuration of a dense DFA, which uses byte …",null,null],[0,"sparse","regex_automata","Types and routines specific to sparse DFAs.",null,null],[4,"SparseDFA","regex_automata::sparse","A sparse table-based deterministic finite automaton (DFA).",null,null],[13,"Standard","","A standard DFA that does not use byte classes.",1,null],[13,"ByteClass","","A DFA that shrinks its alphabet to a set of equivalence …",1,null],[3,"Standard","","A standard sparse DFA that does not use premultiplication …",null,null],[3,"ByteClass","","A sparse DFA that shrinks its alphabet.",null,null],[4,"DenseDFA","regex_automata","A dense table-based deterministic finite automaton (DFA).",null,null],[13,"Standard","","A standard DFA that does not use premultiplication or …",0,null],[13,"ByteClass","","A DFA that shrinks its alphabet to a set of equivalence …",0,null],[13,"Premultiplied","","A DFA that premultiplies all of its state identifiers in …",0,null],[13,"PremultipliedByteClass","","The default configuration of a DFA, which uses byte …",0,null],[8,"DFA","","A trait describing the interface of a deterministic …",null,null],[16,"ID","","The representation used for state identifiers in this DFA.",2,null],[10,"start_state","","Return the identifier of this DFA\'s start state.",2,[[]]],[10,"is_match_state","","Returns true if and only if the given identifier …",2,[[]]],[10,"is_dead_state","","Returns true if and only if the given identifier …",2,[[]]],[10,"is_match_or_dead_state","","Returns true if and only if the given identifier …",2,[[]]],[10,"is_anchored","","Returns true if and only if this DFA is anchored.",2,[[]]],[10,"next_state","","Given the current state that this DFA is in and the next …",2,[[]]],[10,"next_state_unchecked","","Like <code>next_state</code>, but its implementation may look up the …",2,[[]]],[11,"is_match","","Returns true if and only if the given bytes match this …",2,[[]]],[11,"shortest_match","","Returns the first position at which a match is found.",2,[[],["option",4]]],[11,"find","","Returns the end offset of the longest match. If no match …",2,[[],["option",4]]],[11,"rfind","","Returns the start offset of the longest match in reverse, …",2,[[],["option",4]]],[11,"is_match_at","","Returns the same as <code>is_match</code>, but starts the search at …",2,[[]]],[11,"shortest_match_at","","Returns the same as <code>shortest_match</code>, but starts the search …",2,[[],["option",4]]],[11,"find_at","","Returns the same as <code>find</code>, but starts the search at the …",2,[[],["option",4]]],[11,"rfind_at","","Returns the same as <code>rfind</code>, but starts the search at the …",2,[[],["option",4]]],[3,"Regex","","A regular expression that uses deterministic finite …",null,null],[4,"SparseDFA","","A sparse table-based deterministic finite automaton (DFA).",null,null],[13,"Standard","","A standard DFA that does not use byte classes.",1,null],[13,"ByteClass","","A DFA that shrinks its alphabet to a set of equivalence …",1,null],[8,"StateID","","A trait describing the representation of a DFA\'s state …",null,null],[10,"from_usize","","Convert from a <code>usize</code> to this implementation\'s …",3,[[]]],[10,"to_usize","","Convert this implementation\'s representation to a <code>usize</code>.",3,[[]]],[10,"max_id","","Return the maximum state identifier supported by this …",3,[[]]],[10,"read_bytes","","Read a single state identifier from the given slice of …",3,[[]]],[10,"write_bytes","","Write this state identifier to the given slice of bytes …",3,[[]]],[11,"from","regex_automata::dense","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from","regex_automata","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","regex_automata::sparse","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"start_state","regex_automata::dense","",0,[[]]],[11,"is_match_state","","",0,[[]]],[11,"is_dead_state","","",0,[[]]],[11,"is_match_or_dead_state","","",0,[[]]],[11,"is_anchored","","",0,[[]]],[11,"next_state","","",0,[[]]],[11,"next_state_unchecked","","",0,[[]]],[11,"is_match_at","","",0,[[]]],[11,"shortest_match_at","","",0,[[],["option",4]]],[11,"find_at","","",0,[[],["option",4]]],[11,"rfind_at","","",0,[[],["option",4]]],[11,"start_state","","",4,[[]]],[11,"is_match_state","","",4,[[]]],[11,"is_dead_state","","",4,[[]]],[11,"is_match_or_dead_state","","",4,[[]]],[11,"is_anchored","","",4,[[]]],[11,"next_state","","",4,[[]]],[11,"next_state_unchecked","","",4,[[]]],[11,"start_state","","",5,[[]]],[11,"is_match_state","","",5,[[]]],[11,"is_dead_state","","",5,[[]]],[11,"is_match_or_dead_state","","",5,[[]]],[11,"is_anchored","","",5,[[]]],[11,"next_state","","",5,[[]]],[11,"next_state_unchecked","","",5,[[]]],[11,"start_state","","",6,[[]]],[11,"is_match_state","","",6,[[]]],[11,"is_dead_state","","",6,[[]]],[11,"is_match_or_dead_state","","",6,[[]]],[11,"is_anchored","","",6,[[]]],[11,"next_state","","",6,[[]]],[11,"next_state_unchecked","","",6,[[]]],[11,"start_state","","",7,[[]]],[11,"is_match_state","","",7,[[]]],[11,"is_dead_state","","",7,[[]]],[11,"is_match_or_dead_state","","",7,[[]]],[11,"is_anchored","","",7,[[]]],[11,"next_state","","",7,[[]]],[11,"next_state_unchecked","","",7,[[]]],[11,"start_state","regex_automata::sparse","",1,[[]]],[11,"is_match_state","","",1,[[]]],[11,"is_dead_state","","",1,[[]]],[11,"is_match_or_dead_state","","",1,[[]]],[11,"is_anchored","","",1,[[]]],[11,"next_state","","",1,[[]]],[11,"next_state_unchecked","","",1,[[]]],[11,"is_match_at","","",1,[[]]],[11,"shortest_match_at","","",1,[[],["option",4]]],[11,"find_at","","",1,[[],["option",4]]],[11,"rfind_at","","",1,[[],["option",4]]],[11,"start_state","","",9,[[]]],[11,"is_match_state","","",9,[[]]],[11,"is_dead_state","","",9,[[]]],[11,"is_match_or_dead_state","","",9,[[]]],[11,"is_anchored","","",9,[[]]],[11,"next_state","","",9,[[]]],[11,"next_state_unchecked","","",9,[[]]],[11,"start_state","","",10,[[]]],[11,"is_match_state","","",10,[[]]],[11,"is_dead_state","","",10,[[]]],[11,"is_match_or_dead_state","","",10,[[]]],[11,"is_anchored","","",10,[[]]],[11,"next_state","","",10,[[]]],[11,"next_state_unchecked","","",10,[[]]],[11,"fmt","regex_automata::dense","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","regex_automata","",8,[[["formatter",3]],["result",6]]],[11,"fmt","regex_automata::sparse","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"clone","regex_automata::dense","",0,[[],["densedfa",4]]],[11,"clone","","",4,[[],["standard",3]]],[11,"clone","","",5,[[],["byteclass",3]]],[11,"clone","","",6,[[],["premultiplied",3]]],[11,"clone","","",7,[[],["premultipliedbyteclass",3]]],[11,"clone","regex_automata","",8,[[],["regex",3]]],[11,"clone","regex_automata::sparse","",1,[[],["sparsedfa",4]]],[11,"clone","","",9,[[],["standard",3]]],[11,"clone","","",10,[[],["byteclass",3]]],[11,"as_ref","regex_automata::dense","Cheaply return a borrowed version of this dense DFA. …",0,[[],["densedfa",4]]],[11,"memory_usage","","Returns the memory usage, in bytes, of this DFA.",0,[[]]],[11,"from_bytes","","Deserialize a DFA with a specific state identifier …",0,[[],["densedfa",4]]],[11,"is_match","regex_automata","Returns true if and only if the given bytes match this …",2,[[]]],[11,"shortest_match","","Returns the first position at which a match is found.",2,[[],["option",4]]],[11,"find","","Returns the end offset of the longest match. If no match …",2,[[],["option",4]]],[11,"rfind","","Returns the start offset of the longest match in reverse, …",2,[[],["option",4]]],[11,"is_match_at","","Returns the same as <code>is_match</code>, but starts the search at …",2,[[]]],[11,"shortest_match_at","","Returns the same as <code>shortest_match</code>, but starts the search …",2,[[],["option",4]]],[11,"find_at","","Returns the same as <code>find</code>, but starts the search at the …",2,[[],["option",4]]],[11,"rfind_at","","Returns the same as <code>rfind</code>, but starts the search at the …",2,[[],["option",4]]],[11,"is_match","","Returns true if and only if the given bytes match.",8,[[]]],[11,"shortest_match","","Returns the first position at which a match is found.",8,[[],["option",4]]],[11,"find","","Returns the start and end offset of the leftmost first …",8,[[],["option",4]]],[11,"is_match_at","","Returns the same as <code>is_match</code>, but starts the search at …",8,[[]]],[11,"shortest_match_at","","Returns the same as <code>shortest_match</code>, but starts the search …",8,[[],["option",4]]],[11,"find_at","","Returns the same as <code>find</code>, but starts the search at the …",8,[[],["option",4]]],[11,"find_iter","","Returns an iterator over all non-overlapping leftmost …",8,[[],["matches",3]]],[11,"from_dfas","","Build a new regex from its constituent forward and …",8,[[],["regex",3]]],[11,"forward","","Return the underlying DFA responsible for forward …",8,[[]]],[11,"reverse","","Return the underlying DFA responsible for reverse …",8,[[]]],[11,"as_ref","regex_automata::sparse","Cheaply return a borrowed version of this sparse DFA. …",1,[[],["sparsedfa",4]]],[11,"memory_usage","","Returns the memory usage, in bytes, of this DFA.",1,[[]]],[11,"from_bytes","","Deserialize a sparse DFA with a specific state identifier …",1,[[],["sparsedfa",4]]]],"p":[[4,"DenseDFA"],[4,"SparseDFA"],[8,"DFA"],[8,"StateID"],[3,"Standard"],[3,"ByteClass"],[3,"Premultiplied"],[3,"PremultipliedByteClass"],[3,"Regex"],[3,"Standard"],[3,"ByteClass"]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","i":[[0,"ast","regex_syntax","Defines an abstract syntax for regular expressions.",null,null],[0,"parse","regex_syntax::ast","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[11,"new","","Create a new parser builder with a default configuration.",0,[[],["parserbuilder",3]]],[11,"build","","Build a parser from this configuration with the given …",0,[[],["parser",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",0,[[],["parserbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",0,[[],["parserbuilder",3]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",0,[[],["parserbuilder",3]]],[3,"Parser","","A regular expression parser.",null,null],[11,"new","","Create a new parser with a default configuration.",1,[[],["parser",3]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",1,[[],[["result",4],["ast",4],["error",3]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract …",1,[[],[["withcomments",3],["result",4],["error",3]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for <code>Ast</code>.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"new","","Create a new printer.",2,[[],["printer",3]]],[11,"print","","Print the given <code>Ast</code> to the given writer. The writer must …",2,[[["ast",4],["write",8]],["result",6]]],[5,"visit","regex_syntax::ast","Executes an implementation of <code>Visitor</code> in constant stack …",null,[[["ast",4],["visitor",8]],["result",4]]],[8,"Visitor","","A trait for visiting an abstract syntax tree (AST) in …",null,null],[16,"Output","","The result of visiting an AST.",3,null],[16,"Err","","An error that visiting an AST might return.",3,null],[10,"finish","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …",3,[[],["result",4]]],[11,"start","","This method is called before beginning traversal of the …",3,[[]]],[11,"visit_pre","","This method is called on an <code>Ast</code> before descending into …",3,[[["ast",4]],["result",4]]],[11,"visit_post","","This method is called on an <code>Ast</code> after descending all of …",3,[[["ast",4]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",3,[[],["result",4]]],[11,"visit_class_set_item_pre","","This method is called on every <code>ClassSetItem</code> before …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_item_post","","This method is called on every <code>ClassSetItem</code> after …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_binary_op_pre","","This method is called on every <code>ClassSetBinaryOp</code> before …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_post","","This method is called on every <code>ClassSetBinaryOp</code> after …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right …",3,[[["classsetbinaryop",3]],["result",4]]],[3,"Error","","An error that occurred while parsing a regular expression …",null,null],[11,"kind","","Return the type of this error.",4,[[],["errorkind",4]]],[11,"pattern","","The original pattern string in which this error occurred.",4,[[]]],[11,"span","","Return the span at which this error occurred.",4,[[],["span",3]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some …",4,[[],[["option",4],["span",3]]]],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",5,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class …",5,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid …",5,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. …",5,null],[13,"ClassUnclosed","","An opening <code>[</code> was found with no corresponding closing <code>]</code>.",5,null],[13,"DecimalEmpty","","Note that this error variant is no longer used. Namely, a …",5,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was …",5,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",5,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode …",5,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",5,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",5,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",5,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., <code>i-</code>.",5,null],[13,"FlagDuplicate","","A flag was used twice, e.g., <code>i-i</code>.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position …",6,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., <code>-i-s</code>.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error …",7,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., <code>(?</code>.",5,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., <code>a</code>.",5,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture …",8,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., <code>(?P<>abc)</code>.",5,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. …",5,null],[13,"GroupNameUnexpectedEof","","A closing <code>></code> could not be found for a capture group name.",5,null],[13,"GroupUnclosed","","An unclosed group, e.g., <code>(ab</code>.",5,null],[13,"GroupUnopened","","An unopened group, e.g., <code>ab)</code>.",5,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the …",5,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is …",5,null],[13,"RepetitionCountDecimalEmpty","","An opening <code>{</code> was not followed by a valid decimal value. …",5,null],[13,"RepetitionCountUnclosed","","An opening <code>{</code> was found with no corresponding closing <code>}</code>.",5,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing …",5,null],[13,"UnicodeClassInvalid","","The Unicode class is not valid. This typically occurs …",5,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced …",5,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE\'s look-around is used, this …",5,null],[3,"Span","","Span represents the position information of a single AST …",null,null],[12,"start","","The start byte offset.",9,null],[12,"end","","The end byte offset.",9,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at <code>0</code> from …",10,null],[12,"line","","The line number, starting at <code>1</code>.",10,null],[12,"column","","The approximate column number, starting at <code>1</code>.",10,null],[11,"new","","Create a new span with the given positions.",9,[[["position",3]],["span",3]]],[11,"splat","","Create a new span using the given position as the start …",9,[[["position",3]],["span",3]]],[11,"with_start","","Create a new span by replacing the starting the position …",9,[[["position",3]],["span",3]]],[11,"with_end","","Create a new span by replacing the ending the position …",9,[[["position",3]],["span",3]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single …",9,[[]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, …",9,[[]]],[11,"new","","Create a new position with the given information.",10,[[],["position",3]]],[3,"WithComments","","An abstract syntax tree for a singular expression along …",null,null],[12,"ast","","The actual ast.",11,null],[12,"comments","","All comments found in the original regular expression.",11,null],[3,"Comment","","A comment from a regular expression with an associated …",null,null],[12,"span","","The span of this comment, including the beginning <code>#</code> and …",12,null],[12,"comment","","The comment text, starting with the first character …",12,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",13,null],[13,"Flags","","A set of flags, e.g., <code>(?is)</code>.",13,null],[13,"Literal","","A single character literal, which includes escape …",13,null],[13,"Dot","","The \\\"any character\\\" class.",13,null],[13,"Assertion","","A single zero-width assertion.",13,null],[13,"Class","","A single character class. This includes all forms of …",13,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular …",13,null],[13,"Group","","A grouped regular expression.",13,null],[13,"Alternation","","An alternation of regular expressions.",13,null],[13,"Concat","","A concatenation of regular expressions.",13,null],[11,"span","","Return the span of this abstract syntax tree.",13,[[],["span",3]]],[11,"is_empty","","Return true if and only if this Ast is empty.",13,[[]]],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",14,null],[12,"asts","","The alternate regular expressions.",14,null],[11,"into_ast","","Return this alternation as an AST.",14,[[],["ast",4]]],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",15,null],[12,"asts","","The concatenation regular expressions.",15,null],[11,"into_ast","","Return this concatenation as an AST.",15,[[],["ast",4]]],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",16,null],[12,"kind","","The kind of this literal.",16,null],[12,"c","","The Unicode scalar value corresponding to this literal.",16,null],[11,"byte","","If this literal was written as a <code>\\\\x</code> hex escape, then this …",16,[[],["option",4]]],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.",17,null],[13,"Punctuation","","The literal is written as an escape because it is …",17,null],[13,"Octal","","The literal is written as an octal escape, e.g., <code>\\\\141</code>.",17,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number …",17,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed …",17,null],[13,"Special","","The literal is written as a specially recognized escape, …",17,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).",18,null],[13,"FormFeed","","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).",18,null],[13,"Tab","","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).",18,null],[13,"LineFeed","","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).",18,null],[13,"CarriageReturn","","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).",18,null],[13,"VerticalTab","","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).",18,null],[13,"Space","","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …",18,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A <code>\\\\x</code> prefix. When used without brackets, this form is …",19,null],[13,"UnicodeShort","","A <code>\\\\u</code> prefix. When used without brackets, this form is …",19,null],[13,"UnicodeLong","","A <code>\\\\U</code> prefix. When used without brackets, this form is …",19,null],[11,"digits","","The number of digits that must be used with this literal …",19,[[]]],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.",20,null],[13,"Perl","","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.",20,null],[13,"Bracketed","","A bracketed character class set, which may contain zero …",20,null],[11,"span","","Return the span of this character class.",20,[[],["span",3]]],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",21,null],[12,"kind","","The kind of Perl class.",21,null],[12,"negated","","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …",21,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",22,null],[13,"Space","","Whitespace.",22,null],[13,"Word","","Word characters.",22,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",23,null],[12,"kind","","The kind of ASCII class.",23,null],[12,"negated","","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …",23,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","<code>[0-9A-Za-z]</code>",24,null],[13,"Alpha","","<code>[A-Za-z]</code>",24,null],[13,"Ascii","","<code>[\\\\x00-\\\\x7F]</code>",24,null],[13,"Blank","","<code>[ \\\\t]</code>",24,null],[13,"Cntrl","","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>",24,null],[13,"Digit","","<code>[0-9]</code>",24,null],[13,"Graph","","<code>[!-~]</code>",24,null],[13,"Lower","","<code>[a-z]</code>",24,null],[13,"Print","","<code>[ -~]</code>",24,null],[13,"Punct","","<code>[!-/:-@\\\\[-</code>{-~]`",24,null],[13,"Space","","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>",24,null],[13,"Upper","","<code>[A-Z]</code>",24,null],[13,"Word","","<code>[0-9A-Za-z_]</code>",24,null],[13,"Xdigit","","<code>[0-9A-Fa-f]</code>",24,null],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the …",24,[[],[["classasciikind",4],["option",4]]]],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",25,null],[12,"negated","","Whether this class is negated or not.",25,null],[12,"kind","","The kind of Unicode class.",25,null],[11,"is_negated","","Returns true if this class has been negated.",25,[[]]],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., <code>\\\\pN</code>.",26,null],[13,"Named","","A binary property, general category or script. The string …",26,null],[13,"NamedValue","","A property name and an associated value.",26,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate <code>name</code> with <code>value</code>.",27,null],[12,"name","","The property name (which may be empty).",27,null],[12,"value","","The property value (which may be empty).",27,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>…",28,null],[13,"Colon","","A property set to a specific value using a colon, e.g., …",28,null],[13,"NotEqual","","A property that isn\'t a particular value, e.g., …",28,null],[11,"is_equal","","Whether the op is an equality op or not.",28,[[]]],[3,"ClassBracketed","","A bracketed character class, e.g., <code>[a-z0-9]</code>.",null,null],[12,"span","","The span of this class.",29,null],[12,"negated","","Whether this class is negated or not. e.g., <code>[a]</code> is not …",29,null],[12,"kind","","The type of this set. A set is either a normal union of …",29,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested …",30,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",30,null],[11,"union","","Build a set from a union.",30,[[["classsetunion",3]],["classset",4]]],[11,"span","","Return the span of this character class set.",30,[[],["span",3]]],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",31,null],[13,"Literal","","A single literal.",31,null],[13,"Range","","A range between two literals.",31,null],[13,"Ascii","","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.",31,null],[13,"Unicode","","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.",31,null],[13,"Perl","","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.",31,null],[13,"Bracketed","","A bracketed character class set, which may contain zero …",31,null],[13,"Union","","A union of items.",31,null],[11,"span","","Return the span of this character class set item.",31,[[],["span",3]]],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",32,null],[12,"start","","The start of this range.",32,null],[12,"end","","The end of this range.",32,null],[11,"is_valid","","Returns true if and only if this character class range is …",32,[[]]],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the <code>a-z0-9</code> …",33,null],[12,"items","","The sequence of items that make up this union.",33,null],[11,"push","","Push a new item in this union.",33,[[["classsetitem",4]]]],[11,"into_item","","Return this union as a character class set item.",33,[[],["classsetitem",4]]],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …",34,null],[12,"kind","","The type of this set operation.",34,null],[12,"lhs","","The left hand side of the operation.",34,null],[12,"rhs","","The right hand side of the operation.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., <code>\\\\pN&&[a-z]</code>.",35,null],[13,"Difference","","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric …",35,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",36,null],[12,"kind","","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.",36,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","<code>^</code>",37,null],[13,"EndLine","","<code>$</code>",37,null],[13,"StartText","","<code>\\\\A</code>",37,null],[13,"EndText","","<code>\\\\z</code>",37,null],[13,"WordBoundary","","<code>\\\\b</code>",37,null],[13,"NotWordBoundary","","<code>\\\\B</code>",37,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",38,null],[12,"op","","The actual operation.",38,null],[12,"greedy","","Whether this operation was applied greedily or not.",38,null],[12,"ast","","The regular expression under repetition.",38,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like <code>+</code>, <code>*?</code>…",39,null],[12,"kind","","The type of operation.",39,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","<code>?</code>",40,null],[13,"ZeroOrMore","","<code>*</code>",40,null],[13,"OneOrMore","","<code>+</code>",40,null],[13,"Range","","<code>{m,n}</code>",40,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","<code>{m}</code>",41,null],[13,"AtLeast","","<code>{m,}</code>",41,null],[13,"Bounded","","<code>{m,n}</code>",41,null],[11,"is_valid","","Returns true if and only if this repetition range is …",41,[[]]],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",42,null],[12,"kind","","The kind of this group.",42,null],[12,"ast","","The regular expression in this group.",42,null],[11,"flags","","If this group is non-capturing, then this returns the …",42,[[],[["option",4],["flags",3]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",42,[[]]],[11,"capture_index","","Returns the capture index of this group, if this is a …",42,[[],["option",4]]],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","<code>(a)</code>",43,null],[13,"CaptureName","","<code>(?P<name>a)</code>",43,null],[13,"NonCapturing","","<code>(?:a)</code> and <code>(?i:a)</code>",43,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",44,null],[12,"name","","The capture name.",44,null],[12,"index","","The capture index.",44,null],[3,"SetFlags","","A group of flags that is not applied to a particular …",null,null],[12,"span","","The span of these flags, including the grouping …",45,null],[12,"flags","","The actual sequence of flags.",45,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",46,null],[12,"items","","A sequence of flag items. Each item is either a flag or a …",46,null],[11,"add_item","","Add the given item to this sequence of flags.",46,[[["flagsitem",3]],["option",4]]],[11,"flag_state","","Returns the state of the given flag in this set.",46,[[["flag",4]],["option",4]]],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",47,null],[12,"kind","","The kind of this item.",47,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in …",48,null],[13,"Flag","","A single flag in a group.",48,null],[11,"is_negation","","Returns true if and only if this item is a negation …",48,[[]]],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","<code>i</code>",49,null],[13,"MultiLine","","<code>m</code>",49,null],[13,"DotMatchesNewLine","","<code>s</code>",49,null],[13,"SwapGreed","","<code>U</code>",49,null],[13,"Unicode","","<code>u</code>",49,null],[13,"IgnoreWhitespace","","<code>x</code>",49,null],[0,"hir","regex_syntax","Defines a high-level intermediate representation for …",null,null],[0,"literal","regex_syntax::hir","Provides routines for extracting literal prefixes and …",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular …",null,null],[3,"Literal","","A single member of a set of literals extracted from a …",null,null],[11,"empty","","Returns a new empty set of literals using default limits.",50,[[],["literals",3]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the …",50,[[["hir",3]],["literals",3]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the …",50,[[["hir",3]],["literals",3]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",50,[[]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",50,[[],["literals",3]]],[11,"limit_class","","Get the character class size limit for this set.",50,[[]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",50,[[],["literals",3]]],[11,"literals","","Returns the set of literals as a slice. Its order is …",50,[[]]],[11,"min_len","","Returns the length of the smallest literal.",50,[[],["option",4]]],[11,"all_complete","","Returns true if all members in this set are complete.",50,[[]]],[11,"any_complete","","Returns true if any member in this set is complete.",50,[[]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",50,[[]]],[11,"is_empty","","Returns true if this set is empty or if all of its …",50,[[]]],[11,"to_empty","","Returns a new empty set of literals using this set\'s …",50,[[],["literals",3]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this …",50,[[]]],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this …",50,[[]]],[11,"trim_suffix","","Returns a new set of literals with the given number of …",50,[[],[["option",4],["literals",3]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals …",50,[[],["literals",3]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals …",50,[[],["literals",3]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",50,[[["hir",3]]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",50,[[["hir",3]]]],[11,"union","","Unions this set with another set.",50,[[["literals",3]]]],[11,"cross_product","","Extends this set with another set.",50,[[["literals",3]]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",50,[[]]],[11,"add","","Adds the given literal to this set.",50,[[["literal",3]]]],[11,"add_char_class","","Extends each literal in this set with the character class …",50,[[["classunicode",3]]]],[11,"add_byte_class","","Extends each literal in this set with the byte class …",50,[[["classbytes",3]]]],[11,"cut","","Cuts every member of this set. When a member is cut, it …",50,[[]]],[11,"reverse","","Reverses all members in place.",50,[[]]],[11,"clear","","Clears this set of all members.",50,[[]]],[11,"new","","Returns a new complete literal with the bytes given.",51,[[["vec",3]],["literal",3]]],[11,"empty","","Returns a new complete empty literal.",51,[[],["literal",3]]],[11,"is_cut","","Returns true if this literal was \\\"cut.\\\"",51,[[]]],[11,"cut","","Cuts this literal.",51,[[]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for <code>Hir</code>.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression\'s high-level …",null,null],[11,"new","","Create a new printer.",52,[[],["printer",3]]],[11,"print","","Print the given <code>Ast</code> to the given writer. The writer must …",52,[[["hir",3],["write",8]],["result",6]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[11,"new","","Create a new translator builder with a default c …",53,[[],["translatorbuilder",3]]],[11,"build","","Build a translator using the current configuration.",53,[[],["translator",3]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of …",53,[[],["translatorbuilder",3]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (<code>i</code>) by …",53,[[],["translatorbuilder",3]]],[11,"multi_line","","Enable or disable the multi-line matching flag (<code>m</code>) by …",53,[[],["translatorbuilder",3]]],[11,"dot_matches_new_line","","Enable or disable the \\\"dot matches any character\\\" flag (<code>s</code>…",53,[[],["translatorbuilder",3]]],[11,"swap_greed","","Enable or disable the \\\"swap greed\\\" flag (<code>U</code>) by default.",53,[[],["translatorbuilder",3]]],[11,"unicode","","Enable or disable the Unicode flag (<code>u</code>) by default.",53,[[],["translatorbuilder",3]]],[3,"Translator","","A translator maps abstract syntax to a high level …",null,null],[11,"new","","Create a new translator using the default configuration.",54,[[],["translator",3]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a …",54,[[["ast",4]],[["result",4],["hir",3],["error",3]]]],[5,"visit","regex_syntax::hir","Executes an implementation of <code>Visitor</code> in constant stack …",null,[[["hir",3],["visitor",8]],["result",4]]],[8,"Visitor","","A trait for visiting the high-level IR (HIR) in depth …",null,null],[16,"Output","","The result of visiting an HIR.",55,null],[16,"Err","","An error that visiting an HIR might return.",55,null],[10,"finish","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …",55,[[],["result",4]]],[11,"start","","This method is called before beginning traversal of the …",55,[[]]],[11,"visit_pre","","This method is called on an <code>Hir</code> before descending into …",55,[[["hir",3]],["result",4]]],[11,"visit_post","","This method is called on an <code>Hir</code> after descending all of …",55,[[["hir",3]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",55,[[],["result",4]]],[3,"CaseFoldError","","An error that occurs when Unicode-aware simple case …",null,null],[3,"Error","","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.",null,null],[11,"kind","","Return the type of this error.",56,[[],["errorkind",4]]],[11,"pattern","","The original pattern string in which this error occurred.",56,[[]]],[11,"span","","Return the span at which this error occurred.",56,[[],["span",3]]],[4,"ErrorKind","","The type of an error that occurred while building an <code>Hir</code>.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when …",57,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could …",57,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name …",57,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value …",57,null],[13,"UnicodePerlClassNotFound","","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>…",57,null],[13,"UnicodeCaseUnavailable","","This occurs when the Unicode simple case mapping tables …",57,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a …",57,null],[3,"Hir","","A high-level intermediate representation (HIR) for a …",null,null],[4,"HirKind","","The kind of an arbitrary <code>Hir</code> expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, …",58,null],[13,"Literal","","A single literal character that matches exactly this …",58,null],[13,"Class","","A single character class that matches any of the …",58,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has …",58,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be …",58,null],[13,"Repetition","","A repetition operation applied to a child expression.",58,null],[13,"Group","","A possibly capturing group, which contains a child …",58,null],[13,"Concat","","A concatenation of expressions. A concatenation always …",58,null],[13,"Alternation","","An alternation of expressions. An alternation always has …",58,null],[11,"kind","","Returns a reference to the underlying HIR kind.",59,[[],["hirkind",4]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its …",59,[[],["hirkind",4]]],[11,"empty","","Returns an empty HIR expression.",59,[[],["hir",3]]],[11,"literal","","Creates a literal HIR expression.",59,[[["literal",4]],["hir",3]]],[11,"class","","Creates a class HIR expression.",59,[[["class",4]],["hir",3]]],[11,"anchor","","Creates an anchor assertion HIR expression.",59,[[["anchor",4]],["hir",3]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",59,[[["wordboundary",4]],["hir",3]]],[11,"repetition","","Creates a repetition HIR expression.",59,[[["repetition",3]],["hir",3]]],[11,"group","","Creates a group HIR expression.",59,[[["group",3]],["hir",3]]],[11,"concat","","Returns the concatenation of the given expressions.",59,[[["hir",3],["vec",3]],["hir",3]]],[11,"alternation","","Returns the alternation of the given expressions.",59,[[["hir",3],["vec",3]],["hir",3]]],[11,"dot","","Build an HIR expression for <code>.</code>.",59,[[],["hir",3]]],[11,"any","","Build an HIR expression for <code>(?s).</code>.",59,[[],["hir",3]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match …",59,[[]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is …",59,[[]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_line_anchored_start","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_line_anchored_end","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any …",59,[[]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any …",59,[[]]],[11,"is_match_empty","","Return true if and only if the empty string is part of …",59,[[]]],[11,"is_literal","","Return true if and only if this HIR is a simple literal. …",59,[[]]],[11,"is_alternation_literal","","Return true if and only if this HIR is either a simple …",59,[[]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular …",58,[[]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including …",58,[[]]],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",60,null],[13,"Byte","","A single character represented by an arbitrary byte.",60,null],[11,"is_unicode","","Returns true if and only if this literal corresponds to a …",60,[[]]],[4,"Class","","The high-level intermediate representation of a character …",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",61,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one …",61,null],[11,"case_fold_simple","","Apply Unicode simple case folding to this character …",61,[[]]],[11,"negate","","Negate this character class in place.",61,[[]]],[11,"is_always_utf8","","Returns true if and only if this character class will …",61,[[]]],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[11,"new","","Create a new class from a sequence of ranges.",62,[[],["classunicode",3]]],[11,"empty","","Create a new class with no ranges.",62,[[],["classunicode",3]]],[11,"push","","Add a new range to this set.",62,[[["classunicoderange",3]]]],[11,"iter","","Return an iterator over all ranges in this class.",62,[[],["classunicodeiter",3]]],[11,"ranges","","Return the underlying ranges as a slice.",62,[[]]],[11,"case_fold_simple","","Expand this character class such that it contains all …",62,[[]]],[11,"try_case_fold_simple","","Expand this character class such that it contains all …",62,[[],[["result",4],["casefolderror",3]]]],[11,"negate","","Negate this character class.",62,[[]]],[11,"union","","Union this character class with the given character …",62,[[["classunicode",3]]]],[11,"intersect","","Intersect this character class with the given character …",62,[[["classunicode",3]]]],[11,"difference","","Subtract the given character class from this character …",62,[[["classunicode",3]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character …",62,[[["classunicode",3]]]],[11,"is_all_ascii","","Returns true if and only if this character class will …",62,[[]]],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode …",null,null],[11,"new","","Create a new Unicode scalar value range for a character …",63,[[],["classunicoderange",3]]],[11,"start","","Return the start of this range.",63,[[]]],[11,"end","","Return the end of this range.",63,[[]]],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where …",null,null],[11,"new","","Create a new class from a sequence of ranges.",64,[[],["classbytes",3]]],[11,"empty","","Create a new class with no ranges.",64,[[],["classbytes",3]]],[11,"push","","Add a new range to this set.",64,[[["classbytesrange",3]]]],[11,"iter","","Return an iterator over all ranges in this class.",64,[[],["classbytesiter",3]]],[11,"ranges","","Return the underlying ranges as a slice.",64,[[]]],[11,"case_fold_simple","","Expand this character class such that it contains all …",64,[[]]],[11,"negate","","Negate this byte class.",64,[[]]],[11,"union","","Union this byte class with the given byte class, in place.",64,[[["classbytes",3]]]],[11,"intersect","","Intersect this byte class with the given byte class, in …",64,[[["classbytes",3]]]],[11,"difference","","Subtract the given byte class from this byte class, in …",64,[[["classbytes",3]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte …",64,[[["classbytes",3]]]],[11,"is_all_ascii","","Returns true if and only if this character class will …",64,[[]]],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary …",null,null],[11,"new","","Create a new byte range for a character class.",65,[[],["classbytesrange",3]]],[11,"start","","Return the start of this range.",65,[[]]],[11,"end","","Return the end of this range.",65,[[]]],[4,"Anchor","","The high-level intermediate representation for an anchor …",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. …",66,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, …",66,null],[13,"StartText","","Match the beginning of text. Specifically, this matches …",66,null],[13,"EndText","","Match the end of text. Specifically, this matches at the …",66,null],[4,"WordBoundary","","The high-level intermediate representation for a …",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this …",67,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",67,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches …",67,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",67,null],[11,"is_negated","","Returns true if and only if this word boundary assertion …",67,[[]]],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then …",68,null],[12,"hir","","The expression inside the capturing group, which may be …",68,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",69,null],[13,"CaptureName","","A named capturing group.",69,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",70,null],[12,"index","","The capture index of the group.",70,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",69,null],[3,"Repetition","","The high-level intermediate representation of a …",null,null],[12,"kind","","The kind of this repetition operator.",71,null],[12,"greedy","","Whether this repetition operator is greedy or not. A …",71,null],[12,"hir","","The expression being repeated.",71,null],[11,"is_match_empty","","Returns true if and only if this repetition operator …",71,[[]]],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",72,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",72,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",72,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",72,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",73,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",73,null],[13,"Bounded","","Matches a sub-expression at least <code>m</code> times and at most <code>n</code> …",73,null],[0,"utf8","regex_syntax","Converts ranges of Unicode scalar values to equivalent …",null,null],[4,"Utf8Sequence","regex_syntax::utf8","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",74,null],[13,"Two","","Two successive byte ranges.",74,null],[13,"Three","","Three successive byte ranges.",74,null],[13,"Four","","Four successive byte ranges.",74,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",74,[[]]],[11,"len","","Returns the number of byte ranges in this sequence.",74,[[]]],[11,"reverse","","Reverses the ranges in this sequence.",74,[[]]],[11,"matches","","Returns true if and only if a prefix of <code>bytes</code> matches …",74,[[]]],[3,"Utf8Range","","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",75,null],[12,"end","","End of byte range (inclusive).",75,null],[11,"matches","","Returns true if and only if the given byte is in this …",75,[[]]],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the …",76,[[]]],[4,"Error","regex_syntax","This error type encompasses any error that can be …",null,null],[13,"Parse","","An error that occurred while translating concrete syntax …",77,null],[13,"Translate","","An error that occurred while translating abstract syntax …",77,null],[6,"Result","","A type alias for dealing with errors returned by this …",null,null],[3,"Parser","","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[3,"UnicodeWordError","","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …",null,null],[5,"escape","","Escapes all regular expression meta characters in <code>text</code>.",null,[[],["string",3]]],[5,"escape_into","","Escapes all meta characters in <code>text</code> and writes the result …",null,[[["string",3]]]],[5,"is_meta_character","","Returns true if the give character has significance in a …",null,[[]]],[5,"is_word_character","","Returns true if and only if the given character is a …",null,[[]]],[5,"try_is_word_character","","Returns true if and only if the given character is a …",null,[[],[["unicodeworderror",3],["result",4]]]],[5,"is_word_byte","","Returns true if and only if the given character is an …",null,[[]]],[11,"from","regex_syntax::ast::parse","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","regex_syntax::ast::print","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","regex_syntax::ast","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","regex_syntax","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"to_string","","",77,[[],["string",3]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","regex_syntax::hir::literal","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","regex_syntax::hir::print","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","regex_syntax::hir::translate","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","regex_syntax::hir","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_string","","",78,[[],["string",3]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"to_string","","",56,[[],["string",3]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"to_string","","",57,[[],["string",3]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"to_string","","",59,[[],["string",3]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"into_iter","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"into_iter","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","regex_syntax","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_string","","",83,[[],["string",3]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","regex_syntax::utf8","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"drop","regex_syntax::ast","",13,[[]]],[11,"drop","","",30,[[]]],[11,"drop","regex_syntax::hir","",59,[[]]],[11,"as_ref","regex_syntax::hir::literal","",51,[[]]],[11,"from","regex_syntax","",77,[[["error",3]],["error",4]]],[11,"from","","",77,[[["error",3]],["error",4]]],[11,"next","regex_syntax::hir","",79,[[],[["classunicoderange",3],["option",4]]]],[11,"next","","",80,[[],[["option",4],["classbytesrange",3]]]],[11,"next","regex_syntax::utf8","",76,[[],["option",4]]],[11,"clone","regex_syntax::ast::parse","",0,[[],["parserbuilder",3]]],[11,"clone","","",1,[[],["parser",3]]],[11,"clone","regex_syntax::ast","",4,[[],["error",3]]],[11,"clone","","",5,[[],["errorkind",4]]],[11,"clone","","",9,[[],["span",3]]],[11,"clone","","",10,[[],["position",3]]],[11,"clone","","",11,[[],["withcomments",3]]],[11,"clone","","",12,[[],["comment",3]]],[11,"clone","","",13,[[],["ast",4]]],[11,"clone","","",14,[[],["alternation",3]]],[11,"clone","","",15,[[],["concat",3]]],[11,"clone","","",16,[[],["literal",3]]],[11,"clone","","",17,[[],["literalkind",4]]],[11,"clone","","",18,[[],["specialliteralkind",4]]],[11,"clone","","",19,[[],["hexliteralkind",4]]],[11,"clone","","",20,[[],["class",4]]],[11,"clone","","",21,[[],["classperl",3]]],[11,"clone","","",22,[[],["classperlkind",4]]],[11,"clone","","",23,[[],["classascii",3]]],[11,"clone","","",24,[[],["classasciikind",4]]],[11,"clone","","",25,[[],["classunicode",3]]],[11,"clone","","",26,[[],["classunicodekind",4]]],[11,"clone","","",28,[[],["classunicodeopkind",4]]],[11,"clone","","",29,[[],["classbracketed",3]]],[11,"clone","","",30,[[],["classset",4]]],[11,"clone","","",31,[[],["classsetitem",4]]],[11,"clone","","",32,[[],["classsetrange",3]]],[11,"clone","","",33,[[],["classsetunion",3]]],[11,"clone","","",34,[[],["classsetbinaryop",3]]],[11,"clone","","",35,[[],["classsetbinaryopkind",4]]],[11,"clone","","",36,[[],["assertion",3]]],[11,"clone","","",37,[[],["assertionkind",4]]],[11,"clone","","",38,[[],["repetition",3]]],[11,"clone","","",39,[[],["repetitionop",3]]],[11,"clone","","",40,[[],["repetitionkind",4]]],[11,"clone","","",41,[[],["repetitionrange",4]]],[11,"clone","","",42,[[],["group",3]]],[11,"clone","","",43,[[],["groupkind",4]]],[11,"clone","","",44,[[],["capturename",3]]],[11,"clone","","",45,[[],["setflags",3]]],[11,"clone","","",46,[[],["flags",3]]],[11,"clone","","",47,[[],["flagsitem",3]]],[11,"clone","","",48,[[],["flagsitemkind",4]]],[11,"clone","","",49,[[],["flag",4]]],[11,"clone","regex_syntax","",77,[[],["error",4]]],[11,"clone","regex_syntax::hir::literal","",50,[[],["literals",3]]],[11,"clone","","",51,[[],["literal",3]]],[11,"clone","regex_syntax::hir::translate","",53,[[],["translatorbuilder",3]]],[11,"clone","","",54,[[],["translator",3]]],[11,"clone","regex_syntax::hir","",56,[[],["error",3]]],[11,"clone","","",57,[[],["errorkind",4]]],[11,"clone","","",59,[[],["hir",3]]],[11,"clone","","",58,[[],["hirkind",4]]],[11,"clone","","",60,[[],["literal",4]]],[11,"clone","","",61,[[],["class",4]]],[11,"clone","","",62,[[],["classunicode",3]]],[11,"clone","","",63,[[],["classunicoderange",3]]],[11,"clone","","",64,[[],["classbytes",3]]],[11,"clone","","",65,[[],["classbytesrange",3]]],[11,"clone","","",66,[[],["anchor",4]]],[11,"clone","","",67,[[],["wordboundary",4]]],[11,"clone","","",68,[[],["group",3]]],[11,"clone","","",69,[[],["groupkind",4]]],[11,"clone","","",71,[[],["repetition",3]]],[11,"clone","","",72,[[],["repetitionkind",4]]],[11,"clone","","",73,[[],["repetitionrange",4]]],[11,"clone","regex_syntax","",81,[[],["parserbuilder",3]]],[11,"clone","","",82,[[],["parser",3]]],[11,"clone","regex_syntax::utf8","",74,[[],["utf8sequence",4]]],[11,"clone","","",75,[[],["utf8range",3]]],[11,"default","regex_syntax::ast::parse","",0,[[],["parserbuilder",3]]],[11,"default","regex_syntax::hir::translate","",53,[[],["translatorbuilder",3]]],[11,"default","regex_syntax::hir","",63,[[],["classunicoderange",3]]],[11,"default","","",65,[[],["classbytesrange",3]]],[11,"default","regex_syntax","",81,[[],["parserbuilder",3]]],[11,"cmp","regex_syntax::ast","",9,[[["span",3]],["ordering",4]]],[11,"cmp","","",10,[[["position",3]],["ordering",4]]],[11,"cmp","regex_syntax::hir::literal","",51,[[["literal",3]],["ordering",4]]],[11,"cmp","regex_syntax::hir","",63,[[["classunicoderange",3]],["ordering",4]]],[11,"cmp","","",65,[[["classbytesrange",3]],["ordering",4]]],[11,"cmp","regex_syntax::utf8","",74,[[["utf8sequence",4]],["ordering",4]]],[11,"cmp","","",75,[[["utf8range",3]],["ordering",4]]],[11,"eq","regex_syntax::ast","",4,[[["error",3]]]],[11,"ne","","",4,[[["error",3]]]],[11,"eq","","",5,[[["errorkind",4]]]],[11,"ne","","",5,[[["errorkind",4]]]],[11,"eq","","",9,[[["span",3]]]],[11,"ne","","",9,[[["span",3]]]],[11,"eq","","",10,[[["position",3]]]],[11,"ne","","",10,[[["position",3]]]],[11,"eq","","",11,[[["withcomments",3]]]],[11,"ne","","",11,[[["withcomments",3]]]],[11,"eq","","",12,[[["comment",3]]]],[11,"ne","","",12,[[["comment",3]]]],[11,"eq","","",13,[[["ast",4]]]],[11,"ne","","",13,[[["ast",4]]]],[11,"eq","","",14,[[["alternation",3]]]],[11,"ne","","",14,[[["alternation",3]]]],[11,"eq","","",15,[[["concat",3]]]],[11,"ne","","",15,[[["concat",3]]]],[11,"eq","","",16,[[["literal",3]]]],[11,"ne","","",16,[[["literal",3]]]],[11,"eq","","",17,[[["literalkind",4]]]],[11,"ne","","",17,[[["literalkind",4]]]],[11,"eq","","",18,[[["specialliteralkind",4]]]],[11,"eq","","",19,[[["hexliteralkind",4]]]],[11,"eq","","",20,[[["class",4]]]],[11,"ne","","",20,[[["class",4]]]],[11,"eq","","",21,[[["classperl",3]]]],[11,"ne","","",21,[[["classperl",3]]]],[11,"eq","","",22,[[["classperlkind",4]]]],[11,"eq","","",23,[[["classascii",3]]]],[11,"ne","","",23,[[["classascii",3]]]],[11,"eq","","",24,[[["classasciikind",4]]]],[11,"eq","","",25,[[["classunicode",3]]]],[11,"ne","","",25,[[["classunicode",3]]]],[11,"eq","","",26,[[["classunicodekind",4]]]],[11,"ne","","",26,[[["classunicodekind",4]]]],[11,"eq","","",28,[[["classunicodeopkind",4]]]],[11,"eq","","",29,[[["classbracketed",3]]]],[11,"ne","","",29,[[["classbracketed",3]]]],[11,"eq","","",30,[[["classset",4]]]],[11,"ne","","",30,[[["classset",4]]]],[11,"eq","","",31,[[["classsetitem",4]]]],[11,"ne","","",31,[[["classsetitem",4]]]],[11,"eq","","",32,[[["classsetrange",3]]]],[11,"ne","","",32,[[["classsetrange",3]]]],[11,"eq","","",33,[[["classsetunion",3]]]],[11,"ne","","",33,[[["classsetunion",3]]]],[11,"eq","","",34,[[["classsetbinaryop",3]]]],[11,"ne","","",34,[[["classsetbinaryop",3]]]],[11,"eq","","",35,[[["classsetbinaryopkind",4]]]],[11,"eq","","",36,[[["assertion",3]]]],[11,"ne","","",36,[[["assertion",3]]]],[11,"eq","","",37,[[["assertionkind",4]]]],[11,"eq","","",38,[[["repetition",3]]]],[11,"ne","","",38,[[["repetition",3]]]],[11,"eq","","",39,[[["repetitionop",3]]]],[11,"ne","","",39,[[["repetitionop",3]]]],[11,"eq","","",40,[[["repetitionkind",4]]]],[11,"ne","","",40,[[["repetitionkind",4]]]],[11,"eq","","",41,[[["repetitionrange",4]]]],[11,"ne","","",41,[[["repetitionrange",4]]]],[11,"eq","","",42,[[["group",3]]]],[11,"ne","","",42,[[["group",3]]]],[11,"eq","","",43,[[["groupkind",4]]]],[11,"ne","","",43,[[["groupkind",4]]]],[11,"eq","","",44,[[["capturename",3]]]],[11,"ne","","",44,[[["capturename",3]]]],[11,"eq","","",45,[[["setflags",3]]]],[11,"ne","","",45,[[["setflags",3]]]],[11,"eq","","",46,[[["flags",3]]]],[11,"ne","","",46,[[["flags",3]]]],[11,"eq","","",47,[[["flagsitem",3]]]],[11,"ne","","",47,[[["flagsitem",3]]]],[11,"eq","","",48,[[["flagsitemkind",4]]]],[11,"ne","","",48,[[["flagsitemkind",4]]]],[11,"eq","","",49,[[["flag",4]]]],[11,"eq","regex_syntax","",77,[[["error",4]]]],[11,"ne","","",77,[[["error",4]]]],[11,"eq","regex_syntax::hir::literal","",50,[[["literals",3]]]],[11,"ne","","",50,[[["literals",3]]]],[11,"eq","","",51,[[["literal",3]]]],[11,"eq","regex_syntax::hir","",56,[[["error",3]]]],[11,"ne","","",56,[[["error",3]]]],[11,"eq","","",57,[[["errorkind",4]]]],[11,"eq","","",59,[[["hir",3]]]],[11,"ne","","",59,[[["hir",3]]]],[11,"eq","","",58,[[["hirkind",4]]]],[11,"ne","","",58,[[["hirkind",4]]]],[11,"eq","","",60,[[["literal",4]]]],[11,"ne","","",60,[[["literal",4]]]],[11,"eq","","",61,[[["class",4]]]],[11,"ne","","",61,[[["class",4]]]],[11,"eq","","",62,[[["classunicode",3]]]],[11,"ne","","",62,[[["classunicode",3]]]],[11,"eq","","",63,[[["classunicoderange",3]]]],[11,"ne","","",63,[[["classunicoderange",3]]]],[11,"eq","","",64,[[["classbytes",3]]]],[11,"ne","","",64,[[["classbytes",3]]]],[11,"eq","","",65,[[["classbytesrange",3]]]],[11,"ne","","",65,[[["classbytesrange",3]]]],[11,"eq","","",66,[[["anchor",4]]]],[11,"eq","","",67,[[["wordboundary",4]]]],[11,"eq","","",68,[[["group",3]]]],[11,"ne","","",68,[[["group",3]]]],[11,"eq","","",69,[[["groupkind",4]]]],[11,"ne","","",69,[[["groupkind",4]]]],[11,"eq","","",71,[[["repetition",3]]]],[11,"ne","","",71,[[["repetition",3]]]],[11,"eq","","",72,[[["repetitionkind",4]]]],[11,"ne","","",72,[[["repetitionkind",4]]]],[11,"eq","","",73,[[["repetitionrange",4]]]],[11,"ne","","",73,[[["repetitionrange",4]]]],[11,"eq","regex_syntax::utf8","",74,[[["utf8sequence",4]]]],[11,"ne","","",74,[[["utf8sequence",4]]]],[11,"eq","","",75,[[["utf8range",3]]]],[11,"ne","","",75,[[["utf8range",3]]]],[11,"partial_cmp","regex_syntax::ast","",9,[[["span",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",10,[[["position",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","regex_syntax::hir::literal","",51,[[["literal",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","regex_syntax::hir","",63,[[["classunicoderange",3]],[["option",4],["ordering",4]]]],[11,"lt","","",63,[[["classunicoderange",3]]]],[11,"le","","",63,[[["classunicoderange",3]]]],[11,"gt","","",63,[[["classunicoderange",3]]]],[11,"ge","","",63,[[["classunicoderange",3]]]],[11,"partial_cmp","","",65,[[["classbytesrange",3]],[["option",4],["ordering",4]]]],[11,"lt","","",65,[[["classbytesrange",3]]]],[11,"le","","",65,[[["classbytesrange",3]]]],[11,"gt","","",65,[[["classbytesrange",3]]]],[11,"ge","","",65,[[["classbytesrange",3]]]],[11,"partial_cmp","regex_syntax::utf8","",74,[[["utf8sequence",4]],[["option",4],["ordering",4]]]],[11,"lt","","",74,[[["utf8sequence",4]]]],[11,"le","","",74,[[["utf8sequence",4]]]],[11,"gt","","",74,[[["utf8sequence",4]]]],[11,"ge","","",74,[[["utf8sequence",4]]]],[11,"partial_cmp","","",75,[[["utf8range",3]],[["option",4],["ordering",4]]]],[11,"lt","","",75,[[["utf8range",3]]]],[11,"le","","",75,[[["utf8range",3]]]],[11,"gt","","",75,[[["utf8range",3]]]],[11,"ge","","",75,[[["utf8range",3]]]],[11,"deref","regex_syntax::hir::literal","",51,[[],["vec",3]]],[11,"deref_mut","","",51,[[],["vec",3]]],[11,"fmt","regex_syntax::ast::parse","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast::print","",2,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",77,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::literal","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::print","",52,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::translate","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",78,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",83,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::utf8","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",77,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",83,[[["formatter",3]],["result",6]]],[11,"description","regex_syntax::ast","",4,[[]]],[11,"description","regex_syntax","",77,[[]]],[11,"description","regex_syntax::hir","",56,[[]]],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the …",3,[[]]],[11,"visit_pre","","This method is called on an <code>Ast</code> before descending into …",3,[[["ast",4]],["result",4]]],[11,"visit_post","","This method is called on an <code>Ast</code> after descending all of …",3,[[["ast",4]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",3,[[],["result",4]]],[11,"visit_class_set_item_pre","","This method is called on every <code>ClassSetItem</code> before …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_item_post","","This method is called on every <code>ClassSetItem</code> after …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_binary_op_pre","","This method is called on every <code>ClassSetBinaryOp</code> before …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_post","","This method is called on every <code>ClassSetBinaryOp</code> after …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the …",55,[[]]],[11,"visit_pre","","This method is called on an <code>Hir</code> before descending into …",55,[[["hir",3]],["result",4]]],[11,"visit_post","","This method is called on an <code>Hir</code> after descending all of …",55,[[["hir",3]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",55,[[],["result",4]]],[11,"new","regex_syntax","Create a new parser builder with a default configuration.",81,[[],["parserbuilder",3]]],[11,"build","","Build a parser from this configuration with the given …",81,[[],["parser",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",81,[[],["parserbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",81,[[],["parserbuilder",3]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of …",81,[[],["parserbuilder",3]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",81,[[],["parserbuilder",3]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",81,[[],["parserbuilder",3]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",81,[[],["parserbuilder",3]]],[11,"dot_matches_new_line","","Enable or disable the \\\"dot matches any character\\\" flag by …",81,[[],["parserbuilder",3]]],[11,"swap_greed","","Enable or disable the \\\"swap greed\\\" flag by default.",81,[[],["parserbuilder",3]]],[11,"unicode","","Enable or disable the Unicode flag (<code>u</code>) by default.",81,[[],["parserbuilder",3]]],[11,"new","","Create a new parser with a default configuration.",82,[[],["parser",3]]],[11,"parse","","Parse the regular expression into a high level …",82,[[],[["hir",3],["result",6]]]]],"p":[[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[4,"ErrorKind"],[13,"FlagDuplicate"],[13,"FlagRepeatedNegation"],[13,"GroupNameDuplicate"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[4,"Ast"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[3,"ClassPerl"],[4,"ClassPerlKind"],[3,"ClassAscii"],[4,"ClassAsciiKind"],[3,"ClassUnicode"],[4,"ClassUnicodeKind"],[13,"NamedValue"],[4,"ClassUnicodeOpKind"],[3,"ClassBracketed"],[4,"ClassSet"],[4,"ClassSetItem"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[4,"ClassSetBinaryOpKind"],[3,"Assertion"],[4,"AssertionKind"],[3,"Repetition"],[3,"RepetitionOp"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Group"],[4,"GroupKind"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"FlagsItemKind"],[4,"Flag"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[4,"ErrorKind"],[4,"HirKind"],[3,"Hir"],[4,"Literal"],[4,"Class"],[3,"ClassUnicode"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesRange"],[4,"Anchor"],[4,"WordBoundary"],[3,"Group"],[4,"GroupKind"],[13,"CaptureName"],[3,"Repetition"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"Utf8Sequence"],[3,"Utf8Range"],[3,"Utf8Sequences"],[4,"Error"],[3,"CaseFoldError"],[3,"ClassUnicodeIter"],[3,"ClassBytesIter"],[3,"ParserBuilder"],[3,"Parser"],[3,"UnicodeWordError"]]},\
"remove_dir_all":{"doc":"Reliably remove a directory and all of its children.","i":[[5,"remove_dir_all","remove_dir_all","Removes a directory at this path, after removing all its …",null,[[],[["result",4],["error",3]]]]],"p":[]},\
"rusty_fork":{"doc":"Rusty-fork provides a way to \\\"fork\\\" unit tests into …","i":[[0,"fork_test","rusty_fork","Support code for the <code>rusty_fork_test!</code> macro and similar.",null,null],[5,"fix_module_path","rusty_fork::fork_test","Transform a string representing a qualified path as …",null,[[]]],[3,"RustyForkId","rusty_fork","The type of the value produced by <code>rusty_fork_id!</code>.",null,null],[4,"Error","","Enum for errors produced by the rusty-fork crate.",null,null],[13,"UnknownFlag","","An unknown flag was encountered when examining the current…",0,null],[13,"DisallowedFlag","","A flag was encountered when examining the current …",0,null],[13,"SpawnError","","Spawning a subprocess failed.",0,null],[6,"Result","","General <code>Result</code> type for rusty-fork.",null,null],[5,"fork","","Simulate a process fork.",null,[[],["result",6]]],[3,"ChildWrapper","","Wraps a <code>std::process::Child</code> to coordinate state between …",null,null],[3,"ExitStatusWrapper","","Wraps <code>std::process::ExitStatus</code>. Historically, this was …",null,null],[14,"rusty_fork_id","","Produce a hashable identifier unique to the particular …",null,null],[14,"rusty_fork_test","","Run Rust tests in subprocesses.",null,null],[14,"rusty_fork_test_name","","Given the unqualified name of a <code>#[test]</code> function, produce …",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[["error",3]],["error",4]]],[11,"clone","","",1,[[],["rustyforkid",3]]],[11,"clone","","",2,[[],["exitstatuswrapper",3]]],[11,"eq","","",1,[[["rustyforkid",3]]]],[11,"ne","","",1,[[["rustyforkid",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]],[11,"cause","","",0,[[],[["option",4],["error",8]]]],[11,"success","","Was termination successful? Signal termination is not …",2,[[]]],[11,"code","","Returns the exit code of the process, if any.",2,[[],["option",4]]],[11,"unix_signal","","Returns the Unix signal which terminated this process.",2,[[],["option",4]]],[11,"inner","","Return a reference to the inner <code>std::process::Child</code>.",3,[[],["child",3]]],[11,"inner_mut","","Return a mutable reference to the inner …",3,[[],["child",3]]],[11,"kill","","Forces the child to exit. This is equivalent to sending a …",3,[[],["result",6]]],[11,"id","","Returns the OS-assigned processor identifier associated …",3,[[]]],[11,"wait","","Waits for the child to exit completely, returning the …",3,[[],[["exitstatuswrapper",3],["result",6]]]],[11,"try_wait","","Attempts to collect the exit status of the child if it …",3,[[],[["option",4],["result",6]]]],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect …",3,[[],[["result",6],["output",3]]]],[11,"wait_timeout","","Wait for the child to exit, but only up to the given …",3,[[["duration",3]],[["option",4],["result",6]]]]],"p":[[4,"Error"],[3,"RustyForkId"],[3,"ExitStatusWrapper"],[3,"ChildWrapper"]]},\
"ryu":{"doc":"github crates-io docs-rs","i":[[0,"raw","ryu","Unsafe functions that mirror the API of the C …",null,null],[5,"format32","ryu::raw","Print f32 to the given buffer and return number of bytes …",null,[[]]],[5,"format64","","Print f64 to the given buffer and return number of bytes …",null,[[]]],[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",null,null],[8,"Float","","A floating point number, f32 or f64, that can be written …",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[]]],[11,"default","","",0,[[]]],[11,"new","","This is a cheap operation; you don\'t need to worry about …",0,[[]]],[11,"format","","Print a floating point number into this buffer and return …",0,[[["float",8]]]],[11,"format_finite","","Print a floating point number into this buffer and return …",0,[[["float",8]]]]],"p":[[3,"Buffer"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out …","i":[[8,"Strategy","scopeguard","Controls in which cases the associated code should be run",null,null],[10,"should_run","","Return <code>true</code> if the guard’s associated code should run …",0,[[]]],[4,"Always","","Always run on scope exit.",null,null],[3,"ScopeGuard","","<code>ScopeGuard</code> is a scope guard that may own a protected …",null,null],[11,"with_strategy","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through …",1,[[],["scopeguard",3]]],[11,"into_inner","","“Defuse” the guard and extract the value without …",1,[[]]],[5,"guard","","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred …",null,[[],[["always",4],["scopeguard",3]]]],[14,"defer","","Macro to create a <code>ScopeGuard</code> (always run).",null,null],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"should_run","","",2,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"drop","","",1,[[]]]],"p":[[8,"Strategy"],[3,"ScopeGuard"],[4,"Always"]]},\
"semver":{"doc":"Semantic version parsing and comparison.","i":[[4,"Compat","semver","",null,null],[13,"Cargo","","",0,null],[13,"Npm","","",0,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that\'s solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"SemVerError","","An error type for this crate",null,null],[13,"ParseError","","An error ocurred while parsing.",2,null],[3,"Version","","Represents a version number conforming to the semantic …",null,null],[12,"major","","The major version, to be incremented on incompatible …",3,null],[12,"minor","","The minor version, to be incremented when functionality …",3,null],[12,"patch","","The patch version, to be incremented when …",3,null],[12,"pre","","The pre-release version identifier, if one exists.",3,null],[12,"build","","The build metadata, ignored when determining version …",3,null],[4,"ReqParseError","","A <code>ReqParseError</code> is returned from methods which parse a …",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",4,null],[13,"OpAlreadySet","","You have already provided an operation, such as <code>=</code>, <code>~</code>, or <code>^</code>…",4,null],[13,"InvalidSigil","","The sigil you have written is not correct.",4,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",4,null],[13,"InvalidIdentifier","","There was an error parsing an identifier.",4,null],[13,"MajorVersionRequired","","At least a major version is required.",4,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",4,null],[13,"DeprecatedVersionRequirement","","This form of requirement is deprecated.",4,null],[3,"VersionReq","","A <code>VersionReq</code> is a struct containing a list of ranges that …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"partial_cmp","","",0,[[["compat",4]],[["ordering",4],["option",4]]]],[11,"hash","","",0,[[]]],[11,"clone","","",0,[[],["compat",4]]],[11,"cmp","","",0,[[["compat",4]],["ordering",4]]],[11,"eq","","",0,[[["compat",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",1,[[["identifier",4]],["identifier",4]]],[11,"from","","",3,[[["version",3]],["version",3]]],[11,"from","","",3,[[],["version",3]]],[11,"from","","",5,[[["rangeset",3]],["versionreq",3]]],[11,"from","","",1,[[["identifier",4]],["identifier",4]]],[11,"from","","",4,[[["string",3]],["reqparseerror",4]]],[11,"clone","","",1,[[],["identifier",4]]],[11,"clone","","",3,[[],["version",3]]],[11,"clone","","",2,[[],["semvererror",4]]],[11,"clone","","",5,[[],["versionreq",3]]],[11,"clone","","",4,[[],["reqparseerror",4]]],[11,"cmp","","",1,[[["identifier",4]],["ordering",4]]],[11,"cmp","","",3,[[["version",3]],["ordering",4]]],[11,"cmp","","",5,[[["versionreq",3]],["ordering",4]]],[11,"eq","","",1,[[["identifier",4]]]],[11,"ne","","",1,[[["identifier",4]]]],[11,"eq","","",2,[[["semvererror",4]]]],[11,"ne","","",2,[[["semvererror",4]]]],[11,"eq","","",3,[[["version",3]]]],[11,"eq","","",5,[[["versionreq",3]]]],[11,"ne","","",5,[[["versionreq",3]]]],[11,"eq","","",4,[[["reqparseerror",4]]]],[11,"ne","","",4,[[["reqparseerror",4]]]],[11,"partial_cmp","","",1,[[["identifier",4]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["identifier",4]]]],[11,"le","","",1,[[["identifier",4]]]],[11,"gt","","",1,[[["identifier",4]]]],[11,"ge","","",1,[[["identifier",4]]]],[11,"partial_cmp","","",2,[[["semvererror",4]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["semvererror",4]]]],[11,"le","","",2,[[["semvererror",4]]]],[11,"gt","","",2,[[["semvererror",4]]]],[11,"ge","","",2,[[["semvererror",4]]]],[11,"partial_cmp","","",3,[[["version",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",5,[[["versionreq",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["versionreq",3]]]],[11,"le","","",5,[[["versionreq",3]]]],[11,"gt","","",5,[[["versionreq",3]]]],[11,"ge","","",5,[[["versionreq",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",5,[[]]],[11,"from_str","","",3,[[],[["semvererror",4],["result",4],["version",3]]]],[11,"from_str","","",5,[[],[["result",4],["reqparseerror",4],["versionreq",3]]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"new","","Contructs the simple case without pre or build.",3,[[],["version",3]]],[11,"parse","","Parse a string into a semver object.",3,[[],[["semvererror",4],["result",4],["version",3]]]],[11,"increment_patch","","Increments the patch number for this Version (Must be …",3,[[]]],[11,"increment_minor","","Increments the minor version number for this Version …",3,[[]]],[11,"increment_major","","Increments the major version number for this Version …",3,[[]]],[11,"is_prerelease","","Checks to see if the current Version is in pre-release …",3,[[]]],[11,"any","","<code>any()</code> is a factory method which creates a <code>VersionReq</code> with …",5,[[],["versionreq",3]]],[11,"parse","","<code>parse()</code> is the main constructor of a <code>VersionReq</code>. It takes …",5,[[],[["result",4],["reqparseerror",4],["versionreq",3]]]],[11,"parse_compat","","<code>parse_compat()</code> is like <code>parse()</code>, but it takes an extra …",5,[[["compat",4]],[["result",4],["reqparseerror",4],["versionreq",3]]]],[11,"exact","","<code>exact()</code> is a factory method which creates a <code>VersionReq</code> …",5,[[["version",3]],["versionreq",3]]],[11,"matches","","<code>matches()</code> matches a given [<code>Version</code>] against this …",5,[[["version",3]]]],[11,"is_exact","","<code>is_exact()</code> returns <code>true</code> if there is exactly one version …",5,[[]]]],"p":[[4,"Compat"],[4,"Identifier"],[4,"SemVerError"],[3,"Version"],[4,"ReqParseError"],[3,"VersionReq"]]},\
"semver_parser":{"doc":"","i":[[0,"lexer","semver_parser","Lexer for semver ranges.",null,null],[4,"Token","semver_parser::lexer","Semver tokens.",null,null],[13,"Eq","","<code>=</code>",0,null],[13,"Gt","","<code>></code>",0,null],[13,"Lt","","<code><</code>",0,null],[13,"LtEq","","<code><=</code>",0,null],[13,"GtEq","","<code>>=</code>",0,null],[13,"Caret","","\'^`",0,null],[13,"Tilde","","\'~`",0,null],[13,"Star","","\'*`",0,null],[13,"Dot","","<code>.</code>",0,null],[13,"Comma","","<code>,</code>",0,null],[13,"Hyphen","","<code>-</code>",0,null],[13,"Plus","","<code>+</code>",0,null],[13,"Or","","\'||\'",0,null],[13,"Whitespace","","any number of whitespace (<code>\\\\t\\\\r\\\\n </code>) and its span.",0,null],[13,"Numeric","","Numeric component, like <code>0</code> or <code>42</code>.",0,null],[13,"AlphaNumeric","","Alphanumeric component, like <code>alpha1</code> or <code>79deadbe</code>.",0,null],[11,"is_whitespace","","Check if the current token is a whitespace token.",0,[[]]],[11,"is_wildcard","","Check if the current token is a wildcard token.",0,[[]]],[4,"Error","","",null,null],[13,"UnexpectedChar","","Unexpected character.",1,null],[3,"Lexer","","Lexer for semver tokens belonging to a range.",null,null],[11,"new","","Construct a new lexer for the given input.",2,[[],["lexer",3]]],[0,"parser","semver_parser","",null,null],[4,"Error","semver_parser::parser","",null,null],[13,"UnexpectedEnd","","Needed more tokens for parsing, but none are available.",3,null],[13,"UnexpectedToken","","Unexpected token.",3,null],[13,"Lexer","","An error occurred in the lexer.",3,null],[13,"MoreInput","","More input available.",3,null],[13,"EmptyPredicate","","Encountered empty predicate in a set of predicates.",3,null],[13,"EmptyRange","","Encountered an empty range.",3,null],[3,"Parser","","A recursive-descent parser for parsing version …",null,null],[11,"new","","Construct a new parser for the given input.",4,[[],[["error",4],["result",4],["parser",3]]]],[11,"component","","Parse a single component.",4,[[],[["option",4],["error",4],["result",4]]]],[11,"numeric","","Parse a single numeric.",4,[[],[["result",4],["error",4]]]],[11,"dot_component","","Optionally parse a dot, then a component.",4,[[],[["error",4],["result",4]]]],[11,"dot_numeric","","Parse a dot, then a numeric.",4,[[],[["result",4],["error",4]]]],[11,"identifier","","Parse an string identifier.",4,[[],[["result",4],["identifier",4],["error",4]]]],[11,"version","","Parse a version.",4,[[],[["result",4],["version",3],["error",4]]]],[11,"is_eof","","Check if we have reached the end of input.",4,[[]]],[11,"tail","","Get the rest of the tokens in the parser.",4,[[],[["vec",3],["error",4],["result",4]]]],[0,"version","semver_parser","Version data and functions.",null,null],[3,"Version","semver_parser::version","Structure representing version data.",null,null],[12,"major","","Major version as number (<code>0</code> in <code>\\\"0.1.2\\\"</code>).",5,null],[12,"minor","","Minor version as number (<code>1</code> in <code>\\\"0.1.2\\\"</code>).",5,null],[12,"patch","","Patch version as number (<code>2</code> in <code>\\\"0.1.2\\\"</code>).",5,null],[12,"pre","","Pre-release metadata as a vector of <code>Identifier</code> (<code>\\\"alpha1\\\"</code> …",5,null],[12,"build","","Build metadata as a vector of <code>Identifier</code> (<code>\\\"build1\\\"</code> in …",5,null],[4,"Identifier","","Helper enum for holding data of alphanumeric or numeric …",null,null],[13,"Numeric","","An identifier that\'s solely numbers.",6,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",6,null],[11,"concat","","",6,[[],["identifier",4]]],[5,"parse","","Function for parsing version string to <code>Version</code>.",null,[[],[["version",3],["result",4],["error",4]]]],[4,"Compat","semver_parser","",null,null],[13,"Cargo","","",7,null],[13,"Npm","","",7,null],[3,"RangeSet","","",null,null],[12,"ranges","","",8,null],[12,"compat","","",8,null],[3,"Comparator","","",null,null],[12,"op","","",9,null],[12,"major","","",9,null],[12,"minor","","",9,null],[12,"patch","","",9,null],[12,"pre","","",9,null],[4,"Identifier","","",null,null],[13,"Numeric","","",10,null],[13,"AlphaNumeric","","",10,null],[4,"Op","","",null,null],[13,"Lt","","",11,null],[13,"Lte","","",11,null],[13,"Gt","","",11,null],[13,"Gte","","",11,null],[13,"Eq","","",11,null],[3,"Range","","",null,null],[12,"comparator_set","","",12,null],[12,"compat","","",12,null],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","semver_parser::lexer","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","semver_parser::parser","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","semver_parser::version","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","semver_parser::parser","",3,[[["error",4]]]],[11,"next","semver_parser::lexer","",2,[[],["option",4]]],[11,"clone","semver_parser","",8,[[],["rangeset",3]]],[11,"clone","","",7,[[],["compat",4]]],[11,"clone","","",12,[[],["range",3]]],[11,"clone","","",9,[[],["comparator",3]]],[11,"clone","","",11,[[],["op",4]]],[11,"clone","","",10,[[],["identifier",4]]],[11,"clone","semver_parser::version","",5,[[],["version",3]]],[11,"clone","","",6,[[],["identifier",4]]],[11,"cmp","semver_parser","",8,[[["rangeset",3]],["ordering",4]]],[11,"cmp","","",7,[[["compat",4]],["ordering",4]]],[11,"cmp","","",12,[[["range",3]],["ordering",4]]],[11,"cmp","","",9,[[["comparator",3]],["ordering",4]]],[11,"cmp","","",11,[[["op",4]],["ordering",4]]],[11,"cmp","","",10,[[["identifier",4]],["ordering",4]]],[11,"cmp","semver_parser::lexer","",0,[[["token",4]],["ordering",4]]],[11,"cmp","","",1,[[["error",4]],["ordering",4]]],[11,"cmp","semver_parser::parser","",3,[[["error",4]],["ordering",4]]],[11,"cmp","semver_parser::version","",5,[[["version",3]],["ordering",4]]],[11,"cmp","","",6,[[["identifier",4]],["ordering",4]]],[11,"eq","semver_parser","",8,[[["rangeset",3]]]],[11,"ne","","",8,[[["rangeset",3]]]],[11,"eq","","",7,[[["compat",4]]]],[11,"eq","","",12,[[["range",3]]]],[11,"ne","","",12,[[["range",3]]]],[11,"eq","","",9,[[["comparator",3]]]],[11,"ne","","",9,[[["comparator",3]]]],[11,"eq","","",11,[[["op",4]]]],[11,"eq","","",10,[[["identifier",4]]]],[11,"ne","","",10,[[["identifier",4]]]],[11,"eq","semver_parser::lexer","",0,[[["token",4]]]],[11,"ne","","",0,[[["token",4]]]],[11,"eq","","",1,[[["error",4]]]],[11,"ne","","",1,[[["error",4]]]],[11,"eq","semver_parser::parser","",3,[[["error",4]]]],[11,"ne","","",3,[[["error",4]]]],[11,"eq","semver_parser::version","",5,[[["version",3]]]],[11,"ne","","",5,[[["version",3]]]],[11,"eq","","",6,[[["identifier",4]]]],[11,"ne","","",6,[[["identifier",4]]]],[11,"partial_cmp","semver_parser","",8,[[["rangeset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["rangeset",3]]]],[11,"le","","",8,[[["rangeset",3]]]],[11,"gt","","",8,[[["rangeset",3]]]],[11,"ge","","",8,[[["rangeset",3]]]],[11,"partial_cmp","","",7,[[["compat",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",12,[[["range",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["range",3]]]],[11,"le","","",12,[[["range",3]]]],[11,"gt","","",12,[[["range",3]]]],[11,"ge","","",12,[[["range",3]]]],[11,"partial_cmp","","",9,[[["comparator",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["comparator",3]]]],[11,"le","","",9,[[["comparator",3]]]],[11,"gt","","",9,[[["comparator",3]]]],[11,"ge","","",9,[[["comparator",3]]]],[11,"partial_cmp","","",11,[[["op",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",10,[[["identifier",4]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["identifier",4]]]],[11,"le","","",10,[[["identifier",4]]]],[11,"gt","","",10,[[["identifier",4]]]],[11,"ge","","",10,[[["identifier",4]]]],[11,"partial_cmp","semver_parser::lexer","",0,[[["token",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["token",4]]]],[11,"le","","",0,[[["token",4]]]],[11,"gt","","",0,[[["token",4]]]],[11,"ge","","",0,[[["token",4]]]],[11,"partial_cmp","","",1,[[["error",4]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["error",4]]]],[11,"le","","",1,[[["error",4]]]],[11,"gt","","",1,[[["error",4]]]],[11,"ge","","",1,[[["error",4]]]],[11,"partial_cmp","semver_parser::parser","",3,[[["error",4]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["error",4]]]],[11,"le","","",3,[[["error",4]]]],[11,"gt","","",3,[[["error",4]]]],[11,"ge","","",3,[[["error",4]]]],[11,"partial_cmp","semver_parser::version","",5,[[["version",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["version",3]]]],[11,"le","","",5,[[["version",3]]]],[11,"gt","","",5,[[["version",3]]]],[11,"ge","","",5,[[["version",3]]]],[11,"partial_cmp","","",6,[[["identifier",4]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["identifier",4]]]],[11,"le","","",6,[[["identifier",4]]]],[11,"gt","","",6,[[["identifier",4]]]],[11,"ge","","",6,[[["identifier",4]]]],[11,"fmt","semver_parser","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","semver_parser::lexer","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","semver_parser::parser","",3,[[["formatter",3]],["result",6]]],[11,"fmt","semver_parser::version","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","semver_parser::parser","",3,[[["formatter",3]],["result",6]]],[11,"fmt","semver_parser::version","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"hash","semver_parser","",8,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",10,[[]]],[11,"hash","semver_parser::version","",5,[[]]],[11,"hash","","",6,[[]]],[11,"from_str","semver_parser","",8,[[],["result",4]]],[11,"parse","","",8,[[["compat",4]],[["result",4],["string",3]]]]],"p":[[4,"Token"],[4,"Error"],[3,"Lexer"],[4,"Error"],[3,"Parser"],[3,"Version"],[4,"Identifier"],[4,"Compat"],[3,"RangeSet"],[3,"Comparator"],[4,"Identifier"],[4,"Op"],[3,"Range"]]},\
"serde":{"doc":"SerdeSerde is a framework for <em><strong>ser</strong></em>ializing and <em><strong>de</strong></em>…","i":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[0,"value","serde::de","Building blocks for deserializing basic values using the …",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can …",null,null],[3,"UnitDeserializer","","A deserializer holding a <code>()</code>.",null,null],[3,"BoolDeserializer","","A deserializer holding a <code>bool</code>.",null,null],[3,"I8Deserializer","","A deserializer holding an <code>i8</code>.",null,null],[3,"I16Deserializer","","A deserializer holding an <code>i16</code>.",null,null],[3,"I32Deserializer","","A deserializer holding an <code>i32</code>.",null,null],[3,"I64Deserializer","","A deserializer holding an <code>i64</code>.",null,null],[3,"IsizeDeserializer","","A deserializer holding an <code>isize</code>.",null,null],[3,"U8Deserializer","","A deserializer holding a <code>u8</code>.",null,null],[3,"U16Deserializer","","A deserializer holding a <code>u16</code>.",null,null],[3,"U64Deserializer","","A deserializer holding a <code>u64</code>.",null,null],[3,"UsizeDeserializer","","A deserializer holding a <code>usize</code>.",null,null],[3,"F32Deserializer","","A deserializer holding an <code>f32</code>.",null,null],[3,"F64Deserializer","","A deserializer holding an <code>f64</code>.",null,null],[3,"CharDeserializer","","A deserializer holding a <code>char</code>.",null,null],[3,"I128Deserializer","","A deserializer holding an <code>i128</code>.",null,null],[3,"U128Deserializer","","A deserializer holding a <code>u128</code>.",null,null],[3,"U32Deserializer","","A deserializer holding a <code>u32</code>.",null,null],[3,"StrDeserializer","","A deserializer holding a <code>&str</code>.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a <code>&str</code> with a lifetime tied to …",null,null],[11,"new","","Create a new borrowed deserializer from the given string.",0,[[],["borrowedstrdeserializer",3]]],[3,"StringDeserializer","","A deserializer holding a <code>String</code>.",null,null],[3,"CowStrDeserializer","","A deserializer holding a <code>Cow<str></code>.",null,null],[3,"BytesDeserializer","","A deserializer holding a <code>&[u8]</code>. Always calls […",null,null],[11,"new","","Create a new deserializer from the given bytes.",1,[[]]],[3,"BorrowedBytesDeserializer","","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …",null,null],[11,"new","","Create a new borrowed deserializer from the given …",2,[[]]],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[11,"new","","Construct a new <code>SeqDeserializer<I, E></code>.",3,[[]]],[11,"end","","Check for remaining elements after passing a …",3,[[],["result",4]]],[3,"SeqAccessDeserializer","","A deserializer holding a <code>SeqAccess</code>.",null,null],[11,"new","","Construct a new <code>SeqAccessDeserializer<A></code>.",4,[[]]],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[11,"new","","Construct a new <code>MapDeserializer<I, E></code>.",5,[[]]],[11,"end","","Check for remaining elements after passing a …",5,[[],["result",4]]],[3,"MapAccessDeserializer","","A deserializer holding a <code>MapAccess</code>.",null,null],[11,"new","","Construct a new <code>MapAccessDeserializer<A></code>.",6,[[]]],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[8,"Error","","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …",null,null],[10,"custom","","Raised when there is general error when deserializing a …",7,[[]]],[11,"invalid_type","","Raised when a <code>Deserialize</code> receives a type different from …",7,[[["expected",8],["unexpected",4]]]],[11,"invalid_value","","Raised when a <code>Deserialize</code> receives a value of the right …",7,[[["expected",8],["unexpected",4]]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input …",7,[[["expected",8]]]],[11,"unknown_variant","","Raised when a <code>Deserialize</code> enum type received a variant …",7,[[]]],[11,"unknown_field","","Raised when a <code>Deserialize</code> struct type received a field …",7,[[]]],[11,"missing_field","","Raised when a <code>Deserialize</code> struct type expected to receive …",7,[[]]],[11,"duplicate_field","","Raised when a <code>Deserialize</code> struct type received more than …",7,[[]]],[4,"Unexpected","","<code>Unexpected</code> represents an unexpected invocation of any one …",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",8,null],[13,"Unsigned","","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …",8,null],[13,"Signed","","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …",8,null],[13,"Float","","The input contained a floating point <code>f32</code> or <code>f64</code> that was …",8,null],[13,"Char","","The input contained a <code>char</code> that was not expected.",8,null],[13,"Str","","The input contained a <code>&str</code> or <code>String</code> that was not …",8,null],[13,"Bytes","","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …",8,null],[13,"Unit","","The input contained a unit <code>()</code> that was not expected.",8,null],[13,"Option","","The input contained an <code>Option<T></code> that was not expected.",8,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not …",8,null],[13,"Seq","","The input contained a sequence that was not expected.",8,null],[13,"Map","","The input contained a map that was not expected.",8,null],[13,"Enum","","The input contained an enum that was not expected.",8,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",8,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not …",8,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",8,null],[13,"StructVariant","","The input contained a struct variant that was not …",8,null],[13,"Other","","A message stating what uncategorized thing the input …",8,null],[8,"Expected","","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …",null,null],[10,"fmt","","Format an explanation of what data was being expected. …",9,[[["formatter",3]],["result",6]]],[8,"Deserialize","","A <strong>data structure</strong> that can be deserialized from any data …",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",10,[[],["result",4]]],[8,"DeserializeOwned","","A data structure that can be deserialized without …",null,null],[8,"DeserializeSeed","","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …",null,null],[16,"Value","","The type produced by using this seed.",11,null],[10,"deserialize","","Equivalent to the more common <code>Deserialize::deserialize</code> …",11,[[],["result",4]]],[8,"Deserializer","","A <strong>data format</strong> that can deserialize any data structure …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",12,null],[10,"deserialize_any","","Require the <code>Deserializer</code> to figure out how to drive the …",12,[[],["result",4]]],[10,"deserialize_bool","","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.",12,[[],["result",4]]],[10,"deserialize_i8","","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.",12,[[],["result",4]]],[10,"deserialize_i16","","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.",12,[[],["result",4]]],[10,"deserialize_i32","","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.",12,[[],["result",4]]],[10,"deserialize_i64","","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.",12,[[],["result",4]]],[11,"deserialize_i128","","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.",12,[[],["result",4]]],[10,"deserialize_u8","","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.",12,[[],["result",4]]],[10,"deserialize_u16","","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.",12,[[],["result",4]]],[10,"deserialize_u32","","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.",12,[[],["result",4]]],[10,"deserialize_u64","","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.",12,[[],["result",4]]],[11,"deserialize_u128","","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.",12,[[],["result",4]]],[10,"deserialize_f32","","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.",12,[[],["result",4]]],[10,"deserialize_f64","","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.",12,[[],["result",4]]],[10,"deserialize_char","","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.",12,[[],["result",4]]],[10,"deserialize_str","","Hint that the <code>Deserialize</code> type is expecting a string …",12,[[],["result",4]]],[10,"deserialize_string","","Hint that the <code>Deserialize</code> type is expecting a string …",12,[[],["result",4]]],[10,"deserialize_bytes","","Hint that the <code>Deserialize</code> type is expecting a byte array …",12,[[],["result",4]]],[10,"deserialize_byte_buf","","Hint that the <code>Deserialize</code> type is expecting a byte array …",12,[[],["result",4]]],[10,"deserialize_option","","Hint that the <code>Deserialize</code> type is expecting an optional …",12,[[],["result",4]]],[10,"deserialize_unit","","Hint that the <code>Deserialize</code> type is expecting a unit value.",12,[[],["result",4]]],[10,"deserialize_unit_struct","","Hint that the <code>Deserialize</code> type is expecting a unit struct …",12,[[],["result",4]]],[10,"deserialize_newtype_struct","","Hint that the <code>Deserialize</code> type is expecting a newtype …",12,[[],["result",4]]],[10,"deserialize_seq","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",12,[[],["result",4]]],[10,"deserialize_tuple","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",12,[[],["result",4]]],[10,"deserialize_tuple_struct","","Hint that the <code>Deserialize</code> type is expecting a tuple …",12,[[],["result",4]]],[10,"deserialize_map","","Hint that the <code>Deserialize</code> type is expecting a map of …",12,[[],["result",4]]],[10,"deserialize_struct","","Hint that the <code>Deserialize</code> type is expecting a struct with …",12,[[],["result",4]]],[10,"deserialize_enum","","Hint that the <code>Deserialize</code> type is expecting an enum value …",12,[[],["result",4]]],[10,"deserialize_identifier","","Hint that the <code>Deserialize</code> type is expecting the name of a …",12,[[],["result",4]]],[10,"deserialize_ignored_any","","Hint that the <code>Deserialize</code> type needs to deserialize a …",12,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Deserialize</code> implementations should …",12,[[]]],[8,"Visitor","","This trait represents a visitor that walks through a …",null,null],[16,"Value","","The value produced by this visitor.",13,null],[10,"expecting","","Format a message stating what data this Visitor expects …",13,[[["formatter",3]],["result",6]]],[11,"visit_bool","","The input contains a boolean.",13,[[],["result",4]]],[11,"visit_i8","","The input contains an <code>i8</code>.",13,[[],["result",4]]],[11,"visit_i16","","The input contains an <code>i16</code>.",13,[[],["result",4]]],[11,"visit_i32","","The input contains an <code>i32</code>.",13,[[],["result",4]]],[11,"visit_i64","","The input contains an <code>i64</code>.",13,[[],["result",4]]],[11,"visit_i128","","The input contains a <code>i128</code>.",13,[[],["result",4]]],[11,"visit_u8","","The input contains a <code>u8</code>.",13,[[],["result",4]]],[11,"visit_u16","","The input contains a <code>u16</code>.",13,[[],["result",4]]],[11,"visit_u32","","The input contains a <code>u32</code>.",13,[[],["result",4]]],[11,"visit_u64","","The input contains a <code>u64</code>.",13,[[],["result",4]]],[11,"visit_u128","","The input contains a <code>u128</code>.",13,[[],["result",4]]],[11,"visit_f32","","The input contains an <code>f32</code>.",13,[[],["result",4]]],[11,"visit_f64","","The input contains an <code>f64</code>.",13,[[],["result",4]]],[11,"visit_char","","The input contains a <code>char</code>.",13,[[],["result",4]]],[11,"visit_str","","The input contains a string. The lifetime of the string …",13,[[],["result",4]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long …",13,[[],["result",4]]],[11,"visit_string","","The input contains a string and ownership of the string …",13,[[["string",3]],["result",4]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte …",13,[[],["result",4]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as …",13,[[],["result",4]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte …",13,[[["vec",3]],["result",4]]],[11,"visit_none","","The input contains an optional that is absent.",13,[[],["result",4]]],[11,"visit_some","","The input contains an optional that is present.",13,[[],["result",4]]],[11,"visit_unit","","The input contains a unit <code>()</code>.",13,[[],["result",4]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",13,[[],["result",4]]],[11,"visit_seq","","The input contains a sequence of elements.",13,[[],["result",4]]],[11,"visit_map","","The input contains a key-value map.",13,[[],["result",4]]],[11,"visit_enum","","The input contains an enum.",13,[[],["result",4]]],[8,"SeqAccess","","Provides a <code>Visitor</code> access to each element of a sequence …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",14,null],[10,"next_element_seed","","This returns <code>Ok(Some(value))</code> for the next value in the …",14,[[],[["result",4],["option",4]]]],[11,"next_element","","This returns <code>Ok(Some(value))</code> for the next value in the …",14,[[],[["result",4],["option",4]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, …",14,[[],["option",4]]],[8,"MapAccess","","Provides a <code>Visitor</code> access to each entry of a map in the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",15,null],[10,"next_key_seed","","This returns <code>Ok(Some(key))</code> for the next key in the map, …",15,[[],[["option",4],["result",4]]]],[10,"next_value_seed","","This returns a <code>Ok(value)</code> for the next value in the map.",15,[[],["result",4]]],[11,"next_entry_seed","","This returns <code>Ok(Some((key, value)))</code> for the next …",15,[[],[["option",4],["result",4]]]],[11,"next_key","","This returns <code>Ok(Some(key))</code> for the next key in the map, …",15,[[],[["option",4],["result",4]]]],[11,"next_value","","This returns a <code>Ok(value)</code> for the next value in the map.",15,[[],["result",4]]],[11,"next_entry","","This returns <code>Ok(Some((key, value)))</code> for the next …",15,[[],[["option",4],["result",4]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if …",15,[[],["option",4]]],[8,"EnumAccess","","Provides a <code>Visitor</code> access to the data of an enum in the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",16,null],[16,"Variant","","The <code>Visitor</code> that will be used to deserialize the content …",16,null],[10,"variant_seed","","<code>variant</code> is called to identify which variant to …",16,[[],["result",4]]],[11,"variant","","<code>variant</code> is called to identify which variant to …",16,[[],["result",4]]],[8,"VariantAccess","","<code>VariantAccess</code> is a visitor that is created by the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",17,null],[10,"unit_variant","","Called when deserializing a variant with no values.",17,[[],["result",4]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",17,[[],["result",4]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",17,[[],["result",4]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",17,[[],["result",4]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",17,[[],["result",4]]],[8,"IntoDeserializer","","Converts an existing value into a <code>Deserializer</code> from which …",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",18,null],[10,"into_deserializer","","Convert this value into a deserializer.",18,[[]]],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a <code>Serializer</code> that does not …",null,null],[8,"Error","","Trait used by <code>Serialize</code> implementations to generically …",null,null],[10,"custom","","Used when a <code>Serialize</code> implementation encounters any error …",19,[[]]],[8,"Serialize","","A <strong>data structure</strong> that can be serialized into any data …",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",20,[[],["result",4]]],[8,"Serializer","","A <strong>data format</strong> that can serialize any data structure …",null,null],[16,"Ok","","The output type produced by this <code>Serializer</code> during …",21,null],[16,"Error","","The error type when some error occurs during …",21,null],[16,"SerializeSeq","","Type returned from <code>serialize_seq</code> for serializing the …",21,null],[16,"SerializeTuple","","Type returned from <code>serialize_tuple</code> for serializing the …",21,null],[16,"SerializeTupleStruct","","Type returned from <code>serialize_tuple_struct</code> for serializing …",21,null],[16,"SerializeTupleVariant","","Type returned from <code>serialize_tuple_variant</code> for …",21,null],[16,"SerializeMap","","Type returned from <code>serialize_map</code> for serializing the …",21,null],[16,"SerializeStruct","","Type returned from <code>serialize_struct</code> for serializing the …",21,null],[16,"SerializeStructVariant","","Type returned from <code>serialize_struct_variant</code> for …",21,null],[10,"serialize_bool","","Serialize a <code>bool</code> value.",21,[[],["result",4]]],[10,"serialize_i8","","Serialize an <code>i8</code> value.",21,[[],["result",4]]],[10,"serialize_i16","","Serialize an <code>i16</code> value.",21,[[],["result",4]]],[10,"serialize_i32","","Serialize an <code>i32</code> value.",21,[[],["result",4]]],[10,"serialize_i64","","Serialize an <code>i64</code> value.",21,[[],["result",4]]],[11,"serialize_i128","","Serialize an <code>i128</code> value.",21,[[],["result",4]]],[10,"serialize_u8","","Serialize a <code>u8</code> value.",21,[[],["result",4]]],[10,"serialize_u16","","Serialize a <code>u16</code> value.",21,[[],["result",4]]],[10,"serialize_u32","","Serialize a <code>u32</code> value.",21,[[],["result",4]]],[10,"serialize_u64","","Serialize a <code>u64</code> value.",21,[[],["result",4]]],[11,"serialize_u128","","Serialize a <code>u128</code> value.",21,[[],["result",4]]],[10,"serialize_f32","","Serialize an <code>f32</code> value.",21,[[],["result",4]]],[10,"serialize_f64","","Serialize an <code>f64</code> value.",21,[[],["result",4]]],[10,"serialize_char","","Serialize a character.",21,[[],["result",4]]],[10,"serialize_str","","Serialize a <code>&str</code>.",21,[[],["result",4]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",21,[[],["result",4]]],[10,"serialize_none","","Serialize a <code>None</code> value.",21,[[],["result",4]]],[10,"serialize_some","","Serialize a <code>Some(T)</code> value.",21,[[],["result",4]]],[10,"serialize_unit","","Serialize a <code>()</code> value.",21,[[],["result",4]]],[10,"serialize_unit_struct","","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…",21,[[],["result",4]]],[10,"serialize_unit_variant","","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.",21,[[],["result",4]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.",21,[[],["result",4]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.",21,[[],["result",4]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call …",21,[[["option",4]],["result",4]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose …",21,[[],["result",4]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like …",21,[[],["result",4]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like <code>E::T</code> in …",21,[[],["result",4]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by …",21,[[["option",4]],["result",4]]],[10,"serialize_struct","","Begin to serialize a struct like …",21,[[],["result",4]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like <code>E::S</code> in …",21,[[],["result",4]]],[11,"collect_seq","","Collect an iterator as a sequence.",21,[[],["result",4]]],[11,"collect_map","","Collect an iterator as a map.",21,[[],["result",4]]],[11,"collect_str","","Serialize a string produced by an implementation of …",21,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Serialize</code> implementations should …",21,[[]]],[8,"SerializeSeq","","Returned from <code>Serializer::serialize_seq</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",22,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",22,null],[10,"serialize_element","","Serialize a sequence element.",22,[[],["result",4]]],[10,"end","","Finish serializing a sequence.",22,[[],["result",4]]],[8,"SerializeTuple","","Returned from <code>Serializer::serialize_tuple</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",23,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",23,null],[10,"serialize_element","","Serialize a tuple element.",23,[[],["result",4]]],[10,"end","","Finish serializing a tuple.",23,[[],["result",4]]],[8,"SerializeTupleStruct","","Returned from <code>Serializer::serialize_tuple_struct</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",24,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",24,null],[10,"serialize_field","","Serialize a tuple struct field.",24,[[],["result",4]]],[10,"end","","Finish serializing a tuple struct.",24,[[],["result",4]]],[8,"SerializeTupleVariant","","Returned from <code>Serializer::serialize_tuple_variant</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",25,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",25,null],[10,"serialize_field","","Serialize a tuple variant field.",25,[[],["result",4]]],[10,"end","","Finish serializing a tuple variant.",25,[[],["result",4]]],[8,"SerializeMap","","Returned from <code>Serializer::serialize_map</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",26,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",26,null],[10,"serialize_key","","Serialize a map key.",26,[[],["result",4]]],[10,"serialize_value","","Serialize a map value.",26,[[],["result",4]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",26,[[],["result",4]]],[10,"end","","Finish serializing a map.",26,[[],["result",4]]],[8,"SerializeStruct","","Returned from <code>Serializer::serialize_struct</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",27,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",27,null],[10,"serialize_field","","Serialize a struct field.",27,[[],["result",4]]],[11,"skip_field","","Indicate that a struct field has been skipped.",27,[[],["result",4]]],[10,"end","","Finish serializing a struct.",27,[[],["result",4]]],[8,"SerializeStructVariant","","Returned from <code>Serializer::serialize_struct_variant</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",28,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",28,null],[10,"serialize_field","","Serialize a struct variant field.",28,[[],["result",4]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",28,[[],["result",4]]],[10,"end","","Finish serializing a struct variant.",28,[[],["result",4]]],[8,"Deserialize","serde","A <strong>data structure</strong> that can be deserialized from any data …",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",10,[[],["result",4]]],[8,"Deserializer","","A <strong>data format</strong> that can deserialize any data structure …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",12,null],[10,"deserialize_any","","Require the <code>Deserializer</code> to figure out how to drive the …",12,[[],["result",4]]],[10,"deserialize_bool","","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.",12,[[],["result",4]]],[10,"deserialize_i8","","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.",12,[[],["result",4]]],[10,"deserialize_i16","","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.",12,[[],["result",4]]],[10,"deserialize_i32","","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.",12,[[],["result",4]]],[10,"deserialize_i64","","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.",12,[[],["result",4]]],[11,"deserialize_i128","","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.",12,[[],["result",4]]],[10,"deserialize_u8","","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.",12,[[],["result",4]]],[10,"deserialize_u16","","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.",12,[[],["result",4]]],[10,"deserialize_u32","","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.",12,[[],["result",4]]],[10,"deserialize_u64","","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.",12,[[],["result",4]]],[11,"deserialize_u128","","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.",12,[[],["result",4]]],[10,"deserialize_f32","","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.",12,[[],["result",4]]],[10,"deserialize_f64","","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.",12,[[],["result",4]]],[10,"deserialize_char","","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.",12,[[],["result",4]]],[10,"deserialize_str","","Hint that the <code>Deserialize</code> type is expecting a string …",12,[[],["result",4]]],[10,"deserialize_string","","Hint that the <code>Deserialize</code> type is expecting a string …",12,[[],["result",4]]],[10,"deserialize_bytes","","Hint that the <code>Deserialize</code> type is expecting a byte array …",12,[[],["result",4]]],[10,"deserialize_byte_buf","","Hint that the <code>Deserialize</code> type is expecting a byte array …",12,[[],["result",4]]],[10,"deserialize_option","","Hint that the <code>Deserialize</code> type is expecting an optional …",12,[[],["result",4]]],[10,"deserialize_unit","","Hint that the <code>Deserialize</code> type is expecting a unit value.",12,[[],["result",4]]],[10,"deserialize_unit_struct","","Hint that the <code>Deserialize</code> type is expecting a unit struct …",12,[[],["result",4]]],[10,"deserialize_newtype_struct","","Hint that the <code>Deserialize</code> type is expecting a newtype …",12,[[],["result",4]]],[10,"deserialize_seq","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",12,[[],["result",4]]],[10,"deserialize_tuple","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",12,[[],["result",4]]],[10,"deserialize_tuple_struct","","Hint that the <code>Deserialize</code> type is expecting a tuple …",12,[[],["result",4]]],[10,"deserialize_map","","Hint that the <code>Deserialize</code> type is expecting a map of …",12,[[],["result",4]]],[10,"deserialize_struct","","Hint that the <code>Deserialize</code> type is expecting a struct with …",12,[[],["result",4]]],[10,"deserialize_enum","","Hint that the <code>Deserialize</code> type is expecting an enum value …",12,[[],["result",4]]],[10,"deserialize_identifier","","Hint that the <code>Deserialize</code> type is expecting the name of a …",12,[[],["result",4]]],[10,"deserialize_ignored_any","","Hint that the <code>Deserialize</code> type needs to deserialize a …",12,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Deserialize</code> implementations should …",12,[[]]],[8,"Serialize","","A <strong>data structure</strong> that can be serialized into any data …",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",20,[[],["result",4]]],[8,"Serializer","","A <strong>data format</strong> that can serialize any data structure …",null,null],[16,"Ok","","The output type produced by this <code>Serializer</code> during …",21,null],[16,"Error","","The error type when some error occurs during …",21,null],[16,"SerializeSeq","","Type returned from <code>serialize_seq</code> for serializing the …",21,null],[16,"SerializeTuple","","Type returned from <code>serialize_tuple</code> for serializing the …",21,null],[16,"SerializeTupleStruct","","Type returned from <code>serialize_tuple_struct</code> for serializing …",21,null],[16,"SerializeTupleVariant","","Type returned from <code>serialize_tuple_variant</code> for …",21,null],[16,"SerializeMap","","Type returned from <code>serialize_map</code> for serializing the …",21,null],[16,"SerializeStruct","","Type returned from <code>serialize_struct</code> for serializing the …",21,null],[16,"SerializeStructVariant","","Type returned from <code>serialize_struct_variant</code> for …",21,null],[10,"serialize_bool","","Serialize a <code>bool</code> value.",21,[[],["result",4]]],[10,"serialize_i8","","Serialize an <code>i8</code> value.",21,[[],["result",4]]],[10,"serialize_i16","","Serialize an <code>i16</code> value.",21,[[],["result",4]]],[10,"serialize_i32","","Serialize an <code>i32</code> value.",21,[[],["result",4]]],[10,"serialize_i64","","Serialize an <code>i64</code> value.",21,[[],["result",4]]],[11,"serialize_i128","","Serialize an <code>i128</code> value.",21,[[],["result",4]]],[10,"serialize_u8","","Serialize a <code>u8</code> value.",21,[[],["result",4]]],[10,"serialize_u16","","Serialize a <code>u16</code> value.",21,[[],["result",4]]],[10,"serialize_u32","","Serialize a <code>u32</code> value.",21,[[],["result",4]]],[10,"serialize_u64","","Serialize a <code>u64</code> value.",21,[[],["result",4]]],[11,"serialize_u128","","Serialize a <code>u128</code> value.",21,[[],["result",4]]],[10,"serialize_f32","","Serialize an <code>f32</code> value.",21,[[],["result",4]]],[10,"serialize_f64","","Serialize an <code>f64</code> value.",21,[[],["result",4]]],[10,"serialize_char","","Serialize a character.",21,[[],["result",4]]],[10,"serialize_str","","Serialize a <code>&str</code>.",21,[[],["result",4]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",21,[[],["result",4]]],[10,"serialize_none","","Serialize a <code>None</code> value.",21,[[],["result",4]]],[10,"serialize_some","","Serialize a <code>Some(T)</code> value.",21,[[],["result",4]]],[10,"serialize_unit","","Serialize a <code>()</code> value.",21,[[],["result",4]]],[10,"serialize_unit_struct","","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…",21,[[],["result",4]]],[10,"serialize_unit_variant","","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.",21,[[],["result",4]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.",21,[[],["result",4]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.",21,[[],["result",4]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call …",21,[[["option",4]],["result",4]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose …",21,[[],["result",4]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like …",21,[[],["result",4]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like <code>E::T</code> in …",21,[[],["result",4]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by …",21,[[["option",4]],["result",4]]],[10,"serialize_struct","","Begin to serialize a struct like …",21,[[],["result",4]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like <code>E::S</code> in …",21,[[],["result",4]]],[11,"collect_seq","","Collect an iterator as a sequence.",21,[[],["result",4]]],[11,"collect_map","","Collect an iterator as a map.",21,[[],["result",4]]],[11,"collect_str","","Serialize a string produced by an implementation of …",21,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Serialize</code> implementations should …",21,[[]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the <code>Deserializer</code> part of a …",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is …",null,null],[11,"from","serde::de::value","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"fmt","serde::de","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","serde::ser","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"deserialize","serde::de","",50,[[],[["ignoredany",3],["result",4]]]],[11,"deserialize_bool","serde::de::value","",30,[[],["result",4]]],[11,"deserialize_i8","","",30,[[],["result",4]]],[11,"deserialize_i16","","",30,[[],["result",4]]],[11,"deserialize_i32","","",30,[[],["result",4]]],[11,"deserialize_i64","","",30,[[],["result",4]]],[11,"deserialize_i128","","",30,[[],["result",4]]],[11,"deserialize_u8","","",30,[[],["result",4]]],[11,"deserialize_u16","","",30,[[],["result",4]]],[11,"deserialize_u32","","",30,[[],["result",4]]],[11,"deserialize_u64","","",30,[[],["result",4]]],[11,"deserialize_u128","","",30,[[],["result",4]]],[11,"deserialize_f32","","",30,[[],["result",4]]],[11,"deserialize_f64","","",30,[[],["result",4]]],[11,"deserialize_char","","",30,[[],["result",4]]],[11,"deserialize_str","","",30,[[],["result",4]]],[11,"deserialize_string","","",30,[[],["result",4]]],[11,"deserialize_bytes","","",30,[[],["result",4]]],[11,"deserialize_byte_buf","","",30,[[],["result",4]]],[11,"deserialize_unit","","",30,[[],["result",4]]],[11,"deserialize_unit_struct","","",30,[[],["result",4]]],[11,"deserialize_newtype_struct","","",30,[[],["result",4]]],[11,"deserialize_seq","","",30,[[],["result",4]]],[11,"deserialize_tuple","","",30,[[],["result",4]]],[11,"deserialize_tuple_struct","","",30,[[],["result",4]]],[11,"deserialize_map","","",30,[[],["result",4]]],[11,"deserialize_struct","","",30,[[],["result",4]]],[11,"deserialize_enum","","",30,[[],["result",4]]],[11,"deserialize_identifier","","",30,[[],["result",4]]],[11,"deserialize_ignored_any","","",30,[[],["result",4]]],[11,"deserialize_any","","",30,[[],["result",4]]],[11,"deserialize_option","","",30,[[],["result",4]]],[11,"deserialize_bool","","",31,[[],["result",4]]],[11,"deserialize_i8","","",31,[[],["result",4]]],[11,"deserialize_i16","","",31,[[],["result",4]]],[11,"deserialize_i32","","",31,[[],["result",4]]],[11,"deserialize_i64","","",31,[[],["result",4]]],[11,"deserialize_i128","","",31,[[],["result",4]]],[11,"deserialize_u8","","",31,[[],["result",4]]],[11,"deserialize_u16","","",31,[[],["result",4]]],[11,"deserialize_u32","","",31,[[],["result",4]]],[11,"deserialize_u64","","",31,[[],["result",4]]],[11,"deserialize_u128","","",31,[[],["result",4]]],[11,"deserialize_f32","","",31,[[],["result",4]]],[11,"deserialize_f64","","",31,[[],["result",4]]],[11,"deserialize_char","","",31,[[],["result",4]]],[11,"deserialize_str","","",31,[[],["result",4]]],[11,"deserialize_string","","",31,[[],["result",4]]],[11,"deserialize_bytes","","",31,[[],["result",4]]],[11,"deserialize_byte_buf","","",31,[[],["result",4]]],[11,"deserialize_option","","",31,[[],["result",4]]],[11,"deserialize_unit","","",31,[[],["result",4]]],[11,"deserialize_unit_struct","","",31,[[],["result",4]]],[11,"deserialize_newtype_struct","","",31,[[],["result",4]]],[11,"deserialize_seq","","",31,[[],["result",4]]],[11,"deserialize_tuple","","",31,[[],["result",4]]],[11,"deserialize_tuple_struct","","",31,[[],["result",4]]],[11,"deserialize_map","","",31,[[],["result",4]]],[11,"deserialize_struct","","",31,[[],["result",4]]],[11,"deserialize_enum","","",31,[[],["result",4]]],[11,"deserialize_identifier","","",31,[[],["result",4]]],[11,"deserialize_ignored_any","","",31,[[],["result",4]]],[11,"deserialize_any","","",31,[[],["result",4]]],[11,"deserialize_bool","","",32,[[],["result",4]]],[11,"deserialize_i8","","",32,[[],["result",4]]],[11,"deserialize_i16","","",32,[[],["result",4]]],[11,"deserialize_i32","","",32,[[],["result",4]]],[11,"deserialize_i64","","",32,[[],["result",4]]],[11,"deserialize_i128","","",32,[[],["result",4]]],[11,"deserialize_u8","","",32,[[],["result",4]]],[11,"deserialize_u16","","",32,[[],["result",4]]],[11,"deserialize_u32","","",32,[[],["result",4]]],[11,"deserialize_u64","","",32,[[],["result",4]]],[11,"deserialize_u128","","",32,[[],["result",4]]],[11,"deserialize_f32","","",32,[[],["result",4]]],[11,"deserialize_f64","","",32,[[],["result",4]]],[11,"deserialize_char","","",32,[[],["result",4]]],[11,"deserialize_str","","",32,[[],["result",4]]],[11,"deserialize_string","","",32,[[],["result",4]]],[11,"deserialize_bytes","","",32,[[],["result",4]]],[11,"deserialize_byte_buf","","",32,[[],["result",4]]],[11,"deserialize_option","","",32,[[],["result",4]]],[11,"deserialize_unit","","",32,[[],["result",4]]],[11,"deserialize_unit_struct","","",32,[[],["result",4]]],[11,"deserialize_newtype_struct","","",32,[[],["result",4]]],[11,"deserialize_seq","","",32,[[],["result",4]]],[11,"deserialize_tuple","","",32,[[],["result",4]]],[11,"deserialize_tuple_struct","","",32,[[],["result",4]]],[11,"deserialize_map","","",32,[[],["result",4]]],[11,"deserialize_struct","","",32,[[],["result",4]]],[11,"deserialize_enum","","",32,[[],["result",4]]],[11,"deserialize_identifier","","",32,[[],["result",4]]],[11,"deserialize_ignored_any","","",32,[[],["result",4]]],[11,"deserialize_any","","",32,[[],["result",4]]],[11,"deserialize_bool","","",33,[[],["result",4]]],[11,"deserialize_i8","","",33,[[],["result",4]]],[11,"deserialize_i16","","",33,[[],["result",4]]],[11,"deserialize_i32","","",33,[[],["result",4]]],[11,"deserialize_i64","","",33,[[],["result",4]]],[11,"deserialize_i128","","",33,[[],["result",4]]],[11,"deserialize_u8","","",33,[[],["result",4]]],[11,"deserialize_u16","","",33,[[],["result",4]]],[11,"deserialize_u32","","",33,[[],["result",4]]],[11,"deserialize_u64","","",33,[[],["result",4]]],[11,"deserialize_u128","","",33,[[],["result",4]]],[11,"deserialize_f32","","",33,[[],["result",4]]],[11,"deserialize_f64","","",33,[[],["result",4]]],[11,"deserialize_char","","",33,[[],["result",4]]],[11,"deserialize_str","","",33,[[],["result",4]]],[11,"deserialize_string","","",33,[[],["result",4]]],[11,"deserialize_bytes","","",33,[[],["result",4]]],[11,"deserialize_byte_buf","","",33,[[],["result",4]]],[11,"deserialize_option","","",33,[[],["result",4]]],[11,"deserialize_unit","","",33,[[],["result",4]]],[11,"deserialize_unit_struct","","",33,[[],["result",4]]],[11,"deserialize_newtype_struct","","",33,[[],["result",4]]],[11,"deserialize_seq","","",33,[[],["result",4]]],[11,"deserialize_tuple","","",33,[[],["result",4]]],[11,"deserialize_tuple_struct","","",33,[[],["result",4]]],[11,"deserialize_map","","",33,[[],["result",4]]],[11,"deserialize_struct","","",33,[[],["result",4]]],[11,"deserialize_enum","","",33,[[],["result",4]]],[11,"deserialize_identifier","","",33,[[],["result",4]]],[11,"deserialize_ignored_any","","",33,[[],["result",4]]],[11,"deserialize_any","","",33,[[],["result",4]]],[11,"deserialize_bool","","",34,[[],["result",4]]],[11,"deserialize_i8","","",34,[[],["result",4]]],[11,"deserialize_i16","","",34,[[],["result",4]]],[11,"deserialize_i32","","",34,[[],["result",4]]],[11,"deserialize_i64","","",34,[[],["result",4]]],[11,"deserialize_i128","","",34,[[],["result",4]]],[11,"deserialize_u8","","",34,[[],["result",4]]],[11,"deserialize_u16","","",34,[[],["result",4]]],[11,"deserialize_u32","","",34,[[],["result",4]]],[11,"deserialize_u64","","",34,[[],["result",4]]],[11,"deserialize_u128","","",34,[[],["result",4]]],[11,"deserialize_f32","","",34,[[],["result",4]]],[11,"deserialize_f64","","",34,[[],["result",4]]],[11,"deserialize_char","","",34,[[],["result",4]]],[11,"deserialize_str","","",34,[[],["result",4]]],[11,"deserialize_string","","",34,[[],["result",4]]],[11,"deserialize_bytes","","",34,[[],["result",4]]],[11,"deserialize_byte_buf","","",34,[[],["result",4]]],[11,"deserialize_option","","",34,[[],["result",4]]],[11,"deserialize_unit","","",34,[[],["result",4]]],[11,"deserialize_unit_struct","","",34,[[],["result",4]]],[11,"deserialize_newtype_struct","","",34,[[],["result",4]]],[11,"deserialize_seq","","",34,[[],["result",4]]],[11,"deserialize_tuple","","",34,[[],["result",4]]],[11,"deserialize_tuple_struct","","",34,[[],["result",4]]],[11,"deserialize_map","","",34,[[],["result",4]]],[11,"deserialize_struct","","",34,[[],["result",4]]],[11,"deserialize_enum","","",34,[[],["result",4]]],[11,"deserialize_identifier","","",34,[[],["result",4]]],[11,"deserialize_ignored_any","","",34,[[],["result",4]]],[11,"deserialize_any","","",34,[[],["result",4]]],[11,"deserialize_bool","","",35,[[],["result",4]]],[11,"deserialize_i8","","",35,[[],["result",4]]],[11,"deserialize_i16","","",35,[[],["result",4]]],[11,"deserialize_i32","","",35,[[],["result",4]]],[11,"deserialize_i64","","",35,[[],["result",4]]],[11,"deserialize_i128","","",35,[[],["result",4]]],[11,"deserialize_u8","","",35,[[],["result",4]]],[11,"deserialize_u16","","",35,[[],["result",4]]],[11,"deserialize_u32","","",35,[[],["result",4]]],[11,"deserialize_u64","","",35,[[],["result",4]]],[11,"deserialize_u128","","",35,[[],["result",4]]],[11,"deserialize_f32","","",35,[[],["result",4]]],[11,"deserialize_f64","","",35,[[],["result",4]]],[11,"deserialize_char","","",35,[[],["result",4]]],[11,"deserialize_str","","",35,[[],["result",4]]],[11,"deserialize_string","","",35,[[],["result",4]]],[11,"deserialize_bytes","","",35,[[],["result",4]]],[11,"deserialize_byte_buf","","",35,[[],["result",4]]],[11,"deserialize_option","","",35,[[],["result",4]]],[11,"deserialize_unit","","",35,[[],["result",4]]],[11,"deserialize_unit_struct","","",35,[[],["result",4]]],[11,"deserialize_newtype_struct","","",35,[[],["result",4]]],[11,"deserialize_seq","","",35,[[],["result",4]]],[11,"deserialize_tuple","","",35,[[],["result",4]]],[11,"deserialize_tuple_struct","","",35,[[],["result",4]]],[11,"deserialize_map","","",35,[[],["result",4]]],[11,"deserialize_struct","","",35,[[],["result",4]]],[11,"deserialize_enum","","",35,[[],["result",4]]],[11,"deserialize_identifier","","",35,[[],["result",4]]],[11,"deserialize_ignored_any","","",35,[[],["result",4]]],[11,"deserialize_any","","",35,[[],["result",4]]],[11,"deserialize_bool","","",36,[[],["result",4]]],[11,"deserialize_i8","","",36,[[],["result",4]]],[11,"deserialize_i16","","",36,[[],["result",4]]],[11,"deserialize_i32","","",36,[[],["result",4]]],[11,"deserialize_i64","","",36,[[],["result",4]]],[11,"deserialize_i128","","",36,[[],["result",4]]],[11,"deserialize_u8","","",36,[[],["result",4]]],[11,"deserialize_u16","","",36,[[],["result",4]]],[11,"deserialize_u32","","",36,[[],["result",4]]],[11,"deserialize_u64","","",36,[[],["result",4]]],[11,"deserialize_u128","","",36,[[],["result",4]]],[11,"deserialize_f32","","",36,[[],["result",4]]],[11,"deserialize_f64","","",36,[[],["result",4]]],[11,"deserialize_char","","",36,[[],["result",4]]],[11,"deserialize_str","","",36,[[],["result",4]]],[11,"deserialize_string","","",36,[[],["result",4]]],[11,"deserialize_bytes","","",36,[[],["result",4]]],[11,"deserialize_byte_buf","","",36,[[],["result",4]]],[11,"deserialize_option","","",36,[[],["result",4]]],[11,"deserialize_unit","","",36,[[],["result",4]]],[11,"deserialize_unit_struct","","",36,[[],["result",4]]],[11,"deserialize_newtype_struct","","",36,[[],["result",4]]],[11,"deserialize_seq","","",36,[[],["result",4]]],[11,"deserialize_tuple","","",36,[[],["result",4]]],[11,"deserialize_tuple_struct","","",36,[[],["result",4]]],[11,"deserialize_map","","",36,[[],["result",4]]],[11,"deserialize_struct","","",36,[[],["result",4]]],[11,"deserialize_enum","","",36,[[],["result",4]]],[11,"deserialize_identifier","","",36,[[],["result",4]]],[11,"deserialize_ignored_any","","",36,[[],["result",4]]],[11,"deserialize_any","","",36,[[],["result",4]]],[11,"deserialize_bool","","",37,[[],["result",4]]],[11,"deserialize_i8","","",37,[[],["result",4]]],[11,"deserialize_i16","","",37,[[],["result",4]]],[11,"deserialize_i32","","",37,[[],["result",4]]],[11,"deserialize_i64","","",37,[[],["result",4]]],[11,"deserialize_i128","","",37,[[],["result",4]]],[11,"deserialize_u8","","",37,[[],["result",4]]],[11,"deserialize_u16","","",37,[[],["result",4]]],[11,"deserialize_u32","","",37,[[],["result",4]]],[11,"deserialize_u64","","",37,[[],["result",4]]],[11,"deserialize_u128","","",37,[[],["result",4]]],[11,"deserialize_f32","","",37,[[],["result",4]]],[11,"deserialize_f64","","",37,[[],["result",4]]],[11,"deserialize_char","","",37,[[],["result",4]]],[11,"deserialize_str","","",37,[[],["result",4]]],[11,"deserialize_string","","",37,[[],["result",4]]],[11,"deserialize_bytes","","",37,[[],["result",4]]],[11,"deserialize_byte_buf","","",37,[[],["result",4]]],[11,"deserialize_option","","",37,[[],["result",4]]],[11,"deserialize_unit","","",37,[[],["result",4]]],[11,"deserialize_unit_struct","","",37,[[],["result",4]]],[11,"deserialize_newtype_struct","","",37,[[],["result",4]]],[11,"deserialize_seq","","",37,[[],["result",4]]],[11,"deserialize_tuple","","",37,[[],["result",4]]],[11,"deserialize_tuple_struct","","",37,[[],["result",4]]],[11,"deserialize_map","","",37,[[],["result",4]]],[11,"deserialize_struct","","",37,[[],["result",4]]],[11,"deserialize_enum","","",37,[[],["result",4]]],[11,"deserialize_identifier","","",37,[[],["result",4]]],[11,"deserialize_ignored_any","","",37,[[],["result",4]]],[11,"deserialize_any","","",37,[[],["result",4]]],[11,"deserialize_bool","","",38,[[],["result",4]]],[11,"deserialize_i8","","",38,[[],["result",4]]],[11,"deserialize_i16","","",38,[[],["result",4]]],[11,"deserialize_i32","","",38,[[],["result",4]]],[11,"deserialize_i64","","",38,[[],["result",4]]],[11,"deserialize_i128","","",38,[[],["result",4]]],[11,"deserialize_u8","","",38,[[],["result",4]]],[11,"deserialize_u16","","",38,[[],["result",4]]],[11,"deserialize_u32","","",38,[[],["result",4]]],[11,"deserialize_u64","","",38,[[],["result",4]]],[11,"deserialize_u128","","",38,[[],["result",4]]],[11,"deserialize_f32","","",38,[[],["result",4]]],[11,"deserialize_f64","","",38,[[],["result",4]]],[11,"deserialize_char","","",38,[[],["result",4]]],[11,"deserialize_str","","",38,[[],["result",4]]],[11,"deserialize_string","","",38,[[],["result",4]]],[11,"deserialize_bytes","","",38,[[],["result",4]]],[11,"deserialize_byte_buf","","",38,[[],["result",4]]],[11,"deserialize_option","","",38,[[],["result",4]]],[11,"deserialize_unit","","",38,[[],["result",4]]],[11,"deserialize_unit_struct","","",38,[[],["result",4]]],[11,"deserialize_newtype_struct","","",38,[[],["result",4]]],[11,"deserialize_seq","","",38,[[],["result",4]]],[11,"deserialize_tuple","","",38,[[],["result",4]]],[11,"deserialize_tuple_struct","","",38,[[],["result",4]]],[11,"deserialize_map","","",38,[[],["result",4]]],[11,"deserialize_struct","","",38,[[],["result",4]]],[11,"deserialize_enum","","",38,[[],["result",4]]],[11,"deserialize_identifier","","",38,[[],["result",4]]],[11,"deserialize_ignored_any","","",38,[[],["result",4]]],[11,"deserialize_any","","",38,[[],["result",4]]],[11,"deserialize_bool","","",39,[[],["result",4]]],[11,"deserialize_i8","","",39,[[],["result",4]]],[11,"deserialize_i16","","",39,[[],["result",4]]],[11,"deserialize_i32","","",39,[[],["result",4]]],[11,"deserialize_i64","","",39,[[],["result",4]]],[11,"deserialize_i128","","",39,[[],["result",4]]],[11,"deserialize_u8","","",39,[[],["result",4]]],[11,"deserialize_u16","","",39,[[],["result",4]]],[11,"deserialize_u32","","",39,[[],["result",4]]],[11,"deserialize_u64","","",39,[[],["result",4]]],[11,"deserialize_u128","","",39,[[],["result",4]]],[11,"deserialize_f32","","",39,[[],["result",4]]],[11,"deserialize_f64","","",39,[[],["result",4]]],[11,"deserialize_char","","",39,[[],["result",4]]],[11,"deserialize_str","","",39,[[],["result",4]]],[11,"deserialize_string","","",39,[[],["result",4]]],[11,"deserialize_bytes","","",39,[[],["result",4]]],[11,"deserialize_byte_buf","","",39,[[],["result",4]]],[11,"deserialize_option","","",39,[[],["result",4]]],[11,"deserialize_unit","","",39,[[],["result",4]]],[11,"deserialize_unit_struct","","",39,[[],["result",4]]],[11,"deserialize_newtype_struct","","",39,[[],["result",4]]],[11,"deserialize_seq","","",39,[[],["result",4]]],[11,"deserialize_tuple","","",39,[[],["result",4]]],[11,"deserialize_tuple_struct","","",39,[[],["result",4]]],[11,"deserialize_map","","",39,[[],["result",4]]],[11,"deserialize_struct","","",39,[[],["result",4]]],[11,"deserialize_enum","","",39,[[],["result",4]]],[11,"deserialize_identifier","","",39,[[],["result",4]]],[11,"deserialize_ignored_any","","",39,[[],["result",4]]],[11,"deserialize_any","","",39,[[],["result",4]]],[11,"deserialize_bool","","",40,[[],["result",4]]],[11,"deserialize_i8","","",40,[[],["result",4]]],[11,"deserialize_i16","","",40,[[],["result",4]]],[11,"deserialize_i32","","",40,[[],["result",4]]],[11,"deserialize_i64","","",40,[[],["result",4]]],[11,"deserialize_i128","","",40,[[],["result",4]]],[11,"deserialize_u8","","",40,[[],["result",4]]],[11,"deserialize_u16","","",40,[[],["result",4]]],[11,"deserialize_u32","","",40,[[],["result",4]]],[11,"deserialize_u64","","",40,[[],["result",4]]],[11,"deserialize_u128","","",40,[[],["result",4]]],[11,"deserialize_f32","","",40,[[],["result",4]]],[11,"deserialize_f64","","",40,[[],["result",4]]],[11,"deserialize_char","","",40,[[],["result",4]]],[11,"deserialize_str","","",40,[[],["result",4]]],[11,"deserialize_string","","",40,[[],["result",4]]],[11,"deserialize_bytes","","",40,[[],["result",4]]],[11,"deserialize_byte_buf","","",40,[[],["result",4]]],[11,"deserialize_option","","",40,[[],["result",4]]],[11,"deserialize_unit","","",40,[[],["result",4]]],[11,"deserialize_unit_struct","","",40,[[],["result",4]]],[11,"deserialize_newtype_struct","","",40,[[],["result",4]]],[11,"deserialize_seq","","",40,[[],["result",4]]],[11,"deserialize_tuple","","",40,[[],["result",4]]],[11,"deserialize_tuple_struct","","",40,[[],["result",4]]],[11,"deserialize_map","","",40,[[],["result",4]]],[11,"deserialize_struct","","",40,[[],["result",4]]],[11,"deserialize_enum","","",40,[[],["result",4]]],[11,"deserialize_identifier","","",40,[[],["result",4]]],[11,"deserialize_ignored_any","","",40,[[],["result",4]]],[11,"deserialize_any","","",40,[[],["result",4]]],[11,"deserialize_bool","","",41,[[],["result",4]]],[11,"deserialize_i8","","",41,[[],["result",4]]],[11,"deserialize_i16","","",41,[[],["result",4]]],[11,"deserialize_i32","","",41,[[],["result",4]]],[11,"deserialize_i64","","",41,[[],["result",4]]],[11,"deserialize_i128","","",41,[[],["result",4]]],[11,"deserialize_u8","","",41,[[],["result",4]]],[11,"deserialize_u16","","",41,[[],["result",4]]],[11,"deserialize_u32","","",41,[[],["result",4]]],[11,"deserialize_u64","","",41,[[],["result",4]]],[11,"deserialize_u128","","",41,[[],["result",4]]],[11,"deserialize_f32","","",41,[[],["result",4]]],[11,"deserialize_f64","","",41,[[],["result",4]]],[11,"deserialize_char","","",41,[[],["result",4]]],[11,"deserialize_str","","",41,[[],["result",4]]],[11,"deserialize_string","","",41,[[],["result",4]]],[11,"deserialize_bytes","","",41,[[],["result",4]]],[11,"deserialize_byte_buf","","",41,[[],["result",4]]],[11,"deserialize_option","","",41,[[],["result",4]]],[11,"deserialize_unit","","",41,[[],["result",4]]],[11,"deserialize_unit_struct","","",41,[[],["result",4]]],[11,"deserialize_newtype_struct","","",41,[[],["result",4]]],[11,"deserialize_seq","","",41,[[],["result",4]]],[11,"deserialize_tuple","","",41,[[],["result",4]]],[11,"deserialize_tuple_struct","","",41,[[],["result",4]]],[11,"deserialize_map","","",41,[[],["result",4]]],[11,"deserialize_struct","","",41,[[],["result",4]]],[11,"deserialize_enum","","",41,[[],["result",4]]],[11,"deserialize_identifier","","",41,[[],["result",4]]],[11,"deserialize_ignored_any","","",41,[[],["result",4]]],[11,"deserialize_any","","",41,[[],["result",4]]],[11,"deserialize_bool","","",42,[[],["result",4]]],[11,"deserialize_i8","","",42,[[],["result",4]]],[11,"deserialize_i16","","",42,[[],["result",4]]],[11,"deserialize_i32","","",42,[[],["result",4]]],[11,"deserialize_i64","","",42,[[],["result",4]]],[11,"deserialize_i128","","",42,[[],["result",4]]],[11,"deserialize_u8","","",42,[[],["result",4]]],[11,"deserialize_u16","","",42,[[],["result",4]]],[11,"deserialize_u32","","",42,[[],["result",4]]],[11,"deserialize_u64","","",42,[[],["result",4]]],[11,"deserialize_u128","","",42,[[],["result",4]]],[11,"deserialize_f32","","",42,[[],["result",4]]],[11,"deserialize_f64","","",42,[[],["result",4]]],[11,"deserialize_char","","",42,[[],["result",4]]],[11,"deserialize_str","","",42,[[],["result",4]]],[11,"deserialize_string","","",42,[[],["result",4]]],[11,"deserialize_bytes","","",42,[[],["result",4]]],[11,"deserialize_byte_buf","","",42,[[],["result",4]]],[11,"deserialize_option","","",42,[[],["result",4]]],[11,"deserialize_unit","","",42,[[],["result",4]]],[11,"deserialize_unit_struct","","",42,[[],["result",4]]],[11,"deserialize_newtype_struct","","",42,[[],["result",4]]],[11,"deserialize_seq","","",42,[[],["result",4]]],[11,"deserialize_tuple","","",42,[[],["result",4]]],[11,"deserialize_tuple_struct","","",42,[[],["result",4]]],[11,"deserialize_map","","",42,[[],["result",4]]],[11,"deserialize_struct","","",42,[[],["result",4]]],[11,"deserialize_enum","","",42,[[],["result",4]]],[11,"deserialize_identifier","","",42,[[],["result",4]]],[11,"deserialize_ignored_any","","",42,[[],["result",4]]],[11,"deserialize_any","","",42,[[],["result",4]]],[11,"deserialize_bool","","",43,[[],["result",4]]],[11,"deserialize_i8","","",43,[[],["result",4]]],[11,"deserialize_i16","","",43,[[],["result",4]]],[11,"deserialize_i32","","",43,[[],["result",4]]],[11,"deserialize_i64","","",43,[[],["result",4]]],[11,"deserialize_i128","","",43,[[],["result",4]]],[11,"deserialize_u8","","",43,[[],["result",4]]],[11,"deserialize_u16","","",43,[[],["result",4]]],[11,"deserialize_u32","","",43,[[],["result",4]]],[11,"deserialize_u64","","",43,[[],["result",4]]],[11,"deserialize_u128","","",43,[[],["result",4]]],[11,"deserialize_f32","","",43,[[],["result",4]]],[11,"deserialize_f64","","",43,[[],["result",4]]],[11,"deserialize_char","","",43,[[],["result",4]]],[11,"deserialize_str","","",43,[[],["result",4]]],[11,"deserialize_string","","",43,[[],["result",4]]],[11,"deserialize_bytes","","",43,[[],["result",4]]],[11,"deserialize_byte_buf","","",43,[[],["result",4]]],[11,"deserialize_option","","",43,[[],["result",4]]],[11,"deserialize_unit","","",43,[[],["result",4]]],[11,"deserialize_unit_struct","","",43,[[],["result",4]]],[11,"deserialize_newtype_struct","","",43,[[],["result",4]]],[11,"deserialize_seq","","",43,[[],["result",4]]],[11,"deserialize_tuple","","",43,[[],["result",4]]],[11,"deserialize_tuple_struct","","",43,[[],["result",4]]],[11,"deserialize_map","","",43,[[],["result",4]]],[11,"deserialize_struct","","",43,[[],["result",4]]],[11,"deserialize_enum","","",43,[[],["result",4]]],[11,"deserialize_identifier","","",43,[[],["result",4]]],[11,"deserialize_ignored_any","","",43,[[],["result",4]]],[11,"deserialize_any","","",43,[[],["result",4]]],[11,"deserialize_bool","","",44,[[],["result",4]]],[11,"deserialize_i8","","",44,[[],["result",4]]],[11,"deserialize_i16","","",44,[[],["result",4]]],[11,"deserialize_i32","","",44,[[],["result",4]]],[11,"deserialize_i64","","",44,[[],["result",4]]],[11,"deserialize_i128","","",44,[[],["result",4]]],[11,"deserialize_u8","","",44,[[],["result",4]]],[11,"deserialize_u16","","",44,[[],["result",4]]],[11,"deserialize_u32","","",44,[[],["result",4]]],[11,"deserialize_u64","","",44,[[],["result",4]]],[11,"deserialize_u128","","",44,[[],["result",4]]],[11,"deserialize_f32","","",44,[[],["result",4]]],[11,"deserialize_f64","","",44,[[],["result",4]]],[11,"deserialize_char","","",44,[[],["result",4]]],[11,"deserialize_str","","",44,[[],["result",4]]],[11,"deserialize_string","","",44,[[],["result",4]]],[11,"deserialize_bytes","","",44,[[],["result",4]]],[11,"deserialize_byte_buf","","",44,[[],["result",4]]],[11,"deserialize_option","","",44,[[],["result",4]]],[11,"deserialize_unit","","",44,[[],["result",4]]],[11,"deserialize_unit_struct","","",44,[[],["result",4]]],[11,"deserialize_newtype_struct","","",44,[[],["result",4]]],[11,"deserialize_seq","","",44,[[],["result",4]]],[11,"deserialize_tuple","","",44,[[],["result",4]]],[11,"deserialize_tuple_struct","","",44,[[],["result",4]]],[11,"deserialize_map","","",44,[[],["result",4]]],[11,"deserialize_struct","","",44,[[],["result",4]]],[11,"deserialize_enum","","",44,[[],["result",4]]],[11,"deserialize_identifier","","",44,[[],["result",4]]],[11,"deserialize_ignored_any","","",44,[[],["result",4]]],[11,"deserialize_any","","",44,[[],["result",4]]],[11,"deserialize_bool","","",45,[[],["result",4]]],[11,"deserialize_i8","","",45,[[],["result",4]]],[11,"deserialize_i16","","",45,[[],["result",4]]],[11,"deserialize_i32","","",45,[[],["result",4]]],[11,"deserialize_i64","","",45,[[],["result",4]]],[11,"deserialize_i128","","",45,[[],["result",4]]],[11,"deserialize_u8","","",45,[[],["result",4]]],[11,"deserialize_u16","","",45,[[],["result",4]]],[11,"deserialize_u32","","",45,[[],["result",4]]],[11,"deserialize_u64","","",45,[[],["result",4]]],[11,"deserialize_u128","","",45,[[],["result",4]]],[11,"deserialize_f32","","",45,[[],["result",4]]],[11,"deserialize_f64","","",45,[[],["result",4]]],[11,"deserialize_char","","",45,[[],["result",4]]],[11,"deserialize_str","","",45,[[],["result",4]]],[11,"deserialize_string","","",45,[[],["result",4]]],[11,"deserialize_bytes","","",45,[[],["result",4]]],[11,"deserialize_byte_buf","","",45,[[],["result",4]]],[11,"deserialize_option","","",45,[[],["result",4]]],[11,"deserialize_unit","","",45,[[],["result",4]]],[11,"deserialize_unit_struct","","",45,[[],["result",4]]],[11,"deserialize_newtype_struct","","",45,[[],["result",4]]],[11,"deserialize_seq","","",45,[[],["result",4]]],[11,"deserialize_tuple","","",45,[[],["result",4]]],[11,"deserialize_tuple_struct","","",45,[[],["result",4]]],[11,"deserialize_map","","",45,[[],["result",4]]],[11,"deserialize_struct","","",45,[[],["result",4]]],[11,"deserialize_enum","","",45,[[],["result",4]]],[11,"deserialize_identifier","","",45,[[],["result",4]]],[11,"deserialize_ignored_any","","",45,[[],["result",4]]],[11,"deserialize_any","","",45,[[],["result",4]]],[11,"deserialize_bool","","",46,[[],["result",4]]],[11,"deserialize_i8","","",46,[[],["result",4]]],[11,"deserialize_i16","","",46,[[],["result",4]]],[11,"deserialize_i32","","",46,[[],["result",4]]],[11,"deserialize_i64","","",46,[[],["result",4]]],[11,"deserialize_i128","","",46,[[],["result",4]]],[11,"deserialize_u8","","",46,[[],["result",4]]],[11,"deserialize_u16","","",46,[[],["result",4]]],[11,"deserialize_u32","","",46,[[],["result",4]]],[11,"deserialize_u64","","",46,[[],["result",4]]],[11,"deserialize_u128","","",46,[[],["result",4]]],[11,"deserialize_f32","","",46,[[],["result",4]]],[11,"deserialize_f64","","",46,[[],["result",4]]],[11,"deserialize_char","","",46,[[],["result",4]]],[11,"deserialize_str","","",46,[[],["result",4]]],[11,"deserialize_string","","",46,[[],["result",4]]],[11,"deserialize_bytes","","",46,[[],["result",4]]],[11,"deserialize_byte_buf","","",46,[[],["result",4]]],[11,"deserialize_option","","",46,[[],["result",4]]],[11,"deserialize_unit","","",46,[[],["result",4]]],[11,"deserialize_unit_struct","","",46,[[],["result",4]]],[11,"deserialize_newtype_struct","","",46,[[],["result",4]]],[11,"deserialize_seq","","",46,[[],["result",4]]],[11,"deserialize_tuple","","",46,[[],["result",4]]],[11,"deserialize_tuple_struct","","",46,[[],["result",4]]],[11,"deserialize_map","","",46,[[],["result",4]]],[11,"deserialize_struct","","",46,[[],["result",4]]],[11,"deserialize_identifier","","",46,[[],["result",4]]],[11,"deserialize_ignored_any","","",46,[[],["result",4]]],[11,"deserialize_any","","",46,[[],["result",4]]],[11,"deserialize_enum","","",46,[[],["result",4]]],[11,"deserialize_any","","",47,[[],["result",4]]],[11,"deserialize_enum","","",47,[[],["result",4]]],[11,"deserialize_bool","","",47,[[],["result",4]]],[11,"deserialize_i8","","",47,[[],["result",4]]],[11,"deserialize_i16","","",47,[[],["result",4]]],[11,"deserialize_i32","","",47,[[],["result",4]]],[11,"deserialize_i64","","",47,[[],["result",4]]],[11,"deserialize_i128","","",47,[[],["result",4]]],[11,"deserialize_u8","","",47,[[],["result",4]]],[11,"deserialize_u16","","",47,[[],["result",4]]],[11,"deserialize_u32","","",47,[[],["result",4]]],[11,"deserialize_u64","","",47,[[],["result",4]]],[11,"deserialize_u128","","",47,[[],["result",4]]],[11,"deserialize_f32","","",47,[[],["result",4]]],[11,"deserialize_f64","","",47,[[],["result",4]]],[11,"deserialize_char","","",47,[[],["result",4]]],[11,"deserialize_str","","",47,[[],["result",4]]],[11,"deserialize_string","","",47,[[],["result",4]]],[11,"deserialize_bytes","","",47,[[],["result",4]]],[11,"deserialize_byte_buf","","",47,[[],["result",4]]],[11,"deserialize_option","","",47,[[],["result",4]]],[11,"deserialize_unit","","",47,[[],["result",4]]],[11,"deserialize_unit_struct","","",47,[[],["result",4]]],[11,"deserialize_newtype_struct","","",47,[[],["result",4]]],[11,"deserialize_seq","","",47,[[],["result",4]]],[11,"deserialize_tuple","","",47,[[],["result",4]]],[11,"deserialize_tuple_struct","","",47,[[],["result",4]]],[11,"deserialize_map","","",47,[[],["result",4]]],[11,"deserialize_struct","","",47,[[],["result",4]]],[11,"deserialize_identifier","","",47,[[],["result",4]]],[11,"deserialize_ignored_any","","",47,[[],["result",4]]],[11,"deserialize_any","","",0,[[],["result",4]]],[11,"deserialize_enum","","",0,[[],["result",4]]],[11,"deserialize_bool","","",0,[[],["result",4]]],[11,"deserialize_i8","","",0,[[],["result",4]]],[11,"deserialize_i16","","",0,[[],["result",4]]],[11,"deserialize_i32","","",0,[[],["result",4]]],[11,"deserialize_i64","","",0,[[],["result",4]]],[11,"deserialize_i128","","",0,[[],["result",4]]],[11,"deserialize_u8","","",0,[[],["result",4]]],[11,"deserialize_u16","","",0,[[],["result",4]]],[11,"deserialize_u32","","",0,[[],["result",4]]],[11,"deserialize_u64","","",0,[[],["result",4]]],[11,"deserialize_u128","","",0,[[],["result",4]]],[11,"deserialize_f32","","",0,[[],["result",4]]],[11,"deserialize_f64","","",0,[[],["result",4]]],[11,"deserialize_char","","",0,[[],["result",4]]],[11,"deserialize_str","","",0,[[],["result",4]]],[11,"deserialize_string","","",0,[[],["result",4]]],[11,"deserialize_bytes","","",0,[[],["result",4]]],[11,"deserialize_byte_buf","","",0,[[],["result",4]]],[11,"deserialize_option","","",0,[[],["result",4]]],[11,"deserialize_unit","","",0,[[],["result",4]]],[11,"deserialize_unit_struct","","",0,[[],["result",4]]],[11,"deserialize_newtype_struct","","",0,[[],["result",4]]],[11,"deserialize_seq","","",0,[[],["result",4]]],[11,"deserialize_tuple","","",0,[[],["result",4]]],[11,"deserialize_tuple_struct","","",0,[[],["result",4]]],[11,"deserialize_map","","",0,[[],["result",4]]],[11,"deserialize_struct","","",0,[[],["result",4]]],[11,"deserialize_identifier","","",0,[[],["result",4]]],[11,"deserialize_ignored_any","","",0,[[],["result",4]]],[11,"deserialize_any","","",48,[[],["result",4]]],[11,"deserialize_enum","","",48,[[],["result",4]]],[11,"deserialize_bool","","",48,[[],["result",4]]],[11,"deserialize_i8","","",48,[[],["result",4]]],[11,"deserialize_i16","","",48,[[],["result",4]]],[11,"deserialize_i32","","",48,[[],["result",4]]],[11,"deserialize_i64","","",48,[[],["result",4]]],[11,"deserialize_i128","","",48,[[],["result",4]]],[11,"deserialize_u8","","",48,[[],["result",4]]],[11,"deserialize_u16","","",48,[[],["result",4]]],[11,"deserialize_u32","","",48,[[],["result",4]]],[11,"deserialize_u64","","",48,[[],["result",4]]],[11,"deserialize_u128","","",48,[[],["result",4]]],[11,"deserialize_f32","","",48,[[],["result",4]]],[11,"deserialize_f64","","",48,[[],["result",4]]],[11,"deserialize_char","","",48,[[],["result",4]]],[11,"deserialize_str","","",48,[[],["result",4]]],[11,"deserialize_string","","",48,[[],["result",4]]],[11,"deserialize_bytes","","",48,[[],["result",4]]],[11,"deserialize_byte_buf","","",48,[[],["result",4]]],[11,"deserialize_option","","",48,[[],["result",4]]],[11,"deserialize_unit","","",48,[[],["result",4]]],[11,"deserialize_unit_struct","","",48,[[],["result",4]]],[11,"deserialize_newtype_struct","","",48,[[],["result",4]]],[11,"deserialize_seq","","",48,[[],["result",4]]],[11,"deserialize_tuple","","",48,[[],["result",4]]],[11,"deserialize_tuple_struct","","",48,[[],["result",4]]],[11,"deserialize_map","","",48,[[],["result",4]]],[11,"deserialize_struct","","",48,[[],["result",4]]],[11,"deserialize_identifier","","",48,[[],["result",4]]],[11,"deserialize_ignored_any","","",48,[[],["result",4]]],[11,"deserialize_any","","",49,[[],["result",4]]],[11,"deserialize_enum","","",49,[[],["result",4]]],[11,"deserialize_bool","","",49,[[],["result",4]]],[11,"deserialize_i8","","",49,[[],["result",4]]],[11,"deserialize_i16","","",49,[[],["result",4]]],[11,"deserialize_i32","","",49,[[],["result",4]]],[11,"deserialize_i64","","",49,[[],["result",4]]],[11,"deserialize_i128","","",49,[[],["result",4]]],[11,"deserialize_u8","","",49,[[],["result",4]]],[11,"deserialize_u16","","",49,[[],["result",4]]],[11,"deserialize_u32","","",49,[[],["result",4]]],[11,"deserialize_u64","","",49,[[],["result",4]]],[11,"deserialize_u128","","",49,[[],["result",4]]],[11,"deserialize_f32","","",49,[[],["result",4]]],[11,"deserialize_f64","","",49,[[],["result",4]]],[11,"deserialize_char","","",49,[[],["result",4]]],[11,"deserialize_str","","",49,[[],["result",4]]],[11,"deserialize_string","","",49,[[],["result",4]]],[11,"deserialize_bytes","","",49,[[],["result",4]]],[11,"deserialize_byte_buf","","",49,[[],["result",4]]],[11,"deserialize_option","","",49,[[],["result",4]]],[11,"deserialize_unit","","",49,[[],["result",4]]],[11,"deserialize_unit_struct","","",49,[[],["result",4]]],[11,"deserialize_newtype_struct","","",49,[[],["result",4]]],[11,"deserialize_seq","","",49,[[],["result",4]]],[11,"deserialize_tuple","","",49,[[],["result",4]]],[11,"deserialize_tuple_struct","","",49,[[],["result",4]]],[11,"deserialize_map","","",49,[[],["result",4]]],[11,"deserialize_struct","","",49,[[],["result",4]]],[11,"deserialize_identifier","","",49,[[],["result",4]]],[11,"deserialize_ignored_any","","",49,[[],["result",4]]],[11,"deserialize_any","","",1,[[],["result",4]]],[11,"deserialize_bool","","",1,[[],["result",4]]],[11,"deserialize_i8","","",1,[[],["result",4]]],[11,"deserialize_i16","","",1,[[],["result",4]]],[11,"deserialize_i32","","",1,[[],["result",4]]],[11,"deserialize_i64","","",1,[[],["result",4]]],[11,"deserialize_i128","","",1,[[],["result",4]]],[11,"deserialize_u8","","",1,[[],["result",4]]],[11,"deserialize_u16","","",1,[[],["result",4]]],[11,"deserialize_u32","","",1,[[],["result",4]]],[11,"deserialize_u64","","",1,[[],["result",4]]],[11,"deserialize_u128","","",1,[[],["result",4]]],[11,"deserialize_f32","","",1,[[],["result",4]]],[11,"deserialize_f64","","",1,[[],["result",4]]],[11,"deserialize_char","","",1,[[],["result",4]]],[11,"deserialize_str","","",1,[[],["result",4]]],[11,"deserialize_string","","",1,[[],["result",4]]],[11,"deserialize_bytes","","",1,[[],["result",4]]],[11,"deserialize_byte_buf","","",1,[[],["result",4]]],[11,"deserialize_option","","",1,[[],["result",4]]],[11,"deserialize_unit","","",1,[[],["result",4]]],[11,"deserialize_unit_struct","","",1,[[],["result",4]]],[11,"deserialize_newtype_struct","","",1,[[],["result",4]]],[11,"deserialize_seq","","",1,[[],["result",4]]],[11,"deserialize_tuple","","",1,[[],["result",4]]],[11,"deserialize_tuple_struct","","",1,[[],["result",4]]],[11,"deserialize_map","","",1,[[],["result",4]]],[11,"deserialize_struct","","",1,[[],["result",4]]],[11,"deserialize_enum","","",1,[[],["result",4]]],[11,"deserialize_identifier","","",1,[[],["result",4]]],[11,"deserialize_ignored_any","","",1,[[],["result",4]]],[11,"deserialize_any","","",2,[[],["result",4]]],[11,"deserialize_bool","","",2,[[],["result",4]]],[11,"deserialize_i8","","",2,[[],["result",4]]],[11,"deserialize_i16","","",2,[[],["result",4]]],[11,"deserialize_i32","","",2,[[],["result",4]]],[11,"deserialize_i64","","",2,[[],["result",4]]],[11,"deserialize_i128","","",2,[[],["result",4]]],[11,"deserialize_u8","","",2,[[],["result",4]]],[11,"deserialize_u16","","",2,[[],["result",4]]],[11,"deserialize_u32","","",2,[[],["result",4]]],[11,"deserialize_u64","","",2,[[],["result",4]]],[11,"deserialize_u128","","",2,[[],["result",4]]],[11,"deserialize_f32","","",2,[[],["result",4]]],[11,"deserialize_f64","","",2,[[],["result",4]]],[11,"deserialize_char","","",2,[[],["result",4]]],[11,"deserialize_str","","",2,[[],["result",4]]],[11,"deserialize_string","","",2,[[],["result",4]]],[11,"deserialize_bytes","","",2,[[],["result",4]]],[11,"deserialize_byte_buf","","",2,[[],["result",4]]],[11,"deserialize_option","","",2,[[],["result",4]]],[11,"deserialize_unit","","",2,[[],["result",4]]],[11,"deserialize_unit_struct","","",2,[[],["result",4]]],[11,"deserialize_newtype_struct","","",2,[[],["result",4]]],[11,"deserialize_seq","","",2,[[],["result",4]]],[11,"deserialize_tuple","","",2,[[],["result",4]]],[11,"deserialize_tuple_struct","","",2,[[],["result",4]]],[11,"deserialize_map","","",2,[[],["result",4]]],[11,"deserialize_struct","","",2,[[],["result",4]]],[11,"deserialize_enum","","",2,[[],["result",4]]],[11,"deserialize_identifier","","",2,[[],["result",4]]],[11,"deserialize_ignored_any","","",2,[[],["result",4]]],[11,"deserialize_any","","",3,[[],["result",4]]],[11,"deserialize_bool","","",3,[[],["result",4]]],[11,"deserialize_i8","","",3,[[],["result",4]]],[11,"deserialize_i16","","",3,[[],["result",4]]],[11,"deserialize_i32","","",3,[[],["result",4]]],[11,"deserialize_i64","","",3,[[],["result",4]]],[11,"deserialize_i128","","",3,[[],["result",4]]],[11,"deserialize_u8","","",3,[[],["result",4]]],[11,"deserialize_u16","","",3,[[],["result",4]]],[11,"deserialize_u32","","",3,[[],["result",4]]],[11,"deserialize_u64","","",3,[[],["result",4]]],[11,"deserialize_u128","","",3,[[],["result",4]]],[11,"deserialize_f32","","",3,[[],["result",4]]],[11,"deserialize_f64","","",3,[[],["result",4]]],[11,"deserialize_char","","",3,[[],["result",4]]],[11,"deserialize_str","","",3,[[],["result",4]]],[11,"deserialize_string","","",3,[[],["result",4]]],[11,"deserialize_bytes","","",3,[[],["result",4]]],[11,"deserialize_byte_buf","","",3,[[],["result",4]]],[11,"deserialize_option","","",3,[[],["result",4]]],[11,"deserialize_unit","","",3,[[],["result",4]]],[11,"deserialize_unit_struct","","",3,[[],["result",4]]],[11,"deserialize_newtype_struct","","",3,[[],["result",4]]],[11,"deserialize_seq","","",3,[[],["result",4]]],[11,"deserialize_tuple","","",3,[[],["result",4]]],[11,"deserialize_tuple_struct","","",3,[[],["result",4]]],[11,"deserialize_map","","",3,[[],["result",4]]],[11,"deserialize_struct","","",3,[[],["result",4]]],[11,"deserialize_enum","","",3,[[],["result",4]]],[11,"deserialize_identifier","","",3,[[],["result",4]]],[11,"deserialize_ignored_any","","",3,[[],["result",4]]],[11,"deserialize_any","","",4,[[],["result",4]]],[11,"deserialize_bool","","",4,[[],["result",4]]],[11,"deserialize_i8","","",4,[[],["result",4]]],[11,"deserialize_i16","","",4,[[],["result",4]]],[11,"deserialize_i32","","",4,[[],["result",4]]],[11,"deserialize_i64","","",4,[[],["result",4]]],[11,"deserialize_i128","","",4,[[],["result",4]]],[11,"deserialize_u8","","",4,[[],["result",4]]],[11,"deserialize_u16","","",4,[[],["result",4]]],[11,"deserialize_u32","","",4,[[],["result",4]]],[11,"deserialize_u64","","",4,[[],["result",4]]],[11,"deserialize_u128","","",4,[[],["result",4]]],[11,"deserialize_f32","","",4,[[],["result",4]]],[11,"deserialize_f64","","",4,[[],["result",4]]],[11,"deserialize_char","","",4,[[],["result",4]]],[11,"deserialize_str","","",4,[[],["result",4]]],[11,"deserialize_string","","",4,[[],["result",4]]],[11,"deserialize_bytes","","",4,[[],["result",4]]],[11,"deserialize_byte_buf","","",4,[[],["result",4]]],[11,"deserialize_option","","",4,[[],["result",4]]],[11,"deserialize_unit","","",4,[[],["result",4]]],[11,"deserialize_unit_struct","","",4,[[],["result",4]]],[11,"deserialize_newtype_struct","","",4,[[],["result",4]]],[11,"deserialize_seq","","",4,[[],["result",4]]],[11,"deserialize_tuple","","",4,[[],["result",4]]],[11,"deserialize_tuple_struct","","",4,[[],["result",4]]],[11,"deserialize_map","","",4,[[],["result",4]]],[11,"deserialize_struct","","",4,[[],["result",4]]],[11,"deserialize_enum","","",4,[[],["result",4]]],[11,"deserialize_identifier","","",4,[[],["result",4]]],[11,"deserialize_ignored_any","","",4,[[],["result",4]]],[11,"deserialize_any","","",5,[[],["result",4]]],[11,"deserialize_seq","","",5,[[],["result",4]]],[11,"deserialize_tuple","","",5,[[],["result",4]]],[11,"deserialize_bool","","",5,[[],["result",4]]],[11,"deserialize_i8","","",5,[[],["result",4]]],[11,"deserialize_i16","","",5,[[],["result",4]]],[11,"deserialize_i32","","",5,[[],["result",4]]],[11,"deserialize_i64","","",5,[[],["result",4]]],[11,"deserialize_i128","","",5,[[],["result",4]]],[11,"deserialize_u8","","",5,[[],["result",4]]],[11,"deserialize_u16","","",5,[[],["result",4]]],[11,"deserialize_u32","","",5,[[],["result",4]]],[11,"deserialize_u64","","",5,[[],["result",4]]],[11,"deserialize_u128","","",5,[[],["result",4]]],[11,"deserialize_f32","","",5,[[],["result",4]]],[11,"deserialize_f64","","",5,[[],["result",4]]],[11,"deserialize_char","","",5,[[],["result",4]]],[11,"deserialize_str","","",5,[[],["result",4]]],[11,"deserialize_string","","",5,[[],["result",4]]],[11,"deserialize_bytes","","",5,[[],["result",4]]],[11,"deserialize_byte_buf","","",5,[[],["result",4]]],[11,"deserialize_option","","",5,[[],["result",4]]],[11,"deserialize_unit","","",5,[[],["result",4]]],[11,"deserialize_unit_struct","","",5,[[],["result",4]]],[11,"deserialize_newtype_struct","","",5,[[],["result",4]]],[11,"deserialize_tuple_struct","","",5,[[],["result",4]]],[11,"deserialize_map","","",5,[[],["result",4]]],[11,"deserialize_struct","","",5,[[],["result",4]]],[11,"deserialize_enum","","",5,[[],["result",4]]],[11,"deserialize_identifier","","",5,[[],["result",4]]],[11,"deserialize_ignored_any","","",5,[[],["result",4]]],[11,"deserialize_any","","",6,[[],["result",4]]],[11,"deserialize_enum","","",6,[[],["result",4]]],[11,"deserialize_bool","","",6,[[],["result",4]]],[11,"deserialize_i8","","",6,[[],["result",4]]],[11,"deserialize_i16","","",6,[[],["result",4]]],[11,"deserialize_i32","","",6,[[],["result",4]]],[11,"deserialize_i64","","",6,[[],["result",4]]],[11,"deserialize_i128","","",6,[[],["result",4]]],[11,"deserialize_u8","","",6,[[],["result",4]]],[11,"deserialize_u16","","",6,[[],["result",4]]],[11,"deserialize_u32","","",6,[[],["result",4]]],[11,"deserialize_u64","","",6,[[],["result",4]]],[11,"deserialize_u128","","",6,[[],["result",4]]],[11,"deserialize_f32","","",6,[[],["result",4]]],[11,"deserialize_f64","","",6,[[],["result",4]]],[11,"deserialize_char","","",6,[[],["result",4]]],[11,"deserialize_str","","",6,[[],["result",4]]],[11,"deserialize_string","","",6,[[],["result",4]]],[11,"deserialize_bytes","","",6,[[],["result",4]]],[11,"deserialize_byte_buf","","",6,[[],["result",4]]],[11,"deserialize_option","","",6,[[],["result",4]]],[11,"deserialize_unit","","",6,[[],["result",4]]],[11,"deserialize_unit_struct","","",6,[[],["result",4]]],[11,"deserialize_newtype_struct","","",6,[[],["result",4]]],[11,"deserialize_seq","","",6,[[],["result",4]]],[11,"deserialize_tuple","","",6,[[],["result",4]]],[11,"deserialize_tuple_struct","","",6,[[],["result",4]]],[11,"deserialize_map","","",6,[[],["result",4]]],[11,"deserialize_struct","","",6,[[],["result",4]]],[11,"deserialize_identifier","","",6,[[],["result",4]]],[11,"deserialize_ignored_any","","",6,[[],["result",4]]],[11,"expecting","serde::de","",50,[[["formatter",3]],["result",6]]],[11,"visit_bool","","",50,[[],["result",4]]],[11,"visit_i64","","",50,[[],["result",4]]],[11,"visit_i128","","",50,[[],["result",4]]],[11,"visit_u64","","",50,[[],["result",4]]],[11,"visit_u128","","",50,[[],["result",4]]],[11,"visit_f64","","",50,[[],["result",4]]],[11,"visit_str","","",50,[[],["result",4]]],[11,"visit_none","","",50,[[],["result",4]]],[11,"visit_some","","",50,[[],["result",4]]],[11,"visit_newtype_struct","","",50,[[],["result",4]]],[11,"visit_unit","","",50,[[],["result",4]]],[11,"visit_seq","","",50,[[],["result",4]]],[11,"visit_map","","",50,[[],["result",4]]],[11,"visit_bytes","","",50,[[],["result",4]]],[11,"visit_enum","","",50,[[],["result",4]]],[11,"next_element_seed","serde::de::value","",3,[[],[["option",4],["result",4]]]],[11,"size_hint","","",3,[[],["option",4]]],[11,"next_element_seed","","",5,[[],[["result",4],["option",4]]]],[11,"size_hint","","",5,[[],["option",4]]],[11,"next_key_seed","","",5,[[],[["option",4],["result",4]]]],[11,"next_value_seed","","",5,[[],["result",4]]],[11,"next_entry_seed","","",5,[[],[["result",4],["option",4]]]],[11,"size_hint","","",5,[[],["option",4]]],[11,"variant_seed","","",46,[[],["result",4]]],[11,"variant_seed","","",47,[[],["result",4]]],[11,"variant_seed","","",0,[[],["result",4]]],[11,"variant_seed","","",48,[[],["result",4]]],[11,"variant_seed","","",49,[[],["result",4]]],[11,"variant_seed","","",6,[[],["result",4]]],[11,"serialize_element","serde::ser","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_element","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_field","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_field","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_key","","",51,[[],["result",4]]],[11,"serialize_value","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_field","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"serialize_field","","",51,[[],["result",4]]],[11,"end","","",51,[[],["result",4]]],[11,"custom","serde::de::value","",29,[[]]],[11,"custom","","",29,[[]]],[11,"clone","","",29,[[],["error",3]]],[11,"clone","","",30,[[]]],[11,"clone","","",31,[[]]],[11,"clone","","",32,[[]]],[11,"clone","","",33,[[]]],[11,"clone","","",34,[[]]],[11,"clone","","",35,[[]]],[11,"clone","","",36,[[]]],[11,"clone","","",37,[[]]],[11,"clone","","",38,[[]]],[11,"clone","","",39,[[]]],[11,"clone","","",40,[[]]],[11,"clone","","",41,[[]]],[11,"clone","","",42,[[]]],[11,"clone","","",43,[[]]],[11,"clone","","",44,[[]]],[11,"clone","","",45,[[]]],[11,"clone","","",46,[[]]],[11,"clone","","",47,[[]]],[11,"clone","","",0,[[]]],[11,"clone","","",48,[[]]],[11,"clone","","",49,[[]]],[11,"clone","","",1,[[]]],[11,"clone","","",2,[[]]],[11,"clone","","",3,[[],["seqdeserializer",3]]],[11,"clone","","",4,[[],["seqaccessdeserializer",3]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[],["mapaccessdeserializer",3]]],[11,"clone","serde::de","",50,[[],["ignoredany",3]]],[11,"clone","","",8,[[],["unexpected",4]]],[11,"default","","",50,[[],["ignoredany",3]]],[11,"eq","serde::de::value","",29,[[["error",3]]]],[11,"ne","","",29,[[["error",3]]]],[11,"eq","serde::de","",8,[[["unexpected",4]]]],[11,"ne","","",8,[[["unexpected",4]]]],[11,"fmt","serde::de::value","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","serde::de","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","serde::de::value","",29,[[["formatter",3]],["result",6]]],[11,"fmt","serde::de","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"description","serde::de::value","",29,[[]]]],"p":[[3,"BorrowedStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"IgnoredAny"],[3,"Impossible"]]},\
"serde_derive":{"doc":"This crate provides Serde\'s two derive macros.","i":[[24,"Serialize","serde_derive","",null,null],[24,"Deserialize","","",null,null]],"p":[]},\
"serde_json":{"doc":"Serde JSONJSON is a ubiquitous open-standard format that …","i":[[0,"de","serde_json","Deserialize JSON data to a Rust data structure.",null,null],[8,"Read","serde_json::de","Trait used by the deserializer for iterating over input. …",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"IoRead","","JSON input source that reads from a std::io input stream.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[11,"new","","Create a JSON deserializer from one of the possible …",0,[[]]],[11,"from_reader","","Creates a JSON deserializer from an <code>io::Read</code>.",0,[[]]],[11,"from_slice","","Creates a JSON deserializer from a <code>&[u8]</code>.",0,[[]]],[11,"from_str","","Creates a JSON deserializer from a <code>&str</code>.",0,[[]]],[11,"end","","The <code>Deserializer::end</code> method should be called after a …",0,[[],["result",6]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of …",0,[[],["streamdeserializer",3]]],[11,"disable_recursion_limit","","Parse arbitrarily deep JSON structures without any …",0,[[]]],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON …",null,null],[11,"new","","Create a JSON stream deserializer from one of the …",1,[[]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a …",1,[[]]],[5,"from_reader","","Deserialize an instance of type <code>T</code> from an IO stream of …",null,[[],["result",6]]],[5,"from_slice","","Deserialize an instance of type <code>T</code> from bytes of JSON text.",null,[[],["result",6]]],[5,"from_str","","Deserialize an instance of type <code>T</code> from a string of JSON …",null,[[],["result",6]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur …",null,null],[6,"Result","","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.",null,null],[11,"line","","One-based line number at which the error was detected.",2,[[]]],[11,"column","","One-based column number at which the error was detected.",2,[[]]],[11,"classify","","Categorizes the cause of this error.",2,[[],["category",4]]],[11,"is_io","","Returns true if this error was caused by a failure to …",2,[[]]],[11,"is_syntax","","Returns true if this error was caused by input that was …",2,[[]]],[11,"is_data","","Returns true if this error was caused by input data that …",2,[[]]],[11,"is_eof","","Returns true if this error was caused by prematurely …",2,[[]]],[4,"Category","","Categorizes the cause of a <code>serde_json::Error</code>.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes …",3,null],[13,"Syntax","","The error was caused by input that was not syntactically …",3,null],[13,"Data","","The error was caused by input data that was semantically …",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of …",3,null],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[11,"new","","Makes a new empty Map.",4,[[]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",4,[[]]],[11,"clear","","Clears the map, removing all values.",4,[[]]],[11,"get","","Returns a reference to the value corresponding to the key.",4,[[],[["value",4],["option",4]]]],[11,"contains_key","","Returns true if the map contains a value for the …",4,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",4,[[],[["value",4],["option",4]]]],[11,"insert","","Inserts a key-value pair into the map.",4,[[["value",4],["string",3]],[["value",4],["option",4]]]],[11,"remove","","Removes a key from the map, returning the value at the …",4,[[],[["value",4],["option",4]]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and …",4,[[],["option",4]]],[11,"append","","Moves all elements from other into Self, leaving other …",4,[[]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",4,[[],["entry",4]]],[11,"len","","Returns the number of elements in the map.",4,[[]]],[11,"is_empty","","Returns true if the map contains no elements.",4,[[]]],[11,"iter","","Gets an iterator over the entries of the map.",4,[[],["iter",3]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",4,[[],["itermut",3]]],[11,"keys","","Gets an iterator over the keys of the map.",4,[[],["keys",3]]],[11,"values","","Gets an iterator over the values of the map.",4,[[],["values",3]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",4,[[],["valuesmut",3]]],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[3,"VacantEntry","","A vacant Entry. It is part of the <code>Entry</code> enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the <code>Entry</code> enum.",null,null],[11,"key","","Returns a reference to this entry\'s key.",5,[[],["string",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",5,[[["value",4]],["value",4]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",5,[[],["value",4]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",5,[[]]],[11,"key","","Gets a reference to the key that would be used when …",6,[[],["string",3]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",6,[[["value",4]],["value",4]]],[11,"key","","Gets a reference to the key in the entry.",7,[[],["string",3]]],[11,"get","","Gets a reference to the value in the entry.",7,[[],["value",4]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",7,[[],["value",4]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",7,[[],["value",4]]],[11,"insert","","Sets the value of the entry with the <code>OccupiedEntry</code>\'s key, …",7,[[["value",4]],["value",4]]],[11,"remove","","Takes the value of the entry out of the map, and returns …",7,[[],["value",4]]],[3,"Iter","","An iterator over a serde_json::Map\'s entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map\'s entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map\'s entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map\'s keys.",null,null],[3,"Values","","An iterator over a serde_json::Map\'s values.",null,null],[3,"ValuesMut","","A mutable iterator over a serde_json::Map\'s values.",null,null],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[11,"new","","Creates a new JSON serializer.",8,[[]]],[11,"pretty","","Creates a new JSON pretty print serializer.",8,[[]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written …",8,[[]]],[11,"into_inner","","Unwrap the <code>Writer</code> from the <code>Serializer</code>.",8,[[]]],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote <code>\\\"</code>",9,null],[13,"ReverseSolidus","","An escaped reverse solidus <code>\\\\</code>",9,null],[13,"Solidus","","An escaped solidus <code>/</code>",9,null],[13,"Backspace","","An escaped backspace character (usually escaped as <code>\\\\b</code>)",9,null],[13,"FormFeed","","An escaped form feed character (usually escaped as <code>\\\\f</code>)",9,null],[13,"LineFeed","","An escaped line feed character (usually escaped as <code>\\\\n</code>)",9,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as …",9,null],[13,"Tab","","An escaped tab character (usually escaped as <code>\\\\t</code>)",9,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped …",9,null],[8,"Formatter","","This trait abstracts away serializing the JSON control …",null,null],[11,"write_null","","Writes a <code>null</code> value to the specified writer.",10,[[],["result",6]]],[11,"write_bool","","Writes a <code>true</code> or <code>false</code> value to the specified writer.",10,[[],["result",6]]],[11,"write_i8","","Writes an integer value like <code>-123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_i16","","Writes an integer value like <code>-123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_i32","","Writes an integer value like <code>-123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_i64","","Writes an integer value like <code>-123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_u8","","Writes an integer value like <code>123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_u16","","Writes an integer value like <code>123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_u32","","Writes an integer value like <code>123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_u64","","Writes an integer value like <code>123</code> to the specified writer.",10,[[],["result",6]]],[11,"write_f32","","Writes a floating point value like <code>-31.26e+12</code> to the …",10,[[],["result",6]]],[11,"write_f64","","Writes a floating point value like <code>-31.26e+12</code> to the …",10,[[],["result",6]]],[11,"write_number_str","","Writes a number that has already been rendered to a …",10,[[],["result",6]]],[11,"begin_string","","Called before each series of <code>write_string_fragment</code> and …",10,[[],["result",6]]],[11,"end_string","","Called after each series of <code>write_string_fragment</code> and …",10,[[],["result",6]]],[11,"write_string_fragment","","Writes a string fragment that doesn\'t need any escaping …",10,[[],["result",6]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",10,[[["charescape",4]],["result",6]]],[11,"begin_array","","Called before every array.  Writes a <code>[</code> to the specified …",10,[[],["result",6]]],[11,"end_array","","Called after every array.  Writes a <code>]</code> to the specified …",10,[[],["result",6]]],[11,"begin_array_value","","Called before every array value.  Writes a <code>,</code> if needed to …",10,[[],["result",6]]],[11,"end_array_value","","Called after every array value.",10,[[],["result",6]]],[11,"begin_object","","Called before every object.  Writes a <code>{</code> to the specified …",10,[[],["result",6]]],[11,"end_object","","Called after every object.  Writes a <code>}</code> to the specified …",10,[[],["result",6]]],[11,"begin_object_key","","Called before every object key.",10,[[],["result",6]]],[11,"end_object_key","","Called after every object key.  A <code>:</code> should be written to …",10,[[],["result",6]]],[11,"begin_object_value","","Called before every object value.  A <code>:</code> should be written …",10,[[],["result",6]]],[11,"end_object_value","","Called after every object value.",10,[[],["result",6]]],[11,"write_raw_fragment","","Writes a raw JSON fragment that doesn\'t need any escaping …",10,[[],["result",6]]],[3,"CompactFormatter","","This structure compacts a JSON value with no extra …",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it …",null,null],[11,"new","","Construct a pretty printer formatter that defaults to …",11,[[]]],[11,"with_indent","","Construct a pretty printer formatter that uses the <code>indent</code> …",11,[[]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO …",null,[[],["result",6]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON …",null,[[],["result",6]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,[[],[["vec",3],["result",6]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed …",null,[[],[["vec",3],["result",6]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,[[],[["string",3],["result",6]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed …",null,[[],[["string",3],["result",6]]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any …",null,null],[8,"Index","serde_json::value","A type that can be used to index into a <code>serde_json::Value</code>.",null,null],[3,"Serializer","","Serializer whose output is a <code>Value</code>.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating …",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",12,null],[13,"Bool","","Represents a JSON boolean.",12,null],[13,"Number","","Represents a JSON number, whether integer or floating …",12,null],[13,"String","","Represents a JSON string.",12,null],[13,"Array","","Represents a JSON array.",12,null],[13,"Object","","Represents a JSON object.",12,null],[11,"get","","Index into a JSON array or map. A string index can be …",12,[[["index",8]],[["value",4],["option",4]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index …",12,[[["index",8]],[["value",4],["option",4]]]],[11,"is_object","","Returns true if the <code>Value</code> is an Object. Returns false …",12,[[]]],[11,"as_object","","If the <code>Value</code> is an Object, returns the associated Map. …",12,[[],[["map",3],["option",4]]]],[11,"as_object_mut","","If the <code>Value</code> is an Object, returns the associated mutable …",12,[[],[["map",3],["option",4]]]],[11,"is_array","","Returns true if the <code>Value</code> is an Array. Returns false …",12,[[]]],[11,"as_array","","If the <code>Value</code> is an Array, returns the associated vector. …",12,[[],[["vec",3],["option",4]]]],[11,"as_array_mut","","If the <code>Value</code> is an Array, returns the associated mutable …",12,[[],[["vec",3],["option",4]]]],[11,"is_string","","Returns true if the <code>Value</code> is a String. Returns false …",12,[[]]],[11,"as_str","","If the <code>Value</code> is a String, returns the associated str. …",12,[[],["option",4]]],[11,"is_number","","Returns true if the <code>Value</code> is a Number. Returns false …",12,[[]]],[11,"is_i64","","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …",12,[[]]],[11,"is_u64","","Returns true if the <code>Value</code> is an integer between zero and …",12,[[]]],[11,"is_f64","","Returns true if the <code>Value</code> is a number that can be …",12,[[]]],[11,"as_i64","","If the <code>Value</code> is an integer, represent it as i64 if …",12,[[],["option",4]]],[11,"as_u64","","If the <code>Value</code> is an integer, represent it as u64 if …",12,[[],["option",4]]],[11,"as_f64","","If the <code>Value</code> is a number, represent it as f64 if …",12,[[],["option",4]]],[11,"is_boolean","","Returns true if the <code>Value</code> is a Boolean. Returns false …",12,[[]]],[11,"as_bool","","If the <code>Value</code> is a Boolean, returns the associated bool. …",12,[[],["option",4]]],[11,"is_null","","Returns true if the <code>Value</code> is a Null. Returns false …",12,[[]]],[11,"as_null","","If the <code>Value</code> is a Null, returns (). Returns None …",12,[[],["option",4]]],[11,"pointer","","Looks up a value by a JSON Pointer.",12,[[],[["value",4],["option",4]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable …",12,[[],[["value",4],["option",4]]]],[11,"take","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …",12,[[],["value",4]]],[5,"to_value","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …",null,[[],[["value",4],["error",3],["result",4]]]],[5,"from_value","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.",null,[[["value",4]],[["error",3],["result",4]]]],[11,"is_i64","","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …",13,[[]]],[11,"is_u64","","Returns true if the <code>Number</code> is an integer between zero and …",13,[[]]],[11,"is_f64","","Returns true if the <code>Number</code> can be represented by f64.",13,[[]]],[11,"as_i64","","If the <code>Number</code> is an integer, represent it as i64 if …",13,[[],["option",4]]],[11,"as_u64","","If the <code>Number</code> is an integer, represent it as u64 if …",13,[[],["option",4]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None …",13,[[],["option",4]]],[11,"from_f64","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …",13,[[],[["option",4],["number",3]]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input …",14,[[]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",15,[[]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",16,[[]]],[5,"from_reader","serde_json","Deserialize an instance of type <code>T</code> from an IO stream of …",null,[[],["result",6]]],[5,"from_slice","","Deserialize an instance of type <code>T</code> from bytes of JSON text.",null,[[],["result",6]]],[5,"from_str","","Deserialize an instance of type <code>T</code> from a string of JSON …",null,[[],["result",6]]],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON …",null,null],[3,"Error","","This type represents all possible errors that can occur …",null,null],[6,"Result","","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.",null,null],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,[[],[["string",3],["result",6]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed …",null,[[],[["string",3],["result",6]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,[[],[["vec",3],["result",6]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed …",null,[[],[["vec",3],["result",6]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO …",null,[[],["result",6]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON …",null,[[],["result",6]]],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[5,"from_value","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.",null,[[["value",4]],[["error",3],["result",4]]]],[5,"to_value","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …",null,[[],[["value",4],["error",3],["result",4]]]],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating …",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",12,null],[13,"Bool","","Represents a JSON boolean.",12,null],[13,"Number","","Represents a JSON number, whether integer or floating …",12,null],[13,"String","","Represents a JSON string.",12,null],[13,"Array","","Represents a JSON array.",12,null],[13,"Object","","Represents a JSON object.",12,null],[14,"json","","Construct a <code>serde_json::Value</code> from a JSON literal.",null,null],[11,"from","serde_json::de","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","serde_json","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","serde_json::error","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","serde_json","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","serde_json::map","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"into_iter","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"into_iter","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","serde_json","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","serde_json::ser","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","serde_json::value","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","serde_json","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"begin_array","serde_json::ser","",11,[[],["result",6]]],[11,"end_array","","",11,[[],["result",6]]],[11,"begin_array_value","","",11,[[],["result",6]]],[11,"end_array_value","","",11,[[],["result",6]]],[11,"begin_object","","",11,[[],["result",6]]],[11,"end_object","","",11,[[],["result",6]]],[11,"begin_object_key","","",11,[[],["result",6]]],[11,"begin_object_value","","",11,[[],["result",6]]],[11,"end_object_value","","",11,[[],["result",6]]],[11,"next","serde_json::de","",14,[[],[["result",6],["option",4]]]],[11,"peek","","",14,[[],[["result",6],["option",4]]]],[11,"discard","","",14,[[]]],[11,"position","","",14,[[],["position",3]]],[11,"peek_position","","",14,[[],["position",3]]],[11,"byte_offset","","",14,[[]]],[11,"parse_str","","",14,[[["vec",3]],[["reference",4],["result",6]]]],[11,"parse_str_raw","","",14,[[["vec",3]],[["result",6],["reference",4]]]],[11,"ignore_str","","",14,[[],["result",6]]],[11,"decode_hex_escape","","",14,[[],["result",6]]],[11,"set_failed","","",14,[[]]],[11,"next","","",15,[[],[["result",6],["option",4]]]],[11,"peek","","",15,[[],[["result",6],["option",4]]]],[11,"discard","","",15,[[]]],[11,"position","","",15,[[],["position",3]]],[11,"peek_position","","",15,[[],["position",3]]],[11,"byte_offset","","",15,[[]]],[11,"parse_str","","",15,[[["vec",3]],[["reference",4],["result",6]]]],[11,"parse_str_raw","","",15,[[["vec",3]],[["result",6],["reference",4]]]],[11,"ignore_str","","",15,[[],["result",6]]],[11,"decode_hex_escape","","",15,[[],["result",6]]],[11,"set_failed","","",15,[[]]],[11,"next","","",16,[[],[["result",6],["option",4]]]],[11,"peek","","",16,[[],[["result",6],["option",4]]]],[11,"discard","","",16,[[]]],[11,"position","","",16,[[],["position",3]]],[11,"peek_position","","",16,[[],["position",3]]],[11,"byte_offset","","",16,[[]]],[11,"parse_str","","",16,[[["vec",3]],[["reference",4],["result",6]]]],[11,"parse_str_raw","","",16,[[["vec",3]],[["result",6],["reference",4]]]],[11,"ignore_str","","",16,[[],["result",6]]],[11,"decode_hex_escape","","",16,[[],["result",6]]],[11,"set_failed","","",16,[[]]],[11,"from","serde_json","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"from","","Convert 32-bit floating point number to <code>Value</code>",12,[[]]],[11,"from","","Convert 64-bit floating point number to <code>Value</code>",12,[[]]],[11,"from","","Convert boolean to <code>Value</code>",12,[[]]],[11,"from","","Convert <code>String</code> to <code>Value</code>",12,[[["string",3]]]],[11,"from","","Convert string slice to <code>Value</code>",12,[[]]],[11,"from","","Convert copy-on-write string to <code>Value</code>",12,[[["cow",4]]]],[11,"from","","Convert <code>Number</code> to <code>Value</code>",12,[[["number",3]]]],[11,"from","","Convert map (with string keys) to <code>Value</code>",12,[[["value",4],["string",3],["map",3]]]],[11,"from","","Convert a <code>Vec</code> to <code>Value</code>",12,[[["vec",3]]]],[11,"from","","Convert a slice to <code>Value</code>",12,[[]]],[11,"from","","Convert <code>()</code> to <code>Value</code>",12,[[]]],[11,"from","serde_json::value","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[]]],[11,"next_back","serde_json::map","",17,[[],["option",4]]],[11,"next_back","","",18,[[],["option",4]]],[11,"next_back","","",19,[[],["option",4]]],[11,"next_back","","",20,[[],["option",4]]],[11,"next_back","","",21,[[],["option",4]]],[11,"next_back","","",22,[[],["option",4]]],[11,"len","","",17,[[]]],[11,"len","","",18,[[]]],[11,"len","","",19,[[]]],[11,"len","","",20,[[]]],[11,"len","","",21,[[]]],[11,"len","","",22,[[]]],[11,"extend","serde_json","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"next","","",1,[[],[["option",4],["result",6]]]],[11,"next","serde_json::map","",17,[[],["option",4]]],[11,"size_hint","","",17,[[]]],[11,"next","","",18,[[],["option",4]]],[11,"size_hint","","",18,[[]]],[11,"next","","",19,[[],["option",4]]],[11,"size_hint","","",19,[[]]],[11,"next","","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"next","","",21,[[],["option",4]]],[11,"size_hint","","",21,[[]]],[11,"next","","",22,[[],["option",4]]],[11,"size_hint","","",22,[[]]],[11,"clone","serde_json::error","",3,[[],["category",4]]],[11,"clone","serde_json","",4,[[]]],[11,"clone","serde_json::ser","",23,[[],["compactformatter",3]]],[11,"clone","","",11,[[],["prettyformatter",3]]],[11,"clone","serde_json","",12,[[],["value",4]]],[11,"clone","serde_json::value","",13,[[],["number",3]]],[11,"default","serde_json","",4,[[]]],[11,"default","serde_json::ser","",11,[[]]],[11,"default","serde_json","",12,[[],["value",4]]],[11,"eq","serde_json::error","",3,[[["category",4]]]],[11,"eq","serde_json","",4,[[]]],[11,"eq","","",12,[[["value",4]]]],[11,"ne","","",12,[[["value",4]]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[["string",3]]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","serde_json::value","",13,[[["number",3]]]],[11,"ne","","",13,[[["number",3]]]],[11,"fmt","serde_json::error","",3,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","serde_json::ser","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json","",12,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json::value","",13,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","Display a JSON value as a string.",12,[[["formatter",3]],["result",6]]],[11,"fmt","serde_json::value","",13,[[["formatter",3]],["result",6]]],[11,"index","serde_json","",4,[[],["value",4]]],[11,"index","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> …",12,[[],["value",4]]],[11,"index_mut","","",4,[[],["value",4]]],[11,"index_mut","","Write into a <code>serde_json::Value</code> using the syntax …",12,[[],["value",4]]],[11,"from_str","serde_json::value","",13,[[],["result",4]]],[11,"from_str","serde_json","",12,[[],[["value",4],["error",3],["result",4]]]],[11,"from_iter","","",4,[[]]],[11,"from_iter","","Convert an iteratable type to a <code>Value</code>",12,[[["intoiterator",8]]]],[11,"from_iter","","Convert an iteratable type to a <code>Value</code>",12,[[["intoiterator",8]]]],[11,"source","","",2,[[],[["option",4],["error",8]]]],[11,"deserialize_any","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_i8","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_i16","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_i32","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_i64","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_u8","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_u16","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_u32","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_u64","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_f32","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_f64","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_i128","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_u128","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_option","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_enum","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_newtype_struct","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_bool","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_char","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_str","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_string","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_bytes","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_byte_buf","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_unit","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_unit_struct","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_seq","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_tuple","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_tuple_struct","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_map","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_struct","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_identifier","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_ignored_any","","",12,[[],[["error",3],["result",4]]]],[11,"deserialize_any","serde_json::value","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_i8","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_i16","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_i32","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_i64","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_u8","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_u16","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_u32","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_u64","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_f32","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_f64","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_i128","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_u128","","",13,[[],[["error",3],["result",4]]]],[11,"deserialize_bool","","",13,[[],["result",4]]],[11,"deserialize_char","","",13,[[],["result",4]]],[11,"deserialize_str","","",13,[[],["result",4]]],[11,"deserialize_string","","",13,[[],["result",4]]],[11,"deserialize_bytes","","",13,[[],["result",4]]],[11,"deserialize_byte_buf","","",13,[[],["result",4]]],[11,"deserialize_option","","",13,[[],["result",4]]],[11,"deserialize_unit","","",13,[[],["result",4]]],[11,"deserialize_unit_struct","","",13,[[],["result",4]]],[11,"deserialize_newtype_struct","","",13,[[],["result",4]]],[11,"deserialize_seq","","",13,[[],["result",4]]],[11,"deserialize_tuple","","",13,[[],["result",4]]],[11,"deserialize_tuple_struct","","",13,[[],["result",4]]],[11,"deserialize_map","","",13,[[],["result",4]]],[11,"deserialize_struct","","",13,[[],["result",4]]],[11,"deserialize_enum","","",13,[[],["result",4]]],[11,"deserialize_identifier","","",13,[[],["result",4]]],[11,"deserialize_ignored_any","","",13,[[],["result",4]]],[11,"into_deserializer","serde_json","",12,[[]]],[11,"custom","","",2,[[["display",8]],["error",3]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","serde_json::value","",13,[[],["result",4]]],[11,"serialize_bool","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_i8","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_i16","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_i32","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_i64","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_u8","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_u16","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_u32","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_u64","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_f32","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_f64","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_char","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_str","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_bytes","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_unit","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_unit_struct","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_unit_variant","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_newtype_struct","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_newtype_variant","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_none","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_some","","",24,[[],[["value",4],["result",6]]]],[11,"serialize_seq","","",24,[[["option",4]],["result",6]]],[11,"serialize_tuple","","",24,[[],["result",6]]],[11,"serialize_tuple_struct","","",24,[[],["result",6]]],[11,"serialize_tuple_variant","","",24,[[],["result",6]]],[11,"serialize_map","","",24,[[["option",4]],["result",6]]],[11,"serialize_struct","","",24,[[],["result",6]]],[11,"serialize_struct_variant","","",24,[[],["result",6]]],[11,"collect_str","","",24,[[],[["value",4],["result",6]]]],[11,"deserialize","serde_json","",4,[[],["result",4]]],[11,"deserialize","","",12,[[],[["value",4],["result",4]]]],[11,"deserialize","serde_json::value","",13,[[],[["number",3],["result",4]]]],[11,"custom","serde_json","",2,[[["display",8]],["error",3]]],[11,"invalid_type","","",2,[[["expected",8],["unexpected",4]]]]],"p":[[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[4,"Category"],[3,"Map"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Serializer"],[4,"CharEscape"],[8,"Formatter"],[3,"PrettyFormatter"],[4,"Value"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"CompactFormatter"],[3,"Serializer"]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain …","i":[[4,"CollectionAllocErr","smallvec","Error type for APIs with fallible heap allocation",null,null],[13,"CapacityOverflow","","Overflow <code>usize::MAX</code> or other error during size computation",0,null],[13,"AllocErr","","The allocator return an error",0,null],[12,"layout","smallvec::CollectionAllocErr","The layout that was passed to the allocator",1,null],[3,"Drain","smallvec","An iterator that removes the items from a <code>SmallVec</code> and …",null,null],[3,"SmallVec","","A <code>Vec</code>-like container that can store a small number of …",null,null],[11,"new","","Construct an empty vector",2,[[],["smallvec",3]]],[11,"with_capacity","","Construct an empty vector with enough capacity …",2,[[]]],[11,"from_vec","","Construct a new <code>SmallVec</code> from a <code>Vec<A::Item></code>.",2,[[["vec",3]],["smallvec",3]]],[11,"from_buf","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …",2,[[],["smallvec",3]]],[11,"from_buf_and_len","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …",2,[[],["smallvec",3]]],[11,"from_buf_and_len_unchecked","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …",2,[[["maybeuninit",19]],["smallvec",3]]],[11,"set_len","","Sets the length of a vector.",2,[[]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",2,[[]]],[11,"len","","The number of elements stored in the vector",2,[[]]],[11,"is_empty","","Returns <code>true</code> if the vector is empty",2,[[]]],[11,"capacity","","The number of items the vector can hold without …",2,[[]]],[11,"spilled","","Returns <code>true</code> if the data has spilled into a separate …",2,[[]]],[11,"drain","","Creates a draining iterator that removes the specified …",2,[[],["drain",3]]],[11,"push","","Append an item to the vector.",2,[[]]],[11,"pop","","Remove an item from the end of the vector and return it, …",2,[[],["option",4]]],[11,"append","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …",2,[[["smallvec",3]]]],[11,"grow","","Re-allocate to set the capacity to …",2,[[]]],[11,"try_grow","","Re-allocate to set the capacity to …",2,[[],[["collectionallocerr",4],["result",4]]]],[11,"reserve","","Reserve capacity for <code>additional</code> more elements to be …",2,[[]]],[11,"try_reserve","","Reserve capacity for <code>additional</code> more elements to be …",2,[[],[["collectionallocerr",4],["result",4]]]],[11,"reserve_exact","","Reserve the minimum capacity for <code>additional</code> more elements …",2,[[]]],[11,"try_reserve_exact","","Reserve the minimum capacity for <code>additional</code> more elements …",2,[[],[["collectionallocerr",4],["result",4]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",2,[[]]],[11,"truncate","","Shorten the vector, keeping the first <code>len</code> elements and …",2,[[]]],[11,"as_slice","","Extracts a slice containing the entire vector.",2,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",2,[[]]],[11,"swap_remove","","Remove the element at position <code>index</code>, replacing it with …",2,[[]]],[11,"clear","","Remove all elements from the vector.",2,[[]]],[11,"remove","","Remove and return the element at position <code>index</code>, shifting …",2,[[]]],[11,"insert","","Insert an element at position <code>index</code>, shifting all …",2,[[]]],[11,"insert_many","","Insert multiple elements at position <code>index</code>, shifting all …",2,[[["intoiterator",8]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the …",2,[[],["vec",3]]],[11,"into_boxed_slice","","Converts a <code>SmallVec</code> into a <code>Box<[T]></code> without reallocating …",2,[[],["box",3]]],[11,"into_inner","","Convert the SmallVec into an <code>A</code> if possible. Otherwise …",2,[[],["result",4]]],[11,"retain","","Retains only the elements specified by the predicate.",2,[[["fnmut",8]]]],[11,"dedup","","Removes consecutive duplicate elements.",2,[[]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given …",2,[[]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",2,[[]]],[11,"resize_with","","Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …",2,[[]]],[11,"from_raw_parts","","Creates a <code>SmallVec</code> directly from the raw components of …",2,[[],["smallvec",3]]],[11,"as_ptr","","Returns a raw pointer to the vector\'s buffer.",2,[[]]],[11,"as_mut_ptr","","Returns a raw mutable pointer to the vector\'s buffer.",2,[[]]],[11,"from_slice","","Copy the elements from a slice into a new <code>SmallVec</code>.",2,[[]]],[11,"insert_from_slice","","Copy elements from a slice into the vector at position …",2,[[]]],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",2,[[]]],[11,"resize","","Resizes the vector so that its length is equal to <code>len</code>.",2,[[]]],[11,"from_elem","","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.",2,[[]]],[3,"IntoIter","","An iterator that consumes a <code>SmallVec</code> and yields its items …",null,null],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",3,[[]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable …",3,[[]]],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array\'s elements.",4,null],[10,"size","","Returns the number of items the array can hold.",4,[[]]],[8,"ToSmallVec","","Convenience trait for constructing a <code>SmallVec</code>",null,null],[10,"to_smallvec","","Construct a new <code>SmallVec</code> from a slice.",5,[[],["smallvec",3]]],[14,"smallvec","","Creates a [<code>SmallVec</code>] containing the arguments.",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"from","","",0,[[["layouterr",6]]]],[11,"from","","",2,[[],["smallvec",3]]],[11,"from","","",2,[[["vec",3]],["smallvec",3]]],[11,"from","","",2,[[],["smallvec",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",2,[[["smallvec",3]]]],[11,"cmp","","",2,[[["smallvec",3]],["ordering",4]]],[11,"partial_cmp","","",2,[[["smallvec",3]],[["option",4],["ordering",4]]]],[11,"drop","","",6,[[]]],[11,"drop","","",2,[[]]],[11,"drop","","",3,[[]]],[11,"index","","",2,[[]]],[11,"index_mut","","",2,[[]]],[11,"hash","","",2,[[]]],[11,"len","","",6,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"from_iter","","",2,[[["intoiterator",8]],["smallvec",3]]],[11,"as_ref","","",2,[[]]],[11,"as_mut","","",2,[[]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"into_iter","","",2,[[]]],[11,"extend","","",2,[[["intoiterator",8]]]],[11,"clone","","",2,[[],["smallvec",3]]],[11,"clone","","",3,[[],["intoiter",3]]],[11,"default","","",2,[[],["smallvec",3]]]],"p":[[4,"CollectionAllocErr"],[13,"AllocErr"],[3,"SmallVec"],[3,"IntoIter"],[8,"Array"],[8,"ToSmallVec"],[3,"Drain"]]},\
"static_assertions":{"doc":"Banner","i":[[14,"assert_cfg","static_assertions","Asserts that a given configuration is set.",null,null],[14,"assert_eq_align","","Asserts that types are equal in alignment.",null,null],[14,"assert_eq_size","","Asserts that types are equal in size.",null,null],[14,"assert_eq_size_ptr","","Asserts that values pointed to are equal in size.",null,null],[14,"assert_eq_size_val","","Asserts that values are equal in size.",null,null],[14,"assert_fields","","Asserts that the type has the given fields.",null,null],[14,"assert_impl_one","","Asserts that the type implements exactly one in a set of …",null,null],[14,"assert_impl_all","","Asserts that the type implements <em>all</em> of the given traits.",null,null],[14,"assert_impl_any","","Asserts that the type implements <em>any</em> of the given traits.",null,null],[14,"assert_not_impl_all","","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …",null,null],[14,"assert_not_impl_any","","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …",null,null],[14,"assert_obj_safe","","Asserts that the traits support dynamic dispatch (…",null,null],[14,"assert_trait_sub_all","","Asserts that the trait is a child of all of the other …",null,null],[14,"assert_trait_super_all","","Asserts that the trait is a parent of all of the other …",null,null],[14,"assert_type_eq_all","","Asserts that <em>all</em> types in a list are equal to each other.",null,null],[14,"assert_type_ne_all","","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.",null,null],[14,"const_assert","","Asserts that constant expressions evaluate to <code>true</code>.",null,null],[14,"const_assert_eq","","Asserts that constants are equal in value.",null,null],[14,"const_assert_ne","","Asserts that constants are <strong>not</strong> equal in value.",null,null]],"p":[]},\
"strsim":{"doc":"This library implements string similarity metrics.","i":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[6,"HammingResult","","",null,null],[5,"hamming","","Calculates the number of positions in the two strings …",null,[[],["hammingresult",6]]],[5,"jaro","","Calculates the Jaro similarity between two strings. The …",null,[[]]],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common …",null,[[]]],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, …",null,[[]]],[5,"normalized_levenshtein","","Calculates a normalized score of the Levenshtein …",null,[[]]],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. …",null,[[]]],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be …",null,[[]]],[5,"normalized_damerau_levenshtein","","Calculates a normalized score of the …",null,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"eq","","",0,[[["strsimerror",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"StrSimError"]]},\
"structopt":{"doc":"This crate defines the <code>StructOpt</code> trait and its custom …","i":[[8,"StructOpt","structopt","A struct that is converted from command line arguments.",null,null],[10,"clap","","Returns [<code>clap::App</code>] corresponding to the struct.",0,[[],["app",3]]],[10,"from_clap","","Builds the struct from [<code>clap::ArgMatches</code>]. It\'s …",0,[[["argmatches",3]]]],[11,"from_args","","Builds the struct from the command line arguments ([…",0,[[]]],[11,"from_args_safe","","Builds the struct from the command line arguments ([…",0,[[],[["error",3],["result",4]]]],[11,"from_iter","","Gets the struct from any iterator such as a <code>Vec</code> of your …",0,[[]]],[11,"from_iter_safe","","Gets the struct from any iterator such as a <code>Vec</code> of your …",0,[[],[["error",3],["result",4]]]]],"p":[[8,"StructOpt"]]},\
"structopt_derive":{"doc":"This crate is custom derive for <code>StructOpt</code>. It should not …","i":[[24,"StructOpt","structopt_derive","Generates the <code>StructOpt</code> impl.",null,null]],"p":[]},\
"supercow":{"doc":"<code>Supercow</code> is <code>Cow</code> on steroids.","i":[[0,"ext","supercow","Miscellaneous things used to integrate other code with …",null,null],[8,"ConstDeref","supercow::ext","Marker trait indicating a <code>Deref</code>-like which always returns …",null,null],[16,"Target","","The type this value dereferences to.",0,null],[10,"const_deref","","Returns the (constant) value that this value dereferences …",0,[[]]],[8,"TwoStepShared","","Trait for <code>ConstDeref</code> implementations which can be …",null,null],[10,"new_two_step","","Returns a new, empty instance of <code>Self</code>.",1,[[]]],[10,"deref_holder","","Returns the internal <code>Option<T></code> backing this value.",1,[[],["option",4]]],[3,"TwoStepRc","","Wrapper providing a <code>TwoStepShared</code> implementation.",null,null],[3,"TwoStepArc","","Wrapper providing a <code>TwoStepShared</code> implementation.",null,null],[17,"MAX_INTERNAL_BORROW_DISPLACEMENT","","The maximum displacement (relative to the start of the …",null,null],[8,"SafeBorrow","","Extension of <code>Borrow</code> used to allow <code>Supercow::to_mut()</code> to …",null,null],[10,"borrow_replacement","","Given <code>ptr</code>, which was obtained from a prior call to …",2,[[]]],[8,"PointerFirstRef","","Marker trait identifying a pointer type which begins with …",null,null],[8,"SharedFrom","","Like <code>std::convert::From</code>, but without the blanket …",null,null],[10,"shared_from","","Converts the given <code>T</code> to <code>Self</code>.",3,[[]]],[8,"OwnedStorage","","Describes how an <code>OWNED</code> or <code>SHARED</code> value is stored in a …",null,null],[10,"allocate_a","","Allocates the given owned value.",4,[[]]],[10,"allocate_b","","See <code>allocate_a</code>.",4,[[]]],[10,"get_ptr_a","","Extracts the immutable reference from the saved pointer …",4,[[]]],[10,"get_ptr_b","","See <code>get_ptr_a</code>.",4,[[]]],[10,"get_mut_a","","Extracts the mutable reference from the saved pointer and …",4,[[]]],[10,"get_mut_b","","See <code>get_mut_a</code>.",4,[[]]],[10,"deallocate_a","","Releases any allocations that would not be released by …",4,[[]]],[10,"deallocate_b","","See <code>deallocate_b</code>.",4,[[]]],[10,"deallocate_into_a","","Like <code>deallocate_a()</code>, but also return the owned value.",4,[[]]],[10,"deallocate_into_b","","See <code>deallocate_into_a</code>.",4,[[]]],[10,"is_internal_storage","","Returns whether this storage implementation ever causes …",4,[[]]],[3,"InlineStorage","","Causes the <code>OWNED</code> or <code>SHARED</code> value of a <code>Supercow</code> to be …",null,null],[3,"BoxedStorage","","Causes the <code>OWNED</code> or <code>SHARED</code> value of a <code>Supercow</code> to be …",null,null],[8,"PtrWrite","","Optionally stores a pointer to a value.",null,null],[10,"new","","Returns an instance of <code>Self</code> with no particular value.",5,[[]]],[10,"store_ptr","","Writes the given pointer into <code>self</code>.",5,[[]]],[8,"PtrRead","","Read trait corresponding to <code>PtrWrite</code>.",null,null],[10,"get_ptr","","Returns the pointer most recently stored via <code>store_ptr()</code>.",6,[[]]],[8,"DefaultFeatures","supercow","The default shared reference type for <code>Supercow</code>.",null,null],[10,"clone_boxed","","Clone this value, and then immediately put it into a <code>Box</code> …",7,[[],[["box",3],["defaultfeatures",8]]]],[10,"self_address_mut","","Returns the address of <code>self</code>.",7,[[]]],[8,"NonSyncFeatures","","The shared reference type for <code>NonSyncSupercow</code>.",null,null],[10,"clone_boxed","","Clone this value, and then immediately put it into a <code>Box</code> …",8,[[],[["box",3],["nonsyncfeatures",8]]]],[10,"self_address_mut","","Returns the address of <code>self</code>.",8,[[]]],[6,"NonSyncSupercow","","<code>Supercow</code> with the default <code>SHARED</code> changed to …",null,null],[6,"InlineSupercow","","<code>Supercow</code> with the default <code>STORAGE</code> changed to <code>InlineStorage</code>…",null,null],[6,"InlineNonSyncSupercow","","<code>NonSyncSupercow</code> with the <code>STORAGE</code> changed to <code>InlineStorage</code>.",null,null],[3,"Supercow","","The actual generic reference type.",null,null],[6,"Phantomcow","","<code>Phantomcow<\'a, Type></code> is to <code>Supercow<\'a, Type></code> as …",null,null],[6,"NonSyncPhantomcow","","The <code>Phantomcow</code> variant corresponding to <code>NonSyncSupercow</code>.",null,null],[6,"InlinePhantomcow","","The <code>Phantomcow</code> variant corresponding to <code>InlineStorage</code>.",null,null],[6,"InlineNonSyncPhantomcow","","The <code>Phantomcow</code> variant corresponding to …",null,null],[11,"owned","","Creates a new <code>Supercow</code> which owns the given value.",9,[[]]],[11,"borrowed","","Creates a new <code>Supercow</code> which borrows the given value.",9,[[]]],[11,"shared","","Creates a new <code>Supercow</code> using the given shared reference.",9,[[]]],[11,"clone_non_owned","","If <code>this</code> is non-owned, clone <code>this</code> and return it.",9,[[],["option",4]]],[11,"share","","Logically clone <code>this</code> without needing to clone <code>OWNED</code>.",9,[[]]],[11,"extract_ref","","If <code>this</code> is borrowed, return the underlying reference with …",9,[[],["option",4]]],[11,"into_inner","","Takes ownership of the underling value if needed, then …",9,[[]]],[11,"to_mut","","Returns a (indirect) mutable reference to an underlying …",9,[[],["ref",3]]],[11,"unborrow","","If <code>this</code> is borrowed, clone the inner value so that the …",9,[[],["supercow",3]]],[11,"take_ownership","","Takes ownership of the underlying value, so that this …",9,[[],["supercow",3]]],[11,"phantom","","Converts this <code>Supercow</code> into a <code>Phantomcow</code>.",9,[[],["phantomcow",6]]],[3,"Ref","","Provides mutable access to an owned value within a …",null,null],[14,"supercow_features","","Defines a \\\"feature set\\\" for a custom <code>Supercow</code> type.",null,null],[11,"borrow_replacement","supercow::ext","",10,[[]]],[11,"clone_boxed","","",10,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",10,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"borrow_replacement","","",11,[[]]],[11,"clone_boxed","","",11,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",11,[[]]],[11,"clone_boxed","","",11,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",11,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"borrow_replacement","","",12,[[]]],[11,"clone_boxed","","",12,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",12,[[]]],[11,"clone_boxed","","",12,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",12,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"borrow_replacement","","",13,[[]]],[11,"clone_boxed","","",13,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",13,[[]]],[11,"clone_boxed","","",13,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",13,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"borrow_replacement","supercow","",9,[[]]],[11,"borrow_replacement","","",9,[[]]],[11,"borrow_replacement","","",9,[[]]],[11,"borrow_replacement","","",9,[[["cstr",3]],["cstr",3]]],[11,"borrow_replacement","","",9,[[["osstr",3]],["osstr",3]]],[11,"borrow_replacement","","",9,[[["path",3]],["path",3]]],[11,"clone_boxed","","",9,[[],[["box",3],["defaultfeatures",8],["global",3]]]],[11,"self_address_mut","","",9,[[]]],[11,"clone_boxed","","",9,[[],[["nonsyncfeatures",8],["box",3],["global",3]]]],[11,"self_address_mut","","",9,[[]]],[11,"from","","",9,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"borrow_replacement","","",14,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"new_two_step","supercow::ext","",10,[[]]],[11,"deref_holder","","",10,[[],["option",4]]],[11,"new_two_step","","",11,[[]]],[11,"deref_holder","","",11,[[],["option",4]]],[11,"allocate_a","","",12,[[]]],[11,"allocate_b","","",12,[[]]],[11,"get_ptr_a","","",12,[[]]],[11,"get_ptr_b","","",12,[[]]],[11,"get_mut_a","","",12,[[]]],[11,"get_mut_b","","",12,[[]]],[11,"deallocate_a","","",12,[[]]],[11,"deallocate_b","","",12,[[]]],[11,"deallocate_into_a","","",12,[[]]],[11,"deallocate_into_b","","",12,[[]]],[11,"is_internal_storage","","",12,[[]]],[11,"allocate_a","","",13,[[]]],[11,"allocate_b","","",13,[[]]],[11,"get_ptr_a","","",13,[[]]],[11,"get_ptr_b","","",13,[[]]],[11,"get_mut_a","","",13,[[]]],[11,"get_mut_b","","",13,[[]]],[11,"deallocate_a","","",13,[[]]],[11,"deallocate_b","","",13,[[]]],[11,"deallocate_into_a","","",13,[[]]],[11,"deallocate_into_b","","",13,[[]]],[11,"is_internal_storage","","",13,[[]]],[11,"drop","supercow","",9,[[]]],[11,"drop","","",14,[[]]],[11,"as_ref","","",9,[[]]],[11,"from","","",9,[[]]],[11,"from","","",9,[[]]],[11,"from","","",9,[[["rc",3]]]],[11,"from","","",9,[[["arc",3]]]],[11,"clone","supercow::ext","",10,[[]]],[11,"clone","","",11,[[]]],[11,"clone","","",12,[[],["inlinestorage",3]]],[11,"clone","","",13,[[],["boxedstorage",3]]],[11,"clone","supercow","",9,[[]]],[11,"default","supercow::ext","",12,[[]]],[11,"default","","",13,[[],["boxedstorage",3]]],[11,"cmp","supercow","",9,[[],["ordering",4]]],[11,"eq","","",9,[[]]],[11,"ne","","",9,[[]]],[11,"partial_cmp","","",9,[[],[["ordering",4],["option",4]]]],[11,"lt","","",9,[[]]],[11,"le","","",9,[[]]],[11,"gt","","",9,[[]]],[11,"ge","","",9,[[]]],[11,"deref","","",14,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",14,[[]]],[11,"fmt","supercow::ext","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","supercow","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"hash","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]]],"p":[[8,"ConstDeref"],[8,"TwoStepShared"],[8,"SafeBorrow"],[8,"SharedFrom"],[8,"OwnedStorage"],[8,"PtrWrite"],[8,"PtrRead"],[8,"DefaultFeatures"],[8,"NonSyncFeatures"],[3,"Supercow"],[3,"TwoStepRc"],[3,"TwoStepArc"],[3,"InlineStorage"],[3,"BoxedStorage"],[3,"Ref"]]},\
"syn":{"doc":"Syn is a parsing library for parsing a stream of Rust …","i":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal …",null,null],[0,"token","","Tokens representing Rust punctuation, keywords, and …",null,null],[8,"Token","syn::token","Marker trait for types that represent single tokens.",null,null],[3,"Underscore","","<code>_</code>",null,null],[12,"spans","","",0,null],[3,"Abstract","","<code>abstract</code>",null,null],[12,"span","","",1,null],[3,"As","","<code>as</code>",null,null],[12,"span","","",2,null],[3,"Async","","<code>async</code>",null,null],[12,"span","","",3,null],[3,"Auto","","<code>auto</code>",null,null],[12,"span","","",4,null],[3,"Become","","<code>become</code>",null,null],[12,"span","","",5,null],[3,"Box","","<code>box</code>",null,null],[12,"span","","",6,null],[3,"Break","","<code>break</code>",null,null],[12,"span","","",7,null],[3,"Const","","<code>const</code>",null,null],[12,"span","","",8,null],[3,"Continue","","<code>continue</code>",null,null],[12,"span","","",9,null],[3,"Crate","","<code>crate</code>",null,null],[12,"span","","",10,null],[3,"Default","","<code>default</code>",null,null],[12,"span","","",11,null],[3,"Do","","<code>do</code>",null,null],[12,"span","","",12,null],[3,"Dyn","","<code>dyn</code>",null,null],[12,"span","","",13,null],[3,"Else","","<code>else</code>",null,null],[12,"span","","",14,null],[3,"Enum","","<code>enum</code>",null,null],[12,"span","","",15,null],[3,"Existential","","<code>existential</code>",null,null],[12,"span","","",16,null],[3,"Extern","","<code>extern</code>",null,null],[12,"span","","",17,null],[3,"Final","","<code>final</code>",null,null],[12,"span","","",18,null],[3,"Fn","","<code>fn</code>",null,null],[12,"span","","",19,null],[3,"For","","<code>for</code>",null,null],[12,"span","","",20,null],[3,"If","","<code>if</code>",null,null],[12,"span","","",21,null],[3,"Impl","","<code>impl</code>",null,null],[12,"span","","",22,null],[3,"In","","<code>in</code>",null,null],[12,"span","","",23,null],[3,"Let","","<code>let</code>",null,null],[12,"span","","",24,null],[3,"Loop","","<code>loop</code>",null,null],[12,"span","","",25,null],[3,"Macro","","<code>macro</code>",null,null],[12,"span","","",26,null],[3,"Match","","<code>match</code>",null,null],[12,"span","","",27,null],[3,"Mod","","<code>mod</code>",null,null],[12,"span","","",28,null],[3,"Move","","<code>move</code>",null,null],[12,"span","","",29,null],[3,"Mut","","<code>mut</code>",null,null],[12,"span","","",30,null],[3,"Override","","<code>override</code>",null,null],[12,"span","","",31,null],[3,"Priv","","<code>priv</code>",null,null],[12,"span","","",32,null],[3,"Pub","","<code>pub</code>",null,null],[12,"span","","",33,null],[3,"Ref","","<code>ref</code>",null,null],[12,"span","","",34,null],[3,"Return","","<code>return</code>",null,null],[12,"span","","",35,null],[3,"SelfType","","<code>Self</code>",null,null],[12,"span","","",36,null],[3,"SelfValue","","<code>self</code>",null,null],[12,"span","","",37,null],[3,"Static","","<code>static</code>",null,null],[12,"span","","",38,null],[3,"Struct","","<code>struct</code>",null,null],[12,"span","","",39,null],[3,"Super","","<code>super</code>",null,null],[12,"span","","",40,null],[3,"Trait","","<code>trait</code>",null,null],[12,"span","","",41,null],[3,"Try","","<code>try</code>",null,null],[12,"span","","",42,null],[3,"Type","","<code>type</code>",null,null],[12,"span","","",43,null],[3,"Typeof","","<code>typeof</code>",null,null],[12,"span","","",44,null],[3,"Union","","<code>union</code>",null,null],[12,"span","","",45,null],[3,"Unsafe","","<code>unsafe</code>",null,null],[12,"span","","",46,null],[3,"Unsized","","<code>unsized</code>",null,null],[12,"span","","",47,null],[3,"Use","","<code>use</code>",null,null],[12,"span","","",48,null],[3,"Virtual","","<code>virtual</code>",null,null],[12,"span","","",49,null],[3,"Where","","<code>where</code>",null,null],[12,"span","","",50,null],[3,"While","","<code>while</code>",null,null],[12,"span","","",51,null],[3,"Yield","","<code>yield</code>",null,null],[12,"span","","",52,null],[3,"Add","","<code>+</code>",null,null],[12,"spans","","",53,null],[3,"AddEq","","<code>+=</code>",null,null],[12,"spans","","",54,null],[3,"And","","<code>&</code>",null,null],[12,"spans","","",55,null],[3,"AndAnd","","<code>&&</code>",null,null],[12,"spans","","",56,null],[3,"AndEq","","<code>&=</code>",null,null],[12,"spans","","",57,null],[3,"At","","<code>@</code>",null,null],[12,"spans","","",58,null],[3,"Bang","","<code>!</code>",null,null],[12,"spans","","",59,null],[3,"Caret","","<code>^</code>",null,null],[12,"spans","","",60,null],[3,"CaretEq","","<code>^=</code>",null,null],[12,"spans","","",61,null],[3,"Colon","","<code>:</code>",null,null],[12,"spans","","",62,null],[3,"Colon2","","<code>::</code>",null,null],[12,"spans","","",63,null],[3,"Comma","","<code>,</code>",null,null],[12,"spans","","",64,null],[3,"Div","","<code>/</code>",null,null],[12,"spans","","",65,null],[3,"DivEq","","<code>/=</code>",null,null],[12,"spans","","",66,null],[3,"Dollar","","<code>$</code>",null,null],[12,"spans","","",67,null],[3,"Dot","","<code>.</code>",null,null],[12,"spans","","",68,null],[3,"Dot2","","<code>..</code>",null,null],[12,"spans","","",69,null],[3,"Dot3","","<code>...</code>",null,null],[12,"spans","","",70,null],[3,"DotDotEq","","<code>..=</code>",null,null],[12,"spans","","",71,null],[3,"Eq","","<code>=</code>",null,null],[12,"spans","","",72,null],[3,"EqEq","","<code>==</code>",null,null],[12,"spans","","",73,null],[3,"Ge","","<code>>=</code>",null,null],[12,"spans","","",74,null],[3,"Gt","","<code>></code>",null,null],[12,"spans","","",75,null],[3,"Le","","<code><=</code>",null,null],[12,"spans","","",76,null],[3,"Lt","","<code><</code>",null,null],[12,"spans","","",77,null],[3,"MulEq","","<code>*=</code>",null,null],[12,"spans","","",78,null],[3,"Ne","","<code>!=</code>",null,null],[12,"spans","","",79,null],[3,"Or","","<code>|</code>",null,null],[12,"spans","","",80,null],[3,"OrEq","","<code>|=</code>",null,null],[12,"spans","","",81,null],[3,"OrOr","","<code>||</code>",null,null],[12,"spans","","",82,null],[3,"Pound","","<code>#</code>",null,null],[12,"spans","","",83,null],[3,"Question","","<code>?</code>",null,null],[12,"spans","","",84,null],[3,"RArrow","","<code>-></code>",null,null],[12,"spans","","",85,null],[3,"LArrow","","<code><-</code>",null,null],[12,"spans","","",86,null],[3,"Rem","","<code>%</code>",null,null],[12,"spans","","",87,null],[3,"RemEq","","<code>%=</code>",null,null],[12,"spans","","",88,null],[3,"FatArrow","","<code>=></code>",null,null],[12,"spans","","",89,null],[3,"Semi","","<code>;</code>",null,null],[12,"spans","","",90,null],[3,"Shl","","<code><<</code>",null,null],[12,"spans","","",91,null],[3,"ShlEq","","<code><<=</code>",null,null],[12,"spans","","",92,null],[3,"Shr","","<code>>></code>",null,null],[12,"spans","","",93,null],[3,"ShrEq","","<code>>>=</code>",null,null],[12,"spans","","",94,null],[3,"Star","","<code>*</code>",null,null],[12,"spans","","",95,null],[3,"Sub","","<code>-</code>",null,null],[12,"spans","","",96,null],[3,"SubEq","","<code>-=</code>",null,null],[12,"spans","","",97,null],[3,"Tilde","","<code>~</code>",null,null],[12,"spans","","",98,null],[3,"Brace","","<code>{...}</code>",null,null],[12,"span","","",99,null],[11,"surround","","",99,[[["tokenstream",3]]]],[3,"Bracket","","<code>[...]</code>",null,null],[12,"span","","",100,null],[11,"surround","","",100,[[["tokenstream",3]]]],[3,"Paren","","<code>(...)</code>",null,null],[12,"span","","",101,null],[11,"surround","","",101,[[["tokenstream",3]]]],[3,"Group","","None-delimited group",null,null],[12,"span","","",102,null],[11,"surround","","",102,[[["tokenstream",3]]]],[0,"buffer","syn","A stably addressed token buffer supporting efficient …",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple …",null,null],[11,"new","","Creates a <code>TokenBuffer</code> containing all the tokens from the …",103,[[["tokenstream",3]],["tokenbuffer",3]]],[11,"new2","","Creates a <code>TokenBuffer</code> containing all the tokens from the …",103,[[["tokenstream",3]],["tokenbuffer",3]]],[11,"begin","","Creates a cursor referencing the first token in the …",103,[[],["cursor",3]]],[3,"Cursor","","A cheaply copyable cursor into a <code>TokenBuffer</code>.",null,null],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",104,[[]]],[11,"eof","","Checks whether the cursor is currently pointing at the …",104,[[]]],[11,"group","","If the cursor is pointing at a <code>Group</code> with the given …",104,[[["delimiter",4]],["option",4]]],[11,"ident","","If the cursor is pointing at a <code>Ident</code>, returns it along …",104,[[],["option",4]]],[11,"punct","","If the cursor is pointing at an <code>Punct</code>, returns it along …",104,[[],["option",4]]],[11,"literal","","If the cursor is pointing at a <code>Literal</code>, return it along …",104,[[],["option",4]]],[11,"lifetime","","If the cursor is pointing at a <code>Lifetime</code>, returns it along …",104,[[],["option",4]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into …",104,[[],["tokenstream",3]]],[11,"token_tree","","If the cursor is pointing at a <code>TokenTree</code>, returns it …",104,[[],["option",4]]],[11,"span","","Returns the <code>Span</code> of the current token, or …",104,[[],["span",3]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign …",null,null],[8,"IdentExt","syn::ext","Additional methods for <code>Ident</code> not provided by proc-macro2 …",null,null],[10,"parse_any","","Parses any identifier including keywords.",105,[[["parsestream",6]],["result",6]]],[18,"peek_any","","Peeks any identifier including keywords. Usage: …",105,null],[10,"unraw","","Strips the raw marker <code>r#</code>, if any, from the beginning of …",105,[[],["ident",3]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by …",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type <code>T</code> …",null,null],[11,"new","","Creates an empty punctuated sequence.",106,[[],["punctuated",3]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, …",106,[[]]],[11,"len","","Returns the number of syntax tree nodes in this …",106,[[]]],[11,"first","","Borrows the first punctuated pair in this sequence.",106,[[],[["pair",4],["option",4]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",106,[[],[["pair",4],["option",4]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",106,[[],[["option",4],["pair",4]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of …",106,[[],["iter",3]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree …",106,[[],["itermut",3]]],[11,"pairs","","Returns an iterator over the contents of this sequence as …",106,[[],["pairs",3]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as …",106,[[],["pairsmut",3]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as …",106,[[],["intopairs",3]]],[11,"push_value","","Appends a syntax tree node onto the end of this …",106,[[]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this …",106,[[]]],[11,"pop","","Removes the last punctuated pair from this sequence, or …",106,[[],[["option",4],["pair",4]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a …",106,[[]]],[11,"empty_or_trailing","","Returns true if either this <code>Punctuated</code> is empty, or it …",106,[[]]],[11,"push","","Appends a syntax tree node onto the end of this …",106,[[]]],[11,"insert","","Inserts an element at position <code>index</code>.",106,[[]]],[11,"parse_terminated","","Parses zero or more occurrences of <code>T</code> separated by …",106,[[["parsestream",6]],["result",6]]],[11,"parse_terminated_with","","Parses zero or more occurrences of <code>T</code> using the given …",106,[[["parsestream",6]],["result",6]]],[11,"parse_separated_nonempty","","Parses one or more occurrences of <code>T</code> separated by …",106,[[["parsestream",6]],["result",6]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of <code>T</code> using the given parse …",106,[[["parsestream",6]],["result",6]]],[3,"Pairs","","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type …",null,null],[3,"IntoPairs","","An iterator over owned pairs of type <code>Pair<T, P></code>.",null,null],[3,"IntoIter","","An iterator over owned values of type <code>T</code>.",null,null],[3,"Iter","","An iterator over borrowed values of type <code>&T</code>.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type <code>&mut T</code>.",null,null],[4,"Pair","","A single syntax tree node of type <code>T</code> followed by its …",null,null],[13,"Punctuated","","",107,null],[13,"End","","",107,null],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, …",107,[[]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",107,[[]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated …",107,[[]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless …",107,[[],["option",4]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and …",107,[[["option",4]]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree …",107,[[]]],[0,"spanned","syn","A trait that can provide the <code>Span</code> of the complete …",null,null],[8,"Spanned","syn::spanned","A trait that can provide the <code>Span</code> of the complete …",null,null],[10,"span","","Returns a <code>Span</code> covering the complete contents of this …",108,[[],["span",3]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax …",null,null],[8,"Visit","syn::visit","Syntax tree traversal to walk a shared borrow of a syntax …",null,null],[11,"visit_abi","","",109,[[["abi",3]]]],[11,"visit_angle_bracketed_generic_arguments","","",109,[[["anglebracketedgenericarguments",3]]]],[11,"visit_arg_captured","","",109,[[["argcaptured",3]]]],[11,"visit_arg_self","","",109,[[["argself",3]]]],[11,"visit_arg_self_ref","","",109,[[["argselfref",3]]]],[11,"visit_arm","","",109,[[["arm",3]]]],[11,"visit_attr_style","","",109,[[["attrstyle",4]]]],[11,"visit_attribute","","",109,[[["attribute",3]]]],[11,"visit_bare_fn_arg","","",109,[[["barefnarg",3]]]],[11,"visit_bare_fn_arg_name","","",109,[[["barefnargname",4]]]],[11,"visit_bin_op","","",109,[[["binop",4]]]],[11,"visit_binding","","",109,[[["binding",3]]]],[11,"visit_block","","",109,[[["block",3]]]],[11,"visit_bound_lifetimes","","",109,[[["boundlifetimes",3]]]],[11,"visit_const_param","","",109,[[["constparam",3]]]],[11,"visit_constraint","","",109,[[["constraint",3]]]],[11,"visit_data","","",109,[[["data",4]]]],[11,"visit_data_enum","","",109,[[["dataenum",3]]]],[11,"visit_data_struct","","",109,[[["datastruct",3]]]],[11,"visit_data_union","","",109,[[["dataunion",3]]]],[11,"visit_derive_input","","",109,[[["deriveinput",3]]]],[11,"visit_expr","","",109,[[["expr",4]]]],[11,"visit_expr_array","","",109,[[["exprarray",3]]]],[11,"visit_expr_assign","","",109,[[["exprassign",3]]]],[11,"visit_expr_assign_op","","",109,[[["exprassignop",3]]]],[11,"visit_expr_async","","",109,[[["exprasync",3]]]],[11,"visit_expr_binary","","",109,[[["exprbinary",3]]]],[11,"visit_expr_block","","",109,[[["exprblock",3]]]],[11,"visit_expr_box","","",109,[[["exprbox",3]]]],[11,"visit_expr_break","","",109,[[["exprbreak",3]]]],[11,"visit_expr_call","","",109,[[["exprcall",3]]]],[11,"visit_expr_cast","","",109,[[["exprcast",3]]]],[11,"visit_expr_closure","","",109,[[["exprclosure",3]]]],[11,"visit_expr_continue","","",109,[[["exprcontinue",3]]]],[11,"visit_expr_field","","",109,[[["exprfield",3]]]],[11,"visit_expr_for_loop","","",109,[[["exprforloop",3]]]],[11,"visit_expr_group","","",109,[[["exprgroup",3]]]],[11,"visit_expr_if","","",109,[[["exprif",3]]]],[11,"visit_expr_in_place","","",109,[[["exprinplace",3]]]],[11,"visit_expr_index","","",109,[[["exprindex",3]]]],[11,"visit_expr_let","","",109,[[["exprlet",3]]]],[11,"visit_expr_lit","","",109,[[["exprlit",3]]]],[11,"visit_expr_loop","","",109,[[["exprloop",3]]]],[11,"visit_expr_macro","","",109,[[["exprmacro",3]]]],[11,"visit_expr_match","","",109,[[["exprmatch",3]]]],[11,"visit_expr_method_call","","",109,[[["exprmethodcall",3]]]],[11,"visit_expr_paren","","",109,[[["exprparen",3]]]],[11,"visit_expr_path","","",109,[[["exprpath",3]]]],[11,"visit_expr_range","","",109,[[["exprrange",3]]]],[11,"visit_expr_reference","","",109,[[["exprreference",3]]]],[11,"visit_expr_repeat","","",109,[[["exprrepeat",3]]]],[11,"visit_expr_return","","",109,[[["exprreturn",3]]]],[11,"visit_expr_struct","","",109,[[["exprstruct",3]]]],[11,"visit_expr_try","","",109,[[["exprtry",3]]]],[11,"visit_expr_try_block","","",109,[[["exprtryblock",3]]]],[11,"visit_expr_tuple","","",109,[[["exprtuple",3]]]],[11,"visit_expr_type","","",109,[[["exprtype",3]]]],[11,"visit_expr_unary","","",109,[[["exprunary",3]]]],[11,"visit_expr_unsafe","","",109,[[["exprunsafe",3]]]],[11,"visit_expr_verbatim","","",109,[[["exprverbatim",3]]]],[11,"visit_expr_while","","",109,[[["exprwhile",3]]]],[11,"visit_expr_yield","","",109,[[["expryield",3]]]],[11,"visit_field","","",109,[[["field",3]]]],[11,"visit_field_pat","","",109,[[["fieldpat",3]]]],[11,"visit_field_value","","",109,[[["fieldvalue",3]]]],[11,"visit_fields","","",109,[[["fields",4]]]],[11,"visit_fields_named","","",109,[[["fieldsnamed",3]]]],[11,"visit_fields_unnamed","","",109,[[["fieldsunnamed",3]]]],[11,"visit_file","","",109,[[["file",3]]]],[11,"visit_fn_arg","","",109,[[["fnarg",4]]]],[11,"visit_fn_decl","","",109,[[["fndecl",3]]]],[11,"visit_foreign_item","","",109,[[["foreignitem",4]]]],[11,"visit_foreign_item_fn","","",109,[[["foreignitemfn",3]]]],[11,"visit_foreign_item_macro","","",109,[[["foreignitemmacro",3]]]],[11,"visit_foreign_item_static","","",109,[[["foreignitemstatic",3]]]],[11,"visit_foreign_item_type","","",109,[[["foreignitemtype",3]]]],[11,"visit_foreign_item_verbatim","","",109,[[["foreignitemverbatim",3]]]],[11,"visit_generic_argument","","",109,[[["genericargument",4]]]],[11,"visit_generic_method_argument","","",109,[[["genericmethodargument",4]]]],[11,"visit_generic_param","","",109,[[["genericparam",4]]]],[11,"visit_generics","","",109,[[["generics",3]]]],[11,"visit_impl_item","","",109,[[["implitem",4]]]],[11,"visit_impl_item_const","","",109,[[["implitemconst",3]]]],[11,"visit_impl_item_existential","","",109,[[["implitemexistential",3]]]],[11,"visit_impl_item_macro","","",109,[[["implitemmacro",3]]]],[11,"visit_impl_item_method","","",109,[[["implitemmethod",3]]]],[11,"visit_impl_item_type","","",109,[[["implitemtype",3]]]],[11,"visit_impl_item_verbatim","","",109,[[["implitemverbatim",3]]]],[11,"visit_index","","",109,[[["index",3]]]],[11,"visit_item","","",109,[[["item",4]]]],[11,"visit_item_const","","",109,[[["itemconst",3]]]],[11,"visit_item_enum","","",109,[[["itemenum",3]]]],[11,"visit_item_existential","","",109,[[["itemexistential",3]]]],[11,"visit_item_extern_crate","","",109,[[["itemexterncrate",3]]]],[11,"visit_item_fn","","",109,[[["itemfn",3]]]],[11,"visit_item_foreign_mod","","",109,[[["itemforeignmod",3]]]],[11,"visit_item_impl","","",109,[[["itemimpl",3]]]],[11,"visit_item_macro","","",109,[[["itemmacro",3]]]],[11,"visit_item_macro2","","",109,[[["itemmacro2",3]]]],[11,"visit_item_mod","","",109,[[["itemmod",3]]]],[11,"visit_item_static","","",109,[[["itemstatic",3]]]],[11,"visit_item_struct","","",109,[[["itemstruct",3]]]],[11,"visit_item_trait","","",109,[[["itemtrait",3]]]],[11,"visit_item_trait_alias","","",109,[[["itemtraitalias",3]]]],[11,"visit_item_type","","",109,[[["itemtype",3]]]],[11,"visit_item_union","","",109,[[["itemunion",3]]]],[11,"visit_item_use","","",109,[[["itemuse",3]]]],[11,"visit_item_verbatim","","",109,[[["itemverbatim",3]]]],[11,"visit_label","","",109,[[["label",3]]]],[11,"visit_lifetime","","",109,[[["lifetime",3]]]],[11,"visit_lifetime_def","","",109,[[["lifetimedef",3]]]],[11,"visit_lit","","",109,[[["lit",4]]]],[11,"visit_lit_bool","","",109,[[["litbool",3]]]],[11,"visit_lit_byte","","",109,[[["litbyte",3]]]],[11,"visit_lit_byte_str","","",109,[[["litbytestr",3]]]],[11,"visit_lit_char","","",109,[[["litchar",3]]]],[11,"visit_lit_float","","",109,[[["litfloat",3]]]],[11,"visit_lit_int","","",109,[[["litint",3]]]],[11,"visit_lit_str","","",109,[[["litstr",3]]]],[11,"visit_lit_verbatim","","",109,[[["litverbatim",3]]]],[11,"visit_local","","",109,[[["local",3]]]],[11,"visit_macro","","",109,[[["macro",3]]]],[11,"visit_macro_delimiter","","",109,[[["macrodelimiter",4]]]],[11,"visit_member","","",109,[[["member",4]]]],[11,"visit_meta","","",109,[[["meta",4]]]],[11,"visit_meta_list","","",109,[[["metalist",3]]]],[11,"visit_meta_name_value","","",109,[[["metanamevalue",3]]]],[11,"visit_method_sig","","",109,[[["methodsig",3]]]],[11,"visit_method_turbofish","","",109,[[["methodturbofish",3]]]],[11,"visit_nested_meta","","",109,[[["nestedmeta",4]]]],[11,"visit_parenthesized_generic_arguments","","",109,[[["parenthesizedgenericarguments",3]]]],[11,"visit_pat","","",109,[[["pat",4]]]],[11,"visit_pat_box","","",109,[[["patbox",3]]]],[11,"visit_pat_ident","","",109,[[["patident",3]]]],[11,"visit_pat_lit","","",109,[[["patlit",3]]]],[11,"visit_pat_macro","","",109,[[["patmacro",3]]]],[11,"visit_pat_path","","",109,[[["patpath",3]]]],[11,"visit_pat_range","","",109,[[["patrange",3]]]],[11,"visit_pat_ref","","",109,[[["patref",3]]]],[11,"visit_pat_slice","","",109,[[["patslice",3]]]],[11,"visit_pat_struct","","",109,[[["patstruct",3]]]],[11,"visit_pat_tuple","","",109,[[["pattuple",3]]]],[11,"visit_pat_tuple_struct","","",109,[[["pattuplestruct",3]]]],[11,"visit_pat_verbatim","","",109,[[["patverbatim",3]]]],[11,"visit_pat_wild","","",109,[[["patwild",3]]]],[11,"visit_path","","",109,[[["path",3]]]],[11,"visit_path_arguments","","",109,[[["patharguments",4]]]],[11,"visit_path_segment","","",109,[[["pathsegment",3]]]],[11,"visit_predicate_eq","","",109,[[["predicateeq",3]]]],[11,"visit_predicate_lifetime","","",109,[[["predicatelifetime",3]]]],[11,"visit_predicate_type","","",109,[[["predicatetype",3]]]],[11,"visit_qself","","",109,[[["qself",3]]]],[11,"visit_range_limits","","",109,[[["rangelimits",4]]]],[11,"visit_return_type","","",109,[[["returntype",4]]]],[11,"visit_stmt","","",109,[[["stmt",4]]]],[11,"visit_trait_bound","","",109,[[["traitbound",3]]]],[11,"visit_trait_bound_modifier","","",109,[[["traitboundmodifier",4]]]],[11,"visit_trait_item","","",109,[[["traititem",4]]]],[11,"visit_trait_item_const","","",109,[[["traititemconst",3]]]],[11,"visit_trait_item_macro","","",109,[[["traititemmacro",3]]]],[11,"visit_trait_item_method","","",109,[[["traititemmethod",3]]]],[11,"visit_trait_item_type","","",109,[[["traititemtype",3]]]],[11,"visit_trait_item_verbatim","","",109,[[["traititemverbatim",3]]]],[11,"visit_type","","",109,[[["type",4]]]],[11,"visit_type_array","","",109,[[["typearray",3]]]],[11,"visit_type_bare_fn","","",109,[[["typebarefn",3]]]],[11,"visit_type_group","","",109,[[["typegroup",3]]]],[11,"visit_type_impl_trait","","",109,[[["typeimpltrait",3]]]],[11,"visit_type_infer","","",109,[[["typeinfer",3]]]],[11,"visit_type_macro","","",109,[[["typemacro",3]]]],[11,"visit_type_never","","",109,[[["typenever",3]]]],[11,"visit_type_param","","",109,[[["typeparam",3]]]],[11,"visit_type_param_bound","","",109,[[["typeparambound",4]]]],[11,"visit_type_paren","","",109,[[["typeparen",3]]]],[11,"visit_type_path","","",109,[[["typepath",3]]]],[11,"visit_type_ptr","","",109,[[["typeptr",3]]]],[11,"visit_type_reference","","",109,[[["typereference",3]]]],[11,"visit_type_slice","","",109,[[["typeslice",3]]]],[11,"visit_type_trait_object","","",109,[[["typetraitobject",3]]]],[11,"visit_type_tuple","","",109,[[["typetuple",3]]]],[11,"visit_type_verbatim","","",109,[[["typeverbatim",3]]]],[11,"visit_un_op","","",109,[[["unop",4]]]],[11,"visit_use_glob","","",109,[[["useglob",3]]]],[11,"visit_use_group","","",109,[[["usegroup",3]]]],[11,"visit_use_name","","",109,[[["usename",3]]]],[11,"visit_use_path","","",109,[[["usepath",3]]]],[11,"visit_use_rename","","",109,[[["userename",3]]]],[11,"visit_use_tree","","",109,[[["usetree",4]]]],[11,"visit_variant","","",109,[[["variant",3]]]],[11,"visit_vis_crate","","",109,[[["viscrate",3]]]],[11,"visit_vis_public","","",109,[[["vispublic",3]]]],[11,"visit_vis_restricted","","",109,[[["visrestricted",3]]]],[11,"visit_visibility","","",109,[[["visibility",4]]]],[11,"visit_where_clause","","",109,[[["whereclause",3]]]],[11,"visit_where_predicate","","",109,[[["wherepredicate",4]]]],[11,"visit_span","","",109,[[["span",3]]]],[11,"visit_ident","","",109,[[["ident",3]]]],[5,"visit_abi","","",null,[[["abi",3]]]],[5,"visit_angle_bracketed_generic_arguments","","",null,[[["anglebracketedgenericarguments",3]]]],[5,"visit_arg_captured","","",null,[[["argcaptured",3]]]],[5,"visit_arg_self","","",null,[[["argself",3]]]],[5,"visit_arg_self_ref","","",null,[[["argselfref",3]]]],[5,"visit_arm","","",null,[[["arm",3]]]],[5,"visit_attr_style","","",null,[[["attrstyle",4]]]],[5,"visit_attribute","","",null,[[["attribute",3]]]],[5,"visit_bare_fn_arg","","",null,[[["barefnarg",3]]]],[5,"visit_bare_fn_arg_name","","",null,[[["barefnargname",4]]]],[5,"visit_bin_op","","",null,[[["binop",4]]]],[5,"visit_binding","","",null,[[["binding",3]]]],[5,"visit_block","","",null,[[["block",3]]]],[5,"visit_bound_lifetimes","","",null,[[["boundlifetimes",3]]]],[5,"visit_const_param","","",null,[[["constparam",3]]]],[5,"visit_constraint","","",null,[[["constraint",3]]]],[5,"visit_data","","",null,[[["data",4]]]],[5,"visit_data_enum","","",null,[[["dataenum",3]]]],[5,"visit_data_struct","","",null,[[["datastruct",3]]]],[5,"visit_data_union","","",null,[[["dataunion",3]]]],[5,"visit_derive_input","","",null,[[["deriveinput",3]]]],[5,"visit_expr","","",null,[[["expr",4]]]],[5,"visit_expr_array","","",null,[[["exprarray",3]]]],[5,"visit_expr_assign","","",null,[[["exprassign",3]]]],[5,"visit_expr_assign_op","","",null,[[["exprassignop",3]]]],[5,"visit_expr_async","","",null,[[["exprasync",3]]]],[5,"visit_expr_binary","","",null,[[["exprbinary",3]]]],[5,"visit_expr_block","","",null,[[["exprblock",3]]]],[5,"visit_expr_box","","",null,[[["exprbox",3]]]],[5,"visit_expr_break","","",null,[[["exprbreak",3]]]],[5,"visit_expr_call","","",null,[[["exprcall",3]]]],[5,"visit_expr_cast","","",null,[[["exprcast",3]]]],[5,"visit_expr_closure","","",null,[[["exprclosure",3]]]],[5,"visit_expr_continue","","",null,[[["exprcontinue",3]]]],[5,"visit_expr_field","","",null,[[["exprfield",3]]]],[5,"visit_expr_for_loop","","",null,[[["exprforloop",3]]]],[5,"visit_expr_group","","",null,[[["exprgroup",3]]]],[5,"visit_expr_if","","",null,[[["exprif",3]]]],[5,"visit_expr_in_place","","",null,[[["exprinplace",3]]]],[5,"visit_expr_index","","",null,[[["exprindex",3]]]],[5,"visit_expr_let","","",null,[[["exprlet",3]]]],[5,"visit_expr_lit","","",null,[[["exprlit",3]]]],[5,"visit_expr_loop","","",null,[[["exprloop",3]]]],[5,"visit_expr_macro","","",null,[[["exprmacro",3]]]],[5,"visit_expr_match","","",null,[[["exprmatch",3]]]],[5,"visit_expr_method_call","","",null,[[["exprmethodcall",3]]]],[5,"visit_expr_paren","","",null,[[["exprparen",3]]]],[5,"visit_expr_path","","",null,[[["exprpath",3]]]],[5,"visit_expr_range","","",null,[[["exprrange",3]]]],[5,"visit_expr_reference","","",null,[[["exprreference",3]]]],[5,"visit_expr_repeat","","",null,[[["exprrepeat",3]]]],[5,"visit_expr_return","","",null,[[["exprreturn",3]]]],[5,"visit_expr_struct","","",null,[[["exprstruct",3]]]],[5,"visit_expr_try","","",null,[[["exprtry",3]]]],[5,"visit_expr_try_block","","",null,[[["exprtryblock",3]]]],[5,"visit_expr_tuple","","",null,[[["exprtuple",3]]]],[5,"visit_expr_type","","",null,[[["exprtype",3]]]],[5,"visit_expr_unary","","",null,[[["exprunary",3]]]],[5,"visit_expr_unsafe","","",null,[[["exprunsafe",3]]]],[5,"visit_expr_verbatim","","",null,[[["exprverbatim",3]]]],[5,"visit_expr_while","","",null,[[["exprwhile",3]]]],[5,"visit_expr_yield","","",null,[[["expryield",3]]]],[5,"visit_field","","",null,[[["field",3]]]],[5,"visit_field_pat","","",null,[[["fieldpat",3]]]],[5,"visit_field_value","","",null,[[["fieldvalue",3]]]],[5,"visit_fields","","",null,[[["fields",4]]]],[5,"visit_fields_named","","",null,[[["fieldsnamed",3]]]],[5,"visit_fields_unnamed","","",null,[[["fieldsunnamed",3]]]],[5,"visit_file","","",null,[[["file",3]]]],[5,"visit_fn_arg","","",null,[[["fnarg",4]]]],[5,"visit_fn_decl","","",null,[[["fndecl",3]]]],[5,"visit_foreign_item","","",null,[[["foreignitem",4]]]],[5,"visit_foreign_item_fn","","",null,[[["foreignitemfn",3]]]],[5,"visit_foreign_item_macro","","",null,[[["foreignitemmacro",3]]]],[5,"visit_foreign_item_static","","",null,[[["foreignitemstatic",3]]]],[5,"visit_foreign_item_type","","",null,[[["foreignitemtype",3]]]],[5,"visit_foreign_item_verbatim","","",null,[[["foreignitemverbatim",3]]]],[5,"visit_generic_argument","","",null,[[["genericargument",4]]]],[5,"visit_generic_method_argument","","",null,[[["genericmethodargument",4]]]],[5,"visit_generic_param","","",null,[[["genericparam",4]]]],[5,"visit_generics","","",null,[[["generics",3]]]],[5,"visit_impl_item","","",null,[[["implitem",4]]]],[5,"visit_impl_item_const","","",null,[[["implitemconst",3]]]],[5,"visit_impl_item_existential","","",null,[[["implitemexistential",3]]]],[5,"visit_impl_item_macro","","",null,[[["implitemmacro",3]]]],[5,"visit_impl_item_method","","",null,[[["implitemmethod",3]]]],[5,"visit_impl_item_type","","",null,[[["implitemtype",3]]]],[5,"visit_impl_item_verbatim","","",null,[[["implitemverbatim",3]]]],[5,"visit_index","","",null,[[["index",3]]]],[5,"visit_item","","",null,[[["item",4]]]],[5,"visit_item_const","","",null,[[["itemconst",3]]]],[5,"visit_item_enum","","",null,[[["itemenum",3]]]],[5,"visit_item_existential","","",null,[[["itemexistential",3]]]],[5,"visit_item_extern_crate","","",null,[[["itemexterncrate",3]]]],[5,"visit_item_fn","","",null,[[["itemfn",3]]]],[5,"visit_item_foreign_mod","","",null,[[["itemforeignmod",3]]]],[5,"visit_item_impl","","",null,[[["itemimpl",3]]]],[5,"visit_item_macro","","",null,[[["itemmacro",3]]]],[5,"visit_item_macro2","","",null,[[["itemmacro2",3]]]],[5,"visit_item_mod","","",null,[[["itemmod",3]]]],[5,"visit_item_static","","",null,[[["itemstatic",3]]]],[5,"visit_item_struct","","",null,[[["itemstruct",3]]]],[5,"visit_item_trait","","",null,[[["itemtrait",3]]]],[5,"visit_item_trait_alias","","",null,[[["itemtraitalias",3]]]],[5,"visit_item_type","","",null,[[["itemtype",3]]]],[5,"visit_item_union","","",null,[[["itemunion",3]]]],[5,"visit_item_use","","",null,[[["itemuse",3]]]],[5,"visit_item_verbatim","","",null,[[["itemverbatim",3]]]],[5,"visit_label","","",null,[[["label",3]]]],[5,"visit_lifetime","","",null,[[["lifetime",3]]]],[5,"visit_lifetime_def","","",null,[[["lifetimedef",3]]]],[5,"visit_lit","","",null,[[["lit",4]]]],[5,"visit_lit_bool","","",null,[[["litbool",3]]]],[5,"visit_lit_byte","","",null,[[["litbyte",3]]]],[5,"visit_lit_byte_str","","",null,[[["litbytestr",3]]]],[5,"visit_lit_char","","",null,[[["litchar",3]]]],[5,"visit_lit_float","","",null,[[["litfloat",3]]]],[5,"visit_lit_int","","",null,[[["litint",3]]]],[5,"visit_lit_str","","",null,[[["litstr",3]]]],[5,"visit_lit_verbatim","","",null,[[["litverbatim",3]]]],[5,"visit_local","","",null,[[["local",3]]]],[5,"visit_macro","","",null,[[["macro",3]]]],[5,"visit_macro_delimiter","","",null,[[["macrodelimiter",4]]]],[5,"visit_member","","",null,[[["member",4]]]],[5,"visit_meta","","",null,[[["meta",4]]]],[5,"visit_meta_list","","",null,[[["metalist",3]]]],[5,"visit_meta_name_value","","",null,[[["metanamevalue",3]]]],[5,"visit_method_sig","","",null,[[["methodsig",3]]]],[5,"visit_method_turbofish","","",null,[[["methodturbofish",3]]]],[5,"visit_nested_meta","","",null,[[["nestedmeta",4]]]],[5,"visit_parenthesized_generic_arguments","","",null,[[["parenthesizedgenericarguments",3]]]],[5,"visit_pat","","",null,[[["pat",4]]]],[5,"visit_pat_box","","",null,[[["patbox",3]]]],[5,"visit_pat_ident","","",null,[[["patident",3]]]],[5,"visit_pat_lit","","",null,[[["patlit",3]]]],[5,"visit_pat_macro","","",null,[[["patmacro",3]]]],[5,"visit_pat_path","","",null,[[["patpath",3]]]],[5,"visit_pat_range","","",null,[[["patrange",3]]]],[5,"visit_pat_ref","","",null,[[["patref",3]]]],[5,"visit_pat_slice","","",null,[[["patslice",3]]]],[5,"visit_pat_struct","","",null,[[["patstruct",3]]]],[5,"visit_pat_tuple","","",null,[[["pattuple",3]]]],[5,"visit_pat_tuple_struct","","",null,[[["pattuplestruct",3]]]],[5,"visit_pat_verbatim","","",null,[[["patverbatim",3]]]],[5,"visit_pat_wild","","",null,[[["patwild",3]]]],[5,"visit_path","","",null,[[["path",3]]]],[5,"visit_path_arguments","","",null,[[["patharguments",4]]]],[5,"visit_path_segment","","",null,[[["pathsegment",3]]]],[5,"visit_predicate_eq","","",null,[[["predicateeq",3]]]],[5,"visit_predicate_lifetime","","",null,[[["predicatelifetime",3]]]],[5,"visit_predicate_type","","",null,[[["predicatetype",3]]]],[5,"visit_qself","","",null,[[["qself",3]]]],[5,"visit_range_limits","","",null,[[["rangelimits",4]]]],[5,"visit_return_type","","",null,[[["returntype",4]]]],[5,"visit_stmt","","",null,[[["stmt",4]]]],[5,"visit_trait_bound","","",null,[[["traitbound",3]]]],[5,"visit_trait_bound_modifier","","",null,[[["traitboundmodifier",4]]]],[5,"visit_trait_item","","",null,[[["traititem",4]]]],[5,"visit_trait_item_const","","",null,[[["traititemconst",3]]]],[5,"visit_trait_item_macro","","",null,[[["traititemmacro",3]]]],[5,"visit_trait_item_method","","",null,[[["traititemmethod",3]]]],[5,"visit_trait_item_type","","",null,[[["traititemtype",3]]]],[5,"visit_trait_item_verbatim","","",null,[[["traititemverbatim",3]]]],[5,"visit_type","","",null,[[["type",4]]]],[5,"visit_type_array","","",null,[[["typearray",3]]]],[5,"visit_type_bare_fn","","",null,[[["typebarefn",3]]]],[5,"visit_type_group","","",null,[[["typegroup",3]]]],[5,"visit_type_impl_trait","","",null,[[["typeimpltrait",3]]]],[5,"visit_type_infer","","",null,[[["typeinfer",3]]]],[5,"visit_type_macro","","",null,[[["typemacro",3]]]],[5,"visit_type_never","","",null,[[["typenever",3]]]],[5,"visit_type_param","","",null,[[["typeparam",3]]]],[5,"visit_type_param_bound","","",null,[[["typeparambound",4]]]],[5,"visit_type_paren","","",null,[[["typeparen",3]]]],[5,"visit_type_path","","",null,[[["typepath",3]]]],[5,"visit_type_ptr","","",null,[[["typeptr",3]]]],[5,"visit_type_reference","","",null,[[["typereference",3]]]],[5,"visit_type_slice","","",null,[[["typeslice",3]]]],[5,"visit_type_trait_object","","",null,[[["typetraitobject",3]]]],[5,"visit_type_tuple","","",null,[[["typetuple",3]]]],[5,"visit_type_verbatim","","",null,[[["typeverbatim",3]]]],[5,"visit_un_op","","",null,[[["unop",4]]]],[5,"visit_use_glob","","",null,[[["useglob",3]]]],[5,"visit_use_group","","",null,[[["usegroup",3]]]],[5,"visit_use_name","","",null,[[["usename",3]]]],[5,"visit_use_path","","",null,[[["usepath",3]]]],[5,"visit_use_rename","","",null,[[["userename",3]]]],[5,"visit_use_tree","","",null,[[["usetree",4]]]],[5,"visit_variant","","",null,[[["variant",3]]]],[5,"visit_vis_crate","","",null,[[["viscrate",3]]]],[5,"visit_vis_public","","",null,[[["vispublic",3]]]],[5,"visit_vis_restricted","","",null,[[["visrestricted",3]]]],[5,"visit_visibility","","",null,[[["visibility",4]]]],[5,"visit_where_clause","","",null,[[["whereclause",3]]]],[5,"visit_where_predicate","","",null,[[["wherepredicate",4]]]],[5,"visit_span","","",null,[[["span",3]]]],[5,"visit_ident","","",null,[[["ident",3]]]],[0,"parse","syn","Parsing interface for parsing a token stream into a …",null,null],[0,"discouraged","syn::parse","Extensions to the parsing API with niche applicability.",null,null],[8,"Speculative","syn::parse::discouraged","Extensions to the <code>ParseStream</code> API to support speculative …",null,null],[10,"advance_to","","Advance this parse stream to the position of a forked …",110,[[]]],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input …",null,null],[6,"Result","","The result of a Syn parser.",null,null],[3,"Lookahead1","","Support for checking the next token in a stream to decide …",null,null],[8,"Peek","","Types that can be parsed by looking at just one token.",null,null],[8,"Parse","","Parsing interface implemented by all types that can be …",null,null],[10,"parse","","",111,[[["parsestream",6]],["result",6]]],[6,"ParseStream","","Input to a Syn parser function.",null,null],[3,"ParseBuffer","","Cursor position within a buffered token stream.",null,null],[3,"StepCursor","","Cursor state associated with speculative parsing.",null,null],[11,"error","","Triggers an error at the current position of the parse …",112,[[["display",8]],["error",3]]],[11,"parse","","Parses a syntax tree node of type <code>T</code>, advancing the …",113,[[],[["result",6],["parse",8]]]],[11,"call","","Calls the given parser function to parse a syntax tree …",113,[[],["result",6]]],[11,"peek","","Looks at the next token in the parse stream to determine …",113,[[["peek",8]]]],[11,"peek2","","Looks at the second-next token in the parse stream.",113,[[["peek",8]]]],[11,"peek3","","Looks at the third-next token in the parse stream.",113,[[["peek",8]]]],[11,"parse_terminated","","Parses zero or more occurrences of <code>T</code> separated by …",113,[[],[["punctuated",3],["result",6]]]],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",113,[[]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this …",113,[[],["lookahead1",3]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either …",113,[[]]],[11,"error","","Triggers an error at the current position of the parse …",113,[[["display",8]],["error",3]]],[11,"step","","Speculatively parses tokens from this parse stream, …",113,[[],["result",6]]],[11,"cursor","","Provides low-level access to the token representation …",113,[[],["cursor",3]]],[8,"Parser","","Parser that can parse Rust tokens into a particular …",null,null],[16,"Output","","",114,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax …",114,[[["tokenstream",3]],["result",6]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree …",114,[[["tokenstream",3]],["result",6]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree …",114,[[],["result",6]]],[11,"new","","Usually the <code>ParseStream::error</code> method will be used …",115,[[["display",8],["span",3]]]],[11,"new_spanned","","Creates an error with the specified message spanning the …",115,[[["totokens",8],["display",8]]]],[11,"span","","The source location of the error.",115,[[],["span",3]]],[11,"to_compile_error","","Render the error as an invocation of <code>compile_error!</code>.",115,[[],["tokenstream",3]]],[4,"AttrStyle","syn","Distinguishes between attributes that decorate an item …",null,null],[13,"Outer","","",116,null],[13,"Inner","","",116,null],[3,"Attribute","","An attribute like <code>#[repr(transparent)]</code>.",null,null],[12,"pound_token","","",117,null],[12,"style","","",117,null],[12,"bracket_token","","",117,null],[12,"path","","",117,null],[12,"tts","","",117,null],[6,"AttributeArgs","","Conventional argument type associated with an invocation …",null,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",118,null],[13,"List","","A structured list within an attribute, like …",118,null],[13,"NameValue","","A name-value pair within an attribute, like …",118,null],[3,"MetaList","","A structured list within an attribute, like …",null,null],[12,"ident","","",119,null],[12,"paren_token","","",119,null],[12,"nested","","",119,null],[3,"MetaNameValue","","A name-value pair within an attribute, like …",null,null],[12,"ident","","",120,null],[12,"eq_token","","",120,null],[12,"lit","","",120,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …",121,null],[13,"Literal","","A Rust literal, like the <code>\\\"new_name\\\"</code> in …",121,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",122,null],[12,"vis","","Visibility of the field.",122,null],[12,"ident","","Name of the field, if any.",122,null],[12,"colon_token","","",122,null],[12,"ty","","Type of the field.",122,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as …",123,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as …",123,null],[13,"Unit","","Unit struct or unit variant such as <code>None</code>.",123,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as …",null,null],[12,"brace_token","","",124,null],[12,"named","","",124,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as …",null,null],[12,"paren_token","","",125,null],[12,"unnamed","","",125,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",126,null],[12,"ident","","Name of the variant.",126,null],[12,"fields","","Content stored in the variant.",126,null],[12,"discriminant","","Explicit discriminant: <code>Variant = 1</code>",126,null],[3,"VisCrate","","A crate-level visibility: <code>crate</code>.",null,null],[12,"crate_token","","",127,null],[3,"VisPublic","","A public visibility level: <code>pub</code>.",null,null],[12,"pub_token","","",128,null],[3,"VisRestricted","","A visibility level restricted to some path: <code>pub(self)</code> or …",null,null],[12,"pub_token","","",129,null],[12,"paren_token","","",129,null],[12,"in_token","","",129,null],[12,"path","","",129,null],[4,"Visibility","","The visibility level of an item: inherited or <code>pub</code> or …",null,null],[13,"Public","","A public visibility level: <code>pub</code>.",130,null],[13,"Crate","","A crate-level visibility: <code>crate</code>.",130,null],[13,"Restricted","","A visibility level restricted to some path: <code>pub(self)</code> or …",130,null],[13,"Inherited","","An inherited visibility, which usually means private.",130,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: <code>box f</code>.",131,null],[13,"InPlace","","A placement expression: <code>place <- value</code>.",131,null],[13,"Array","","A slice literal expression: <code>[a, b, c, d]</code>.",131,null],[13,"Call","","A function call expression: <code>invoke(a, b)</code>.",131,null],[13,"MethodCall","","A method call expression: <code>x.foo::<T>(a, b)</code>.",131,null],[13,"Tuple","","A tuple expression: <code>(a, b, c, d)</code>.",131,null],[13,"Binary","","A binary operation: <code>a + b</code>, <code>a * b</code>.",131,null],[13,"Unary","","A unary operation: <code>!x</code>, <code>*x</code>.",131,null],[13,"Lit","","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.",131,null],[13,"Cast","","A cast expression: <code>foo as f64</code>.",131,null],[13,"Type","","A type ascription expression: <code>foo: f64</code>.",131,null],[13,"Let","","A <code>let</code> guard: <code>let Some(x) = opt</code>.",131,null],[13,"If","","An <code>if</code> expression with an optional <code>else</code> block: …",131,null],[13,"While","","A while loop: <code>while expr { ... }</code>.",131,null],[13,"ForLoop","","A for loop: <code>for pat in expr { ... }</code>.",131,null],[13,"Loop","","Conditionless loop: <code>loop { ... }</code>.",131,null],[13,"Match","","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.",131,null],[13,"Closure","","A closure expression: <code>|a, b| a + b</code>.",131,null],[13,"Unsafe","","An unsafe block: <code>unsafe { ... }</code>.",131,null],[13,"Block","","A blocked scope: <code>{ ... }</code>.",131,null],[13,"Assign","","An assignment expression: <code>a = compute()</code>.",131,null],[13,"AssignOp","","A compound assignment expression: <code>counter += 1</code>.",131,null],[13,"Field","","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …",131,null],[13,"Index","","A square bracketed indexing expression: <code>vector[2]</code>.",131,null],[13,"Range","","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.",131,null],[13,"Path","","A path like <code>std::mem::replace</code> possibly containing generic …",131,null],[13,"Reference","","A referencing operation: <code>&a</code> or <code>&mut a</code>.",131,null],[13,"Break","","A <code>break</code>, with an optional label to break and an optional …",131,null],[13,"Continue","","A <code>continue</code>, with an optional label.",131,null],[13,"Return","","A <code>return</code>, with an optional value to be returned.",131,null],[13,"Macro","","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.",131,null],[13,"Struct","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.",131,null],[13,"Repeat","","An array literal constructed from one repeated element: …",131,null],[13,"Paren","","A parenthesized expression: <code>(a + b)</code>.",131,null],[13,"Group","","An expression contained within invisible delimiters.",131,null],[13,"Try","","A try-expression: <code>expr?</code>.",131,null],[13,"Async","","An async block: <code>async { ... }</code>.",131,null],[13,"TryBlock","","A try block: <code>try { ... }</code>.",131,null],[13,"Yield","","A yield expression: <code>yield expr</code>.",131,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",131,null],[3,"ExprArray","","A slice literal expression: <code>[a, b, c, d]</code>.",null,null],[12,"attrs","","",132,null],[12,"bracket_token","","",132,null],[12,"elems","","",132,null],[3,"ExprAssign","","An assignment expression: <code>a = compute()</code>.",null,null],[12,"attrs","","",133,null],[12,"left","","",133,null],[12,"eq_token","","",133,null],[12,"right","","",133,null],[3,"ExprAssignOp","","A compound assignment expression: <code>counter += 1</code>.",null,null],[12,"attrs","","",134,null],[12,"left","","",134,null],[12,"op","","",134,null],[12,"right","","",134,null],[3,"ExprAsync","","An async block: <code>async { ... }</code>.",null,null],[12,"attrs","","",135,null],[12,"async_token","","",135,null],[12,"capture","","",135,null],[12,"block","","",135,null],[3,"ExprBinary","","A binary operation: <code>a + b</code>, <code>a * b</code>.",null,null],[12,"attrs","","",136,null],[12,"left","","",136,null],[12,"op","","",136,null],[12,"right","","",136,null],[3,"ExprBlock","","A blocked scope: <code>{ ... }</code>.",null,null],[12,"attrs","","",137,null],[12,"label","","",137,null],[12,"block","","",137,null],[3,"ExprBox","","A box expression: <code>box f</code>.",null,null],[12,"attrs","","",138,null],[12,"box_token","","",138,null],[12,"expr","","",138,null],[3,"ExprBreak","","A <code>break</code>, with an optional label to break and an optional …",null,null],[12,"attrs","","",139,null],[12,"break_token","","",139,null],[12,"label","","",139,null],[12,"expr","","",139,null],[3,"ExprCall","","A function call expression: <code>invoke(a, b)</code>.",null,null],[12,"attrs","","",140,null],[12,"func","","",140,null],[12,"paren_token","","",140,null],[12,"args","","",140,null],[3,"ExprCast","","A cast expression: <code>foo as f64</code>.",null,null],[12,"attrs","","",141,null],[12,"expr","","",141,null],[12,"as_token","","",141,null],[12,"ty","","",141,null],[3,"ExprClosure","","A closure expression: <code>|a, b| a + b</code>.",null,null],[12,"attrs","","",142,null],[12,"asyncness","","",142,null],[12,"movability","","",142,null],[12,"capture","","",142,null],[12,"or1_token","","",142,null],[12,"inputs","","",142,null],[12,"or2_token","","",142,null],[12,"output","","",142,null],[12,"body","","",142,null],[3,"ExprContinue","","A <code>continue</code>, with an optional label.",null,null],[12,"attrs","","",143,null],[12,"continue_token","","",143,null],[12,"label","","",143,null],[3,"ExprField","","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …",null,null],[12,"attrs","","",144,null],[12,"base","","",144,null],[12,"dot_token","","",144,null],[12,"member","","",144,null],[3,"ExprForLoop","","A for loop: <code>for pat in expr { ... }</code>.",null,null],[12,"attrs","","",145,null],[12,"label","","",145,null],[12,"for_token","","",145,null],[12,"pat","","",145,null],[12,"in_token","","",145,null],[12,"expr","","",145,null],[12,"body","","",145,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",146,null],[12,"group_token","","",146,null],[12,"expr","","",146,null],[3,"ExprIf","","An <code>if</code> expression with an optional <code>else</code> block: …",null,null],[12,"attrs","","",147,null],[12,"if_token","","",147,null],[12,"cond","","",147,null],[12,"then_branch","","",147,null],[12,"else_branch","","",147,null],[3,"ExprInPlace","","A placement expression: <code>place <- value</code>.",null,null],[12,"attrs","","",148,null],[12,"place","","",148,null],[12,"arrow_token","","",148,null],[12,"value","","",148,null],[3,"ExprIndex","","A square bracketed indexing expression: <code>vector[2]</code>.",null,null],[12,"attrs","","",149,null],[12,"expr","","",149,null],[12,"bracket_token","","",149,null],[12,"index","","",149,null],[3,"ExprLet","","A <code>let</code> guard: <code>let Some(x) = opt</code>.",null,null],[12,"attrs","","",150,null],[12,"let_token","","",150,null],[12,"pats","","",150,null],[12,"eq_token","","",150,null],[12,"expr","","",150,null],[3,"ExprLit","","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.",null,null],[12,"attrs","","",151,null],[12,"lit","","",151,null],[3,"ExprLoop","","Conditionless loop: <code>loop { ... }</code>.",null,null],[12,"attrs","","",152,null],[12,"label","","",152,null],[12,"loop_token","","",152,null],[12,"body","","",152,null],[3,"ExprMacro","","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.",null,null],[12,"attrs","","",153,null],[12,"mac","","",153,null],[3,"ExprMatch","","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.",null,null],[12,"attrs","","",154,null],[12,"match_token","","",154,null],[12,"expr","","",154,null],[12,"brace_token","","",154,null],[12,"arms","","",154,null],[3,"ExprMethodCall","","A method call expression: <code>x.foo::<T>(a, b)</code>.",null,null],[12,"attrs","","",155,null],[12,"receiver","","",155,null],[12,"dot_token","","",155,null],[12,"method","","",155,null],[12,"turbofish","","",155,null],[12,"paren_token","","",155,null],[12,"args","","",155,null],[3,"ExprParen","","A parenthesized expression: <code>(a + b)</code>.",null,null],[12,"attrs","","",156,null],[12,"paren_token","","",156,null],[12,"expr","","",156,null],[3,"ExprPath","","A path like <code>std::mem::replace</code> possibly containing generic …",null,null],[12,"attrs","","",157,null],[12,"qself","","",157,null],[12,"path","","",157,null],[3,"ExprRange","","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.",null,null],[12,"attrs","","",158,null],[12,"from","","",158,null],[12,"limits","","",158,null],[12,"to","","",158,null],[3,"ExprReference","","A referencing operation: <code>&a</code> or <code>&mut a</code>.",null,null],[12,"attrs","","",159,null],[12,"and_token","","",159,null],[12,"mutability","","",159,null],[12,"expr","","",159,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: …",null,null],[12,"attrs","","",160,null],[12,"bracket_token","","",160,null],[12,"expr","","",160,null],[12,"semi_token","","",160,null],[12,"len","","",160,null],[3,"ExprReturn","","A <code>return</code>, with an optional value to be returned.",null,null],[12,"attrs","","",161,null],[12,"return_token","","",161,null],[12,"expr","","",161,null],[3,"ExprStruct","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.",null,null],[12,"attrs","","",162,null],[12,"path","","",162,null],[12,"brace_token","","",162,null],[12,"fields","","",162,null],[12,"dot2_token","","",162,null],[12,"rest","","",162,null],[3,"ExprTry","","A try-expression: <code>expr?</code>.",null,null],[12,"attrs","","",163,null],[12,"expr","","",163,null],[12,"question_token","","",163,null],[3,"ExprTryBlock","","A try block: <code>try { ... }</code>.",null,null],[12,"attrs","","",164,null],[12,"try_token","","",164,null],[12,"block","","",164,null],[3,"ExprTuple","","A tuple expression: <code>(a, b, c, d)</code>.",null,null],[12,"attrs","","",165,null],[12,"paren_token","","",165,null],[12,"elems","","",165,null],[3,"ExprType","","A type ascription expression: <code>foo: f64</code>.",null,null],[12,"attrs","","",166,null],[12,"expr","","",166,null],[12,"colon_token","","",166,null],[12,"ty","","",166,null],[3,"ExprUnary","","A unary operation: <code>!x</code>, <code>*x</code>.",null,null],[12,"attrs","","",167,null],[12,"op","","",167,null],[12,"expr","","",167,null],[3,"ExprUnsafe","","An unsafe block: <code>unsafe { ... }</code>.",null,null],[12,"attrs","","",168,null],[12,"unsafe_token","","",168,null],[12,"block","","",168,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",169,null],[3,"ExprWhile","","A while loop: <code>while expr { ... }</code>.",null,null],[12,"attrs","","",170,null],[12,"label","","",170,null],[12,"while_token","","",170,null],[12,"cond","","",170,null],[12,"body","","",170,null],[3,"ExprYield","","A yield expression: <code>yield expr</code>.",null,null],[12,"attrs","","",171,null],[12,"yield_token","","",171,null],[12,"expr","","",171,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",172,null],[12,"span","","",172,null],[4,"Member","","A struct or tuple struct field accessed in a struct …",null,null],[13,"Named","","A named field like <code>self.x</code>.",173,null],[13,"Unnamed","","An unnamed field like <code>self.0</code>.",173,null],[3,"Arm","","One arm of a <code>match</code> expression: <code>0...10 => { return true; }</code>.",null,null],[12,"attrs","","",174,null],[12,"leading_vert","","",174,null],[12,"pats","","",174,null],[12,"guard","","",174,null],[12,"fat_arrow_token","","",174,null],[12,"body","","",174,null],[12,"comma","","",174,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",175,null],[12,"stmts","","Statements in a block",175,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",176,null],[12,"member","","",176,null],[12,"colon_token","","",176,null],[12,"pat","","",176,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",177,null],[12,"member","","Name or index of the field.",177,null],[12,"colon_token","","The colon in <code>Struct { x: x }</code>. If written in shorthand like…",177,null],[12,"expr","","Value of the field.",177,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like <code>T</code>.",null,null],[13,"Type","","A type argument.",178,null],[13,"Const","","A const expression. Must be inside of a block.",178,null],[3,"Label","","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.",null,null],[12,"name","","",179,null],[12,"colon_token","","",179,null],[3,"Local","","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.",null,null],[12,"attrs","","",180,null],[12,"let_token","","",180,null],[12,"pats","","",180,null],[12,"ty","","",180,null],[12,"init","","",180,null],[12,"semi_token","","",180,null],[3,"MethodTurbofish","","The <code>::<></code> explicit type parameters passed to a method call:…",null,null],[12,"colon2_token","","",181,null],[12,"lt_token","","",181,null],[12,"args","","",181,null],[12,"gt_token","","",181,null],[4,"Pat","","A pattern in a local binding, function signature, match …",null,null],[13,"Wild","","A pattern that matches any value: <code>_</code>.",182,null],[13,"Ident","","A pattern that binds a new variable: …",182,null],[13,"Struct","","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.",182,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: …",182,null],[13,"Path","","A path pattern like <code>Color::Red</code>, optionally qualified with …",182,null],[13,"Tuple","","A tuple pattern: <code>(a, b)</code>.",182,null],[13,"Box","","A box pattern: <code>box v</code>.",182,null],[13,"Ref","","A reference pattern: <code>&mut (first, second)</code>.",182,null],[13,"Lit","","A literal pattern: <code>0</code>.",182,null],[13,"Range","","A range pattern: <code>1..=2</code>.",182,null],[13,"Slice","","A dynamically sized slice pattern: <code>[a, b, i.., y, z]</code>.",182,null],[13,"Macro","","A macro in expression position.",182,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",182,null],[3,"PatBox","","A box pattern: <code>box v</code>.",null,null],[12,"box_token","","",183,null],[12,"pat","","",183,null],[3,"PatIdent","","A pattern that binds a new variable: …",null,null],[12,"by_ref","","",184,null],[12,"mutability","","",184,null],[12,"ident","","",184,null],[12,"subpat","","",184,null],[3,"PatLit","","A literal pattern: <code>0</code>.",null,null],[12,"expr","","",185,null],[3,"PatMacro","","A macro in expression position.",null,null],[12,"mac","","",186,null],[3,"PatPath","","A path pattern like <code>Color::Red</code>, optionally qualified with …",null,null],[12,"qself","","",187,null],[12,"path","","",187,null],[3,"PatRange","","A range pattern: <code>1..=2</code>.",null,null],[12,"lo","","",188,null],[12,"limits","","",188,null],[12,"hi","","",188,null],[3,"PatRef","","A reference pattern: <code>&mut (first, second)</code>.",null,null],[12,"and_token","","",189,null],[12,"mutability","","",189,null],[12,"pat","","",189,null],[3,"PatSlice","","A dynamically sized slice pattern: <code>[a, b, i.., y, z]</code>.",null,null],[12,"bracket_token","","",190,null],[12,"front","","",190,null],[12,"middle","","",190,null],[12,"dot2_token","","",190,null],[12,"comma_token","","",190,null],[12,"back","","",190,null],[3,"PatStruct","","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.",null,null],[12,"path","","",191,null],[12,"brace_token","","",191,null],[12,"fields","","",191,null],[12,"dot2_token","","",191,null],[3,"PatTuple","","A tuple pattern: <code>(a, b)</code>.",null,null],[12,"paren_token","","",192,null],[12,"front","","",192,null],[12,"dot2_token","","",192,null],[12,"comma_token","","",192,null],[12,"back","","",192,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: …",null,null],[12,"path","","",193,null],[12,"pat","","",193,null],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",null,null],[12,"tts","","",194,null],[3,"PatWild","","A pattern that matches any value: <code>_</code>.",null,null],[12,"underscore_token","","",195,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",196,null],[13,"Closed","","Inclusive at the beginning and end.",196,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",197,null],[13,"Item","","An item definition.",197,null],[13,"Expr","","Expr without trailing semicolon.",197,null],[13,"Semi","","Expression with trailing semicolon.",197,null],[3,"BoundLifetimes","","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.",null,null],[12,"for_token","","",198,null],[12,"lt_token","","",198,null],[12,"lifetimes","","",198,null],[12,"gt_token","","",198,null],[3,"ConstParam","","A const generic parameter: <code>const LENGTH: usize</code>.",null,null],[12,"attrs","","",199,null],[12,"const_token","","",199,null],[12,"ident","","",199,null],[12,"colon_token","","",199,null],[12,"ty","","",199,null],[12,"eq_token","","",199,null],[12,"default","","",199,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: …",null,null],[13,"Type","","A generic type parameter: <code>T: Into<String></code>.",200,null],[13,"Lifetime","","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.",200,null],[13,"Const","","A const generic parameter: <code>const LENGTH: usize</code>.",200,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration …",null,null],[12,"lt_token","","",201,null],[12,"params","","",201,null],[12,"gt_token","","",201,null],[12,"where_clause","","",201,null],[3,"LifetimeDef","","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.",null,null],[12,"attrs","","",202,null],[12,"lifetime","","",202,null],[12,"colon_token","","",202,null],[12,"bounds","","",202,null],[3,"PredicateEq","","An equality predicate in a <code>where</code> clause (unsupported).",null,null],[12,"lhs_ty","","",203,null],[12,"eq_token","","",203,null],[12,"rhs_ty","","",203,null],[3,"PredicateLifetime","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.",null,null],[12,"lifetime","","",204,null],[12,"colon_token","","",204,null],[12,"bounds","","",204,null],[3,"PredicateType","","A type predicate in a <code>where</code> clause: …",null,null],[12,"lifetimes","","Any lifetimes from a <code>for</code> binding",205,null],[12,"bounded_ty","","The type being bounded",205,null],[12,"colon_token","","",205,null],[12,"bounds","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)",205,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",206,null],[12,"modifier","","",206,null],[12,"lifetimes","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>",206,null],[12,"path","","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>",206,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the <code>?</code>…",null,null],[13,"None","","",207,null],[13,"Maybe","","",207,null],[3,"TypeParam","","A generic type parameter: <code>T: Into<String></code>.",null,null],[12,"attrs","","",208,null],[12,"ident","","",208,null],[12,"colon_token","","",208,null],[12,"bounds","","",208,null],[12,"eq_token","","",208,null],[12,"default","","",208,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",209,null],[13,"Lifetime","","",209,null],[3,"WhereClause","","A <code>where</code> clause in a definition: …",null,null],[12,"where_token","","",210,null],[12,"predicates","","",210,null],[4,"WherePredicate","","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.",null,null],[13,"Type","","A type predicate in a <code>where</code> clause: …",211,null],[13,"Lifetime","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.",211,null],[13,"Eq","","An equality predicate in a <code>where</code> clause (unsupported).",211,null],[3,"ImplGenerics","","Returned by <code>Generics::split_for_impl</code>.",null,null],[3,"Turbofish","","Returned by <code>TypeGenerics::as_turbofish</code>.",null,null],[3,"TypeGenerics","","Returned by <code>Generics::split_for_impl</code>.",null,null],[3,"ArgCaptured","","An explicitly typed pattern captured by a function …",null,null],[12,"pat","","",212,null],[12,"colon_token","","",212,null],[12,"ty","","",212,null],[3,"ArgSelf","","Self captured by value in a function signature: <code>self</code> or …",null,null],[12,"mutability","","",213,null],[12,"self_token","","",213,null],[3,"ArgSelfRef","","Self captured by reference in a function signature: <code>&self</code> …",null,null],[12,"and_token","","",214,null],[12,"lifetime","","",214,null],[12,"mutability","","",214,null],[12,"self_token","","",214,null],[4,"FnArg","","An argument in a function signature: the <code>n: usize</code> in …",null,null],[13,"SelfRef","","Self captured by reference in a function signature: <code>&self</code> …",215,null],[13,"SelfValue","","Self captured by value in a function signature: <code>self</code> or …",215,null],[13,"Captured","","An explicitly typed pattern captured by a function …",215,null],[13,"Inferred","","A pattern whose type is inferred captured by a function …",215,null],[13,"Ignored","","A type not bound to any pattern in a function signature.",215,null],[3,"FnDecl","","Header of a function declaration, without including the …",null,null],[12,"fn_token","","",216,null],[12,"generics","","",216,null],[12,"paren_token","","",216,null],[12,"inputs","","",216,null],[12,"variadic","","",216,null],[12,"output","","",216,null],[4,"ForeignItem","","An item within an <code>extern</code> block.",null,null],[13,"Fn","","A foreign function in an <code>extern</code> block.",217,null],[13,"Static","","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.",217,null],[13,"Type","","A foreign type in an <code>extern</code> block: <code>type void</code>.",217,null],[13,"Macro","","A macro invocation within an extern block.",217,null],[13,"Verbatim","","Tokens in an <code>extern</code> block not interpreted by Syn.",217,null],[3,"ForeignItemFn","","A foreign function in an <code>extern</code> block.",null,null],[12,"attrs","","",218,null],[12,"vis","","",218,null],[12,"ident","","",218,null],[12,"decl","","",218,null],[12,"semi_token","","",218,null],[3,"ForeignItemMacro","","A macro invocation within an extern block.",null,null],[12,"attrs","","",219,null],[12,"mac","","",219,null],[12,"semi_token","","",219,null],[3,"ForeignItemStatic","","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.",null,null],[12,"attrs","","",220,null],[12,"vis","","",220,null],[12,"static_token","","",220,null],[12,"mutability","","",220,null],[12,"ident","","",220,null],[12,"colon_token","","",220,null],[12,"ty","","",220,null],[12,"semi_token","","",220,null],[3,"ForeignItemType","","A foreign type in an <code>extern</code> block: <code>type void</code>.",null,null],[12,"attrs","","",221,null],[12,"vis","","",221,null],[12,"type_token","","",221,null],[12,"ident","","",221,null],[12,"semi_token","","",221,null],[3,"ForeignItemVerbatim","","Tokens in an <code>extern</code> block not interpreted by Syn.",null,null],[12,"tts","","",222,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",223,null],[13,"Method","","A method within an impl block.",223,null],[13,"Type","","An associated type within an impl block.",223,null],[13,"Existential","","An existential type within an impl block.",223,null],[13,"Macro","","A macro invocation within an impl block.",223,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",223,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",224,null],[12,"vis","","",224,null],[12,"defaultness","","",224,null],[12,"const_token","","",224,null],[12,"ident","","",224,null],[12,"colon_token","","",224,null],[12,"ty","","",224,null],[12,"eq_token","","",224,null],[12,"expr","","",224,null],[12,"semi_token","","",224,null],[3,"ImplItemExistential","","An existential type within an impl block.",null,null],[12,"attrs","","",225,null],[12,"existential_token","","",225,null],[12,"type_token","","",225,null],[12,"ident","","",225,null],[12,"generics","","",225,null],[12,"colon_token","","",225,null],[12,"bounds","","",225,null],[12,"semi_token","","",225,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",226,null],[12,"mac","","",226,null],[12,"semi_token","","",226,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",227,null],[12,"vis","","",227,null],[12,"defaultness","","",227,null],[12,"sig","","",227,null],[12,"block","","",227,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",228,null],[12,"vis","","",228,null],[12,"defaultness","","",228,null],[12,"type_token","","",228,null],[12,"ident","","",228,null],[12,"generics","","",228,null],[12,"eq_token","","",228,null],[12,"ty","","",228,null],[12,"semi_token","","",228,null],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",null,null],[12,"tts","","",229,null],[4,"Item","","Things that can appear directly inside of a module or …",null,null],[13,"ExternCrate","","An <code>extern crate</code> item: <code>extern crate serde</code>.",230,null],[13,"Use","","A use declaration: <code>use std::collections::HashMap</code>.",230,null],[13,"Static","","A static item: <code>static BIKE: Shed = Shed(42)</code>.",230,null],[13,"Const","","A constant item: <code>const MAX: u16 = 65535</code>.",230,null],[13,"Fn","","A free-standing function: …",230,null],[13,"Mod","","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.",230,null],[13,"ForeignMod","","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.",230,null],[13,"Type","","A type alias: …",230,null],[13,"Existential","","An existential type: …",230,null],[13,"Struct","","A struct definition: <code>struct Foo<A> { x: A }</code>.",230,null],[13,"Enum","","An enum definition: <code>enum Foo<A, B> { C<A>, D<B> }</code>.",230,null],[13,"Union","","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.",230,null],[13,"Trait","","A trait definition: <code>pub trait Iterator { ... }</code>.",230,null],[13,"TraitAlias","","A trait alias: …",230,null],[13,"Impl","","An impl block providing trait or associated items: …",230,null],[13,"Macro","","A macro invocation, which includes <code>macro_rules!</code> …",230,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the <code>macro</code> …",230,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",230,null],[3,"ItemConst","","A constant item: <code>const MAX: u16 = 65535</code>.",null,null],[12,"attrs","","",231,null],[12,"vis","","",231,null],[12,"const_token","","",231,null],[12,"ident","","",231,null],[12,"colon_token","","",231,null],[12,"ty","","",231,null],[12,"eq_token","","",231,null],[12,"expr","","",231,null],[12,"semi_token","","",231,null],[3,"ItemEnum","","An enum definition: <code>enum Foo<A, B> { C<A>, D<B> }</code>.",null,null],[12,"attrs","","",232,null],[12,"vis","","",232,null],[12,"enum_token","","",232,null],[12,"ident","","",232,null],[12,"generics","","",232,null],[12,"brace_token","","",232,null],[12,"variants","","",232,null],[3,"ItemExistential","","An existential type: …",null,null],[12,"attrs","","",233,null],[12,"vis","","",233,null],[12,"existential_token","","",233,null],[12,"type_token","","",233,null],[12,"ident","","",233,null],[12,"generics","","",233,null],[12,"colon_token","","",233,null],[12,"bounds","","",233,null],[12,"semi_token","","",233,null],[3,"ItemExternCrate","","An <code>extern crate</code> item: <code>extern crate serde</code>.",null,null],[12,"attrs","","",234,null],[12,"vis","","",234,null],[12,"extern_token","","",234,null],[12,"crate_token","","",234,null],[12,"ident","","",234,null],[12,"rename","","",234,null],[12,"semi_token","","",234,null],[3,"ItemFn","","A free-standing function: …",null,null],[12,"attrs","","",235,null],[12,"vis","","",235,null],[12,"constness","","",235,null],[12,"asyncness","","",235,null],[12,"unsafety","","",235,null],[12,"abi","","",235,null],[12,"ident","","",235,null],[12,"decl","","",235,null],[12,"block","","",235,null],[3,"ItemForeignMod","","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.",null,null],[12,"attrs","","",236,null],[12,"abi","","",236,null],[12,"brace_token","","",236,null],[12,"items","","",236,null],[3,"ItemImpl","","An impl block providing trait or associated items: …",null,null],[12,"attrs","","",237,null],[12,"defaultness","","",237,null],[12,"unsafety","","",237,null],[12,"impl_token","","",237,null],[12,"generics","","",237,null],[12,"trait_","","Trait this impl implements.",237,null],[12,"self_ty","","The Self type of the impl.",237,null],[12,"brace_token","","",237,null],[12,"items","","",237,null],[3,"ItemMacro","","A macro invocation, which includes <code>macro_rules!</code> …",null,null],[12,"attrs","","",238,null],[12,"ident","","The <code>example</code> in <code>macro_rules! example { ... }</code>.",238,null],[12,"mac","","",238,null],[12,"semi_token","","",238,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the <code>macro</code> …",null,null],[12,"attrs","","",239,null],[12,"vis","","",239,null],[12,"macro_token","","",239,null],[12,"ident","","",239,null],[12,"paren_token","","",239,null],[12,"args","","",239,null],[12,"brace_token","","",239,null],[12,"body","","",239,null],[3,"ItemMod","","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.",null,null],[12,"attrs","","",240,null],[12,"vis","","",240,null],[12,"mod_token","","",240,null],[12,"ident","","",240,null],[12,"content","","",240,null],[12,"semi","","",240,null],[3,"ItemStatic","","A static item: <code>static BIKE: Shed = Shed(42)</code>.",null,null],[12,"attrs","","",241,null],[12,"vis","","",241,null],[12,"static_token","","",241,null],[12,"mutability","","",241,null],[12,"ident","","",241,null],[12,"colon_token","","",241,null],[12,"ty","","",241,null],[12,"eq_token","","",241,null],[12,"expr","","",241,null],[12,"semi_token","","",241,null],[3,"ItemStruct","","A struct definition: <code>struct Foo<A> { x: A }</code>.",null,null],[12,"attrs","","",242,null],[12,"vis","","",242,null],[12,"struct_token","","",242,null],[12,"ident","","",242,null],[12,"generics","","",242,null],[12,"fields","","",242,null],[12,"semi_token","","",242,null],[3,"ItemTrait","","A trait definition: <code>pub trait Iterator { ... }</code>.",null,null],[12,"attrs","","",243,null],[12,"vis","","",243,null],[12,"unsafety","","",243,null],[12,"auto_token","","",243,null],[12,"trait_token","","",243,null],[12,"ident","","",243,null],[12,"generics","","",243,null],[12,"colon_token","","",243,null],[12,"supertraits","","",243,null],[12,"brace_token","","",243,null],[12,"items","","",243,null],[3,"ItemTraitAlias","","A trait alias: …",null,null],[12,"attrs","","",244,null],[12,"vis","","",244,null],[12,"trait_token","","",244,null],[12,"ident","","",244,null],[12,"generics","","",244,null],[12,"eq_token","","",244,null],[12,"bounds","","",244,null],[12,"semi_token","","",244,null],[3,"ItemType","","A type alias: …",null,null],[12,"attrs","","",245,null],[12,"vis","","",245,null],[12,"type_token","","",245,null],[12,"ident","","",245,null],[12,"generics","","",245,null],[12,"eq_token","","",245,null],[12,"ty","","",245,null],[12,"semi_token","","",245,null],[3,"ItemUnion","","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.",null,null],[12,"attrs","","",246,null],[12,"vis","","",246,null],[12,"union_token","","",246,null],[12,"ident","","",246,null],[12,"generics","","",246,null],[12,"fields","","",246,null],[3,"ItemUse","","A use declaration: <code>use std::collections::HashMap</code>.",null,null],[12,"attrs","","",247,null],[12,"vis","","",247,null],[12,"use_token","","",247,null],[12,"leading_colon","","",247,null],[12,"tree","","",247,null],[12,"semi_token","","",247,null],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",null,null],[12,"tts","","",248,null],[3,"MethodSig","","A method\'s signature in a trait or implementation: …",null,null],[12,"constness","","",249,null],[12,"asyncness","","",249,null],[12,"unsafety","","",249,null],[12,"abi","","",249,null],[12,"ident","","",249,null],[12,"decl","","",249,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",250,null],[13,"Method","","A trait method within the definition of a trait.",250,null],[13,"Type","","An associated type within the definition of a trait.",250,null],[13,"Macro","","A macro invocation within the definition of a trait.",250,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted …",250,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",251,null],[12,"const_token","","",251,null],[12,"ident","","",251,null],[12,"colon_token","","",251,null],[12,"ty","","",251,null],[12,"default","","",251,null],[12,"semi_token","","",251,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",252,null],[12,"mac","","",252,null],[12,"semi_token","","",252,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",253,null],[12,"sig","","",253,null],[12,"default","","",253,null],[12,"semi_token","","",253,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",254,null],[12,"type_token","","",254,null],[12,"ident","","",254,null],[12,"generics","","",254,null],[12,"colon_token","","",254,null],[12,"bounds","","",254,null],[12,"default","","",254,null],[12,"semi_token","","",254,null],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted …",null,null],[12,"tts","","",255,null],[3,"UseGlob","","A glob import in a <code>use</code> item: <code>*</code>.",null,null],[12,"star_token","","",256,null],[3,"UseGroup","","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.",null,null],[12,"brace_token","","",257,null],[12,"items","","",257,null],[3,"UseName","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.",null,null],[12,"ident","","",258,null],[3,"UsePath","","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.",null,null],[12,"ident","","",259,null],[12,"colon2_token","","",259,null],[12,"tree","","",259,null],[3,"UseRename","","An renamed identifier imported by a <code>use</code> item: …",null,null],[12,"ident","","",260,null],[12,"as_token","","",260,null],[12,"rename","","",260,null],[4,"UseTree","","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …",null,null],[13,"Path","","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.",261,null],[13,"Name","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.",261,null],[13,"Rename","","An renamed identifier imported by a <code>use</code> item: …",261,null],[13,"Glob","","A glob import in a <code>use</code> item: <code>*</code>.",261,null],[13,"Group","","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.",261,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",262,null],[12,"attrs","","",262,null],[12,"items","","",262,null],[3,"Lifetime","","A Rust lifetime: <code>\'a</code>.",null,null],[12,"apostrophe","","",263,null],[12,"ident","","",263,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the …",null,null],[13,"F32","","",264,null],[13,"F64","","",264,null],[13,"None","","",264,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the <code>u8</code> in …",null,null],[13,"I8","","",265,null],[13,"I16","","",265,null],[13,"I32","","",265,null],[13,"I64","","",265,null],[13,"I128","","",265,null],[13,"Isize","","",265,null],[13,"U8","","",265,null],[13,"U16","","",265,null],[13,"U32","","",265,null],[13,"U64","","",265,null],[13,"U128","","",265,null],[13,"Usize","","",265,null],[13,"None","","",265,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: <code>\\\"foo\\\"</code>.",266,null],[13,"ByteStr","","A byte string literal: <code>b\\\"foo\\\"</code>.",266,null],[13,"Byte","","A byte literal: <code>b\'f\'</code>.",266,null],[13,"Char","","A character literal: <code>\'a\'</code>.",266,null],[13,"Int","","An integer literal: <code>1</code> or <code>1u16</code>.",266,null],[13,"Float","","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.",266,null],[13,"Bool","","A boolean literal: <code>true</code> or <code>false</code>.",266,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly …",266,null],[3,"LitBool","","A boolean literal: <code>true</code> or <code>false</code>.",null,null],[12,"value","","",267,null],[12,"span","","",267,null],[3,"LitByte","","A byte literal: <code>b\'f\'</code>.",null,null],[3,"LitByteStr","","A byte string literal: <code>b\\\"foo\\\"</code>.",null,null],[3,"LitChar","","A character literal: <code>\'a\'</code>.",null,null],[3,"LitFloat","","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.",null,null],[3,"LitInt","","An integer literal: <code>1</code> or <code>1u16</code>.",null,null],[3,"LitStr","","A UTF-8 string literal: <code>\\\"foo\\\"</code>.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly …",null,null],[12,"token","","",268,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a …",null,null],[13,"Cooked","","An ordinary string like <code>\\\"data\\\"</code>.",269,null],[13,"Raw","","A raw string like <code>r##\\\"data\\\"##</code>.",269,null],[3,"Macro","","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.",null,null],[12,"path","","",270,null],[12,"bang_token","","",270,null],[12,"delimiter","","",270,null],[12,"tts","","",270,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: <code>m!(...)</code> or …",null,null],[13,"Paren","","",271,null],[13,"Brace","","",271,null],[13,"Bracket","","",271,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a <code>proc_macro_derive</code> macro.",272,null],[13,"Enum","","An enum input to a <code>proc_macro_derive</code> macro.",272,null],[13,"Union","","A tagged union input to a <code>proc_macro_derive</code> macro.",272,null],[3,"DataEnum","","An enum input to a <code>proc_macro_derive</code> macro.",null,null],[12,"enum_token","","",273,null],[12,"brace_token","","",273,null],[12,"variants","","",273,null],[3,"DataStruct","","A struct input to a <code>proc_macro_derive</code> macro.",null,null],[12,"struct_token","","",274,null],[12,"fields","","",274,null],[12,"semi_token","","",274,null],[3,"DataUnion","","A tagged union input to a <code>proc_macro_derive</code> macro.",null,null],[12,"union_token","","",275,null],[12,"fields","","",275,null],[3,"DeriveInput","","Data structure sent to a <code>proc_macro_derive</code> macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",276,null],[12,"vis","","Visibility of the struct or enum.",276,null],[12,"ident","","Name of the struct or enum.",276,null],[12,"generics","","Generics required to complete the definition.",276,null],[12,"data","","Data within the struct or enum.",276,null],[4,"BinOp","","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.",null,null],[13,"Add","","The <code>+</code> operator (addition)",277,null],[13,"Sub","","The <code>-</code> operator (subtraction)",277,null],[13,"Mul","","The <code>*</code> operator (multiplication)",277,null],[13,"Div","","The <code>/</code> operator (division)",277,null],[13,"Rem","","The <code>%</code> operator (modulus)",277,null],[13,"And","","The <code>&&</code> operator (logical and)",277,null],[13,"Or","","The <code>||</code> operator (logical or)",277,null],[13,"BitXor","","The <code>^</code> operator (bitwise xor)",277,null],[13,"BitAnd","","The <code>&</code> operator (bitwise and)",277,null],[13,"BitOr","","The <code>|</code> operator (bitwise or)",277,null],[13,"Shl","","The <code><<</code> operator (shift left)",277,null],[13,"Shr","","The <code>>></code> operator (shift right)",277,null],[13,"Eq","","The <code>==</code> operator (equality)",277,null],[13,"Lt","","The <code><</code> operator (less than)",277,null],[13,"Le","","The <code><=</code> operator (less than or equal to)",277,null],[13,"Ne","","The <code>!=</code> operator (not equal to)",277,null],[13,"Ge","","The <code>>=</code> operator (greater than or equal to)",277,null],[13,"Gt","","The <code>></code> operator (greater than)",277,null],[13,"AddEq","","The <code>+=</code> operator",277,null],[13,"SubEq","","The <code>-=</code> operator",277,null],[13,"MulEq","","The <code>*=</code> operator",277,null],[13,"DivEq","","The <code>/=</code> operator",277,null],[13,"RemEq","","The <code>%=</code> operator",277,null],[13,"BitXorEq","","The <code>^=</code> operator",277,null],[13,"BitAndEq","","The <code>&=</code> operator",277,null],[13,"BitOrEq","","The <code>|=</code> operator",277,null],[13,"ShlEq","","The <code><<=</code> operator",277,null],[13,"ShrEq","","The <code>>>=</code> operator",277,null],[4,"UnOp","","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.",null,null],[13,"Deref","","The <code>*</code> operator for dereferencing",278,null],[13,"Not","","The <code>!</code> operator for logical inversion",278,null],[13,"Neg","","The <code>-</code> operator for negation",278,null],[3,"Abi","","The binary interface of a function: <code>extern \\\"C\\\"</code>.",null,null],[12,"extern_token","","",279,null],[12,"name","","",279,null],[3,"BareFnArg","","An argument in a function type: the <code>usize</code> in …",null,null],[12,"name","","",280,null],[12,"ty","","",280,null],[4,"BareFnArgName","","Name of an argument in a function type: the <code>n</code> in …",null,null],[13,"Named","","Argument given a name.",281,null],[13,"Wild","","Argument not given a name, matched with <code>_</code>.",281,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",282,null],[13,"Type","","A particular type is returned.",282,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: <code>[T]</code>.",283,null],[13,"Array","","A fixed size array type: <code>[T; n]</code>.",283,null],[13,"Ptr","","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.",283,null],[13,"Reference","","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.",283,null],[13,"BareFn","","A bare function type: <code>fn(usize) -> bool</code>.",283,null],[13,"Never","","The never type: <code>!</code>.",283,null],[13,"Tuple","","A tuple type: <code>(A, B, C, String)</code>.",283,null],[13,"Path","","A path like <code>std::slice::Iter</code>, optionally qualified with a …",283,null],[13,"TraitObject","","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …",283,null],[13,"ImplTrait","","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …",283,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",283,null],[13,"Group","","A type contained within invisible delimiters.",283,null],[13,"Infer","","Indication that a type should be inferred by the …",283,null],[13,"Macro","","A macro in the type position.",283,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",283,null],[3,"TypeArray","","A fixed size array type: <code>[T; n]</code>.",null,null],[12,"bracket_token","","",284,null],[12,"elem","","",284,null],[12,"semi_token","","",284,null],[12,"len","","",284,null],[3,"TypeBareFn","","A bare function type: <code>fn(usize) -> bool</code>.",null,null],[12,"lifetimes","","",285,null],[12,"unsafety","","",285,null],[12,"abi","","",285,null],[12,"fn_token","","",285,null],[12,"paren_token","","",285,null],[12,"inputs","","",285,null],[12,"variadic","","",285,null],[12,"output","","",285,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",286,null],[12,"elem","","",286,null],[3,"TypeImplTrait","","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …",null,null],[12,"impl_token","","",287,null],[12,"bounds","","",287,null],[3,"TypeInfer","","Indication that a type should be inferred by the …",null,null],[12,"underscore_token","","",288,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",289,null],[3,"TypeNever","","The never type: <code>!</code>.",null,null],[12,"bang_token","","",290,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",291,null],[12,"elem","","",291,null],[3,"TypePath","","A path like <code>std::slice::Iter</code>, optionally qualified with a …",null,null],[12,"qself","","",292,null],[12,"path","","",292,null],[3,"TypePtr","","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.",null,null],[12,"star_token","","",293,null],[12,"const_token","","",293,null],[12,"mutability","","",293,null],[12,"elem","","",293,null],[3,"TypeReference","","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.",null,null],[12,"and_token","","",294,null],[12,"lifetime","","",294,null],[12,"mutability","","",294,null],[12,"elem","","",294,null],[3,"TypeSlice","","A dynamically sized slice type: <code>[T]</code>.",null,null],[12,"bracket_token","","",295,null],[12,"elem","","",295,null],[3,"TypeTraitObject","","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …",null,null],[12,"dyn_token","","",296,null],[12,"bounds","","",296,null],[3,"TypeTuple","","A tuple type: <code>(A, B, C, String)</code>.",null,null],[12,"paren_token","","",297,null],[12,"elems","","",297,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",298,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the <code><K, V></code> …",null,null],[12,"colon2_token","","",299,null],[12,"lt_token","","",299,null],[12,"args","","",299,null],[12,"gt_token","","",299,null],[3,"Binding","","A binding (equality constraint) on an associated type: …",null,null],[12,"ident","","",300,null],[12,"eq_token","","",300,null],[12,"ty","","",300,null],[3,"Constraint","","An associated type bound: <code>Iterator<Item: Display></code>.",null,null],[12,"ident","","",301,null],[12,"colon_token","","",301,null],[12,"bounds","","",301,null],[4,"GenericArgument","","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.",null,null],[13,"Lifetime","","A lifetime argument.",302,null],[13,"Type","","A type argument.",302,null],[13,"Binding","","A binding (equality constraint) on an associated type: …",302,null],[13,"Constraint","","An associated type bound: <code>Iterator<Item: Display></code>.",302,null],[13,"Const","","A const expression. Must be inside of a block.",302,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the <code>(A, B) -> C</code> in …",null,null],[12,"paren_token","","",303,null],[12,"inputs","","<code>(A, B)</code>",303,null],[12,"output","","<code>C</code>",303,null],[3,"Path","","A path at which a named item is exported: …",null,null],[12,"leading_colon","","",304,null],[12,"segments","","",304,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path …",null,null],[13,"None","","",305,null],[13,"AngleBracketed","","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.",305,null],[13,"Parenthesized","","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.",305,null],[3,"PathSegment","","A segment of a path together with any path arguments on …",null,null],[12,"ident","","",306,null],[12,"arguments","","",306,null],[3,"QSelf","","The explicit Self type in a qualified path: the <code>T</code> in …",null,null],[12,"lt_token","","",307,null],[12,"ty","","",307,null],[12,"position","","",307,null],[12,"as_token","","",307,null],[12,"gt_token","","",307,null],[3,"Error","","Error returned when a Syn parser cannot parse the input …",null,null],[6,"Result","","The result of a Syn parser.",null,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree …",null,[[["tokenstream",3]],[["result",6],["parse",8]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax …",null,[[["tokenstream",3]],[["result",6],["parse",8]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree …",null,[[],[["result",6],["parse",8]]]],[5,"parse_file","","Parse the content of a file of Rust code.",null,[[],[["result",6],["file",3]]]],[14,"parenthesized","","Parse a set of parentheses and expose their content to …",null,null],[14,"braced","","Parse a set of curly braces and expose their content to …",null,null],[14,"bracketed","","Parse a set of square brackets and expose their content …",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type …",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the <code>quote!</code> …",null,null],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a …",null,null],[14,"custom_keyword","","Define a type that supports parsing and printing a given …",null,null],[14,"custom_punctuation","","Define a type that supports parsing and printing a …",null,null],[11,"span","","",308,[[],["span",3]]],[11,"from","","",308,[[]]],[11,"into","","",308,[[]]],[11,"to_owned","","",308,[[]]],[11,"clone_into","","",308,[[]]],[11,"to_string","","",308,[[],["string",3]]],[11,"borrow","","",308,[[]]],[11,"borrow_mut","","",308,[[]]],[11,"try_from","","",308,[[],["result",4]]],[11,"try_into","","",308,[[],["result",4]]],[11,"type_id","","",308,[[],["typeid",3]]],[11,"span","syn::token","",0,[[],["span",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"span","","",1,[[],["span",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"span","","",2,[[],["span",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"span","","",3,[[],["span",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"span","","",4,[[],["span",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"span","","",5,[[],["span",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"span","","",6,[[],["span",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"span","","",7,[[],["span",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"span","","",8,[[],["span",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"span","","",9,[[],["span",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"span","","",10,[[],["span",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"span","","",11,[[],["span",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"span","","",12,[[],["span",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"span","","",13,[[],["span",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"span","","",14,[[],["span",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"span","","",15,[[],["span",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"span","","",16,[[],["span",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"span","","",17,[[],["span",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"span","","",18,[[],["span",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"span","","",19,[[],["span",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"span","","",20,[[],["span",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"span","","",21,[[],["span",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"span","","",22,[[],["span",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"span","","",23,[[],["span",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"span","","",24,[[],["span",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"span","","",25,[[],["span",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"span","","",26,[[],["span",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"span","","",27,[[],["span",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"span","","",28,[[],["span",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"span","","",29,[[],["span",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"span","","",30,[[],["span",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"span","","",31,[[],["span",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"span","","",32,[[],["span",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"span","","",33,[[],["span",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"span","","",34,[[],["span",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"span","","",35,[[],["span",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"span","","",36,[[],["span",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"span","","",37,[[],["span",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"span","","",38,[[],["span",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"span","","",39,[[],["span",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"span","","",40,[[],["span",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"span","","",41,[[],["span",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"span","","",42,[[],["span",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"span","","",43,[[],["span",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"span","","",44,[[],["span",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"span","","",45,[[],["span",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"span","","",46,[[],["span",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"span","","",47,[[],["span",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"span","","",48,[[],["span",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"span","","",49,[[],["span",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"span","","",50,[[],["span",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"span","","",51,[[],["span",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"span","","",52,[[],["span",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"span","","",53,[[],["span",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"span","","",54,[[],["span",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"span","","",55,[[],["span",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"span","","",56,[[],["span",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"span","","",57,[[],["span",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"span","","",58,[[],["span",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"span","","",59,[[],["span",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"span","","",60,[[],["span",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"span","","",61,[[],["span",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"span","","",62,[[],["span",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"span","","",63,[[],["span",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"span","","",64,[[],["span",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"span","","",65,[[],["span",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"span","","",66,[[],["span",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"span","","",67,[[],["span",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"span","","",68,[[],["span",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"span","","",69,[[],["span",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"span","","",70,[[],["span",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"span","","",71,[[],["span",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"span","","",72,[[],["span",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"span","","",73,[[],["span",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"span","","",74,[[],["span",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"span","","",75,[[],["span",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"span","","",76,[[],["span",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"span","","",77,[[],["span",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"span","","",78,[[],["span",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"span","","",79,[[],["span",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"span","","",80,[[],["span",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"span","","",81,[[],["span",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"span","","",82,[[],["span",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"span","","",83,[[],["span",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"span","","",84,[[],["span",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"span","","",85,[[],["span",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"span","","",86,[[],["span",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"span","","",87,[[],["span",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"span","","",88,[[],["span",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"span","","",89,[[],["span",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"span","","",90,[[],["span",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"span","","",91,[[],["span",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"span","","",92,[[],["span",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"span","","",93,[[],["span",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"span","","",94,[[],["span",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"span","","",95,[[],["span",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"span","","",96,[[],["span",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"span","","",97,[[],["span",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"span","","",98,[[],["span",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"span","syn","",117,[[],["span",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"span","","",118,[[],["span",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"span","","",119,[[],["span",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"span","","",120,[[],["span",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"span","","",121,[[],["span",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"span","","",126,[[],["span",3]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"span","","",123,[[],["span",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"span","","",124,[[],["span",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"span","","",125,[[],["span",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"span","","",122,[[],["span",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"span","","",130,[[],["span",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"span","","",128,[[],["span",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"span","","",127,[[],["span",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"span","","",129,[[],["span",3]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"span","","",131,[[],["span",3]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"span","","",138,[[],["span",3]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"span","","",148,[[],["span",3]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"to_owned","","",148,[[]]],[11,"clone_into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"span","","",132,[[],["span",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"span","","",140,[[],["span",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"span","","",155,[[],["span",3]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"to_owned","","",155,[[]]],[11,"clone_into","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"span","","",165,[[],["span",3]]],[11,"from","","",165,[[]]],[11,"into","","",165,[[]]],[11,"to_owned","","",165,[[]]],[11,"clone_into","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"span","","",136,[[],["span",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"span","","",167,[[],["span",3]]],[11,"from","","",167,[[]]],[11,"into","","",167,[[]]],[11,"to_owned","","",167,[[]]],[11,"clone_into","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"span","","",151,[[],["span",3]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"span","","",141,[[],["span",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"span","","",166,[[],["span",3]]],[11,"from","","",166,[[]]],[11,"into","","",166,[[]]],[11,"to_owned","","",166,[[]]],[11,"clone_into","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"span","","",150,[[],["span",3]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"span","","",147,[[],["span",3]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"to_owned","","",147,[[]]],[11,"clone_into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"span","","",170,[[],["span",3]]],[11,"from","","",170,[[]]],[11,"into","","",170,[[]]],[11,"to_owned","","",170,[[]]],[11,"clone_into","","",170,[[]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"span","","",145,[[],["span",3]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"to_owned","","",145,[[]]],[11,"clone_into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"span","","",152,[[],["span",3]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"span","","",154,[[],["span",3]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"to_owned","","",154,[[]]],[11,"clone_into","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"span","","",142,[[],["span",3]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"span","","",168,[[],["span",3]]],[11,"from","","",168,[[]]],[11,"into","","",168,[[]]],[11,"to_owned","","",168,[[]]],[11,"clone_into","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"span","","",137,[[],["span",3]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"span","","",133,[[],["span",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"span","","",134,[[],["span",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"span","","",144,[[],["span",3]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"span","","",149,[[],["span",3]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"to_owned","","",149,[[]]],[11,"clone_into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"span","","",158,[[],["span",3]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"to_owned","","",158,[[]]],[11,"clone_into","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"span","","",157,[[],["span",3]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"to_owned","","",157,[[]]],[11,"clone_into","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"span","","",159,[[],["span",3]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"to_owned","","",159,[[]]],[11,"clone_into","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"span","","",139,[[],["span",3]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"span","","",143,[[],["span",3]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"span","","",161,[[],["span",3]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"to_owned","","",161,[[]]],[11,"clone_into","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"span","","",153,[[],["span",3]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"to_owned","","",153,[[]]],[11,"clone_into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"span","","",162,[[],["span",3]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"to_owned","","",162,[[]]],[11,"clone_into","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"span","","",160,[[],["span",3]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"to_owned","","",160,[[]]],[11,"clone_into","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"span","","",156,[[],["span",3]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"to_owned","","",156,[[]]],[11,"clone_into","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"span","","",146,[[],["span",3]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"span","","",163,[[],["span",3]]],[11,"from","","",163,[[]]],[11,"into","","",163,[[]]],[11,"to_owned","","",163,[[]]],[11,"clone_into","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"span","","",135,[[],["span",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"span","","",164,[[],["span",3]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"to_owned","","",164,[[]]],[11,"clone_into","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"span","","",171,[[],["span",3]]],[11,"from","","",171,[[]]],[11,"into","","",171,[[]]],[11,"to_owned","","",171,[[]]],[11,"clone_into","","",171,[[]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"span","","",169,[[],["span",3]]],[11,"from","","",169,[[]]],[11,"into","","",169,[[]]],[11,"to_owned","","",169,[[]]],[11,"clone_into","","",169,[[]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"span","","",173,[[],["span",3]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"to_owned","","",173,[[]]],[11,"clone_into","","",173,[[]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"span","","",172,[[],["span",3]]],[11,"from","","",172,[[]]],[11,"into","","",172,[[]]],[11,"to_owned","","",172,[[]]],[11,"clone_into","","",172,[[]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"span","","",181,[[],["span",3]]],[11,"from","","",181,[[]]],[11,"into","","",181,[[]]],[11,"to_owned","","",181,[[]]],[11,"clone_into","","",181,[[]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"try_from","","",181,[[],["result",4]]],[11,"try_into","","",181,[[],["result",4]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"span","","",178,[[],["span",3]]],[11,"from","","",178,[[]]],[11,"into","","",178,[[]]],[11,"to_owned","","",178,[[]]],[11,"clone_into","","",178,[[]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"try_from","","",178,[[],["result",4]]],[11,"try_into","","",178,[[],["result",4]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"span","","",177,[[],["span",3]]],[11,"from","","",177,[[]]],[11,"into","","",177,[[]]],[11,"to_owned","","",177,[[]]],[11,"clone_into","","",177,[[]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"try_into","","",177,[[],["result",4]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"span","","",179,[[],["span",3]]],[11,"from","","",179,[[]]],[11,"into","","",179,[[]]],[11,"to_owned","","",179,[[]]],[11,"clone_into","","",179,[[]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"try_into","","",179,[[],["result",4]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"span","","",175,[[],["span",3]]],[11,"from","","",175,[[]]],[11,"into","","",175,[[]]],[11,"to_owned","","",175,[[]]],[11,"clone_into","","",175,[[]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"span","","",197,[[],["span",3]]],[11,"from","","",197,[[]]],[11,"into","","",197,[[]]],[11,"to_owned","","",197,[[]]],[11,"clone_into","","",197,[[]]],[11,"borrow","","",197,[[]]],[11,"borrow_mut","","",197,[[]]],[11,"try_from","","",197,[[],["result",4]]],[11,"try_into","","",197,[[],["result",4]]],[11,"type_id","","",197,[[],["typeid",3]]],[11,"span","","",180,[[],["span",3]]],[11,"from","","",180,[[]]],[11,"into","","",180,[[]]],[11,"to_owned","","",180,[[]]],[11,"clone_into","","",180,[[]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"try_into","","",180,[[],["result",4]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"span","","",182,[[],["span",3]]],[11,"from","","",182,[[]]],[11,"into","","",182,[[]]],[11,"to_owned","","",182,[[]]],[11,"clone_into","","",182,[[]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"try_from","","",182,[[],["result",4]]],[11,"try_into","","",182,[[],["result",4]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"span","","",195,[[],["span",3]]],[11,"from","","",195,[[]]],[11,"into","","",195,[[]]],[11,"to_owned","","",195,[[]]],[11,"clone_into","","",195,[[]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"try_from","","",195,[[],["result",4]]],[11,"try_into","","",195,[[],["result",4]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"span","","",184,[[],["span",3]]],[11,"from","","",184,[[]]],[11,"into","","",184,[[]]],[11,"to_owned","","",184,[[]]],[11,"clone_into","","",184,[[]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"try_into","","",184,[[],["result",4]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"span","","",191,[[],["span",3]]],[11,"from","","",191,[[]]],[11,"into","","",191,[[]]],[11,"to_owned","","",191,[[]]],[11,"clone_into","","",191,[[]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"try_from","","",191,[[],["result",4]]],[11,"try_into","","",191,[[],["result",4]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"span","","",193,[[],["span",3]]],[11,"from","","",193,[[]]],[11,"into","","",193,[[]]],[11,"to_owned","","",193,[[]]],[11,"clone_into","","",193,[[]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"try_into","","",193,[[],["result",4]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"span","","",187,[[],["span",3]]],[11,"from","","",187,[[]]],[11,"into","","",187,[[]]],[11,"to_owned","","",187,[[]]],[11,"clone_into","","",187,[[]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"try_into","","",187,[[],["result",4]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"span","","",192,[[],["span",3]]],[11,"from","","",192,[[]]],[11,"into","","",192,[[]]],[11,"to_owned","","",192,[[]]],[11,"clone_into","","",192,[[]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"try_into","","",192,[[],["result",4]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"span","","",183,[[],["span",3]]],[11,"from","","",183,[[]]],[11,"into","","",183,[[]]],[11,"to_owned","","",183,[[]]],[11,"clone_into","","",183,[[]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"try_from","","",183,[[],["result",4]]],[11,"try_into","","",183,[[],["result",4]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"span","","",189,[[],["span",3]]],[11,"from","","",189,[[]]],[11,"into","","",189,[[]]],[11,"to_owned","","",189,[[]]],[11,"clone_into","","",189,[[]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"try_from","","",189,[[],["result",4]]],[11,"try_into","","",189,[[],["result",4]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"span","","",185,[[],["span",3]]],[11,"from","","",185,[[]]],[11,"into","","",185,[[]]],[11,"to_owned","","",185,[[]]],[11,"clone_into","","",185,[[]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"try_from","","",185,[[],["result",4]]],[11,"try_into","","",185,[[],["result",4]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"span","","",188,[[],["span",3]]],[11,"from","","",188,[[]]],[11,"into","","",188,[[]]],[11,"to_owned","","",188,[[]]],[11,"clone_into","","",188,[[]]],[11,"borrow","","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"try_from","","",188,[[],["result",4]]],[11,"try_into","","",188,[[],["result",4]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"span","","",190,[[],["span",3]]],[11,"from","","",190,[[]]],[11,"into","","",190,[[]]],[11,"to_owned","","",190,[[]]],[11,"clone_into","","",190,[[]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"try_from","","",190,[[],["result",4]]],[11,"try_into","","",190,[[],["result",4]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"span","","",186,[[],["span",3]]],[11,"from","","",186,[[]]],[11,"into","","",186,[[]]],[11,"to_owned","","",186,[[]]],[11,"clone_into","","",186,[[]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"try_into","","",186,[[],["result",4]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"span","","",194,[[],["span",3]]],[11,"from","","",194,[[]]],[11,"into","","",194,[[]]],[11,"to_owned","","",194,[[]]],[11,"clone_into","","",194,[[]]],[11,"borrow","","",194,[[]]],[11,"borrow_mut","","",194,[[]]],[11,"try_from","","",194,[[],["result",4]]],[11,"try_into","","",194,[[],["result",4]]],[11,"type_id","","",194,[[],["typeid",3]]],[11,"span","","",174,[[],["span",3]]],[11,"from","","",174,[[]]],[11,"into","","",174,[[]]],[11,"to_owned","","",174,[[]]],[11,"clone_into","","",174,[[]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"try_into","","",174,[[],["result",4]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"from","","",196,[[]]],[11,"into","","",196,[[]]],[11,"to_owned","","",196,[[]]],[11,"clone_into","","",196,[[]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"try_from","","",196,[[],["result",4]]],[11,"try_into","","",196,[[],["result",4]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"span","","",176,[[],["span",3]]],[11,"from","","",176,[[]]],[11,"into","","",176,[[]]],[11,"to_owned","","",176,[[]]],[11,"clone_into","","",176,[[]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"span","","",201,[[],["span",3]]],[11,"from","","",201,[[]]],[11,"into","","",201,[[]]],[11,"to_owned","","",201,[[]]],[11,"clone_into","","",201,[[]]],[11,"borrow","","",201,[[]]],[11,"borrow_mut","","",201,[[]]],[11,"try_from","","",201,[[],["result",4]]],[11,"try_into","","",201,[[],["result",4]]],[11,"type_id","","",201,[[],["typeid",3]]],[11,"span","","",200,[[],["span",3]]],[11,"from","","",200,[[]]],[11,"into","","",200,[[]]],[11,"to_owned","","",200,[[]]],[11,"clone_into","","",200,[[]]],[11,"borrow","","",200,[[]]],[11,"borrow_mut","","",200,[[]]],[11,"try_from","","",200,[[],["result",4]]],[11,"try_into","","",200,[[],["result",4]]],[11,"type_id","","",200,[[],["typeid",3]]],[11,"span","","",208,[[],["span",3]]],[11,"from","","",208,[[]]],[11,"into","","",208,[[]]],[11,"to_owned","","",208,[[]]],[11,"clone_into","","",208,[[]]],[11,"borrow","","",208,[[]]],[11,"borrow_mut","","",208,[[]]],[11,"try_from","","",208,[[],["result",4]]],[11,"try_into","","",208,[[],["result",4]]],[11,"type_id","","",208,[[],["typeid",3]]],[11,"span","","",202,[[],["span",3]]],[11,"from","","",202,[[]]],[11,"into","","",202,[[]]],[11,"to_owned","","",202,[[]]],[11,"clone_into","","",202,[[]]],[11,"borrow","","",202,[[]]],[11,"borrow_mut","","",202,[[]]],[11,"try_from","","",202,[[],["result",4]]],[11,"try_into","","",202,[[],["result",4]]],[11,"type_id","","",202,[[],["typeid",3]]],[11,"span","","",199,[[],["span",3]]],[11,"from","","",199,[[]]],[11,"into","","",199,[[]]],[11,"to_owned","","",199,[[]]],[11,"clone_into","","",199,[[]]],[11,"borrow","","",199,[[]]],[11,"borrow_mut","","",199,[[]]],[11,"try_from","","",199,[[],["result",4]]],[11,"try_into","","",199,[[],["result",4]]],[11,"type_id","","",199,[[],["typeid",3]]],[11,"span","","",309,[[],["span",3]]],[11,"from","","",309,[[]]],[11,"into","","",309,[[]]],[11,"to_owned","","",309,[[]]],[11,"clone_into","","",309,[[]]],[11,"borrow","","",309,[[]]],[11,"borrow_mut","","",309,[[]]],[11,"try_from","","",309,[[],["result",4]]],[11,"try_into","","",309,[[],["result",4]]],[11,"type_id","","",309,[[],["typeid",3]]],[11,"span","","",310,[[],["span",3]]],[11,"from","","",310,[[]]],[11,"into","","",310,[[]]],[11,"to_owned","","",310,[[]]],[11,"clone_into","","",310,[[]]],[11,"borrow","","",310,[[]]],[11,"borrow_mut","","",310,[[]]],[11,"try_from","","",310,[[],["result",4]]],[11,"try_into","","",310,[[],["result",4]]],[11,"type_id","","",310,[[],["typeid",3]]],[11,"span","","",311,[[],["span",3]]],[11,"from","","",311,[[]]],[11,"into","","",311,[[]]],[11,"to_owned","","",311,[[]]],[11,"clone_into","","",311,[[]]],[11,"borrow","","",311,[[]]],[11,"borrow_mut","","",311,[[]]],[11,"try_from","","",311,[[],["result",4]]],[11,"try_into","","",311,[[],["result",4]]],[11,"type_id","","",311,[[],["typeid",3]]],[11,"span","","",198,[[],["span",3]]],[11,"from","","",198,[[]]],[11,"into","","",198,[[]]],[11,"to_owned","","",198,[[]]],[11,"clone_into","","",198,[[]]],[11,"borrow","","",198,[[]]],[11,"borrow_mut","","",198,[[]]],[11,"try_from","","",198,[[],["result",4]]],[11,"try_into","","",198,[[],["result",4]]],[11,"type_id","","",198,[[],["typeid",3]]],[11,"span","","",209,[[],["span",3]]],[11,"from","","",209,[[]]],[11,"into","","",209,[[]]],[11,"to_owned","","",209,[[]]],[11,"clone_into","","",209,[[]]],[11,"borrow","","",209,[[]]],[11,"borrow_mut","","",209,[[]]],[11,"try_from","","",209,[[],["result",4]]],[11,"try_into","","",209,[[],["result",4]]],[11,"type_id","","",209,[[],["typeid",3]]],[11,"span","","",206,[[],["span",3]]],[11,"from","","",206,[[]]],[11,"into","","",206,[[]]],[11,"to_owned","","",206,[[]]],[11,"clone_into","","",206,[[]]],[11,"borrow","","",206,[[]]],[11,"borrow_mut","","",206,[[]]],[11,"try_from","","",206,[[],["result",4]]],[11,"try_into","","",206,[[],["result",4]]],[11,"type_id","","",206,[[],["typeid",3]]],[11,"span","","",207,[[],["span",3]]],[11,"from","","",207,[[]]],[11,"into","","",207,[[]]],[11,"to_owned","","",207,[[]]],[11,"clone_into","","",207,[[]]],[11,"borrow","","",207,[[]]],[11,"borrow_mut","","",207,[[]]],[11,"try_from","","",207,[[],["result",4]]],[11,"try_into","","",207,[[],["result",4]]],[11,"type_id","","",207,[[],["typeid",3]]],[11,"span","","",210,[[],["span",3]]],[11,"from","","",210,[[]]],[11,"into","","",210,[[]]],[11,"to_owned","","",210,[[]]],[11,"clone_into","","",210,[[]]],[11,"borrow","","",210,[[]]],[11,"borrow_mut","","",210,[[]]],[11,"try_from","","",210,[[],["result",4]]],[11,"try_into","","",210,[[],["result",4]]],[11,"type_id","","",210,[[],["typeid",3]]],[11,"span","","",211,[[],["span",3]]],[11,"from","","",211,[[]]],[11,"into","","",211,[[]]],[11,"to_owned","","",211,[[]]],[11,"clone_into","","",211,[[]]],[11,"borrow","","",211,[[]]],[11,"borrow_mut","","",211,[[]]],[11,"try_from","","",211,[[],["result",4]]],[11,"try_into","","",211,[[],["result",4]]],[11,"type_id","","",211,[[],["typeid",3]]],[11,"span","","",205,[[],["span",3]]],[11,"from","","",205,[[]]],[11,"into","","",205,[[]]],[11,"to_owned","","",205,[[]]],[11,"clone_into","","",205,[[]]],[11,"borrow","","",205,[[]]],[11,"borrow_mut","","",205,[[]]],[11,"try_from","","",205,[[],["result",4]]],[11,"try_into","","",205,[[],["result",4]]],[11,"type_id","","",205,[[],["typeid",3]]],[11,"span","","",204,[[],["span",3]]],[11,"from","","",204,[[]]],[11,"into","","",204,[[]]],[11,"to_owned","","",204,[[]]],[11,"clone_into","","",204,[[]]],[11,"borrow","","",204,[[]]],[11,"borrow_mut","","",204,[[]]],[11,"try_from","","",204,[[],["result",4]]],[11,"try_into","","",204,[[],["result",4]]],[11,"type_id","","",204,[[],["typeid",3]]],[11,"span","","",203,[[],["span",3]]],[11,"from","","",203,[[]]],[11,"into","","",203,[[]]],[11,"to_owned","","",203,[[]]],[11,"clone_into","","",203,[[]]],[11,"borrow","","",203,[[]]],[11,"borrow_mut","","",203,[[]]],[11,"try_from","","",203,[[],["result",4]]],[11,"try_into","","",203,[[],["result",4]]],[11,"type_id","","",203,[[],["typeid",3]]],[11,"span","","",230,[[],["span",3]]],[11,"from","","",230,[[]]],[11,"into","","",230,[[]]],[11,"to_owned","","",230,[[]]],[11,"clone_into","","",230,[[]]],[11,"borrow","","",230,[[]]],[11,"borrow_mut","","",230,[[]]],[11,"try_from","","",230,[[],["result",4]]],[11,"try_into","","",230,[[],["result",4]]],[11,"type_id","","",230,[[],["typeid",3]]],[11,"span","","",234,[[],["span",3]]],[11,"from","","",234,[[]]],[11,"into","","",234,[[]]],[11,"to_owned","","",234,[[]]],[11,"clone_into","","",234,[[]]],[11,"borrow","","",234,[[]]],[11,"borrow_mut","","",234,[[]]],[11,"try_from","","",234,[[],["result",4]]],[11,"try_into","","",234,[[],["result",4]]],[11,"type_id","","",234,[[],["typeid",3]]],[11,"span","","",247,[[],["span",3]]],[11,"from","","",247,[[]]],[11,"into","","",247,[[]]],[11,"to_owned","","",247,[[]]],[11,"clone_into","","",247,[[]]],[11,"borrow","","",247,[[]]],[11,"borrow_mut","","",247,[[]]],[11,"try_from","","",247,[[],["result",4]]],[11,"try_into","","",247,[[],["result",4]]],[11,"type_id","","",247,[[],["typeid",3]]],[11,"span","","",241,[[],["span",3]]],[11,"from","","",241,[[]]],[11,"into","","",241,[[]]],[11,"to_owned","","",241,[[]]],[11,"clone_into","","",241,[[]]],[11,"borrow","","",241,[[]]],[11,"borrow_mut","","",241,[[]]],[11,"try_from","","",241,[[],["result",4]]],[11,"try_into","","",241,[[],["result",4]]],[11,"type_id","","",241,[[],["typeid",3]]],[11,"span","","",231,[[],["span",3]]],[11,"from","","",231,[[]]],[11,"into","","",231,[[]]],[11,"to_owned","","",231,[[]]],[11,"clone_into","","",231,[[]]],[11,"borrow","","",231,[[]]],[11,"borrow_mut","","",231,[[]]],[11,"try_from","","",231,[[],["result",4]]],[11,"try_into","","",231,[[],["result",4]]],[11,"type_id","","",231,[[],["typeid",3]]],[11,"span","","",235,[[],["span",3]]],[11,"from","","",235,[[]]],[11,"into","","",235,[[]]],[11,"to_owned","","",235,[[]]],[11,"clone_into","","",235,[[]]],[11,"borrow","","",235,[[]]],[11,"borrow_mut","","",235,[[]]],[11,"try_from","","",235,[[],["result",4]]],[11,"try_into","","",235,[[],["result",4]]],[11,"type_id","","",235,[[],["typeid",3]]],[11,"span","","",240,[[],["span",3]]],[11,"from","","",240,[[]]],[11,"into","","",240,[[]]],[11,"to_owned","","",240,[[]]],[11,"clone_into","","",240,[[]]],[11,"borrow","","",240,[[]]],[11,"borrow_mut","","",240,[[]]],[11,"try_from","","",240,[[],["result",4]]],[11,"try_into","","",240,[[],["result",4]]],[11,"type_id","","",240,[[],["typeid",3]]],[11,"span","","",236,[[],["span",3]]],[11,"from","","",236,[[]]],[11,"into","","",236,[[]]],[11,"to_owned","","",236,[[]]],[11,"clone_into","","",236,[[]]],[11,"borrow","","",236,[[]]],[11,"borrow_mut","","",236,[[]]],[11,"try_from","","",236,[[],["result",4]]],[11,"try_into","","",236,[[],["result",4]]],[11,"type_id","","",236,[[],["typeid",3]]],[11,"span","","",245,[[],["span",3]]],[11,"from","","",245,[[]]],[11,"into","","",245,[[]]],[11,"to_owned","","",245,[[]]],[11,"clone_into","","",245,[[]]],[11,"borrow","","",245,[[]]],[11,"borrow_mut","","",245,[[]]],[11,"try_from","","",245,[[],["result",4]]],[11,"try_into","","",245,[[],["result",4]]],[11,"type_id","","",245,[[],["typeid",3]]],[11,"span","","",233,[[],["span",3]]],[11,"from","","",233,[[]]],[11,"into","","",233,[[]]],[11,"to_owned","","",233,[[]]],[11,"clone_into","","",233,[[]]],[11,"borrow","","",233,[[]]],[11,"borrow_mut","","",233,[[]]],[11,"try_from","","",233,[[],["result",4]]],[11,"try_into","","",233,[[],["result",4]]],[11,"type_id","","",233,[[],["typeid",3]]],[11,"span","","",242,[[],["span",3]]],[11,"from","","",242,[[]]],[11,"into","","",242,[[]]],[11,"to_owned","","",242,[[]]],[11,"clone_into","","",242,[[]]],[11,"borrow","","",242,[[]]],[11,"borrow_mut","","",242,[[]]],[11,"try_from","","",242,[[],["result",4]]],[11,"try_into","","",242,[[],["result",4]]],[11,"type_id","","",242,[[],["typeid",3]]],[11,"span","","",232,[[],["span",3]]],[11,"from","","",232,[[]]],[11,"into","","",232,[[]]],[11,"to_owned","","",232,[[]]],[11,"clone_into","","",232,[[]]],[11,"borrow","","",232,[[]]],[11,"borrow_mut","","",232,[[]]],[11,"try_from","","",232,[[],["result",4]]],[11,"try_into","","",232,[[],["result",4]]],[11,"type_id","","",232,[[],["typeid",3]]],[11,"span","","",246,[[],["span",3]]],[11,"from","","",246,[[]]],[11,"into","","",246,[[]]],[11,"to_owned","","",246,[[]]],[11,"clone_into","","",246,[[]]],[11,"borrow","","",246,[[]]],[11,"borrow_mut","","",246,[[]]],[11,"try_from","","",246,[[],["result",4]]],[11,"try_into","","",246,[[],["result",4]]],[11,"type_id","","",246,[[],["typeid",3]]],[11,"span","","",243,[[],["span",3]]],[11,"from","","",243,[[]]],[11,"into","","",243,[[]]],[11,"to_owned","","",243,[[]]],[11,"clone_into","","",243,[[]]],[11,"borrow","","",243,[[]]],[11,"borrow_mut","","",243,[[]]],[11,"try_from","","",243,[[],["result",4]]],[11,"try_into","","",243,[[],["result",4]]],[11,"type_id","","",243,[[],["typeid",3]]],[11,"span","","",244,[[],["span",3]]],[11,"from","","",244,[[]]],[11,"into","","",244,[[]]],[11,"to_owned","","",244,[[]]],[11,"clone_into","","",244,[[]]],[11,"borrow","","",244,[[]]],[11,"borrow_mut","","",244,[[]]],[11,"try_from","","",244,[[],["result",4]]],[11,"try_into","","",244,[[],["result",4]]],[11,"type_id","","",244,[[],["typeid",3]]],[11,"span","","",237,[[],["span",3]]],[11,"from","","",237,[[]]],[11,"into","","",237,[[]]],[11,"to_owned","","",237,[[]]],[11,"clone_into","","",237,[[]]],[11,"borrow","","",237,[[]]],[11,"borrow_mut","","",237,[[]]],[11,"try_from","","",237,[[],["result",4]]],[11,"try_into","","",237,[[],["result",4]]],[11,"type_id","","",237,[[],["typeid",3]]],[11,"span","","",238,[[],["span",3]]],[11,"from","","",238,[[]]],[11,"into","","",238,[[]]],[11,"to_owned","","",238,[[]]],[11,"clone_into","","",238,[[]]],[11,"borrow","","",238,[[]]],[11,"borrow_mut","","",238,[[]]],[11,"try_from","","",238,[[],["result",4]]],[11,"try_into","","",238,[[],["result",4]]],[11,"type_id","","",238,[[],["typeid",3]]],[11,"span","","",239,[[],["span",3]]],[11,"from","","",239,[[]]],[11,"into","","",239,[[]]],[11,"to_owned","","",239,[[]]],[11,"clone_into","","",239,[[]]],[11,"borrow","","",239,[[]]],[11,"borrow_mut","","",239,[[]]],[11,"try_from","","",239,[[],["result",4]]],[11,"try_into","","",239,[[],["result",4]]],[11,"type_id","","",239,[[],["typeid",3]]],[11,"span","","",248,[[],["span",3]]],[11,"from","","",248,[[]]],[11,"into","","",248,[[]]],[11,"to_owned","","",248,[[]]],[11,"clone_into","","",248,[[]]],[11,"borrow","","",248,[[]]],[11,"borrow_mut","","",248,[[]]],[11,"try_from","","",248,[[],["result",4]]],[11,"try_into","","",248,[[],["result",4]]],[11,"type_id","","",248,[[],["typeid",3]]],[11,"span","","",261,[[],["span",3]]],[11,"from","","",261,[[]]],[11,"into","","",261,[[]]],[11,"to_owned","","",261,[[]]],[11,"clone_into","","",261,[[]]],[11,"borrow","","",261,[[]]],[11,"borrow_mut","","",261,[[]]],[11,"try_from","","",261,[[],["result",4]]],[11,"try_into","","",261,[[],["result",4]]],[11,"type_id","","",261,[[],["typeid",3]]],[11,"span","","",259,[[],["span",3]]],[11,"from","","",259,[[]]],[11,"into","","",259,[[]]],[11,"to_owned","","",259,[[]]],[11,"clone_into","","",259,[[]]],[11,"borrow","","",259,[[]]],[11,"borrow_mut","","",259,[[]]],[11,"try_from","","",259,[[],["result",4]]],[11,"try_into","","",259,[[],["result",4]]],[11,"type_id","","",259,[[],["typeid",3]]],[11,"span","","",258,[[],["span",3]]],[11,"from","","",258,[[]]],[11,"into","","",258,[[]]],[11,"to_owned","","",258,[[]]],[11,"clone_into","","",258,[[]]],[11,"borrow","","",258,[[]]],[11,"borrow_mut","","",258,[[]]],[11,"try_from","","",258,[[],["result",4]]],[11,"try_into","","",258,[[],["result",4]]],[11,"type_id","","",258,[[],["typeid",3]]],[11,"span","","",260,[[],["span",3]]],[11,"from","","",260,[[]]],[11,"into","","",260,[[]]],[11,"to_owned","","",260,[[]]],[11,"clone_into","","",260,[[]]],[11,"borrow","","",260,[[]]],[11,"borrow_mut","","",260,[[]]],[11,"try_from","","",260,[[],["result",4]]],[11,"try_into","","",260,[[],["result",4]]],[11,"type_id","","",260,[[],["typeid",3]]],[11,"span","","",256,[[],["span",3]]],[11,"from","","",256,[[]]],[11,"into","","",256,[[]]],[11,"to_owned","","",256,[[]]],[11,"clone_into","","",256,[[]]],[11,"borrow","","",256,[[]]],[11,"borrow_mut","","",256,[[]]],[11,"try_from","","",256,[[],["result",4]]],[11,"try_into","","",256,[[],["result",4]]],[11,"type_id","","",256,[[],["typeid",3]]],[11,"span","","",257,[[],["span",3]]],[11,"from","","",257,[[]]],[11,"into","","",257,[[]]],[11,"to_owned","","",257,[[]]],[11,"clone_into","","",257,[[]]],[11,"borrow","","",257,[[]]],[11,"borrow_mut","","",257,[[]]],[11,"try_from","","",257,[[],["result",4]]],[11,"try_into","","",257,[[],["result",4]]],[11,"type_id","","",257,[[],["typeid",3]]],[11,"span","","",217,[[],["span",3]]],[11,"from","","",217,[[]]],[11,"into","","",217,[[]]],[11,"to_owned","","",217,[[]]],[11,"clone_into","","",217,[[]]],[11,"borrow","","",217,[[]]],[11,"borrow_mut","","",217,[[]]],[11,"try_from","","",217,[[],["result",4]]],[11,"try_into","","",217,[[],["result",4]]],[11,"type_id","","",217,[[],["typeid",3]]],[11,"span","","",218,[[],["span",3]]],[11,"from","","",218,[[]]],[11,"into","","",218,[[]]],[11,"to_owned","","",218,[[]]],[11,"clone_into","","",218,[[]]],[11,"borrow","","",218,[[]]],[11,"borrow_mut","","",218,[[]]],[11,"try_from","","",218,[[],["result",4]]],[11,"try_into","","",218,[[],["result",4]]],[11,"type_id","","",218,[[],["typeid",3]]],[11,"span","","",220,[[],["span",3]]],[11,"from","","",220,[[]]],[11,"into","","",220,[[]]],[11,"to_owned","","",220,[[]]],[11,"clone_into","","",220,[[]]],[11,"borrow","","",220,[[]]],[11,"borrow_mut","","",220,[[]]],[11,"try_from","","",220,[[],["result",4]]],[11,"try_into","","",220,[[],["result",4]]],[11,"type_id","","",220,[[],["typeid",3]]],[11,"span","","",221,[[],["span",3]]],[11,"from","","",221,[[]]],[11,"into","","",221,[[]]],[11,"to_owned","","",221,[[]]],[11,"clone_into","","",221,[[]]],[11,"borrow","","",221,[[]]],[11,"borrow_mut","","",221,[[]]],[11,"try_from","","",221,[[],["result",4]]],[11,"try_into","","",221,[[],["result",4]]],[11,"type_id","","",221,[[],["typeid",3]]],[11,"span","","",219,[[],["span",3]]],[11,"from","","",219,[[]]],[11,"into","","",219,[[]]],[11,"to_owned","","",219,[[]]],[11,"clone_into","","",219,[[]]],[11,"borrow","","",219,[[]]],[11,"borrow_mut","","",219,[[]]],[11,"try_from","","",219,[[],["result",4]]],[11,"try_into","","",219,[[],["result",4]]],[11,"type_id","","",219,[[],["typeid",3]]],[11,"span","","",222,[[],["span",3]]],[11,"from","","",222,[[]]],[11,"into","","",222,[[]]],[11,"to_owned","","",222,[[]]],[11,"clone_into","","",222,[[]]],[11,"borrow","","",222,[[]]],[11,"borrow_mut","","",222,[[]]],[11,"try_from","","",222,[[],["result",4]]],[11,"try_into","","",222,[[],["result",4]]],[11,"type_id","","",222,[[],["typeid",3]]],[11,"span","","",250,[[],["span",3]]],[11,"from","","",250,[[]]],[11,"into","","",250,[[]]],[11,"to_owned","","",250,[[]]],[11,"clone_into","","",250,[[]]],[11,"borrow","","",250,[[]]],[11,"borrow_mut","","",250,[[]]],[11,"try_from","","",250,[[],["result",4]]],[11,"try_into","","",250,[[],["result",4]]],[11,"type_id","","",250,[[],["typeid",3]]],[11,"span","","",251,[[],["span",3]]],[11,"from","","",251,[[]]],[11,"into","","",251,[[]]],[11,"to_owned","","",251,[[]]],[11,"clone_into","","",251,[[]]],[11,"borrow","","",251,[[]]],[11,"borrow_mut","","",251,[[]]],[11,"try_from","","",251,[[],["result",4]]],[11,"try_into","","",251,[[],["result",4]]],[11,"type_id","","",251,[[],["typeid",3]]],[11,"span","","",253,[[],["span",3]]],[11,"from","","",253,[[]]],[11,"into","","",253,[[]]],[11,"to_owned","","",253,[[]]],[11,"clone_into","","",253,[[]]],[11,"borrow","","",253,[[]]],[11,"borrow_mut","","",253,[[]]],[11,"try_from","","",253,[[],["result",4]]],[11,"try_into","","",253,[[],["result",4]]],[11,"type_id","","",253,[[],["typeid",3]]],[11,"span","","",254,[[],["span",3]]],[11,"from","","",254,[[]]],[11,"into","","",254,[[]]],[11,"to_owned","","",254,[[]]],[11,"clone_into","","",254,[[]]],[11,"borrow","","",254,[[]]],[11,"borrow_mut","","",254,[[]]],[11,"try_from","","",254,[[],["result",4]]],[11,"try_into","","",254,[[],["result",4]]],[11,"type_id","","",254,[[],["typeid",3]]],[11,"span","","",252,[[],["span",3]]],[11,"from","","",252,[[]]],[11,"into","","",252,[[]]],[11,"to_owned","","",252,[[]]],[11,"clone_into","","",252,[[]]],[11,"borrow","","",252,[[]]],[11,"borrow_mut","","",252,[[]]],[11,"try_from","","",252,[[],["result",4]]],[11,"try_into","","",252,[[],["result",4]]],[11,"type_id","","",252,[[],["typeid",3]]],[11,"span","","",255,[[],["span",3]]],[11,"from","","",255,[[]]],[11,"into","","",255,[[]]],[11,"to_owned","","",255,[[]]],[11,"clone_into","","",255,[[]]],[11,"borrow","","",255,[[]]],[11,"borrow_mut","","",255,[[]]],[11,"try_from","","",255,[[],["result",4]]],[11,"try_into","","",255,[[],["result",4]]],[11,"type_id","","",255,[[],["typeid",3]]],[11,"span","","",223,[[],["span",3]]],[11,"from","","",223,[[]]],[11,"into","","",223,[[]]],[11,"to_owned","","",223,[[]]],[11,"clone_into","","",223,[[]]],[11,"borrow","","",223,[[]]],[11,"borrow_mut","","",223,[[]]],[11,"try_from","","",223,[[],["result",4]]],[11,"try_into","","",223,[[],["result",4]]],[11,"type_id","","",223,[[],["typeid",3]]],[11,"span","","",224,[[],["span",3]]],[11,"from","","",224,[[]]],[11,"into","","",224,[[]]],[11,"to_owned","","",224,[[]]],[11,"clone_into","","",224,[[]]],[11,"borrow","","",224,[[]]],[11,"borrow_mut","","",224,[[]]],[11,"try_from","","",224,[[],["result",4]]],[11,"try_into","","",224,[[],["result",4]]],[11,"type_id","","",224,[[],["typeid",3]]],[11,"span","","",227,[[],["span",3]]],[11,"from","","",227,[[]]],[11,"into","","",227,[[]]],[11,"to_owned","","",227,[[]]],[11,"clone_into","","",227,[[]]],[11,"borrow","","",227,[[]]],[11,"borrow_mut","","",227,[[]]],[11,"try_from","","",227,[[],["result",4]]],[11,"try_into","","",227,[[],["result",4]]],[11,"type_id","","",227,[[],["typeid",3]]],[11,"span","","",228,[[],["span",3]]],[11,"from","","",228,[[]]],[11,"into","","",228,[[]]],[11,"to_owned","","",228,[[]]],[11,"clone_into","","",228,[[]]],[11,"borrow","","",228,[[]]],[11,"borrow_mut","","",228,[[]]],[11,"try_from","","",228,[[],["result",4]]],[11,"try_into","","",228,[[],["result",4]]],[11,"type_id","","",228,[[],["typeid",3]]],[11,"span","","",225,[[],["span",3]]],[11,"from","","",225,[[]]],[11,"into","","",225,[[]]],[11,"to_owned","","",225,[[]]],[11,"clone_into","","",225,[[]]],[11,"borrow","","",225,[[]]],[11,"borrow_mut","","",225,[[]]],[11,"try_from","","",225,[[],["result",4]]],[11,"try_into","","",225,[[],["result",4]]],[11,"type_id","","",225,[[],["typeid",3]]],[11,"span","","",226,[[],["span",3]]],[11,"from","","",226,[[]]],[11,"into","","",226,[[]]],[11,"to_owned","","",226,[[]]],[11,"clone_into","","",226,[[]]],[11,"borrow","","",226,[[]]],[11,"borrow_mut","","",226,[[]]],[11,"try_from","","",226,[[],["result",4]]],[11,"try_into","","",226,[[],["result",4]]],[11,"type_id","","",226,[[],["typeid",3]]],[11,"span","","",229,[[],["span",3]]],[11,"from","","",229,[[]]],[11,"into","","",229,[[]]],[11,"to_owned","","",229,[[]]],[11,"clone_into","","",229,[[]]],[11,"borrow","","",229,[[]]],[11,"borrow_mut","","",229,[[]]],[11,"try_from","","",229,[[],["result",4]]],[11,"try_into","","",229,[[],["result",4]]],[11,"type_id","","",229,[[],["typeid",3]]],[11,"span","","",249,[[],["span",3]]],[11,"from","","",249,[[]]],[11,"into","","",249,[[]]],[11,"to_owned","","",249,[[]]],[11,"clone_into","","",249,[[]]],[11,"borrow","","",249,[[]]],[11,"borrow_mut","","",249,[[]]],[11,"try_from","","",249,[[],["result",4]]],[11,"try_into","","",249,[[],["result",4]]],[11,"type_id","","",249,[[],["typeid",3]]],[11,"from","","",216,[[]]],[11,"into","","",216,[[]]],[11,"to_owned","","",216,[[]]],[11,"clone_into","","",216,[[]]],[11,"borrow","","",216,[[]]],[11,"borrow_mut","","",216,[[]]],[11,"try_from","","",216,[[],["result",4]]],[11,"try_into","","",216,[[],["result",4]]],[11,"type_id","","",216,[[],["typeid",3]]],[11,"span","","",215,[[],["span",3]]],[11,"from","","",215,[[]]],[11,"into","","",215,[[]]],[11,"to_owned","","",215,[[]]],[11,"clone_into","","",215,[[]]],[11,"borrow","","",215,[[]]],[11,"borrow_mut","","",215,[[]]],[11,"try_from","","",215,[[],["result",4]]],[11,"try_into","","",215,[[],["result",4]]],[11,"type_id","","",215,[[],["typeid",3]]],[11,"span","","",214,[[],["span",3]]],[11,"from","","",214,[[]]],[11,"into","","",214,[[]]],[11,"to_owned","","",214,[[]]],[11,"clone_into","","",214,[[]]],[11,"borrow","","",214,[[]]],[11,"borrow_mut","","",214,[[]]],[11,"try_from","","",214,[[],["result",4]]],[11,"try_into","","",214,[[],["result",4]]],[11,"type_id","","",214,[[],["typeid",3]]],[11,"span","","",213,[[],["span",3]]],[11,"from","","",213,[[]]],[11,"into","","",213,[[]]],[11,"to_owned","","",213,[[]]],[11,"clone_into","","",213,[[]]],[11,"borrow","","",213,[[]]],[11,"borrow_mut","","",213,[[]]],[11,"try_from","","",213,[[],["result",4]]],[11,"try_into","","",213,[[],["result",4]]],[11,"type_id","","",213,[[],["typeid",3]]],[11,"span","","",212,[[],["span",3]]],[11,"from","","",212,[[]]],[11,"into","","",212,[[]]],[11,"to_owned","","",212,[[]]],[11,"clone_into","","",212,[[]]],[11,"borrow","","",212,[[]]],[11,"borrow_mut","","",212,[[]]],[11,"try_from","","",212,[[],["result",4]]],[11,"try_into","","",212,[[],["result",4]]],[11,"type_id","","",212,[[],["typeid",3]]],[11,"span","","",262,[[],["span",3]]],[11,"from","","",262,[[]]],[11,"into","","",262,[[]]],[11,"to_owned","","",262,[[]]],[11,"clone_into","","",262,[[]]],[11,"borrow","","",262,[[]]],[11,"borrow_mut","","",262,[[]]],[11,"try_from","","",262,[[],["result",4]]],[11,"try_into","","",262,[[],["result",4]]],[11,"type_id","","",262,[[],["typeid",3]]],[11,"span","","",263,[[],["span",3]]],[11,"from","","",263,[[]]],[11,"into","","",263,[[]]],[11,"to_owned","","",263,[[]]],[11,"clone_into","","",263,[[]]],[11,"to_string","","",263,[[],["string",3]]],[11,"borrow","","",263,[[]]],[11,"borrow_mut","","",263,[[]]],[11,"try_from","","",263,[[],["result",4]]],[11,"try_into","","",263,[[],["result",4]]],[11,"type_id","","",263,[[],["typeid",3]]],[11,"span","","",266,[[],["span",3]]],[11,"from","","",266,[[]]],[11,"into","","",266,[[]]],[11,"to_owned","","",266,[[]]],[11,"clone_into","","",266,[[]]],[11,"borrow","","",266,[[]]],[11,"borrow_mut","","",266,[[]]],[11,"try_from","","",266,[[],["result",4]]],[11,"try_into","","",266,[[],["result",4]]],[11,"type_id","","",266,[[],["typeid",3]]],[11,"span","","",312,[[],["span",3]]],[11,"from","","",312,[[]]],[11,"into","","",312,[[]]],[11,"to_owned","","",312,[[]]],[11,"clone_into","","",312,[[]]],[11,"borrow","","",312,[[]]],[11,"borrow_mut","","",312,[[]]],[11,"try_from","","",312,[[],["result",4]]],[11,"try_into","","",312,[[],["result",4]]],[11,"type_id","","",312,[[],["typeid",3]]],[11,"span","","",313,[[],["span",3]]],[11,"from","","",313,[[]]],[11,"into","","",313,[[]]],[11,"to_owned","","",313,[[]]],[11,"clone_into","","",313,[[]]],[11,"borrow","","",313,[[]]],[11,"borrow_mut","","",313,[[]]],[11,"try_from","","",313,[[],["result",4]]],[11,"try_into","","",313,[[],["result",4]]],[11,"type_id","","",313,[[],["typeid",3]]],[11,"span","","",314,[[],["span",3]]],[11,"from","","",314,[[]]],[11,"into","","",314,[[]]],[11,"to_owned","","",314,[[]]],[11,"clone_into","","",314,[[]]],[11,"borrow","","",314,[[]]],[11,"borrow_mut","","",314,[[]]],[11,"try_from","","",314,[[],["result",4]]],[11,"try_into","","",314,[[],["result",4]]],[11,"type_id","","",314,[[],["typeid",3]]],[11,"span","","",315,[[],["span",3]]],[11,"from","","",315,[[]]],[11,"into","","",315,[[]]],[11,"to_owned","","",315,[[]]],[11,"clone_into","","",315,[[]]],[11,"borrow","","",315,[[]]],[11,"borrow_mut","","",315,[[]]],[11,"try_from","","",315,[[],["result",4]]],[11,"try_into","","",315,[[],["result",4]]],[11,"type_id","","",315,[[],["typeid",3]]],[11,"span","","",316,[[],["span",3]]],[11,"from","","",316,[[]]],[11,"into","","",316,[[]]],[11,"to_owned","","",316,[[]]],[11,"clone_into","","",316,[[]]],[11,"borrow","","",316,[[]]],[11,"borrow_mut","","",316,[[]]],[11,"try_from","","",316,[[],["result",4]]],[11,"try_into","","",316,[[],["result",4]]],[11,"type_id","","",316,[[],["typeid",3]]],[11,"span","","",317,[[],["span",3]]],[11,"from","","",317,[[]]],[11,"into","","",317,[[]]],[11,"to_owned","","",317,[[]]],[11,"clone_into","","",317,[[]]],[11,"borrow","","",317,[[]]],[11,"borrow_mut","","",317,[[]]],[11,"try_from","","",317,[[],["result",4]]],[11,"try_into","","",317,[[],["result",4]]],[11,"type_id","","",317,[[],["typeid",3]]],[11,"span","","",267,[[],["span",3]]],[11,"from","","",267,[[]]],[11,"into","","",267,[[]]],[11,"to_owned","","",267,[[]]],[11,"clone_into","","",267,[[]]],[11,"borrow","","",267,[[]]],[11,"borrow_mut","","",267,[[]]],[11,"try_from","","",267,[[],["result",4]]],[11,"try_into","","",267,[[],["result",4]]],[11,"type_id","","",267,[[],["typeid",3]]],[11,"span","","",268,[[],["span",3]]],[11,"from","","",268,[[]]],[11,"into","","",268,[[]]],[11,"to_owned","","",268,[[]]],[11,"clone_into","","",268,[[]]],[11,"borrow","","",268,[[]]],[11,"borrow_mut","","",268,[[]]],[11,"try_from","","",268,[[],["result",4]]],[11,"try_into","","",268,[[],["result",4]]],[11,"type_id","","",268,[[],["typeid",3]]],[11,"from","","",269,[[]]],[11,"into","","",269,[[]]],[11,"to_owned","","",269,[[]]],[11,"clone_into","","",269,[[]]],[11,"borrow","","",269,[[]]],[11,"borrow_mut","","",269,[[]]],[11,"try_from","","",269,[[],["result",4]]],[11,"try_into","","",269,[[],["result",4]]],[11,"type_id","","",269,[[],["typeid",3]]],[11,"from","","",265,[[]]],[11,"into","","",265,[[]]],[11,"to_owned","","",265,[[]]],[11,"clone_into","","",265,[[]]],[11,"borrow","","",265,[[]]],[11,"borrow_mut","","",265,[[]]],[11,"try_from","","",265,[[],["result",4]]],[11,"try_into","","",265,[[],["result",4]]],[11,"type_id","","",265,[[],["typeid",3]]],[11,"from","","",264,[[]]],[11,"into","","",264,[[]]],[11,"to_owned","","",264,[[]]],[11,"clone_into","","",264,[[]]],[11,"borrow","","",264,[[]]],[11,"borrow_mut","","",264,[[]]],[11,"try_from","","",264,[[],["result",4]]],[11,"try_into","","",264,[[],["result",4]]],[11,"type_id","","",264,[[],["typeid",3]]],[11,"span","","",270,[[],["span",3]]],[11,"from","","",270,[[]]],[11,"into","","",270,[[]]],[11,"to_owned","","",270,[[]]],[11,"clone_into","","",270,[[]]],[11,"borrow","","",270,[[]]],[11,"borrow_mut","","",270,[[]]],[11,"try_from","","",270,[[],["result",4]]],[11,"try_into","","",270,[[],["result",4]]],[11,"type_id","","",270,[[],["typeid",3]]],[11,"from","","",271,[[]]],[11,"into","","",271,[[]]],[11,"to_owned","","",271,[[]]],[11,"clone_into","","",271,[[]]],[11,"borrow","","",271,[[]]],[11,"borrow_mut","","",271,[[]]],[11,"try_from","","",271,[[],["result",4]]],[11,"try_into","","",271,[[],["result",4]]],[11,"type_id","","",271,[[],["typeid",3]]],[11,"span","","",276,[[],["span",3]]],[11,"from","","",276,[[]]],[11,"into","","",276,[[]]],[11,"to_owned","","",276,[[]]],[11,"clone_into","","",276,[[]]],[11,"borrow","","",276,[[]]],[11,"borrow_mut","","",276,[[]]],[11,"try_from","","",276,[[],["result",4]]],[11,"try_into","","",276,[[],["result",4]]],[11,"type_id","","",276,[[],["typeid",3]]],[11,"from","","",272,[[]]],[11,"into","","",272,[[]]],[11,"to_owned","","",272,[[]]],[11,"clone_into","","",272,[[]]],[11,"borrow","","",272,[[]]],[11,"borrow_mut","","",272,[[]]],[11,"try_from","","",272,[[],["result",4]]],[11,"try_into","","",272,[[],["result",4]]],[11,"type_id","","",272,[[],["typeid",3]]],[11,"from","","",274,[[]]],[11,"into","","",274,[[]]],[11,"to_owned","","",274,[[]]],[11,"clone_into","","",274,[[]]],[11,"borrow","","",274,[[]]],[11,"borrow_mut","","",274,[[]]],[11,"try_from","","",274,[[],["result",4]]],[11,"try_into","","",274,[[],["result",4]]],[11,"type_id","","",274,[[],["typeid",3]]],[11,"from","","",273,[[]]],[11,"into","","",273,[[]]],[11,"to_owned","","",273,[[]]],[11,"clone_into","","",273,[[]]],[11,"borrow","","",273,[[]]],[11,"borrow_mut","","",273,[[]]],[11,"try_from","","",273,[[],["result",4]]],[11,"try_into","","",273,[[],["result",4]]],[11,"type_id","","",273,[[],["typeid",3]]],[11,"from","","",275,[[]]],[11,"into","","",275,[[]]],[11,"to_owned","","",275,[[]]],[11,"clone_into","","",275,[[]]],[11,"borrow","","",275,[[]]],[11,"borrow_mut","","",275,[[]]],[11,"try_from","","",275,[[],["result",4]]],[11,"try_into","","",275,[[],["result",4]]],[11,"type_id","","",275,[[],["typeid",3]]],[11,"span","","",277,[[],["span",3]]],[11,"from","","",277,[[]]],[11,"into","","",277,[[]]],[11,"to_owned","","",277,[[]]],[11,"clone_into","","",277,[[]]],[11,"borrow","","",277,[[]]],[11,"borrow_mut","","",277,[[]]],[11,"try_from","","",277,[[],["result",4]]],[11,"try_into","","",277,[[],["result",4]]],[11,"type_id","","",277,[[],["typeid",3]]],[11,"span","","",278,[[],["span",3]]],[11,"from","","",278,[[]]],[11,"into","","",278,[[]]],[11,"to_owned","","",278,[[]]],[11,"clone_into","","",278,[[]]],[11,"borrow","","",278,[[]]],[11,"borrow_mut","","",278,[[]]],[11,"try_from","","",278,[[],["result",4]]],[11,"try_into","","",278,[[],["result",4]]],[11,"type_id","","",278,[[],["typeid",3]]],[11,"span","","",283,[[],["span",3]]],[11,"from","","",283,[[]]],[11,"into","","",283,[[]]],[11,"to_owned","","",283,[[]]],[11,"clone_into","","",283,[[]]],[11,"borrow","","",283,[[]]],[11,"borrow_mut","","",283,[[]]],[11,"try_from","","",283,[[],["result",4]]],[11,"try_into","","",283,[[],["result",4]]],[11,"type_id","","",283,[[],["typeid",3]]],[11,"span","","",295,[[],["span",3]]],[11,"from","","",295,[[]]],[11,"into","","",295,[[]]],[11,"to_owned","","",295,[[]]],[11,"clone_into","","",295,[[]]],[11,"borrow","","",295,[[]]],[11,"borrow_mut","","",295,[[]]],[11,"try_from","","",295,[[],["result",4]]],[11,"try_into","","",295,[[],["result",4]]],[11,"type_id","","",295,[[],["typeid",3]]],[11,"span","","",284,[[],["span",3]]],[11,"from","","",284,[[]]],[11,"into","","",284,[[]]],[11,"to_owned","","",284,[[]]],[11,"clone_into","","",284,[[]]],[11,"borrow","","",284,[[]]],[11,"borrow_mut","","",284,[[]]],[11,"try_from","","",284,[[],["result",4]]],[11,"try_into","","",284,[[],["result",4]]],[11,"type_id","","",284,[[],["typeid",3]]],[11,"span","","",293,[[],["span",3]]],[11,"from","","",293,[[]]],[11,"into","","",293,[[]]],[11,"to_owned","","",293,[[]]],[11,"clone_into","","",293,[[]]],[11,"borrow","","",293,[[]]],[11,"borrow_mut","","",293,[[]]],[11,"try_from","","",293,[[],["result",4]]],[11,"try_into","","",293,[[],["result",4]]],[11,"type_id","","",293,[[],["typeid",3]]],[11,"span","","",294,[[],["span",3]]],[11,"from","","",294,[[]]],[11,"into","","",294,[[]]],[11,"to_owned","","",294,[[]]],[11,"clone_into","","",294,[[]]],[11,"borrow","","",294,[[]]],[11,"borrow_mut","","",294,[[]]],[11,"try_from","","",294,[[],["result",4]]],[11,"try_into","","",294,[[],["result",4]]],[11,"type_id","","",294,[[],["typeid",3]]],[11,"span","","",285,[[],["span",3]]],[11,"from","","",285,[[]]],[11,"into","","",285,[[]]],[11,"to_owned","","",285,[[]]],[11,"clone_into","","",285,[[]]],[11,"borrow","","",285,[[]]],[11,"borrow_mut","","",285,[[]]],[11,"try_from","","",285,[[],["result",4]]],[11,"try_into","","",285,[[],["result",4]]],[11,"type_id","","",285,[[],["typeid",3]]],[11,"span","","",290,[[],["span",3]]],[11,"from","","",290,[[]]],[11,"into","","",290,[[]]],[11,"to_owned","","",290,[[]]],[11,"clone_into","","",290,[[]]],[11,"borrow","","",290,[[]]],[11,"borrow_mut","","",290,[[]]],[11,"try_from","","",290,[[],["result",4]]],[11,"try_into","","",290,[[],["result",4]]],[11,"type_id","","",290,[[],["typeid",3]]],[11,"span","","",297,[[],["span",3]]],[11,"from","","",297,[[]]],[11,"into","","",297,[[]]],[11,"to_owned","","",297,[[]]],[11,"clone_into","","",297,[[]]],[11,"borrow","","",297,[[]]],[11,"borrow_mut","","",297,[[]]],[11,"try_from","","",297,[[],["result",4]]],[11,"try_into","","",297,[[],["result",4]]],[11,"type_id","","",297,[[],["typeid",3]]],[11,"span","","",292,[[],["span",3]]],[11,"from","","",292,[[]]],[11,"into","","",292,[[]]],[11,"to_owned","","",292,[[]]],[11,"clone_into","","",292,[[]]],[11,"borrow","","",292,[[]]],[11,"borrow_mut","","",292,[[]]],[11,"try_from","","",292,[[],["result",4]]],[11,"try_into","","",292,[[],["result",4]]],[11,"type_id","","",292,[[],["typeid",3]]],[11,"span","","",296,[[],["span",3]]],[11,"from","","",296,[[]]],[11,"into","","",296,[[]]],[11,"to_owned","","",296,[[]]],[11,"clone_into","","",296,[[]]],[11,"borrow","","",296,[[]]],[11,"borrow_mut","","",296,[[]]],[11,"try_from","","",296,[[],["result",4]]],[11,"try_into","","",296,[[],["result",4]]],[11,"type_id","","",296,[[],["typeid",3]]],[11,"span","","",287,[[],["span",3]]],[11,"from","","",287,[[]]],[11,"into","","",287,[[]]],[11,"to_owned","","",287,[[]]],[11,"clone_into","","",287,[[]]],[11,"borrow","","",287,[[]]],[11,"borrow_mut","","",287,[[]]],[11,"try_from","","",287,[[],["result",4]]],[11,"try_into","","",287,[[],["result",4]]],[11,"type_id","","",287,[[],["typeid",3]]],[11,"span","","",291,[[],["span",3]]],[11,"from","","",291,[[]]],[11,"into","","",291,[[]]],[11,"to_owned","","",291,[[]]],[11,"clone_into","","",291,[[]]],[11,"borrow","","",291,[[]]],[11,"borrow_mut","","",291,[[]]],[11,"try_from","","",291,[[],["result",4]]],[11,"try_into","","",291,[[],["result",4]]],[11,"type_id","","",291,[[],["typeid",3]]],[11,"span","","",286,[[],["span",3]]],[11,"from","","",286,[[]]],[11,"into","","",286,[[]]],[11,"to_owned","","",286,[[]]],[11,"clone_into","","",286,[[]]],[11,"borrow","","",286,[[]]],[11,"borrow_mut","","",286,[[]]],[11,"try_from","","",286,[[],["result",4]]],[11,"try_into","","",286,[[],["result",4]]],[11,"type_id","","",286,[[],["typeid",3]]],[11,"span","","",288,[[],["span",3]]],[11,"from","","",288,[[]]],[11,"into","","",288,[[]]],[11,"to_owned","","",288,[[]]],[11,"clone_into","","",288,[[]]],[11,"borrow","","",288,[[]]],[11,"borrow_mut","","",288,[[]]],[11,"try_from","","",288,[[],["result",4]]],[11,"try_into","","",288,[[],["result",4]]],[11,"type_id","","",288,[[],["typeid",3]]],[11,"span","","",289,[[],["span",3]]],[11,"from","","",289,[[]]],[11,"into","","",289,[[]]],[11,"to_owned","","",289,[[]]],[11,"clone_into","","",289,[[]]],[11,"borrow","","",289,[[]]],[11,"borrow_mut","","",289,[[]]],[11,"try_from","","",289,[[],["result",4]]],[11,"try_into","","",289,[[],["result",4]]],[11,"type_id","","",289,[[],["typeid",3]]],[11,"span","","",298,[[],["span",3]]],[11,"from","","",298,[[]]],[11,"into","","",298,[[]]],[11,"to_owned","","",298,[[]]],[11,"clone_into","","",298,[[]]],[11,"borrow","","",298,[[]]],[11,"borrow_mut","","",298,[[]]],[11,"try_from","","",298,[[],["result",4]]],[11,"try_into","","",298,[[],["result",4]]],[11,"type_id","","",298,[[],["typeid",3]]],[11,"span","","",279,[[],["span",3]]],[11,"from","","",279,[[]]],[11,"into","","",279,[[]]],[11,"to_owned","","",279,[[]]],[11,"clone_into","","",279,[[]]],[11,"borrow","","",279,[[]]],[11,"borrow_mut","","",279,[[]]],[11,"try_from","","",279,[[],["result",4]]],[11,"try_into","","",279,[[],["result",4]]],[11,"type_id","","",279,[[],["typeid",3]]],[11,"span","","",280,[[],["span",3]]],[11,"from","","",280,[[]]],[11,"into","","",280,[[]]],[11,"to_owned","","",280,[[]]],[11,"clone_into","","",280,[[]]],[11,"borrow","","",280,[[]]],[11,"borrow_mut","","",280,[[]]],[11,"try_from","","",280,[[],["result",4]]],[11,"try_into","","",280,[[],["result",4]]],[11,"type_id","","",280,[[],["typeid",3]]],[11,"span","","",281,[[],["span",3]]],[11,"from","","",281,[[]]],[11,"into","","",281,[[]]],[11,"to_owned","","",281,[[]]],[11,"clone_into","","",281,[[]]],[11,"borrow","","",281,[[]]],[11,"borrow_mut","","",281,[[]]],[11,"try_from","","",281,[[],["result",4]]],[11,"try_into","","",281,[[],["result",4]]],[11,"type_id","","",281,[[],["typeid",3]]],[11,"span","","",282,[[],["span",3]]],[11,"from","","",282,[[]]],[11,"into","","",282,[[]]],[11,"to_owned","","",282,[[]]],[11,"clone_into","","",282,[[]]],[11,"borrow","","",282,[[]]],[11,"borrow_mut","","",282,[[]]],[11,"try_from","","",282,[[],["result",4]]],[11,"try_into","","",282,[[],["result",4]]],[11,"type_id","","",282,[[],["typeid",3]]],[11,"span","","",304,[[],["span",3]]],[11,"from","","",304,[[]]],[11,"into","","",304,[[]]],[11,"to_owned","","",304,[[]]],[11,"clone_into","","",304,[[]]],[11,"borrow","","",304,[[]]],[11,"borrow_mut","","",304,[[]]],[11,"try_from","","",304,[[],["result",4]]],[11,"try_into","","",304,[[],["result",4]]],[11,"type_id","","",304,[[],["typeid",3]]],[11,"span","","",306,[[],["span",3]]],[11,"from","","",306,[[]]],[11,"into","","",306,[[]]],[11,"to_owned","","",306,[[]]],[11,"clone_into","","",306,[[]]],[11,"borrow","","",306,[[]]],[11,"borrow_mut","","",306,[[]]],[11,"try_from","","",306,[[],["result",4]]],[11,"try_into","","",306,[[],["result",4]]],[11,"type_id","","",306,[[],["typeid",3]]],[11,"span","","",305,[[],["span",3]]],[11,"from","","",305,[[]]],[11,"into","","",305,[[]]],[11,"to_owned","","",305,[[]]],[11,"clone_into","","",305,[[]]],[11,"borrow","","",305,[[]]],[11,"borrow_mut","","",305,[[]]],[11,"try_from","","",305,[[],["result",4]]],[11,"try_into","","",305,[[],["result",4]]],[11,"type_id","","",305,[[],["typeid",3]]],[11,"span","","",302,[[],["span",3]]],[11,"from","","",302,[[]]],[11,"into","","",302,[[]]],[11,"to_owned","","",302,[[]]],[11,"clone_into","","",302,[[]]],[11,"borrow","","",302,[[]]],[11,"borrow_mut","","",302,[[]]],[11,"try_from","","",302,[[],["result",4]]],[11,"try_into","","",302,[[],["result",4]]],[11,"type_id","","",302,[[],["typeid",3]]],[11,"span","","",299,[[],["span",3]]],[11,"from","","",299,[[]]],[11,"into","","",299,[[]]],[11,"to_owned","","",299,[[]]],[11,"clone_into","","",299,[[]]],[11,"borrow","","",299,[[]]],[11,"borrow_mut","","",299,[[]]],[11,"try_from","","",299,[[],["result",4]]],[11,"try_into","","",299,[[],["result",4]]],[11,"type_id","","",299,[[],["typeid",3]]],[11,"span","","",300,[[],["span",3]]],[11,"from","","",300,[[]]],[11,"into","","",300,[[]]],[11,"to_owned","","",300,[[]]],[11,"clone_into","","",300,[[]]],[11,"borrow","","",300,[[]]],[11,"borrow_mut","","",300,[[]]],[11,"try_from","","",300,[[],["result",4]]],[11,"try_into","","",300,[[],["result",4]]],[11,"type_id","","",300,[[],["typeid",3]]],[11,"span","","",301,[[],["span",3]]],[11,"from","","",301,[[]]],[11,"into","","",301,[[]]],[11,"to_owned","","",301,[[]]],[11,"clone_into","","",301,[[]]],[11,"borrow","","",301,[[]]],[11,"borrow_mut","","",301,[[]]],[11,"try_from","","",301,[[],["result",4]]],[11,"try_into","","",301,[[],["result",4]]],[11,"type_id","","",301,[[],["typeid",3]]],[11,"span","","",303,[[],["span",3]]],[11,"from","","",303,[[]]],[11,"into","","",303,[[]]],[11,"to_owned","","",303,[[]]],[11,"clone_into","","",303,[[]]],[11,"borrow","","",303,[[]]],[11,"borrow_mut","","",303,[[]]],[11,"try_from","","",303,[[],["result",4]]],[11,"try_into","","",303,[[],["result",4]]],[11,"type_id","","",303,[[],["typeid",3]]],[11,"from","","",307,[[]]],[11,"into","","",307,[[]]],[11,"to_owned","","",307,[[]]],[11,"clone_into","","",307,[[]]],[11,"borrow","","",307,[[]]],[11,"borrow_mut","","",307,[[]]],[11,"try_from","","",307,[[],["result",4]]],[11,"try_into","","",307,[[],["result",4]]],[11,"type_id","","",307,[[],["typeid",3]]],[11,"from","syn::buffer","",103,[[]]],[11,"into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"span","syn::punctuated","",106,[[],["span",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",318,[[]]],[11,"into","","",318,[[]]],[11,"into_iter","","",318,[[]]],[11,"to_owned","","",318,[[]]],[11,"clone_into","","",318,[[]]],[11,"borrow","","",318,[[]]],[11,"borrow_mut","","",318,[[]]],[11,"try_from","","",318,[[],["result",4]]],[11,"try_into","","",318,[[],["result",4]]],[11,"type_id","","",318,[[],["typeid",3]]],[11,"from","","",319,[[]]],[11,"into","","",319,[[]]],[11,"into_iter","","",319,[[]]],[11,"borrow","","",319,[[]]],[11,"borrow_mut","","",319,[[]]],[11,"try_from","","",319,[[],["result",4]]],[11,"try_into","","",319,[[],["result",4]]],[11,"type_id","","",319,[[],["typeid",3]]],[11,"from","","",320,[[]]],[11,"into","","",320,[[]]],[11,"into_iter","","",320,[[]]],[11,"to_owned","","",320,[[]]],[11,"clone_into","","",320,[[]]],[11,"borrow","","",320,[[]]],[11,"borrow_mut","","",320,[[]]],[11,"try_from","","",320,[[],["result",4]]],[11,"try_into","","",320,[[],["result",4]]],[11,"type_id","","",320,[[],["typeid",3]]],[11,"from","","",321,[[]]],[11,"into","","",321,[[]]],[11,"into_iter","","",321,[[]]],[11,"to_owned","","",321,[[]]],[11,"clone_into","","",321,[[]]],[11,"borrow","","",321,[[]]],[11,"borrow_mut","","",321,[[]]],[11,"try_from","","",321,[[],["result",4]]],[11,"try_into","","",321,[[],["result",4]]],[11,"type_id","","",321,[[],["typeid",3]]],[11,"from","","",322,[[]]],[11,"into","","",322,[[]]],[11,"into_iter","","",322,[[]]],[11,"to_owned","","",322,[[]]],[11,"clone_into","","",322,[[]]],[11,"borrow","","",322,[[]]],[11,"borrow_mut","","",322,[[]]],[11,"try_from","","",322,[[],["result",4]]],[11,"try_into","","",322,[[],["result",4]]],[11,"type_id","","",322,[[],["typeid",3]]],[11,"from","","",323,[[]]],[11,"into","","",323,[[]]],[11,"into_iter","","",323,[[]]],[11,"borrow","","",323,[[]]],[11,"borrow_mut","","",323,[[]]],[11,"try_from","","",323,[[],["result",4]]],[11,"try_into","","",323,[[],["result",4]]],[11,"type_id","","",323,[[],["typeid",3]]],[11,"span","","",107,[[],["span",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","syn::parse","",324,[[]]],[11,"into","","",324,[[]]],[11,"borrow","","",324,[[]]],[11,"borrow_mut","","",324,[[]]],[11,"try_from","","",324,[[],["result",4]]],[11,"try_into","","",324,[[],["result",4]]],[11,"type_id","","",324,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"to_string","","",115,[[],["string",3]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_string","","",113,[[],["string",3]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"fmt","syn","",308,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",308,[[["ident",3]],[["ordering",4],["option",4]]]],[11,"hash","","",308,[[]]],[11,"clone","","",308,[[],["ident",3]]],[11,"cmp","","",308,[[["ident",3]],["ordering",4]]],[11,"eq","","",308,[[]]],[11,"eq","","",308,[[["ident",3]]]],[11,"fmt","","",308,[[["formatter",3]],[["result",4],["error",3]]]],[11,"to_tokens","","",308,[[["tokenstream",3]]]],[11,"peek","","",263,[[["cursor",3]]]],[11,"display","","",263,[[]]],[11,"peek","","",266,[[["cursor",3]]]],[11,"display","","",266,[[]]],[11,"peek","","",312,[[["cursor",3]]]],[11,"display","","",312,[[]]],[11,"peek","","",313,[[["cursor",3]]]],[11,"display","","",313,[[]]],[11,"peek","","",314,[[["cursor",3]]]],[11,"display","","",314,[[]]],[11,"peek","","",315,[[["cursor",3]]]],[11,"display","","",315,[[]]],[11,"peek","","",316,[[["cursor",3]]]],[11,"display","","",316,[[]]],[11,"peek","","",317,[[["cursor",3]]]],[11,"display","","",317,[[]]],[11,"peek","","",267,[[["cursor",3]]]],[11,"display","","",267,[[]]],[11,"peek","syn::token","",0,[[["cursor",3]]]],[11,"display","","",0,[[]]],[11,"peek","","",101,[[["cursor",3]]]],[11,"display","","",101,[[]]],[11,"peek","","",99,[[["cursor",3]]]],[11,"display","","",99,[[]]],[11,"peek","","",100,[[["cursor",3]]]],[11,"display","","",100,[[]]],[11,"peek","","",102,[[["cursor",3]]]],[11,"display","","",102,[[]]],[11,"peek","","",1,[[["cursor",3]]]],[11,"display","","",1,[[]]],[11,"peek","","",2,[[["cursor",3]]]],[11,"display","","",2,[[]]],[11,"peek","","",3,[[["cursor",3]]]],[11,"display","","",3,[[]]],[11,"peek","","",4,[[["cursor",3]]]],[11,"display","","",4,[[]]],[11,"peek","","",5,[[["cursor",3]]]],[11,"display","","",5,[[]]],[11,"peek","","",6,[[["cursor",3]]]],[11,"display","","",6,[[]]],[11,"peek","","",7,[[["cursor",3]]]],[11,"display","","",7,[[]]],[11,"peek","","",8,[[["cursor",3]]]],[11,"display","","",8,[[]]],[11,"peek","","",9,[[["cursor",3]]]],[11,"display","","",9,[[]]],[11,"peek","","",10,[[["cursor",3]]]],[11,"display","","",10,[[]]],[11,"peek","","",11,[[["cursor",3]]]],[11,"display","","",11,[[]]],[11,"peek","","",12,[[["cursor",3]]]],[11,"display","","",12,[[]]],[11,"peek","","",13,[[["cursor",3]]]],[11,"display","","",13,[[]]],[11,"peek","","",14,[[["cursor",3]]]],[11,"display","","",14,[[]]],[11,"peek","","",15,[[["cursor",3]]]],[11,"display","","",15,[[]]],[11,"peek","","",16,[[["cursor",3]]]],[11,"display","","",16,[[]]],[11,"peek","","",17,[[["cursor",3]]]],[11,"display","","",17,[[]]],[11,"peek","","",18,[[["cursor",3]]]],[11,"display","","",18,[[]]],[11,"peek","","",19,[[["cursor",3]]]],[11,"display","","",19,[[]]],[11,"peek","","",20,[[["cursor",3]]]],[11,"display","","",20,[[]]],[11,"peek","","",21,[[["cursor",3]]]],[11,"display","","",21,[[]]],[11,"peek","","",22,[[["cursor",3]]]],[11,"display","","",22,[[]]],[11,"peek","","",23,[[["cursor",3]]]],[11,"display","","",23,[[]]],[11,"peek","","",24,[[["cursor",3]]]],[11,"display","","",24,[[]]],[11,"peek","","",25,[[["cursor",3]]]],[11,"display","","",25,[[]]],[11,"peek","","",26,[[["cursor",3]]]],[11,"display","","",26,[[]]],[11,"peek","","",27,[[["cursor",3]]]],[11,"display","","",27,[[]]],[11,"peek","","",28,[[["cursor",3]]]],[11,"display","","",28,[[]]],[11,"peek","","",29,[[["cursor",3]]]],[11,"display","","",29,[[]]],[11,"peek","","",30,[[["cursor",3]]]],[11,"display","","",30,[[]]],[11,"peek","","",31,[[["cursor",3]]]],[11,"display","","",31,[[]]],[11,"peek","","",32,[[["cursor",3]]]],[11,"display","","",32,[[]]],[11,"peek","","",33,[[["cursor",3]]]],[11,"display","","",33,[[]]],[11,"peek","","",34,[[["cursor",3]]]],[11,"display","","",34,[[]]],[11,"peek","","",35,[[["cursor",3]]]],[11,"display","","",35,[[]]],[11,"peek","","",36,[[["cursor",3]]]],[11,"display","","",36,[[]]],[11,"peek","","",37,[[["cursor",3]]]],[11,"display","","",37,[[]]],[11,"peek","","",38,[[["cursor",3]]]],[11,"display","","",38,[[]]],[11,"peek","","",39,[[["cursor",3]]]],[11,"display","","",39,[[]]],[11,"peek","","",40,[[["cursor",3]]]],[11,"display","","",40,[[]]],[11,"peek","","",41,[[["cursor",3]]]],[11,"display","","",41,[[]]],[11,"peek","","",42,[[["cursor",3]]]],[11,"display","","",42,[[]]],[11,"peek","","",43,[[["cursor",3]]]],[11,"display","","",43,[[]]],[11,"peek","","",44,[[["cursor",3]]]],[11,"display","","",44,[[]]],[11,"peek","","",45,[[["cursor",3]]]],[11,"display","","",45,[[]]],[11,"peek","","",46,[[["cursor",3]]]],[11,"display","","",46,[[]]],[11,"peek","","",47,[[["cursor",3]]]],[11,"display","","",47,[[]]],[11,"peek","","",48,[[["cursor",3]]]],[11,"display","","",48,[[]]],[11,"peek","","",49,[[["cursor",3]]]],[11,"display","","",49,[[]]],[11,"peek","","",50,[[["cursor",3]]]],[11,"display","","",50,[[]]],[11,"peek","","",51,[[["cursor",3]]]],[11,"display","","",51,[[]]],[11,"peek","","",52,[[["cursor",3]]]],[11,"display","","",52,[[]]],[11,"peek","","",53,[[["cursor",3]]]],[11,"display","","",53,[[]]],[11,"peek","","",54,[[["cursor",3]]]],[11,"display","","",54,[[]]],[11,"peek","","",55,[[["cursor",3]]]],[11,"display","","",55,[[]]],[11,"peek","","",56,[[["cursor",3]]]],[11,"display","","",56,[[]]],[11,"peek","","",57,[[["cursor",3]]]],[11,"display","","",57,[[]]],[11,"peek","","",58,[[["cursor",3]]]],[11,"display","","",58,[[]]],[11,"peek","","",59,[[["cursor",3]]]],[11,"display","","",59,[[]]],[11,"peek","","",60,[[["cursor",3]]]],[11,"display","","",60,[[]]],[11,"peek","","",61,[[["cursor",3]]]],[11,"display","","",61,[[]]],[11,"peek","","",62,[[["cursor",3]]]],[11,"display","","",62,[[]]],[11,"peek","","",63,[[["cursor",3]]]],[11,"display","","",63,[[]]],[11,"peek","","",64,[[["cursor",3]]]],[11,"display","","",64,[[]]],[11,"peek","","",65,[[["cursor",3]]]],[11,"display","","",65,[[]]],[11,"peek","","",66,[[["cursor",3]]]],[11,"display","","",66,[[]]],[11,"peek","","",67,[[["cursor",3]]]],[11,"display","","",67,[[]]],[11,"peek","","",68,[[["cursor",3]]]],[11,"display","","",68,[[]]],[11,"peek","","",69,[[["cursor",3]]]],[11,"display","","",69,[[]]],[11,"peek","","",70,[[["cursor",3]]]],[11,"display","","",70,[[]]],[11,"peek","","",71,[[["cursor",3]]]],[11,"display","","",71,[[]]],[11,"peek","","",72,[[["cursor",3]]]],[11,"display","","",72,[[]]],[11,"peek","","",73,[[["cursor",3]]]],[11,"display","","",73,[[]]],[11,"peek","","",74,[[["cursor",3]]]],[11,"display","","",74,[[]]],[11,"peek","","",75,[[["cursor",3]]]],[11,"display","","",75,[[]]],[11,"peek","","",76,[[["cursor",3]]]],[11,"display","","",76,[[]]],[11,"peek","","",77,[[["cursor",3]]]],[11,"display","","",77,[[]]],[11,"peek","","",78,[[["cursor",3]]]],[11,"display","","",78,[[]]],[11,"peek","","",79,[[["cursor",3]]]],[11,"display","","",79,[[]]],[11,"peek","","",80,[[["cursor",3]]]],[11,"display","","",80,[[]]],[11,"peek","","",81,[[["cursor",3]]]],[11,"display","","",81,[[]]],[11,"peek","","",82,[[["cursor",3]]]],[11,"display","","",82,[[]]],[11,"peek","","",83,[[["cursor",3]]]],[11,"display","","",83,[[]]],[11,"peek","","",84,[[["cursor",3]]]],[11,"display","","",84,[[]]],[11,"peek","","",85,[[["cursor",3]]]],[11,"display","","",85,[[]]],[11,"peek","","",86,[[["cursor",3]]]],[11,"display","","",86,[[]]],[11,"peek","","",87,[[["cursor",3]]]],[11,"display","","",87,[[]]],[11,"peek","","",88,[[["cursor",3]]]],[11,"display","","",88,[[]]],[11,"peek","","",89,[[["cursor",3]]]],[11,"display","","",89,[[]]],[11,"peek","","",90,[[["cursor",3]]]],[11,"display","","",90,[[]]],[11,"peek","","",91,[[["cursor",3]]]],[11,"display","","",91,[[]]],[11,"peek","","",92,[[["cursor",3]]]],[11,"display","","",92,[[]]],[11,"peek","","",93,[[["cursor",3]]]],[11,"display","","",93,[[]]],[11,"peek","","",94,[[["cursor",3]]]],[11,"display","","",94,[[]]],[11,"peek","","",95,[[["cursor",3]]]],[11,"display","","",95,[[]]],[11,"peek","","",96,[[["cursor",3]]]],[11,"display","","",96,[[]]],[11,"peek","","",97,[[["cursor",3]]]],[11,"display","","",97,[[]]],[11,"peek","","",98,[[["cursor",3]]]],[11,"display","","",98,[[]]],[11,"peek","syn","",308,[[["cursor",3]]]],[11,"display","","",308,[[]]],[11,"parse_any","","",308,[[["parsestream",6]],["result",6]]],[11,"unraw","","",308,[[],["ident",3]]],[11,"advance_to","syn::parse","",113,[[]]],[11,"parse","syn::token","",0,[[["parsestream",6]],["result",6]]],[11,"parse","","",1,[[["parsestream",6]],["result",6]]],[11,"parse","","",2,[[["parsestream",6]],["result",6]]],[11,"parse","","",3,[[["parsestream",6]],["result",6]]],[11,"parse","","",4,[[["parsestream",6]],["result",6]]],[11,"parse","","",5,[[["parsestream",6]],["result",6]]],[11,"parse","","",6,[[["parsestream",6]],["result",6]]],[11,"parse","","",7,[[["parsestream",6]],["result",6]]],[11,"parse","","",8,[[["parsestream",6]],["result",6]]],[11,"parse","","",9,[[["parsestream",6]],["result",6]]],[11,"parse","","",10,[[["parsestream",6]],["result",6]]],[11,"parse","","",11,[[["parsestream",6]],["result",6]]],[11,"parse","","",12,[[["parsestream",6]],["result",6]]],[11,"parse","","",13,[[["parsestream",6]],["result",6]]],[11,"parse","","",14,[[["parsestream",6]],["result",6]]],[11,"parse","","",15,[[["parsestream",6]],["result",6]]],[11,"parse","","",16,[[["parsestream",6]],["result",6]]],[11,"parse","","",17,[[["parsestream",6]],["result",6]]],[11,"parse","","",18,[[["parsestream",6]],["result",6]]],[11,"parse","","",19,[[["parsestream",6]],["result",6]]],[11,"parse","","",20,[[["parsestream",6]],["result",6]]],[11,"parse","","",21,[[["parsestream",6]],["result",6]]],[11,"parse","","",22,[[["parsestream",6]],["result",6]]],[11,"parse","","",23,[[["parsestream",6]],["result",6]]],[11,"parse","","",24,[[["parsestream",6]],["result",6]]],[11,"parse","","",25,[[["parsestream",6]],["result",6]]],[11,"parse","","",26,[[["parsestream",6]],["result",6]]],[11,"parse","","",27,[[["parsestream",6]],["result",6]]],[11,"parse","","",28,[[["parsestream",6]],["result",6]]],[11,"parse","","",29,[[["parsestream",6]],["result",6]]],[11,"parse","","",30,[[["parsestream",6]],["result",6]]],[11,"parse","","",31,[[["parsestream",6]],["result",6]]],[11,"parse","","",32,[[["parsestream",6]],["result",6]]],[11,"parse","","",33,[[["parsestream",6]],["result",6]]],[11,"parse","","",34,[[["parsestream",6]],["result",6]]],[11,"parse","","",35,[[["parsestream",6]],["result",6]]],[11,"parse","","",36,[[["parsestream",6]],["result",6]]],[11,"parse","","",37,[[["parsestream",6]],["result",6]]],[11,"parse","","",38,[[["parsestream",6]],["result",6]]],[11,"parse","","",39,[[["parsestream",6]],["result",6]]],[11,"parse","","",40,[[["parsestream",6]],["result",6]]],[11,"parse","","",41,[[["parsestream",6]],["result",6]]],[11,"parse","","",42,[[["parsestream",6]],["result",6]]],[11,"parse","","",43,[[["parsestream",6]],["result",6]]],[11,"parse","","",44,[[["parsestream",6]],["result",6]]],[11,"parse","","",45,[[["parsestream",6]],["result",6]]],[11,"parse","","",46,[[["parsestream",6]],["result",6]]],[11,"parse","","",47,[[["parsestream",6]],["result",6]]],[11,"parse","","",48,[[["parsestream",6]],["result",6]]],[11,"parse","","",49,[[["parsestream",6]],["result",6]]],[11,"parse","","",50,[[["parsestream",6]],["result",6]]],[11,"parse","","",51,[[["parsestream",6]],["result",6]]],[11,"parse","","",52,[[["parsestream",6]],["result",6]]],[11,"parse","","",53,[[["parsestream",6]],["result",6]]],[11,"parse","","",54,[[["parsestream",6]],["result",6]]],[11,"parse","","",55,[[["parsestream",6]],["result",6]]],[11,"parse","","",56,[[["parsestream",6]],["result",6]]],[11,"parse","","",57,[[["parsestream",6]],["result",6]]],[11,"parse","","",58,[[["parsestream",6]],["result",6]]],[11,"parse","","",59,[[["parsestream",6]],["result",6]]],[11,"parse","","",60,[[["parsestream",6]],["result",6]]],[11,"parse","","",61,[[["parsestream",6]],["result",6]]],[11,"parse","","",62,[[["parsestream",6]],["result",6]]],[11,"parse","","",63,[[["parsestream",6]],["result",6]]],[11,"parse","","",64,[[["parsestream",6]],["result",6]]],[11,"parse","","",65,[[["parsestream",6]],["result",6]]],[11,"parse","","",66,[[["parsestream",6]],["result",6]]],[11,"parse","","",67,[[["parsestream",6]],["result",6]]],[11,"parse","","",68,[[["parsestream",6]],["result",6]]],[11,"parse","","",69,[[["parsestream",6]],["result",6]]],[11,"parse","","",70,[[["parsestream",6]],["result",6]]],[11,"parse","","",71,[[["parsestream",6]],["result",6]]],[11,"parse","","",72,[[["parsestream",6]],["result",6]]],[11,"parse","","",73,[[["parsestream",6]],["result",6]]],[11,"parse","","",74,[[["parsestream",6]],["result",6]]],[11,"parse","","",75,[[["parsestream",6]],["result",6]]],[11,"parse","","",76,[[["parsestream",6]],["result",6]]],[11,"parse","","",77,[[["parsestream",6]],["result",6]]],[11,"parse","","",78,[[["parsestream",6]],["result",6]]],[11,"parse","","",79,[[["parsestream",6]],["result",6]]],[11,"parse","","",80,[[["parsestream",6]],["result",6]]],[11,"parse","","",81,[[["parsestream",6]],["result",6]]],[11,"parse","","",82,[[["parsestream",6]],["result",6]]],[11,"parse","","",83,[[["parsestream",6]],["result",6]]],[11,"parse","","",84,[[["parsestream",6]],["result",6]]],[11,"parse","","",85,[[["parsestream",6]],["result",6]]],[11,"parse","","",86,[[["parsestream",6]],["result",6]]],[11,"parse","","",87,[[["parsestream",6]],["result",6]]],[11,"parse","","",88,[[["parsestream",6]],["result",6]]],[11,"parse","","",89,[[["parsestream",6]],["result",6]]],[11,"parse","","",90,[[["parsestream",6]],["result",6]]],[11,"parse","","",91,[[["parsestream",6]],["result",6]]],[11,"parse","","",92,[[["parsestream",6]],["result",6]]],[11,"parse","","",93,[[["parsestream",6]],["result",6]]],[11,"parse","","",94,[[["parsestream",6]],["result",6]]],[11,"parse","","",95,[[["parsestream",6]],["result",6]]],[11,"parse","","",96,[[["parsestream",6]],["result",6]]],[11,"parse","","",97,[[["parsestream",6]],["result",6]]],[11,"parse","","",98,[[["parsestream",6]],["result",6]]],[11,"parse","syn","",308,[[["parsestream",6]],["result",6]]],[11,"parse","","",118,[[["parsestream",6]],["result",6]]],[11,"parse","","",119,[[["parsestream",6]],["result",6]]],[11,"parse","","",120,[[["parsestream",6]],["result",6]]],[11,"parse","","",121,[[["parsestream",6]],["result",6]]],[11,"parse","","",126,[[["parsestream",6]],["result",6]]],[11,"parse","","",124,[[["parsestream",6]],["result",6]]],[11,"parse","","",125,[[["parsestream",6]],["result",6]]],[11,"parse","","",130,[[["parsestream",6]],["result",6]]],[11,"parse","","",131,[[["parsestream",6]],["result",6]]],[11,"parse","","",151,[[["parsestream",6]],["result",6]]],[11,"parse","","",147,[[["parsestream",6]],["result",6]]],[11,"parse","","",145,[[["parsestream",6]],["result",6]]],[11,"parse","","",152,[[["parsestream",6]],["result",6]]],[11,"parse","","",154,[[["parsestream",6]],["result",6]]],[11,"parse","","",148,[[["parsestream",6]],["result",6]]],[11,"parse","","",138,[[["parsestream",6]],["result",6]]],[11,"parse","","",132,[[["parsestream",6]],["result",6]]],[11,"parse","","",140,[[["parsestream",6]],["result",6]]],[11,"parse","","",155,[[["parsestream",6]],["result",6]]],[11,"parse","","",165,[[["parsestream",6]],["result",6]]],[11,"parse","","",136,[[["parsestream",6]],["result",6]]],[11,"parse","","",167,[[["parsestream",6]],["result",6]]],[11,"parse","","",141,[[["parsestream",6]],["result",6]]],[11,"parse","","",166,[[["parsestream",6]],["result",6]]],[11,"parse","","",150,[[["parsestream",6]],["result",6]]],[11,"parse","","",142,[[["parsestream",6]],["result",6]]],[11,"parse","","",168,[[["parsestream",6]],["result",6]]],[11,"parse","","",137,[[["parsestream",6]],["result",6]]],[11,"parse","","",133,[[["parsestream",6]],["result",6]]],[11,"parse","","",134,[[["parsestream",6]],["result",6]]],[11,"parse","","",144,[[["parsestream",6]],["result",6]]],[11,"parse","","",149,[[["parsestream",6]],["result",6]]],[11,"parse","","",158,[[["parsestream",6]],["result",6]]],[11,"parse","","",159,[[["parsestream",6]],["result",6]]],[11,"parse","","",139,[[["parsestream",6]],["result",6]]],[11,"parse","","",143,[[["parsestream",6]],["result",6]]],[11,"parse","","",161,[[["parsestream",6]],["result",6]]],[11,"parse","","",153,[[["parsestream",6]],["result",6]]],[11,"parse","","",162,[[["parsestream",6]],["result",6]]],[11,"parse","","",160,[[["parsestream",6]],["result",6]]],[11,"parse","","",156,[[["parsestream",6]],["result",6]]],[11,"parse","","",163,[[["parsestream",6]],["result",6]]],[11,"parse","","",135,[[["parsestream",6]],["result",6]]],[11,"parse","","",164,[[["parsestream",6]],["result",6]]],[11,"parse","","",171,[[["parsestream",6]],["result",6]]],[11,"parse","","",170,[[["parsestream",6]],["result",6]]],[11,"parse","","",179,[[["parsestream",6]],["result",6]]],[11,"parse","","",177,[[["parsestream",6]],["result",6]]],[11,"parse","","",196,[[["parsestream",6]],["result",6]]],[11,"parse","","",157,[[["parsestream",6]],["result",6]]],[11,"parse","","",175,[[["parsestream",6]],["result",6]]],[11,"parse","","",197,[[["parsestream",6]],["result",6]]],[11,"parse","","",182,[[["parsestream",6]],["result",6]]],[11,"parse","","",173,[[["parsestream",6]],["result",6]]],[11,"parse","","",174,[[["parsestream",6]],[["arm",3],["result",6]]]],[11,"parse","","",172,[[["parsestream",6]],["result",6]]],[11,"parse","","",201,[[["parsestream",6]],["result",6]]],[11,"parse","","",200,[[["parsestream",6]],["result",6]]],[11,"parse","","",202,[[["parsestream",6]],["result",6]]],[11,"parse","","",198,[[["parsestream",6]],["result",6]]],[11,"parse","","",208,[[["parsestream",6]],["result",6]]],[11,"parse","","",209,[[["parsestream",6]],["result",6]]],[11,"parse","","",206,[[["parsestream",6]],["result",6]]],[11,"parse","","",207,[[["parsestream",6]],["result",6]]],[11,"parse","","",199,[[["parsestream",6]],["result",6]]],[11,"parse","","",210,[[["parsestream",6]],["result",6]]],[11,"parse","","",211,[[["parsestream",6]],["result",6]]],[11,"parse","","",230,[[["parsestream",6]],["result",6]]],[11,"parse","","",238,[[["parsestream",6]],["result",6]]],[11,"parse","","",239,[[["parsestream",6]],["result",6]]],[11,"parse","","",234,[[["parsestream",6]],["result",6]]],[11,"parse","","",247,[[["parsestream",6]],["result",6]]],[11,"parse","","",261,[[["parsestream",6]],[["usetree",4],["result",6]]]],[11,"parse","","",241,[[["parsestream",6]],["result",6]]],[11,"parse","","",231,[[["parsestream",6]],["result",6]]],[11,"parse","","",235,[[["parsestream",6]],["result",6]]],[11,"parse","","",215,[[["parsestream",6]],["result",6]]],[11,"parse","","",240,[[["parsestream",6]],["result",6]]],[11,"parse","","",236,[[["parsestream",6]],["result",6]]],[11,"parse","","",217,[[["parsestream",6]],["result",6]]],[11,"parse","","",218,[[["parsestream",6]],["result",6]]],[11,"parse","","",220,[[["parsestream",6]],["result",6]]],[11,"parse","","",221,[[["parsestream",6]],["result",6]]],[11,"parse","","",219,[[["parsestream",6]],["result",6]]],[11,"parse","","",245,[[["parsestream",6]],["result",6]]],[11,"parse","","",233,[[["parsestream",6]],["result",6]]],[11,"parse","","",242,[[["parsestream",6]],["result",6]]],[11,"parse","","",232,[[["parsestream",6]],["result",6]]],[11,"parse","","",246,[[["parsestream",6]],["result",6]]],[11,"parse","","",243,[[["parsestream",6]],["result",6]]],[11,"parse","","",244,[[["parsestream",6]],["result",6]]],[11,"parse","","",250,[[["parsestream",6]],["result",6]]],[11,"parse","","",251,[[["parsestream",6]],["result",6]]],[11,"parse","","",253,[[["parsestream",6]],["result",6]]],[11,"parse","","",254,[[["parsestream",6]],["result",6]]],[11,"parse","","",252,[[["parsestream",6]],["result",6]]],[11,"parse","","",237,[[["parsestream",6]],["result",6]]],[11,"parse","","",223,[[["parsestream",6]],["result",6]]],[11,"parse","","",224,[[["parsestream",6]],["result",6]]],[11,"parse","","",227,[[["parsestream",6]],["result",6]]],[11,"parse","","",228,[[["parsestream",6]],["result",6]]],[11,"parse","","",225,[[["parsestream",6]],["result",6]]],[11,"parse","","",226,[[["parsestream",6]],["result",6]]],[11,"parse","","",262,[[["parsestream",6]],["result",6]]],[11,"parse","","",263,[[["parsestream",6]],["result",6]]],[11,"parse","","",266,[[["parsestream",6]],["result",6]]],[11,"parse","","",312,[[["parsestream",6]],["result",6]]],[11,"parse","","",313,[[["parsestream",6]],["result",6]]],[11,"parse","","",314,[[["parsestream",6]],["result",6]]],[11,"parse","","",315,[[["parsestream",6]],["result",6]]],[11,"parse","","",316,[[["parsestream",6]],["result",6]]],[11,"parse","","",317,[[["parsestream",6]],["result",6]]],[11,"parse","","",267,[[["parsestream",6]],["result",6]]],[11,"parse","","",270,[[["parsestream",6]],["result",6]]],[11,"parse","","",276,[[["parsestream",6]],["result",6]]],[11,"parse","","",277,[[["parsestream",6]],["result",6]]],[11,"parse","","",278,[[["parsestream",6]],["result",6]]],[11,"parse","","",283,[[["parsestream",6]],["result",6]]],[11,"parse","","",295,[[["parsestream",6]],["result",6]]],[11,"parse","","",284,[[["parsestream",6]],["result",6]]],[11,"parse","","",293,[[["parsestream",6]],["result",6]]],[11,"parse","","",294,[[["parsestream",6]],["result",6]]],[11,"parse","","",285,[[["parsestream",6]],["result",6]]],[11,"parse","","",290,[[["parsestream",6]],["result",6]]],[11,"parse","","",288,[[["parsestream",6]],["result",6]]],[11,"parse","","",297,[[["parsestream",6]],["result",6]]],[11,"parse","","",289,[[["parsestream",6]],["result",6]]],[11,"parse","","",292,[[["parsestream",6]],["result",6]]],[11,"parse","","",282,[[["parsestream",6]],["result",6]]],[11,"parse","","",296,[[["parsestream",6]],["result",6]]],[11,"parse","","",287,[[["parsestream",6]],["result",6]]],[11,"parse","","",286,[[["parsestream",6]],["result",6]]],[11,"parse","","",291,[[["parsestream",6]],["result",6]]],[11,"parse","","",280,[[["parsestream",6]],["result",6]]],[11,"parse","","",281,[[["parsestream",6]],["result",6]]],[11,"parse","","",279,[[["parsestream",6]],["result",6]]],[11,"parse","","",304,[[["parsestream",6]],["result",6]]],[11,"parse","","",302,[[["parsestream",6]],["result",6]]],[11,"parse","","",299,[[["parsestream",6]],["result",6]]],[11,"parse","","",303,[[["parsestream",6]],["result",6]]],[11,"parse","","",306,[[["parsestream",6]],["result",6]]],[11,"parse","","",300,[[["parsestream",6]],["result",6]]],[11,"parse","","",301,[[["parsestream",6]],["result",6]]],[11,"drop","syn::parse","",113,[[]]],[11,"from","syn","",308,[[["selfvalue",3]],["ident",3]]],[11,"from","","",308,[[["selftype",3]],["ident",3]]],[11,"from","","",308,[[["super",3]],["ident",3]]],[11,"from","","",308,[[["crate",3]],["ident",3]]],[11,"from","","",308,[[["extern",3]],["ident",3]]],[11,"from","","",308,[[["underscore",3]],["ident",3]]],[11,"from","","",118,[[["ident",3]],["meta",4]]],[11,"from","","",118,[[["metalist",3]],["meta",4]]],[11,"from","","",118,[[["metanamevalue",3]],["meta",4]]],[11,"from","","",121,[[["meta",4]],["nestedmeta",4]]],[11,"from","","",121,[[["lit",4]],["nestedmeta",4]]],[11,"from","","",123,[[["fieldsnamed",3]],["fields",4]]],[11,"from","","",123,[[["fieldsunnamed",3]],["fields",4]]],[11,"from","","",130,[[["vispublic",3]],["visibility",4]]],[11,"from","","",130,[[["viscrate",3]],["visibility",4]]],[11,"from","","",130,[[["visrestricted",3]],["visibility",4]]],[11,"from","","",131,[[["exprbox",3]],["expr",4]]],[11,"from","","",131,[[["exprinplace",3]],["expr",4]]],[11,"from","","",131,[[["exprarray",3]],["expr",4]]],[11,"from","","",131,[[["exprcall",3]],["expr",4]]],[11,"from","","",131,[[["exprmethodcall",3]],["expr",4]]],[11,"from","","",131,[[["exprtuple",3]],["expr",4]]],[11,"from","","",131,[[["exprbinary",3]],["expr",4]]],[11,"from","","",131,[[["exprunary",3]],["expr",4]]],[11,"from","","",131,[[["exprlit",3]],["expr",4]]],[11,"from","","",131,[[["exprcast",3]],["expr",4]]],[11,"from","","",131,[[["exprtype",3]],["expr",4]]],[11,"from","","",131,[[["exprlet",3]],["expr",4]]],[11,"from","","",131,[[["exprif",3]],["expr",4]]],[11,"from","","",131,[[["exprwhile",3]],["expr",4]]],[11,"from","","",131,[[["exprforloop",3]],["expr",4]]],[11,"from","","",131,[[["exprloop",3]],["expr",4]]],[11,"from","","",131,[[["exprmatch",3]],["expr",4]]],[11,"from","","",131,[[["exprclosure",3]],["expr",4]]],[11,"from","","",131,[[["exprunsafe",3]],["expr",4]]],[11,"from","","",131,[[["exprblock",3]],["expr",4]]],[11,"from","","",131,[[["exprassign",3]],["expr",4]]],[11,"from","","",131,[[["exprassignop",3]],["expr",4]]],[11,"from","","",131,[[["exprfield",3]],["expr",4]]],[11,"from","","",131,[[["exprindex",3]],["expr",4]]],[11,"from","","",131,[[["exprrange",3]],["expr",4]]],[11,"from","","",131,[[["exprpath",3]],["expr",4]]],[11,"from","","",131,[[["exprreference",3]],["expr",4]]],[11,"from","","",131,[[["exprbreak",3]],["expr",4]]],[11,"from","","",131,[[["exprcontinue",3]],["expr",4]]],[11,"from","","",131,[[["exprreturn",3]],["expr",4]]],[11,"from","","",131,[[["exprmacro",3]],["expr",4]]],[11,"from","","",131,[[["exprstruct",3]],["expr",4]]],[11,"from","","",131,[[["exprrepeat",3]],["expr",4]]],[11,"from","","",131,[[["exprparen",3]],["expr",4]]],[11,"from","","",131,[[["exprgroup",3]],["expr",4]]],[11,"from","","",131,[[["exprtry",3]],["expr",4]]],[11,"from","","",131,[[["exprasync",3]],["expr",4]]],[11,"from","","",131,[[["exprtryblock",3]],["expr",4]]],[11,"from","","",131,[[["expryield",3]],["expr",4]]],[11,"from","","",131,[[["exprverbatim",3]],["expr",4]]],[11,"from","","",172,[[],["index",3]]],[11,"from","","",182,[[["patwild",3]],["pat",4]]],[11,"from","","",182,[[["patident",3]],["pat",4]]],[11,"from","","",182,[[["patstruct",3]],["pat",4]]],[11,"from","","",182,[[["pattuplestruct",3]],["pat",4]]],[11,"from","","",182,[[["patpath",3]],["pat",4]]],[11,"from","","",182,[[["pattuple",3]],["pat",4]]],[11,"from","","",182,[[["patbox",3]],["pat",4]]],[11,"from","","",182,[[["patref",3]],["pat",4]]],[11,"from","","",182,[[["patlit",3]],["pat",4]]],[11,"from","","",182,[[["patrange",3]],["pat",4]]],[11,"from","","",182,[[["patslice",3]],["pat",4]]],[11,"from","","",182,[[["patmacro",3]],["pat",4]]],[11,"from","","",182,[[["patverbatim",3]],["pat",4]]],[11,"from","","",200,[[["typeparam",3]],["genericparam",4]]],[11,"from","","",200,[[["lifetimedef",3]],["genericparam",4]]],[11,"from","","",200,[[["constparam",3]],["genericparam",4]]],[11,"from","","",208,[[["ident",3]]]],[11,"from","","",209,[[["traitbound",3]],["typeparambound",4]]],[11,"from","","",209,[[["lifetime",3]],["typeparambound",4]]],[11,"from","","",211,[[["predicatetype",3]],["wherepredicate",4]]],[11,"from","","",211,[[["predicatelifetime",3]],["wherepredicate",4]]],[11,"from","","",211,[[["predicateeq",3]],["wherepredicate",4]]],[11,"from","","",230,[[["itemexterncrate",3]],["item",4]]],[11,"from","","",230,[[["itemuse",3]],["item",4]]],[11,"from","","",230,[[["itemstatic",3]],["item",4]]],[11,"from","","",230,[[["itemconst",3]],["item",4]]],[11,"from","","",230,[[["itemfn",3]],["item",4]]],[11,"from","","",230,[[["itemmod",3]],["item",4]]],[11,"from","","",230,[[["itemforeignmod",3]],["item",4]]],[11,"from","","",230,[[["itemtype",3]],["item",4]]],[11,"from","","",230,[[["itemexistential",3]],["item",4]]],[11,"from","","",230,[[["itemstruct",3]],["item",4]]],[11,"from","","",230,[[["itemenum",3]],["item",4]]],[11,"from","","",230,[[["itemunion",3]],["item",4]]],[11,"from","","",230,[[["itemtrait",3]],["item",4]]],[11,"from","","",230,[[["itemtraitalias",3]],["item",4]]],[11,"from","","",230,[[["itemimpl",3]],["item",4]]],[11,"from","","",230,[[["itemmacro",3]],["item",4]]],[11,"from","","",230,[[["itemmacro2",3]],["item",4]]],[11,"from","","",230,[[["itemverbatim",3]],["item",4]]],[11,"from","","",230,[[["deriveinput",3]],["item",4]]],[11,"from","","",261,[[["usepath",3]],["usetree",4]]],[11,"from","","",261,[[["usename",3]],["usetree",4]]],[11,"from","","",261,[[["userename",3]],["usetree",4]]],[11,"from","","",261,[[["useglob",3]],["usetree",4]]],[11,"from","","",261,[[["usegroup",3]],["usetree",4]]],[11,"from","","",217,[[["foreignitemfn",3]],["foreignitem",4]]],[11,"from","","",217,[[["foreignitemstatic",3]],["foreignitem",4]]],[11,"from","","",217,[[["foreignitemtype",3]],["foreignitem",4]]],[11,"from","","",217,[[["foreignitemmacro",3]],["foreignitem",4]]],[11,"from","","",217,[[["foreignitemverbatim",3]],["foreignitem",4]]],[11,"from","","",250,[[["traititemconst",3]],["traititem",4]]],[11,"from","","",250,[[["traititemmethod",3]],["traititem",4]]],[11,"from","","",250,[[["traititemtype",3]],["traititem",4]]],[11,"from","","",250,[[["traititemmacro",3]],["traititem",4]]],[11,"from","","",250,[[["traititemverbatim",3]],["traititem",4]]],[11,"from","","",223,[[["implitemconst",3]],["implitem",4]]],[11,"from","","",223,[[["implitemmethod",3]],["implitem",4]]],[11,"from","","",223,[[["implitemtype",3]],["implitem",4]]],[11,"from","","",223,[[["implitemexistential",3]],["implitem",4]]],[11,"from","","",223,[[["implitemmacro",3]],["implitem",4]]],[11,"from","","",223,[[["implitemverbatim",3]],["implitem",4]]],[11,"from","","",215,[[["argselfref",3]],["fnarg",4]]],[11,"from","","",215,[[["argself",3]],["fnarg",4]]],[11,"from","","",215,[[["argcaptured",3]],["fnarg",4]]],[11,"from","","",215,[[["pat",4]],["fnarg",4]]],[11,"from","","",215,[[["type",4]],["fnarg",4]]],[11,"from","","",266,[[["litstr",3]],["lit",4]]],[11,"from","","",266,[[["litbytestr",3]],["lit",4]]],[11,"from","","",266,[[["litbyte",3]],["lit",4]]],[11,"from","","",266,[[["litchar",3]],["lit",4]]],[11,"from","","",266,[[["litint",3]],["lit",4]]],[11,"from","","",266,[[["litfloat",3]],["lit",4]]],[11,"from","","",266,[[["litbool",3]],["lit",4]]],[11,"from","","",266,[[["litverbatim",3]],["lit",4]]],[11,"from","","",272,[[["datastruct",3]],["data",4]]],[11,"from","","",272,[[["dataenum",3]],["data",4]]],[11,"from","","",272,[[["dataunion",3]],["data",4]]],[11,"from","","",283,[[["typeslice",3]],["type",4]]],[11,"from","","",283,[[["typearray",3]],["type",4]]],[11,"from","","",283,[[["typeptr",3]],["type",4]]],[11,"from","","",283,[[["typereference",3]],["type",4]]],[11,"from","","",283,[[["typebarefn",3]],["type",4]]],[11,"from","","",283,[[["typenever",3]],["type",4]]],[11,"from","","",283,[[["typetuple",3]],["type",4]]],[11,"from","","",283,[[["typepath",3]],["type",4]]],[11,"from","","",283,[[["typetraitobject",3]],["type",4]]],[11,"from","","",283,[[["typeimpltrait",3]],["type",4]]],[11,"from","","",283,[[["typeparen",3]],["type",4]]],[11,"from","","",283,[[["typegroup",3]],["type",4]]],[11,"from","","",283,[[["typeinfer",3]],["type",4]]],[11,"from","","",283,[[["typemacro",3]],["type",4]]],[11,"from","","",283,[[["typeverbatim",3]],["type",4]]],[11,"from","","",304,[[]]],[11,"from","","",306,[[]]],[11,"from","syn::parse","",115,[[["lexerror",3]]]],[11,"len","syn::punctuated","",318,[[]]],[11,"len","","",319,[[]]],[11,"len","","",320,[[]]],[11,"len","","",321,[[]]],[11,"len","","",322,[[]]],[11,"len","","",323,[[]]],[11,"extend","","",106,[[["intoiterator",8]]]],[11,"extend","","",106,[[["intoiterator",8]]]],[11,"into_iter","","",106,[[]]],[11,"next","","",318,[[],["option",4]]],[11,"next","","",319,[[],["option",4]]],[11,"next","","",320,[[],["option",4]]],[11,"next","","",321,[[],["option",4]]],[11,"next","","",322,[[],["option",4]]],[11,"next","","",323,[[],["option",4]]],[11,"clone","syn::token","",0,[[],["underscore",3]]],[11,"clone","","",1,[[],["abstract",3]]],[11,"clone","","",2,[[],["as",3]]],[11,"clone","","",3,[[],["async",3]]],[11,"clone","","",4,[[],["auto",3]]],[11,"clone","","",5,[[],["become",3]]],[11,"clone","","",6,[[],["box",3]]],[11,"clone","","",7,[[],["break",3]]],[11,"clone","","",8,[[],["const",3]]],[11,"clone","","",9,[[],["continue",3]]],[11,"clone","","",10,[[],["crate",3]]],[11,"clone","","",11,[[],["default",3]]],[11,"clone","","",12,[[],["do",3]]],[11,"clone","","",13,[[],["dyn",3]]],[11,"clone","","",14,[[],["else",3]]],[11,"clone","","",15,[[],["enum",3]]],[11,"clone","","",16,[[],["existential",3]]],[11,"clone","","",17,[[],["extern",3]]],[11,"clone","","",18,[[],["final",3]]],[11,"clone","","",19,[[],["fn",3]]],[11,"clone","","",20,[[],["for",3]]],[11,"clone","","",21,[[],["if",3]]],[11,"clone","","",22,[[],["impl",3]]],[11,"clone","","",23,[[],["in",3]]],[11,"clone","","",24,[[],["let",3]]],[11,"clone","","",25,[[],["loop",3]]],[11,"clone","","",26,[[],["macro",3]]],[11,"clone","","",27,[[],["match",3]]],[11,"clone","","",28,[[],["mod",3]]],[11,"clone","","",29,[[],["move",3]]],[11,"clone","","",30,[[],["mut",3]]],[11,"clone","","",31,[[],["override",3]]],[11,"clone","","",32,[[],["priv",3]]],[11,"clone","","",33,[[],["pub",3]]],[11,"clone","","",34,[[],["ref",3]]],[11,"clone","","",35,[[],["return",3]]],[11,"clone","","",36,[[],["selftype",3]]],[11,"clone","","",37,[[],["selfvalue",3]]],[11,"clone","","",38,[[],["static",3]]],[11,"clone","","",39,[[],["struct",3]]],[11,"clone","","",40,[[],["super",3]]],[11,"clone","","",41,[[],["trait",3]]],[11,"clone","","",42,[[],["try",3]]],[11,"clone","","",43,[[],["type",3]]],[11,"clone","","",44,[[],["typeof",3]]],[11,"clone","","",45,[[],["union",3]]],[11,"clone","","",46,[[],["unsafe",3]]],[11,"clone","","",47,[[],["unsized",3]]],[11,"clone","","",48,[[],["use",3]]],[11,"clone","","",49,[[],["virtual",3]]],[11,"clone","","",50,[[],["where",3]]],[11,"clone","","",51,[[],["while",3]]],[11,"clone","","",52,[[],["yield",3]]],[11,"clone","","",53,[[],["add",3]]],[11,"clone","","",54,[[],["addeq",3]]],[11,"clone","","",55,[[],["and",3]]],[11,"clone","","",56,[[],["andand",3]]],[11,"clone","","",57,[[],["andeq",3]]],[11,"clone","","",58,[[],["at",3]]],[11,"clone","","",59,[[],["bang",3]]],[11,"clone","","",60,[[],["caret",3]]],[11,"clone","","",61,[[],["careteq",3]]],[11,"clone","","",62,[[],["colon",3]]],[11,"clone","","",63,[[],["colon2",3]]],[11,"clone","","",64,[[],["comma",3]]],[11,"clone","","",65,[[],["div",3]]],[11,"clone","","",66,[[],["diveq",3]]],[11,"clone","","",67,[[],["dollar",3]]],[11,"clone","","",68,[[],["dot",3]]],[11,"clone","","",69,[[],["dot2",3]]],[11,"clone","","",70,[[],["dot3",3]]],[11,"clone","","",71,[[],["dotdoteq",3]]],[11,"clone","","",72,[[],["eq",3]]],[11,"clone","","",73,[[],["eqeq",3]]],[11,"clone","","",74,[[],["ge",3]]],[11,"clone","","",75,[[],["gt",3]]],[11,"clone","","",76,[[],["le",3]]],[11,"clone","","",77,[[],["lt",3]]],[11,"clone","","",78,[[],["muleq",3]]],[11,"clone","","",79,[[],["ne",3]]],[11,"clone","","",80,[[],["or",3]]],[11,"clone","","",81,[[],["oreq",3]]],[11,"clone","","",82,[[],["oror",3]]],[11,"clone","","",83,[[],["pound",3]]],[11,"clone","","",84,[[],["question",3]]],[11,"clone","","",85,[[],["rarrow",3]]],[11,"clone","","",86,[[],["larrow",3]]],[11,"clone","","",87,[[],["rem",3]]],[11,"clone","","",88,[[],["remeq",3]]],[11,"clone","","",89,[[],["fatarrow",3]]],[11,"clone","","",90,[[],["semi",3]]],[11,"clone","","",91,[[],["shl",3]]],[11,"clone","","",92,[[],["shleq",3]]],[11,"clone","","",93,[[],["shr",3]]],[11,"clone","","",94,[[],["shreq",3]]],[11,"clone","","",95,[[],["star",3]]],[11,"clone","","",96,[[],["sub",3]]],[11,"clone","","",97,[[],["subeq",3]]],[11,"clone","","",98,[[],["tilde",3]]],[11,"clone","","",99,[[],["brace",3]]],[11,"clone","","",100,[[],["bracket",3]]],[11,"clone","","",101,[[],["paren",3]]],[11,"clone","","",102,[[],["group",3]]],[11,"clone","syn","",117,[[],["attribute",3]]],[11,"clone","","",116,[[],["attrstyle",4]]],[11,"clone","","",118,[[],["meta",4]]],[11,"clone","","",119,[[],["metalist",3]]],[11,"clone","","",120,[[],["metanamevalue",3]]],[11,"clone","","",121,[[],["nestedmeta",4]]],[11,"clone","","",126,[[],["variant",3]]],[11,"clone","","",123,[[],["fields",4]]],[11,"clone","","",124,[[],["fieldsnamed",3]]],[11,"clone","","",125,[[],["fieldsunnamed",3]]],[11,"clone","","",122,[[],["field",3]]],[11,"clone","","",130,[[],["visibility",4]]],[11,"clone","","",128,[[],["vispublic",3]]],[11,"clone","","",127,[[],["viscrate",3]]],[11,"clone","","",129,[[],["visrestricted",3]]],[11,"clone","","",131,[[],["expr",4]]],[11,"clone","","",138,[[],["exprbox",3]]],[11,"clone","","",148,[[],["exprinplace",3]]],[11,"clone","","",132,[[],["exprarray",3]]],[11,"clone","","",140,[[],["exprcall",3]]],[11,"clone","","",155,[[],["exprmethodcall",3]]],[11,"clone","","",165,[[],["exprtuple",3]]],[11,"clone","","",136,[[],["exprbinary",3]]],[11,"clone","","",167,[[],["exprunary",3]]],[11,"clone","","",151,[[],["exprlit",3]]],[11,"clone","","",141,[[],["exprcast",3]]],[11,"clone","","",166,[[],["exprtype",3]]],[11,"clone","","",150,[[],["exprlet",3]]],[11,"clone","","",147,[[],["exprif",3]]],[11,"clone","","",170,[[],["exprwhile",3]]],[11,"clone","","",145,[[],["exprforloop",3]]],[11,"clone","","",152,[[],["exprloop",3]]],[11,"clone","","",154,[[],["exprmatch",3]]],[11,"clone","","",142,[[],["exprclosure",3]]],[11,"clone","","",168,[[],["exprunsafe",3]]],[11,"clone","","",137,[[],["exprblock",3]]],[11,"clone","","",133,[[],["exprassign",3]]],[11,"clone","","",134,[[],["exprassignop",3]]],[11,"clone","","",144,[[],["exprfield",3]]],[11,"clone","","",149,[[],["exprindex",3]]],[11,"clone","","",158,[[],["exprrange",3]]],[11,"clone","","",157,[[],["exprpath",3]]],[11,"clone","","",159,[[],["exprreference",3]]],[11,"clone","","",139,[[],["exprbreak",3]]],[11,"clone","","",143,[[],["exprcontinue",3]]],[11,"clone","","",161,[[],["exprreturn",3]]],[11,"clone","","",153,[[],["exprmacro",3]]],[11,"clone","","",162,[[],["exprstruct",3]]],[11,"clone","","",160,[[],["exprrepeat",3]]],[11,"clone","","",156,[[],["exprparen",3]]],[11,"clone","","",146,[[],["exprgroup",3]]],[11,"clone","","",163,[[],["exprtry",3]]],[11,"clone","","",135,[[],["exprasync",3]]],[11,"clone","","",164,[[],["exprtryblock",3]]],[11,"clone","","",171,[[],["expryield",3]]],[11,"clone","","",169,[[],["exprverbatim",3]]],[11,"clone","","",173,[[],["member",4]]],[11,"clone","","",172,[[],["index",3]]],[11,"clone","","",181,[[],["methodturbofish",3]]],[11,"clone","","",178,[[],["genericmethodargument",4]]],[11,"clone","","",177,[[],["fieldvalue",3]]],[11,"clone","","",179,[[],["label",3]]],[11,"clone","","",175,[[],["block",3]]],[11,"clone","","",197,[[],["stmt",4]]],[11,"clone","","",180,[[],["local",3]]],[11,"clone","","",182,[[],["pat",4]]],[11,"clone","","",195,[[],["patwild",3]]],[11,"clone","","",184,[[],["patident",3]]],[11,"clone","","",191,[[],["patstruct",3]]],[11,"clone","","",193,[[],["pattuplestruct",3]]],[11,"clone","","",187,[[],["patpath",3]]],[11,"clone","","",192,[[],["pattuple",3]]],[11,"clone","","",183,[[],["patbox",3]]],[11,"clone","","",189,[[],["patref",3]]],[11,"clone","","",185,[[],["patlit",3]]],[11,"clone","","",188,[[],["patrange",3]]],[11,"clone","","",190,[[],["patslice",3]]],[11,"clone","","",186,[[],["patmacro",3]]],[11,"clone","","",194,[[],["patverbatim",3]]],[11,"clone","","",174,[[],["arm",3]]],[11,"clone","","",196,[[],["rangelimits",4]]],[11,"clone","","",176,[[],["fieldpat",3]]],[11,"clone","","",201,[[],["generics",3]]],[11,"clone","","",200,[[],["genericparam",4]]],[11,"clone","","",208,[[],["typeparam",3]]],[11,"clone","","",202,[[],["lifetimedef",3]]],[11,"clone","","",199,[[],["constparam",3]]],[11,"clone","","",309,[[],["implgenerics",3]]],[11,"clone","","",310,[[],["typegenerics",3]]],[11,"clone","","",311,[[],["turbofish",3]]],[11,"clone","","",198,[[],["boundlifetimes",3]]],[11,"clone","","",209,[[],["typeparambound",4]]],[11,"clone","","",206,[[],["traitbound",3]]],[11,"clone","","",207,[[],["traitboundmodifier",4]]],[11,"clone","","",210,[[],["whereclause",3]]],[11,"clone","","",211,[[],["wherepredicate",4]]],[11,"clone","","",205,[[],["predicatetype",3]]],[11,"clone","","",204,[[],["predicatelifetime",3]]],[11,"clone","","",203,[[],["predicateeq",3]]],[11,"clone","","",230,[[],["item",4]]],[11,"clone","","",234,[[],["itemexterncrate",3]]],[11,"clone","","",247,[[],["itemuse",3]]],[11,"clone","","",241,[[],["itemstatic",3]]],[11,"clone","","",231,[[],["itemconst",3]]],[11,"clone","","",235,[[],["itemfn",3]]],[11,"clone","","",240,[[],["itemmod",3]]],[11,"clone","","",236,[[],["itemforeignmod",3]]],[11,"clone","","",245,[[],["itemtype",3]]],[11,"clone","","",233,[[],["itemexistential",3]]],[11,"clone","","",242,[[],["itemstruct",3]]],[11,"clone","","",232,[[],["itemenum",3]]],[11,"clone","","",246,[[],["itemunion",3]]],[11,"clone","","",243,[[],["itemtrait",3]]],[11,"clone","","",244,[[],["itemtraitalias",3]]],[11,"clone","","",237,[[],["itemimpl",3]]],[11,"clone","","",238,[[],["itemmacro",3]]],[11,"clone","","",239,[[],["itemmacro2",3]]],[11,"clone","","",248,[[],["itemverbatim",3]]],[11,"clone","","",261,[[],["usetree",4]]],[11,"clone","","",259,[[],["usepath",3]]],[11,"clone","","",258,[[],["usename",3]]],[11,"clone","","",260,[[],["userename",3]]],[11,"clone","","",256,[[],["useglob",3]]],[11,"clone","","",257,[[],["usegroup",3]]],[11,"clone","","",217,[[],["foreignitem",4]]],[11,"clone","","",218,[[],["foreignitemfn",3]]],[11,"clone","","",220,[[],["foreignitemstatic",3]]],[11,"clone","","",221,[[],["foreignitemtype",3]]],[11,"clone","","",219,[[],["foreignitemmacro",3]]],[11,"clone","","",222,[[],["foreignitemverbatim",3]]],[11,"clone","","",250,[[],["traititem",4]]],[11,"clone","","",251,[[],["traititemconst",3]]],[11,"clone","","",253,[[],["traititemmethod",3]]],[11,"clone","","",254,[[],["traititemtype",3]]],[11,"clone","","",252,[[],["traititemmacro",3]]],[11,"clone","","",255,[[],["traititemverbatim",3]]],[11,"clone","","",223,[[],["implitem",4]]],[11,"clone","","",224,[[],["implitemconst",3]]],[11,"clone","","",227,[[],["implitemmethod",3]]],[11,"clone","","",228,[[],["implitemtype",3]]],[11,"clone","","",225,[[],["implitemexistential",3]]],[11,"clone","","",226,[[],["implitemmacro",3]]],[11,"clone","","",229,[[],["implitemverbatim",3]]],[11,"clone","","",249,[[],["methodsig",3]]],[11,"clone","","",216,[[],["fndecl",3]]],[11,"clone","","",215,[[],["fnarg",4]]],[11,"clone","","",214,[[],["argselfref",3]]],[11,"clone","","",213,[[],["argself",3]]],[11,"clone","","",212,[[],["argcaptured",3]]],[11,"clone","","",262,[[],["file",3]]],[11,"clone","","",263,[[],["lifetime",3]]],[11,"clone","","",266,[[],["lit",4]]],[11,"clone","","",312,[[],["litstr",3]]],[11,"clone","","",313,[[],["litbytestr",3]]],[11,"clone","","",314,[[],["litbyte",3]]],[11,"clone","","",315,[[],["litchar",3]]],[11,"clone","","",316,[[],["litint",3]]],[11,"clone","","",317,[[],["litfloat",3]]],[11,"clone","","",267,[[],["litbool",3]]],[11,"clone","","",268,[[],["litverbatim",3]]],[11,"clone","","",269,[[],["strstyle",4]]],[11,"clone","","",265,[[],["intsuffix",4]]],[11,"clone","","",264,[[],["floatsuffix",4]]],[11,"clone","","",270,[[],["macro",3]]],[11,"clone","","",271,[[],["macrodelimiter",4]]],[11,"clone","","",276,[[],["deriveinput",3]]],[11,"clone","","",272,[[],["data",4]]],[11,"clone","","",274,[[],["datastruct",3]]],[11,"clone","","",273,[[],["dataenum",3]]],[11,"clone","","",275,[[],["dataunion",3]]],[11,"clone","","",277,[[],["binop",4]]],[11,"clone","","",278,[[],["unop",4]]],[11,"clone","","",283,[[],["type",4]]],[11,"clone","","",295,[[],["typeslice",3]]],[11,"clone","","",284,[[],["typearray",3]]],[11,"clone","","",293,[[],["typeptr",3]]],[11,"clone","","",294,[[],["typereference",3]]],[11,"clone","","",285,[[],["typebarefn",3]]],[11,"clone","","",290,[[],["typenever",3]]],[11,"clone","","",297,[[],["typetuple",3]]],[11,"clone","","",292,[[],["typepath",3]]],[11,"clone","","",296,[[],["typetraitobject",3]]],[11,"clone","","",287,[[],["typeimpltrait",3]]],[11,"clone","","",291,[[],["typeparen",3]]],[11,"clone","","",286,[[],["typegroup",3]]],[11,"clone","","",288,[[],["typeinfer",3]]],[11,"clone","","",289,[[],["typemacro",3]]],[11,"clone","","",298,[[],["typeverbatim",3]]],[11,"clone","","",279,[[],["abi",3]]],[11,"clone","","",280,[[],["barefnarg",3]]],[11,"clone","","",281,[[],["barefnargname",4]]],[11,"clone","","",282,[[],["returntype",4]]],[11,"clone","","",304,[[],["path",3]]],[11,"clone","","",306,[[],["pathsegment",3]]],[11,"clone","","",305,[[],["patharguments",4]]],[11,"clone","","",302,[[],["genericargument",4]]],[11,"clone","","",299,[[],["anglebracketedgenericarguments",3]]],[11,"clone","","",300,[[],["binding",3]]],[11,"clone","","",301,[[],["constraint",3]]],[11,"clone","","",303,[[],["parenthesizedgenericarguments",3]]],[11,"clone","","",307,[[],["qself",3]]],[11,"clone","syn::buffer","",104,[[],["cursor",3]]],[11,"clone","syn::punctuated","",106,[[],["punctuated",3]]],[11,"clone","","",318,[[]]],[11,"clone","","",320,[[],["intopairs",3]]],[11,"clone","","",321,[[],["intoiter",3]]],[11,"clone","","",322,[[]]],[11,"clone","","",107,[[],["pair",4]]],[11,"clone","syn::parse","",112,[[],["stepcursor",3]]],[11,"clone","","",115,[[]]],[11,"default","syn::token","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[]]],[11,"default","","",5,[[]]],[11,"default","","",6,[[]]],[11,"default","","",7,[[]]],[11,"default","","",8,[[]]],[11,"default","","",9,[[]]],[11,"default","","",10,[[]]],[11,"default","","",11,[[]]],[11,"default","","",12,[[]]],[11,"default","","",13,[[]]],[11,"default","","",14,[[]]],[11,"default","","",15,[[]]],[11,"default","","",16,[[]]],[11,"default","","",17,[[]]],[11,"default","","",18,[[]]],[11,"default","","",19,[[]]],[11,"default","","",20,[[]]],[11,"default","","",21,[[]]],[11,"default","","",22,[[]]],[11,"default","","",23,[[]]],[11,"default","","",24,[[]]],[11,"default","","",25,[[]]],[11,"default","","",26,[[]]],[11,"default","","",27,[[]]],[11,"default","","",28,[[]]],[11,"default","","",29,[[]]],[11,"default","","",30,[[]]],[11,"default","","",31,[[]]],[11,"default","","",32,[[]]],[11,"default","","",33,[[]]],[11,"default","","",34,[[]]],[11,"default","","",35,[[]]],[11,"default","","",36,[[]]],[11,"default","","",37,[[]]],[11,"default","","",38,[[]]],[11,"default","","",39,[[]]],[11,"default","","",40,[[]]],[11,"default","","",41,[[]]],[11,"default","","",42,[[]]],[11,"default","","",43,[[]]],[11,"default","","",44,[[]]],[11,"default","","",45,[[]]],[11,"default","","",46,[[]]],[11,"default","","",47,[[]]],[11,"default","","",48,[[]]],[11,"default","","",49,[[]]],[11,"default","","",50,[[]]],[11,"default","","",51,[[]]],[11,"default","","",52,[[]]],[11,"default","","",53,[[]]],[11,"default","","",54,[[]]],[11,"default","","",55,[[]]],[11,"default","","",56,[[]]],[11,"default","","",57,[[]]],[11,"default","","",58,[[]]],[11,"default","","",59,[[]]],[11,"default","","",60,[[]]],[11,"default","","",61,[[]]],[11,"default","","",62,[[]]],[11,"default","","",63,[[]]],[11,"default","","",64,[[]]],[11,"default","","",65,[[]]],[11,"default","","",66,[[]]],[11,"default","","",67,[[]]],[11,"default","","",68,[[]]],[11,"default","","",69,[[]]],[11,"default","","",70,[[]]],[11,"default","","",71,[[]]],[11,"default","","",72,[[]]],[11,"default","","",73,[[]]],[11,"default","","",74,[[]]],[11,"default","","",75,[[]]],[11,"default","","",76,[[]]],[11,"default","","",77,[[]]],[11,"default","","",78,[[]]],[11,"default","","",79,[[]]],[11,"default","","",80,[[]]],[11,"default","","",81,[[]]],[11,"default","","",82,[[]]],[11,"default","","",83,[[]]],[11,"default","","",84,[[]]],[11,"default","","",85,[[]]],[11,"default","","",86,[[]]],[11,"default","","",87,[[]]],[11,"default","","",88,[[]]],[11,"default","","",89,[[]]],[11,"default","","",90,[[]]],[11,"default","","",91,[[]]],[11,"default","","",92,[[]]],[11,"default","","",93,[[]]],[11,"default","","",94,[[]]],[11,"default","","",95,[[]]],[11,"default","","",96,[[]]],[11,"default","","",97,[[]]],[11,"default","","",98,[[]]],[11,"default","","",99,[[]]],[11,"default","","",100,[[]]],[11,"default","","",101,[[]]],[11,"default","","",102,[[]]],[11,"default","syn","",201,[[],["generics",3]]],[11,"default","","",198,[[],["boundlifetimes",3]]],[11,"default","","",305,[[]]],[11,"default","syn::punctuated","",106,[[]]],[11,"cmp","syn","",263,[[["lifetime",3]],["ordering",4]]],[11,"eq","syn::token","",0,[[["underscore",3]]]],[11,"eq","","",1,[[["abstract",3]]]],[11,"eq","","",2,[[["as",3]]]],[11,"eq","","",3,[[["async",3]]]],[11,"eq","","",4,[[["auto",3]]]],[11,"eq","","",5,[[["become",3]]]],[11,"eq","","",6,[[["box",3]]]],[11,"eq","","",7,[[["break",3]]]],[11,"eq","","",8,[[["const",3]]]],[11,"eq","","",9,[[["continue",3]]]],[11,"eq","","",10,[[["crate",3]]]],[11,"eq","","",11,[[["default",3]]]],[11,"eq","","",12,[[["do",3]]]],[11,"eq","","",13,[[["dyn",3]]]],[11,"eq","","",14,[[["else",3]]]],[11,"eq","","",15,[[["enum",3]]]],[11,"eq","","",16,[[["existential",3]]]],[11,"eq","","",17,[[["extern",3]]]],[11,"eq","","",18,[[["final",3]]]],[11,"eq","","",19,[[["fn",3]]]],[11,"eq","","",20,[[["for",3]]]],[11,"eq","","",21,[[["if",3]]]],[11,"eq","","",22,[[["impl",3]]]],[11,"eq","","",23,[[["in",3]]]],[11,"eq","","",24,[[["let",3]]]],[11,"eq","","",25,[[["loop",3]]]],[11,"eq","","",26,[[["macro",3]]]],[11,"eq","","",27,[[["match",3]]]],[11,"eq","","",28,[[["mod",3]]]],[11,"eq","","",29,[[["move",3]]]],[11,"eq","","",30,[[["mut",3]]]],[11,"eq","","",31,[[["override",3]]]],[11,"eq","","",32,[[["priv",3]]]],[11,"eq","","",33,[[["pub",3]]]],[11,"eq","","",34,[[["ref",3]]]],[11,"eq","","",35,[[["return",3]]]],[11,"eq","","",36,[[["selftype",3]]]],[11,"eq","","",37,[[["selfvalue",3]]]],[11,"eq","","",38,[[["static",3]]]],[11,"eq","","",39,[[["struct",3]]]],[11,"eq","","",40,[[["super",3]]]],[11,"eq","","",41,[[["trait",3]]]],[11,"eq","","",42,[[["try",3]]]],[11,"eq","","",43,[[["type",3]]]],[11,"eq","","",44,[[["typeof",3]]]],[11,"eq","","",45,[[["union",3]]]],[11,"eq","","",46,[[["unsafe",3]]]],[11,"eq","","",47,[[["unsized",3]]]],[11,"eq","","",48,[[["use",3]]]],[11,"eq","","",49,[[["virtual",3]]]],[11,"eq","","",50,[[["where",3]]]],[11,"eq","","",51,[[["while",3]]]],[11,"eq","","",52,[[["yield",3]]]],[11,"eq","","",53,[[["add",3]]]],[11,"eq","","",54,[[["addeq",3]]]],[11,"eq","","",55,[[["and",3]]]],[11,"eq","","",56,[[["andand",3]]]],[11,"eq","","",57,[[["andeq",3]]]],[11,"eq","","",58,[[["at",3]]]],[11,"eq","","",59,[[["bang",3]]]],[11,"eq","","",60,[[["caret",3]]]],[11,"eq","","",61,[[["careteq",3]]]],[11,"eq","","",62,[[["colon",3]]]],[11,"eq","","",63,[[["colon2",3]]]],[11,"eq","","",64,[[["comma",3]]]],[11,"eq","","",65,[[["div",3]]]],[11,"eq","","",66,[[["diveq",3]]]],[11,"eq","","",67,[[["dollar",3]]]],[11,"eq","","",68,[[["dot",3]]]],[11,"eq","","",69,[[["dot2",3]]]],[11,"eq","","",70,[[["dot3",3]]]],[11,"eq","","",71,[[["dotdoteq",3]]]],[11,"eq","","",72,[[["eq",3]]]],[11,"eq","","",73,[[["eqeq",3]]]],[11,"eq","","",74,[[["ge",3]]]],[11,"eq","","",75,[[["gt",3]]]],[11,"eq","","",76,[[["le",3]]]],[11,"eq","","",77,[[["lt",3]]]],[11,"eq","","",78,[[["muleq",3]]]],[11,"eq","","",79,[[["ne",3]]]],[11,"eq","","",80,[[["or",3]]]],[11,"eq","","",81,[[["oreq",3]]]],[11,"eq","","",82,[[["oror",3]]]],[11,"eq","","",83,[[["pound",3]]]],[11,"eq","","",84,[[["question",3]]]],[11,"eq","","",85,[[["rarrow",3]]]],[11,"eq","","",86,[[["larrow",3]]]],[11,"eq","","",87,[[["rem",3]]]],[11,"eq","","",88,[[["remeq",3]]]],[11,"eq","","",89,[[["fatarrow",3]]]],[11,"eq","","",90,[[["semi",3]]]],[11,"eq","","",91,[[["shl",3]]]],[11,"eq","","",92,[[["shleq",3]]]],[11,"eq","","",93,[[["shr",3]]]],[11,"eq","","",94,[[["shreq",3]]]],[11,"eq","","",95,[[["star",3]]]],[11,"eq","","",96,[[["sub",3]]]],[11,"eq","","",97,[[["subeq",3]]]],[11,"eq","","",98,[[["tilde",3]]]],[11,"eq","","",99,[[["brace",3]]]],[11,"eq","","",100,[[["bracket",3]]]],[11,"eq","","",101,[[["paren",3]]]],[11,"eq","","",102,[[["group",3]]]],[11,"eq","syn","",117,[[]]],[11,"eq","","",116,[[["attrstyle",4]]]],[11,"ne","","",116,[[["attrstyle",4]]]],[11,"eq","","",118,[[["meta",4]]]],[11,"ne","","",118,[[["meta",4]]]],[11,"eq","","",119,[[["metalist",3]]]],[11,"ne","","",119,[[["metalist",3]]]],[11,"eq","","",120,[[["metanamevalue",3]]]],[11,"ne","","",120,[[["metanamevalue",3]]]],[11,"eq","","",121,[[["nestedmeta",4]]]],[11,"ne","","",121,[[["nestedmeta",4]]]],[11,"eq","","",126,[[["variant",3]]]],[11,"ne","","",126,[[["variant",3]]]],[11,"eq","","",123,[[["fields",4]]]],[11,"ne","","",123,[[["fields",4]]]],[11,"eq","","",124,[[["fieldsnamed",3]]]],[11,"ne","","",124,[[["fieldsnamed",3]]]],[11,"eq","","",125,[[["fieldsunnamed",3]]]],[11,"ne","","",125,[[["fieldsunnamed",3]]]],[11,"eq","","",122,[[["field",3]]]],[11,"ne","","",122,[[["field",3]]]],[11,"eq","","",130,[[["visibility",4]]]],[11,"ne","","",130,[[["visibility",4]]]],[11,"eq","","",128,[[["vispublic",3]]]],[11,"ne","","",128,[[["vispublic",3]]]],[11,"eq","","",127,[[["viscrate",3]]]],[11,"ne","","",127,[[["viscrate",3]]]],[11,"eq","","",129,[[["visrestricted",3]]]],[11,"ne","","",129,[[["visrestricted",3]]]],[11,"eq","","",131,[[["expr",4]]]],[11,"ne","","",131,[[["expr",4]]]],[11,"eq","","",138,[[["exprbox",3]]]],[11,"ne","","",138,[[["exprbox",3]]]],[11,"eq","","",148,[[["exprinplace",3]]]],[11,"ne","","",148,[[["exprinplace",3]]]],[11,"eq","","",132,[[["exprarray",3]]]],[11,"ne","","",132,[[["exprarray",3]]]],[11,"eq","","",140,[[["exprcall",3]]]],[11,"ne","","",140,[[["exprcall",3]]]],[11,"eq","","",155,[[["exprmethodcall",3]]]],[11,"ne","","",155,[[["exprmethodcall",3]]]],[11,"eq","","",165,[[["exprtuple",3]]]],[11,"ne","","",165,[[["exprtuple",3]]]],[11,"eq","","",136,[[["exprbinary",3]]]],[11,"ne","","",136,[[["exprbinary",3]]]],[11,"eq","","",167,[[["exprunary",3]]]],[11,"ne","","",167,[[["exprunary",3]]]],[11,"eq","","",151,[[["exprlit",3]]]],[11,"ne","","",151,[[["exprlit",3]]]],[11,"eq","","",141,[[["exprcast",3]]]],[11,"ne","","",141,[[["exprcast",3]]]],[11,"eq","","",166,[[["exprtype",3]]]],[11,"ne","","",166,[[["exprtype",3]]]],[11,"eq","","",150,[[["exprlet",3]]]],[11,"ne","","",150,[[["exprlet",3]]]],[11,"eq","","",147,[[["exprif",3]]]],[11,"ne","","",147,[[["exprif",3]]]],[11,"eq","","",170,[[["exprwhile",3]]]],[11,"ne","","",170,[[["exprwhile",3]]]],[11,"eq","","",145,[[["exprforloop",3]]]],[11,"ne","","",145,[[["exprforloop",3]]]],[11,"eq","","",152,[[["exprloop",3]]]],[11,"ne","","",152,[[["exprloop",3]]]],[11,"eq","","",154,[[["exprmatch",3]]]],[11,"ne","","",154,[[["exprmatch",3]]]],[11,"eq","","",142,[[["exprclosure",3]]]],[11,"ne","","",142,[[["exprclosure",3]]]],[11,"eq","","",168,[[["exprunsafe",3]]]],[11,"ne","","",168,[[["exprunsafe",3]]]],[11,"eq","","",137,[[["exprblock",3]]]],[11,"ne","","",137,[[["exprblock",3]]]],[11,"eq","","",133,[[["exprassign",3]]]],[11,"ne","","",133,[[["exprassign",3]]]],[11,"eq","","",134,[[["exprassignop",3]]]],[11,"ne","","",134,[[["exprassignop",3]]]],[11,"eq","","",144,[[["exprfield",3]]]],[11,"ne","","",144,[[["exprfield",3]]]],[11,"eq","","",149,[[["exprindex",3]]]],[11,"ne","","",149,[[["exprindex",3]]]],[11,"eq","","",158,[[["exprrange",3]]]],[11,"ne","","",158,[[["exprrange",3]]]],[11,"eq","","",157,[[["exprpath",3]]]],[11,"ne","","",157,[[["exprpath",3]]]],[11,"eq","","",159,[[["exprreference",3]]]],[11,"ne","","",159,[[["exprreference",3]]]],[11,"eq","","",139,[[["exprbreak",3]]]],[11,"ne","","",139,[[["exprbreak",3]]]],[11,"eq","","",143,[[["exprcontinue",3]]]],[11,"ne","","",143,[[["exprcontinue",3]]]],[11,"eq","","",161,[[["exprreturn",3]]]],[11,"ne","","",161,[[["exprreturn",3]]]],[11,"eq","","",153,[[["exprmacro",3]]]],[11,"ne","","",153,[[["exprmacro",3]]]],[11,"eq","","",162,[[["exprstruct",3]]]],[11,"ne","","",162,[[["exprstruct",3]]]],[11,"eq","","",160,[[["exprrepeat",3]]]],[11,"ne","","",160,[[["exprrepeat",3]]]],[11,"eq","","",156,[[["exprparen",3]]]],[11,"ne","","",156,[[["exprparen",3]]]],[11,"eq","","",146,[[["exprgroup",3]]]],[11,"ne","","",146,[[["exprgroup",3]]]],[11,"eq","","",163,[[["exprtry",3]]]],[11,"ne","","",163,[[["exprtry",3]]]],[11,"eq","","",135,[[["exprasync",3]]]],[11,"ne","","",135,[[["exprasync",3]]]],[11,"eq","","",164,[[["exprtryblock",3]]]],[11,"ne","","",164,[[["exprtryblock",3]]]],[11,"eq","","",171,[[["expryield",3]]]],[11,"ne","","",171,[[["expryield",3]]]],[11,"eq","","",169,[[]]],[11,"eq","","",173,[[["member",4]]]],[11,"ne","","",173,[[["member",4]]]],[11,"eq","","",172,[[]]],[11,"eq","","",181,[[["methodturbofish",3]]]],[11,"ne","","",181,[[["methodturbofish",3]]]],[11,"eq","","",178,[[["genericmethodargument",4]]]],[11,"ne","","",178,[[["genericmethodargument",4]]]],[11,"eq","","",177,[[["fieldvalue",3]]]],[11,"ne","","",177,[[["fieldvalue",3]]]],[11,"eq","","",179,[[["label",3]]]],[11,"ne","","",179,[[["label",3]]]],[11,"eq","","",175,[[["block",3]]]],[11,"ne","","",175,[[["block",3]]]],[11,"eq","","",197,[[["stmt",4]]]],[11,"ne","","",197,[[["stmt",4]]]],[11,"eq","","",180,[[["local",3]]]],[11,"ne","","",180,[[["local",3]]]],[11,"eq","","",182,[[["pat",4]]]],[11,"ne","","",182,[[["pat",4]]]],[11,"eq","","",195,[[["patwild",3]]]],[11,"ne","","",195,[[["patwild",3]]]],[11,"eq","","",184,[[["patident",3]]]],[11,"ne","","",184,[[["patident",3]]]],[11,"eq","","",191,[[["patstruct",3]]]],[11,"ne","","",191,[[["patstruct",3]]]],[11,"eq","","",193,[[["pattuplestruct",3]]]],[11,"ne","","",193,[[["pattuplestruct",3]]]],[11,"eq","","",187,[[["patpath",3]]]],[11,"ne","","",187,[[["patpath",3]]]],[11,"eq","","",192,[[["pattuple",3]]]],[11,"ne","","",192,[[["pattuple",3]]]],[11,"eq","","",183,[[["patbox",3]]]],[11,"ne","","",183,[[["patbox",3]]]],[11,"eq","","",189,[[["patref",3]]]],[11,"ne","","",189,[[["patref",3]]]],[11,"eq","","",185,[[["patlit",3]]]],[11,"ne","","",185,[[["patlit",3]]]],[11,"eq","","",188,[[["patrange",3]]]],[11,"ne","","",188,[[["patrange",3]]]],[11,"eq","","",190,[[["patslice",3]]]],[11,"ne","","",190,[[["patslice",3]]]],[11,"eq","","",186,[[["patmacro",3]]]],[11,"ne","","",186,[[["patmacro",3]]]],[11,"eq","","",194,[[]]],[11,"eq","","",174,[[["arm",3]]]],[11,"ne","","",174,[[["arm",3]]]],[11,"eq","","",196,[[["rangelimits",4]]]],[11,"ne","","",196,[[["rangelimits",4]]]],[11,"eq","","",176,[[["fieldpat",3]]]],[11,"ne","","",176,[[["fieldpat",3]]]],[11,"eq","","",201,[[["generics",3]]]],[11,"ne","","",201,[[["generics",3]]]],[11,"eq","","",200,[[["genericparam",4]]]],[11,"ne","","",200,[[["genericparam",4]]]],[11,"eq","","",208,[[["typeparam",3]]]],[11,"ne","","",208,[[["typeparam",3]]]],[11,"eq","","",202,[[["lifetimedef",3]]]],[11,"ne","","",202,[[["lifetimedef",3]]]],[11,"eq","","",199,[[["constparam",3]]]],[11,"ne","","",199,[[["constparam",3]]]],[11,"eq","","",309,[[["implgenerics",3]]]],[11,"ne","","",309,[[["implgenerics",3]]]],[11,"eq","","",310,[[["typegenerics",3]]]],[11,"ne","","",310,[[["typegenerics",3]]]],[11,"eq","","",311,[[["turbofish",3]]]],[11,"ne","","",311,[[["turbofish",3]]]],[11,"eq","","",198,[[["boundlifetimes",3]]]],[11,"ne","","",198,[[["boundlifetimes",3]]]],[11,"eq","","",209,[[["typeparambound",4]]]],[11,"ne","","",209,[[["typeparambound",4]]]],[11,"eq","","",206,[[["traitbound",3]]]],[11,"ne","","",206,[[["traitbound",3]]]],[11,"eq","","",207,[[["traitboundmodifier",4]]]],[11,"ne","","",207,[[["traitboundmodifier",4]]]],[11,"eq","","",210,[[["whereclause",3]]]],[11,"ne","","",210,[[["whereclause",3]]]],[11,"eq","","",211,[[["wherepredicate",4]]]],[11,"ne","","",211,[[["wherepredicate",4]]]],[11,"eq","","",205,[[["predicatetype",3]]]],[11,"ne","","",205,[[["predicatetype",3]]]],[11,"eq","","",204,[[["predicatelifetime",3]]]],[11,"ne","","",204,[[["predicatelifetime",3]]]],[11,"eq","","",203,[[["predicateeq",3]]]],[11,"ne","","",203,[[["predicateeq",3]]]],[11,"eq","","",230,[[["item",4]]]],[11,"ne","","",230,[[["item",4]]]],[11,"eq","","",234,[[["itemexterncrate",3]]]],[11,"ne","","",234,[[["itemexterncrate",3]]]],[11,"eq","","",247,[[["itemuse",3]]]],[11,"ne","","",247,[[["itemuse",3]]]],[11,"eq","","",241,[[["itemstatic",3]]]],[11,"ne","","",241,[[["itemstatic",3]]]],[11,"eq","","",231,[[["itemconst",3]]]],[11,"ne","","",231,[[["itemconst",3]]]],[11,"eq","","",235,[[["itemfn",3]]]],[11,"ne","","",235,[[["itemfn",3]]]],[11,"eq","","",240,[[["itemmod",3]]]],[11,"ne","","",240,[[["itemmod",3]]]],[11,"eq","","",236,[[["itemforeignmod",3]]]],[11,"ne","","",236,[[["itemforeignmod",3]]]],[11,"eq","","",245,[[["itemtype",3]]]],[11,"ne","","",245,[[["itemtype",3]]]],[11,"eq","","",233,[[["itemexistential",3]]]],[11,"ne","","",233,[[["itemexistential",3]]]],[11,"eq","","",242,[[["itemstruct",3]]]],[11,"ne","","",242,[[["itemstruct",3]]]],[11,"eq","","",232,[[["itemenum",3]]]],[11,"ne","","",232,[[["itemenum",3]]]],[11,"eq","","",246,[[["itemunion",3]]]],[11,"ne","","",246,[[["itemunion",3]]]],[11,"eq","","",243,[[["itemtrait",3]]]],[11,"ne","","",243,[[["itemtrait",3]]]],[11,"eq","","",244,[[["itemtraitalias",3]]]],[11,"ne","","",244,[[["itemtraitalias",3]]]],[11,"eq","","",237,[[["itemimpl",3]]]],[11,"ne","","",237,[[["itemimpl",3]]]],[11,"eq","","",238,[[["itemmacro",3]]]],[11,"ne","","",238,[[["itemmacro",3]]]],[11,"eq","","",239,[[]]],[11,"eq","","",248,[[]]],[11,"eq","","",261,[[["usetree",4]]]],[11,"ne","","",261,[[["usetree",4]]]],[11,"eq","","",259,[[["usepath",3]]]],[11,"ne","","",259,[[["usepath",3]]]],[11,"eq","","",258,[[["usename",3]]]],[11,"ne","","",258,[[["usename",3]]]],[11,"eq","","",260,[[["userename",3]]]],[11,"ne","","",260,[[["userename",3]]]],[11,"eq","","",256,[[["useglob",3]]]],[11,"ne","","",256,[[["useglob",3]]]],[11,"eq","","",257,[[["usegroup",3]]]],[11,"ne","","",257,[[["usegroup",3]]]],[11,"eq","","",217,[[["foreignitem",4]]]],[11,"ne","","",217,[[["foreignitem",4]]]],[11,"eq","","",218,[[["foreignitemfn",3]]]],[11,"ne","","",218,[[["foreignitemfn",3]]]],[11,"eq","","",220,[[["foreignitemstatic",3]]]],[11,"ne","","",220,[[["foreignitemstatic",3]]]],[11,"eq","","",221,[[["foreignitemtype",3]]]],[11,"ne","","",221,[[["foreignitemtype",3]]]],[11,"eq","","",219,[[["foreignitemmacro",3]]]],[11,"ne","","",219,[[["foreignitemmacro",3]]]],[11,"eq","","",222,[[]]],[11,"eq","","",250,[[["traititem",4]]]],[11,"ne","","",250,[[["traititem",4]]]],[11,"eq","","",251,[[["traititemconst",3]]]],[11,"ne","","",251,[[["traititemconst",3]]]],[11,"eq","","",253,[[["traititemmethod",3]]]],[11,"ne","","",253,[[["traititemmethod",3]]]],[11,"eq","","",254,[[["traititemtype",3]]]],[11,"ne","","",254,[[["traititemtype",3]]]],[11,"eq","","",252,[[["traititemmacro",3]]]],[11,"ne","","",252,[[["traititemmacro",3]]]],[11,"eq","","",255,[[]]],[11,"eq","","",223,[[["implitem",4]]]],[11,"ne","","",223,[[["implitem",4]]]],[11,"eq","","",224,[[["implitemconst",3]]]],[11,"ne","","",224,[[["implitemconst",3]]]],[11,"eq","","",227,[[["implitemmethod",3]]]],[11,"ne","","",227,[[["implitemmethod",3]]]],[11,"eq","","",228,[[["implitemtype",3]]]],[11,"ne","","",228,[[["implitemtype",3]]]],[11,"eq","","",225,[[["implitemexistential",3]]]],[11,"ne","","",225,[[["implitemexistential",3]]]],[11,"eq","","",226,[[["implitemmacro",3]]]],[11,"ne","","",226,[[["implitemmacro",3]]]],[11,"eq","","",229,[[]]],[11,"eq","","",249,[[["methodsig",3]]]],[11,"ne","","",249,[[["methodsig",3]]]],[11,"eq","","",216,[[["fndecl",3]]]],[11,"ne","","",216,[[["fndecl",3]]]],[11,"eq","","",215,[[["fnarg",4]]]],[11,"ne","","",215,[[["fnarg",4]]]],[11,"eq","","",214,[[["argselfref",3]]]],[11,"ne","","",214,[[["argselfref",3]]]],[11,"eq","","",213,[[["argself",3]]]],[11,"ne","","",213,[[["argself",3]]]],[11,"eq","","",212,[[["argcaptured",3]]]],[11,"ne","","",212,[[["argcaptured",3]]]],[11,"eq","","",262,[[["file",3]]]],[11,"ne","","",262,[[["file",3]]]],[11,"eq","","",263,[[["lifetime",3]]]],[11,"eq","","",266,[[["lit",4]]]],[11,"ne","","",266,[[["lit",4]]]],[11,"eq","","",312,[[]]],[11,"eq","","",313,[[]]],[11,"eq","","",314,[[]]],[11,"eq","","",315,[[]]],[11,"eq","","",316,[[]]],[11,"eq","","",317,[[]]],[11,"eq","","",267,[[]]],[11,"eq","","",268,[[]]],[11,"eq","","",269,[[["strstyle",4]]]],[11,"ne","","",269,[[["strstyle",4]]]],[11,"eq","","",265,[[["intsuffix",4]]]],[11,"eq","","",264,[[["floatsuffix",4]]]],[11,"eq","","",271,[[["macrodelimiter",4]]]],[11,"ne","","",271,[[["macrodelimiter",4]]]],[11,"eq","","",270,[[]]],[11,"eq","","",276,[[["deriveinput",3]]]],[11,"ne","","",276,[[["deriveinput",3]]]],[11,"eq","","",272,[[["data",4]]]],[11,"ne","","",272,[[["data",4]]]],[11,"eq","","",274,[[["datastruct",3]]]],[11,"ne","","",274,[[["datastruct",3]]]],[11,"eq","","",273,[[["dataenum",3]]]],[11,"ne","","",273,[[["dataenum",3]]]],[11,"eq","","",275,[[["dataunion",3]]]],[11,"ne","","",275,[[["dataunion",3]]]],[11,"eq","","",277,[[["binop",4]]]],[11,"ne","","",277,[[["binop",4]]]],[11,"eq","","",278,[[["unop",4]]]],[11,"ne","","",278,[[["unop",4]]]],[11,"eq","","",283,[[["type",4]]]],[11,"ne","","",283,[[["type",4]]]],[11,"eq","","",295,[[["typeslice",3]]]],[11,"ne","","",295,[[["typeslice",3]]]],[11,"eq","","",284,[[["typearray",3]]]],[11,"ne","","",284,[[["typearray",3]]]],[11,"eq","","",293,[[["typeptr",3]]]],[11,"ne","","",293,[[["typeptr",3]]]],[11,"eq","","",294,[[["typereference",3]]]],[11,"ne","","",294,[[["typereference",3]]]],[11,"eq","","",285,[[["typebarefn",3]]]],[11,"ne","","",285,[[["typebarefn",3]]]],[11,"eq","","",290,[[["typenever",3]]]],[11,"ne","","",290,[[["typenever",3]]]],[11,"eq","","",297,[[["typetuple",3]]]],[11,"ne","","",297,[[["typetuple",3]]]],[11,"eq","","",292,[[["typepath",3]]]],[11,"ne","","",292,[[["typepath",3]]]],[11,"eq","","",296,[[["typetraitobject",3]]]],[11,"ne","","",296,[[["typetraitobject",3]]]],[11,"eq","","",287,[[["typeimpltrait",3]]]],[11,"ne","","",287,[[["typeimpltrait",3]]]],[11,"eq","","",291,[[["typeparen",3]]]],[11,"ne","","",291,[[["typeparen",3]]]],[11,"eq","","",286,[[["typegroup",3]]]],[11,"ne","","",286,[[["typegroup",3]]]],[11,"eq","","",288,[[["typeinfer",3]]]],[11,"ne","","",288,[[["typeinfer",3]]]],[11,"eq","","",289,[[["typemacro",3]]]],[11,"ne","","",289,[[["typemacro",3]]]],[11,"eq","","",298,[[]]],[11,"eq","","",279,[[["abi",3]]]],[11,"ne","","",279,[[["abi",3]]]],[11,"eq","","",280,[[["barefnarg",3]]]],[11,"ne","","",280,[[["barefnarg",3]]]],[11,"eq","","",281,[[["barefnargname",4]]]],[11,"ne","","",281,[[["barefnargname",4]]]],[11,"eq","","",282,[[["returntype",4]]]],[11,"ne","","",282,[[["returntype",4]]]],[11,"eq","","",304,[[["path",3]]]],[11,"ne","","",304,[[["path",3]]]],[11,"eq","","",306,[[["pathsegment",3]]]],[11,"ne","","",306,[[["pathsegment",3]]]],[11,"eq","","",305,[[["patharguments",4]]]],[11,"ne","","",305,[[["patharguments",4]]]],[11,"eq","","",302,[[["genericargument",4]]]],[11,"ne","","",302,[[["genericargument",4]]]],[11,"eq","","",299,[[["anglebracketedgenericarguments",3]]]],[11,"ne","","",299,[[["anglebracketedgenericarguments",3]]]],[11,"eq","","",300,[[["binding",3]]]],[11,"ne","","",300,[[["binding",3]]]],[11,"eq","","",301,[[["constraint",3]]]],[11,"ne","","",301,[[["constraint",3]]]],[11,"eq","","",303,[[["parenthesizedgenericarguments",3]]]],[11,"ne","","",303,[[["parenthesizedgenericarguments",3]]]],[11,"eq","","",307,[[["qself",3]]]],[11,"ne","","",307,[[["qself",3]]]],[11,"eq","syn::buffer","",104,[[["cursor",3]]]],[11,"ne","","",104,[[["cursor",3]]]],[11,"eq","syn::punctuated","",106,[[["punctuated",3]]]],[11,"ne","","",106,[[["punctuated",3]]]],[11,"partial_cmp","syn","",263,[[["lifetime",3]],[["option",4],["ordering",4]]]],[11,"deref","syn::token","",0,[[]]],[11,"deref","","",53,[[]]],[11,"deref","","",55,[[]]],[11,"deref","","",58,[[]]],[11,"deref","","",59,[[]]],[11,"deref","","",60,[[]]],[11,"deref","","",62,[[]]],[11,"deref","","",64,[[]]],[11,"deref","","",65,[[]]],[11,"deref","","",67,[[]]],[11,"deref","","",68,[[]]],[11,"deref","","",72,[[]]],[11,"deref","","",75,[[]]],[11,"deref","","",77,[[]]],[11,"deref","","",80,[[]]],[11,"deref","","",83,[[]]],[11,"deref","","",84,[[]]],[11,"deref","","",87,[[]]],[11,"deref","","",90,[[]]],[11,"deref","","",95,[[]]],[11,"deref","","",96,[[]]],[11,"deref","","",98,[[]]],[11,"deref","syn::parse","",112,[[]]],[11,"deref_mut","syn::token","",0,[[]]],[11,"deref_mut","","",53,[[]]],[11,"deref_mut","","",55,[[]]],[11,"deref_mut","","",58,[[]]],[11,"deref_mut","","",59,[[]]],[11,"deref_mut","","",60,[[]]],[11,"deref_mut","","",62,[[]]],[11,"deref_mut","","",64,[[]]],[11,"deref_mut","","",65,[[]]],[11,"deref_mut","","",67,[[]]],[11,"deref_mut","","",68,[[]]],[11,"deref_mut","","",72,[[]]],[11,"deref_mut","","",75,[[]]],[11,"deref_mut","","",77,[[]]],[11,"deref_mut","","",80,[[]]],[11,"deref_mut","","",83,[[]]],[11,"deref_mut","","",84,[[]]],[11,"deref_mut","","",87,[[]]],[11,"deref_mut","","",90,[[]]],[11,"deref_mut","","",95,[[]]],[11,"deref_mut","","",96,[[]]],[11,"deref_mut","","",98,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","syn","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",131,[[["formatter",3]],["result",6]]],[11,"fmt","","",138,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",165,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",167,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",166,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",170,[[["formatter",3]],["result",6]]],[11,"fmt","","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",142,[[["formatter",3]],["result",6]]],[11,"fmt","","",168,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",144,[[["formatter",3]],["result",6]]],[11,"fmt","","",149,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",139,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",162,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",163,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","","",164,[[["formatter",3]],["result",6]]],[11,"fmt","","",171,[[["formatter",3]],["result",6]]],[11,"fmt","","",169,[[["formatter",3]],["result",6]]],[11,"fmt","","",173,[[["formatter",3]],["result",6]]],[11,"fmt","","",172,[[["formatter",3]],["result",6]]],[11,"fmt","","",181,[[["formatter",3]],["result",6]]],[11,"fmt","","",178,[[["formatter",3]],["result",6]]],[11,"fmt","","",177,[[["formatter",3]],["result",6]]],[11,"fmt","","",179,[[["formatter",3]],["result",6]]],[11,"fmt","","",175,[[["formatter",3]],["result",6]]],[11,"fmt","","",197,[[["formatter",3]],["result",6]]],[11,"fmt","","",180,[[["formatter",3]],["result",6]]],[11,"fmt","","",182,[[["formatter",3]],["result",6]]],[11,"fmt","","",195,[[["formatter",3]],["result",6]]],[11,"fmt","","",184,[[["formatter",3]],["result",6]]],[11,"fmt","","",191,[[["formatter",3]],["result",6]]],[11,"fmt","","",193,[[["formatter",3]],["result",6]]],[11,"fmt","","",187,[[["formatter",3]],["result",6]]],[11,"fmt","","",192,[[["formatter",3]],["result",6]]],[11,"fmt","","",183,[[["formatter",3]],["result",6]]],[11,"fmt","","",189,[[["formatter",3]],["result",6]]],[11,"fmt","","",185,[[["formatter",3]],["result",6]]],[11,"fmt","","",188,[[["formatter",3]],["result",6]]],[11,"fmt","","",190,[[["formatter",3]],["result",6]]],[11,"fmt","","",186,[[["formatter",3]],["result",6]]],[11,"fmt","","",194,[[["formatter",3]],["result",6]]],[11,"fmt","","",174,[[["formatter",3]],["result",6]]],[11,"fmt","","",196,[[["formatter",3]],["result",6]]],[11,"fmt","","",176,[[["formatter",3]],["result",6]]],[11,"fmt","","",201,[[["formatter",3]],["result",6]]],[11,"fmt","","",200,[[["formatter",3]],["result",6]]],[11,"fmt","","",208,[[["formatter",3]],["result",6]]],[11,"fmt","","",202,[[["formatter",3]],["result",6]]],[11,"fmt","","",199,[[["formatter",3]],["result",6]]],[11,"fmt","","",309,[[["formatter",3]],["result",6]]],[11,"fmt","","",310,[[["formatter",3]],["result",6]]],[11,"fmt","","",311,[[["formatter",3]],["result",6]]],[11,"fmt","","",198,[[["formatter",3]],["result",6]]],[11,"fmt","","",209,[[["formatter",3]],["result",6]]],[11,"fmt","","",206,[[["formatter",3]],["result",6]]],[11,"fmt","","",207,[[["formatter",3]],["result",6]]],[11,"fmt","","",210,[[["formatter",3]],["result",6]]],[11,"fmt","","",211,[[["formatter",3]],["result",6]]],[11,"fmt","","",205,[[["formatter",3]],["result",6]]],[11,"fmt","","",204,[[["formatter",3]],["result",6]]],[11,"fmt","","",203,[[["formatter",3]],["result",6]]],[11,"fmt","","",230,[[["formatter",3]],["result",6]]],[11,"fmt","","",234,[[["formatter",3]],["result",6]]],[11,"fmt","","",247,[[["formatter",3]],["result",6]]],[11,"fmt","","",241,[[["formatter",3]],["result",6]]],[11,"fmt","","",231,[[["formatter",3]],["result",6]]],[11,"fmt","","",235,[[["formatter",3]],["result",6]]],[11,"fmt","","",240,[[["formatter",3]],["result",6]]],[11,"fmt","","",236,[[["formatter",3]],["result",6]]],[11,"fmt","","",245,[[["formatter",3]],["result",6]]],[11,"fmt","","",233,[[["formatter",3]],["result",6]]],[11,"fmt","","",242,[[["formatter",3]],["result",6]]],[11,"fmt","","",232,[[["formatter",3]],["result",6]]],[11,"fmt","","",246,[[["formatter",3]],["result",6]]],[11,"fmt","","",243,[[["formatter",3]],["result",6]]],[11,"fmt","","",244,[[["formatter",3]],["result",6]]],[11,"fmt","","",237,[[["formatter",3]],["result",6]]],[11,"fmt","","",238,[[["formatter",3]],["result",6]]],[11,"fmt","","",239,[[["formatter",3]],["result",6]]],[11,"fmt","","",248,[[["formatter",3]],["result",6]]],[11,"fmt","","",261,[[["formatter",3]],["result",6]]],[11,"fmt","","",259,[[["formatter",3]],["result",6]]],[11,"fmt","","",258,[[["formatter",3]],["result",6]]],[11,"fmt","","",260,[[["formatter",3]],["result",6]]],[11,"fmt","","",256,[[["formatter",3]],["result",6]]],[11,"fmt","","",257,[[["formatter",3]],["result",6]]],[11,"fmt","","",217,[[["formatter",3]],["result",6]]],[11,"fmt","","",218,[[["formatter",3]],["result",6]]],[11,"fmt","","",220,[[["formatter",3]],["result",6]]],[11,"fmt","","",221,[[["formatter",3]],["result",6]]],[11,"fmt","","",219,[[["formatter",3]],["result",6]]],[11,"fmt","","",222,[[["formatter",3]],["result",6]]],[11,"fmt","","",250,[[["formatter",3]],["result",6]]],[11,"fmt","","",251,[[["formatter",3]],["result",6]]],[11,"fmt","","",253,[[["formatter",3]],["result",6]]],[11,"fmt","","",254,[[["formatter",3]],["result",6]]],[11,"fmt","","",252,[[["formatter",3]],["result",6]]],[11,"fmt","","",255,[[["formatter",3]],["result",6]]],[11,"fmt","","",223,[[["formatter",3]],["result",6]]],[11,"fmt","","",224,[[["formatter",3]],["result",6]]],[11,"fmt","","",227,[[["formatter",3]],["result",6]]],[11,"fmt","","",228,[[["formatter",3]],["result",6]]],[11,"fmt","","",225,[[["formatter",3]],["result",6]]],[11,"fmt","","",226,[[["formatter",3]],["result",6]]],[11,"fmt","","",229,[[["formatter",3]],["result",6]]],[11,"fmt","","",249,[[["formatter",3]],["result",6]]],[11,"fmt","","",216,[[["formatter",3]],["result",6]]],[11,"fmt","","",215,[[["formatter",3]],["result",6]]],[11,"fmt","","",214,[[["formatter",3]],["result",6]]],[11,"fmt","","",213,[[["formatter",3]],["result",6]]],[11,"fmt","","",212,[[["formatter",3]],["result",6]]],[11,"fmt","","",262,[[["formatter",3]],["result",6]]],[11,"fmt","","",263,[[["formatter",3]],["result",6]]],[11,"fmt","","",266,[[["formatter",3]],["result",6]]],[11,"fmt","","",312,[[["formatter",3]],["result",6]]],[11,"fmt","","",313,[[["formatter",3]],["result",6]]],[11,"fmt","","",314,[[["formatter",3]],["result",6]]],[11,"fmt","","",315,[[["formatter",3]],["result",6]]],[11,"fmt","","",316,[[["formatter",3]],["result",6]]],[11,"fmt","","",317,[[["formatter",3]],["result",6]]],[11,"fmt","","",267,[[["formatter",3]],["result",6]]],[11,"fmt","","",268,[[["formatter",3]],["result",6]]],[11,"fmt","","",269,[[["formatter",3]],["result",6]]],[11,"fmt","","",265,[[["formatter",3]],["result",6]]],[11,"fmt","","",264,[[["formatter",3]],["result",6]]],[11,"fmt","","",270,[[["formatter",3]],["result",6]]],[11,"fmt","","",271,[[["formatter",3]],["result",6]]],[11,"fmt","","",276,[[["formatter",3]],["result",6]]],[11,"fmt","","",272,[[["formatter",3]],["result",6]]],[11,"fmt","","",274,[[["formatter",3]],["result",6]]],[11,"fmt","","",273,[[["formatter",3]],["result",6]]],[11,"fmt","","",275,[[["formatter",3]],["result",6]]],[11,"fmt","","",277,[[["formatter",3]],["result",6]]],[11,"fmt","","",278,[[["formatter",3]],["result",6]]],[11,"fmt","","",283,[[["formatter",3]],["result",6]]],[11,"fmt","","",295,[[["formatter",3]],["result",6]]],[11,"fmt","","",284,[[["formatter",3]],["result",6]]],[11,"fmt","","",293,[[["formatter",3]],["result",6]]],[11,"fmt","","",294,[[["formatter",3]],["result",6]]],[11,"fmt","","",285,[[["formatter",3]],["result",6]]],[11,"fmt","","",290,[[["formatter",3]],["result",6]]],[11,"fmt","","",297,[[["formatter",3]],["result",6]]],[11,"fmt","","",292,[[["formatter",3]],["result",6]]],[11,"fmt","","",296,[[["formatter",3]],["result",6]]],[11,"fmt","","",287,[[["formatter",3]],["result",6]]],[11,"fmt","","",291,[[["formatter",3]],["result",6]]],[11,"fmt","","",286,[[["formatter",3]],["result",6]]],[11,"fmt","","",288,[[["formatter",3]],["result",6]]],[11,"fmt","","",289,[[["formatter",3]],["result",6]]],[11,"fmt","","",298,[[["formatter",3]],["result",6]]],[11,"fmt","","",279,[[["formatter",3]],["result",6]]],[11,"fmt","","",280,[[["formatter",3]],["result",6]]],[11,"fmt","","",281,[[["formatter",3]],["result",6]]],[11,"fmt","","",282,[[["formatter",3]],["result",6]]],[11,"fmt","","",304,[[["formatter",3]],["result",6]]],[11,"fmt","","",306,[[["formatter",3]],["result",6]]],[11,"fmt","","",305,[[["formatter",3]],["result",6]]],[11,"fmt","","",302,[[["formatter",3]],["result",6]]],[11,"fmt","","",299,[[["formatter",3]],["result",6]]],[11,"fmt","","",300,[[["formatter",3]],["result",6]]],[11,"fmt","","",301,[[["formatter",3]],["result",6]]],[11,"fmt","","",303,[[["formatter",3]],["result",6]]],[11,"fmt","","",307,[[["formatter",3]],["result",6]]],[11,"fmt","syn::punctuated","",106,[[["formatter",3]],["result",6]]],[11,"fmt","syn::parse","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","syn","",263,[[["formatter",3]],["result",6]]],[11,"fmt","syn::parse","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"index","syn::punctuated","",106,[[]]],[11,"index_mut","","",106,[[]]],[11,"hash","syn::token","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",30,[[]]],[11,"hash","","",31,[[]]],[11,"hash","","",32,[[]]],[11,"hash","","",33,[[]]],[11,"hash","","",34,[[]]],[11,"hash","","",35,[[]]],[11,"hash","","",36,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",38,[[]]],[11,"hash","","",39,[[]]],[11,"hash","","",40,[[]]],[11,"hash","","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","","",43,[[]]],[11,"hash","","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",46,[[]]],[11,"hash","","",47,[[]]],[11,"hash","","",48,[[]]],[11,"hash","","",49,[[]]],[11,"hash","","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",52,[[]]],[11,"hash","","",53,[[]]],[11,"hash","","",54,[[]]],[11,"hash","","",55,[[]]],[11,"hash","","",56,[[]]],[11,"hash","","",57,[[]]],[11,"hash","","",58,[[]]],[11,"hash","","",59,[[]]],[11,"hash","","",60,[[]]],[11,"hash","","",61,[[]]],[11,"hash","","",62,[[]]],[11,"hash","","",63,[[]]],[11,"hash","","",64,[[]]],[11,"hash","","",65,[[]]],[11,"hash","","",66,[[]]],[11,"hash","","",67,[[]]],[11,"hash","","",68,[[]]],[11,"hash","","",69,[[]]],[11,"hash","","",70,[[]]],[11,"hash","","",71,[[]]],[11,"hash","","",72,[[]]],[11,"hash","","",73,[[]]],[11,"hash","","",74,[[]]],[11,"hash","","",75,[[]]],[11,"hash","","",76,[[]]],[11,"hash","","",77,[[]]],[11,"hash","","",78,[[]]],[11,"hash","","",79,[[]]],[11,"hash","","",80,[[]]],[11,"hash","","",81,[[]]],[11,"hash","","",82,[[]]],[11,"hash","","",83,[[]]],[11,"hash","","",84,[[]]],[11,"hash","","",85,[[]]],[11,"hash","","",86,[[]]],[11,"hash","","",87,[[]]],[11,"hash","","",88,[[]]],[11,"hash","","",89,[[]]],[11,"hash","","",90,[[]]],[11,"hash","","",91,[[]]],[11,"hash","","",92,[[]]],[11,"hash","","",93,[[]]],[11,"hash","","",94,[[]]],[11,"hash","","",95,[[]]],[11,"hash","","",96,[[]]],[11,"hash","","",97,[[]]],[11,"hash","","",98,[[]]],[11,"hash","","",99,[[]]],[11,"hash","","",100,[[]]],[11,"hash","","",101,[[]]],[11,"hash","","",102,[[]]],[11,"hash","syn","",117,[[]]],[11,"hash","","",116,[[]]],[11,"hash","","",118,[[]]],[11,"hash","","",119,[[]]],[11,"hash","","",120,[[]]],[11,"hash","","",121,[[]]],[11,"hash","","",126,[[]]],[11,"hash","","",123,[[]]],[11,"hash","","",124,[[]]],[11,"hash","","",125,[[]]],[11,"hash","","",122,[[]]],[11,"hash","","",130,[[]]],[11,"hash","","",128,[[]]],[11,"hash","","",127,[[]]],[11,"hash","","",129,[[]]],[11,"hash","","",131,[[]]],[11,"hash","","",138,[[]]],[11,"hash","","",148,[[]]],[11,"hash","","",132,[[]]],[11,"hash","","",140,[[]]],[11,"hash","","",155,[[]]],[11,"hash","","",165,[[]]],[11,"hash","","",136,[[]]],[11,"hash","","",167,[[]]],[11,"hash","","",151,[[]]],[11,"hash","","",141,[[]]],[11,"hash","","",166,[[]]],[11,"hash","","",150,[[]]],[11,"hash","","",147,[[]]],[11,"hash","","",170,[[]]],[11,"hash","","",145,[[]]],[11,"hash","","",152,[[]]],[11,"hash","","",154,[[]]],[11,"hash","","",142,[[]]],[11,"hash","","",168,[[]]],[11,"hash","","",137,[[]]],[11,"hash","","",133,[[]]],[11,"hash","","",134,[[]]],[11,"hash","","",144,[[]]],[11,"hash","","",149,[[]]],[11,"hash","","",158,[[]]],[11,"hash","","",157,[[]]],[11,"hash","","",159,[[]]],[11,"hash","","",139,[[]]],[11,"hash","","",143,[[]]],[11,"hash","","",161,[[]]],[11,"hash","","",153,[[]]],[11,"hash","","",162,[[]]],[11,"hash","","",160,[[]]],[11,"hash","","",156,[[]]],[11,"hash","","",146,[[]]],[11,"hash","","",163,[[]]],[11,"hash","","",135,[[]]],[11,"hash","","",164,[[]]],[11,"hash","","",171,[[]]],[11,"hash","","",169,[[]]],[11,"hash","","",173,[[]]],[11,"hash","","",172,[[]]],[11,"hash","","",181,[[]]],[11,"hash","","",178,[[]]],[11,"hash","","",177,[[]]],[11,"hash","","",179,[[]]],[11,"hash","","",175,[[]]],[11,"hash","","",197,[[]]],[11,"hash","","",180,[[]]],[11,"hash","","",182,[[]]],[11,"hash","","",195,[[]]],[11,"hash","","",184,[[]]],[11,"hash","","",191,[[]]],[11,"hash","","",193,[[]]],[11,"hash","","",187,[[]]],[11,"hash","","",192,[[]]],[11,"hash","","",183,[[]]],[11,"hash","","",189,[[]]],[11,"hash","","",185,[[]]],[11,"hash","","",188,[[]]],[11,"hash","","",190,[[]]],[11,"hash","","",186,[[]]],[11,"hash","","",194,[[]]],[11,"hash","","",174,[[]]],[11,"hash","","",196,[[]]],[11,"hash","","",176,[[]]],[11,"hash","","",201,[[]]],[11,"hash","","",200,[[]]],[11,"hash","","",208,[[]]],[11,"hash","","",202,[[]]],[11,"hash","","",199,[[]]],[11,"hash","","",309,[[]]],[11,"hash","","",310,[[]]],[11,"hash","","",311,[[]]],[11,"hash","","",198,[[]]],[11,"hash","","",209,[[]]],[11,"hash","","",206,[[]]],[11,"hash","","",207,[[]]],[11,"hash","","",210,[[]]],[11,"hash","","",211,[[]]],[11,"hash","","",205,[[]]],[11,"hash","","",204,[[]]],[11,"hash","","",203,[[]]],[11,"hash","","",230,[[]]],[11,"hash","","",234,[[]]],[11,"hash","","",247,[[]]],[11,"hash","","",241,[[]]],[11,"hash","","",231,[[]]],[11,"hash","","",235,[[]]],[11,"hash","","",240,[[]]],[11,"hash","","",236,[[]]],[11,"hash","","",245,[[]]],[11,"hash","","",233,[[]]],[11,"hash","","",242,[[]]],[11,"hash","","",232,[[]]],[11,"hash","","",246,[[]]],[11,"hash","","",243,[[]]],[11,"hash","","",244,[[]]],[11,"hash","","",237,[[]]],[11,"hash","","",238,[[]]],[11,"hash","","",239,[[]]],[11,"hash","","",248,[[]]],[11,"hash","","",261,[[]]],[11,"hash","","",259,[[]]],[11,"hash","","",258,[[]]],[11,"hash","","",260,[[]]],[11,"hash","","",256,[[]]],[11,"hash","","",257,[[]]],[11,"hash","","",217,[[]]],[11,"hash","","",218,[[]]],[11,"hash","","",220,[[]]],[11,"hash","","",221,[[]]],[11,"hash","","",219,[[]]],[11,"hash","","",222,[[]]],[11,"hash","","",250,[[]]],[11,"hash","","",251,[[]]],[11,"hash","","",253,[[]]],[11,"hash","","",254,[[]]],[11,"hash","","",252,[[]]],[11,"hash","","",255,[[]]],[11,"hash","","",223,[[]]],[11,"hash","","",224,[[]]],[11,"hash","","",227,[[]]],[11,"hash","","",228,[[]]],[11,"hash","","",225,[[]]],[11,"hash","","",226,[[]]],[11,"hash","","",229,[[]]],[11,"hash","","",249,[[]]],[11,"hash","","",216,[[]]],[11,"hash","","",215,[[]]],[11,"hash","","",214,[[]]],[11,"hash","","",213,[[]]],[11,"hash","","",212,[[]]],[11,"hash","","",262,[[]]],[11,"hash","","",263,[[]]],[11,"hash","","",266,[[]]],[11,"hash","","",312,[[]]],[11,"hash","","",313,[[]]],[11,"hash","","",314,[[]]],[11,"hash","","",315,[[]]],[11,"hash","","",316,[[]]],[11,"hash","","",317,[[]]],[11,"hash","","",267,[[]]],[11,"hash","","",268,[[]]],[11,"hash","","",269,[[]]],[11,"hash","","",265,[[]]],[11,"hash","","",264,[[]]],[11,"hash","","",271,[[]]],[11,"hash","","",270,[[]]],[11,"hash","","",276,[[]]],[11,"hash","","",272,[[]]],[11,"hash","","",274,[[]]],[11,"hash","","",273,[[]]],[11,"hash","","",275,[[]]],[11,"hash","","",277,[[]]],[11,"hash","","",278,[[]]],[11,"hash","","",283,[[]]],[11,"hash","","",295,[[]]],[11,"hash","","",284,[[]]],[11,"hash","","",293,[[]]],[11,"hash","","",294,[[]]],[11,"hash","","",285,[[]]],[11,"hash","","",290,[[]]],[11,"hash","","",297,[[]]],[11,"hash","","",292,[[]]],[11,"hash","","",296,[[]]],[11,"hash","","",287,[[]]],[11,"hash","","",291,[[]]],[11,"hash","","",286,[[]]],[11,"hash","","",288,[[]]],[11,"hash","","",289,[[]]],[11,"hash","","",298,[[]]],[11,"hash","","",279,[[]]],[11,"hash","","",280,[[]]],[11,"hash","","",281,[[]]],[11,"hash","","",282,[[]]],[11,"hash","","",304,[[]]],[11,"hash","","",306,[[]]],[11,"hash","","",305,[[]]],[11,"hash","","",302,[[]]],[11,"hash","","",299,[[]]],[11,"hash","","",300,[[]]],[11,"hash","","",301,[[]]],[11,"hash","","",303,[[]]],[11,"hash","","",307,[[]]],[11,"hash","syn::punctuated","",106,[[]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"description","syn::parse","",115,[[]]],[11,"to_tokens","syn::token","",0,[[["tokenstream",3]]]],[11,"to_tokens","","",1,[[["tokenstream",3]]]],[11,"to_tokens","","",2,[[["tokenstream",3]]]],[11,"to_tokens","","",3,[[["tokenstream",3]]]],[11,"to_tokens","","",4,[[["tokenstream",3]]]],[11,"to_tokens","","",5,[[["tokenstream",3]]]],[11,"to_tokens","","",6,[[["tokenstream",3]]]],[11,"to_tokens","","",7,[[["tokenstream",3]]]],[11,"to_tokens","","",8,[[["tokenstream",3]]]],[11,"to_tokens","","",9,[[["tokenstream",3]]]],[11,"to_tokens","","",10,[[["tokenstream",3]]]],[11,"to_tokens","","",11,[[["tokenstream",3]]]],[11,"to_tokens","","",12,[[["tokenstream",3]]]],[11,"to_tokens","","",13,[[["tokenstream",3]]]],[11,"to_tokens","","",14,[[["tokenstream",3]]]],[11,"to_tokens","","",15,[[["tokenstream",3]]]],[11,"to_tokens","","",16,[[["tokenstream",3]]]],[11,"to_tokens","","",17,[[["tokenstream",3]]]],[11,"to_tokens","","",18,[[["tokenstream",3]]]],[11,"to_tokens","","",19,[[["tokenstream",3]]]],[11,"to_tokens","","",20,[[["tokenstream",3]]]],[11,"to_tokens","","",21,[[["tokenstream",3]]]],[11,"to_tokens","","",22,[[["tokenstream",3]]]],[11,"to_tokens","","",23,[[["tokenstream",3]]]],[11,"to_tokens","","",24,[[["tokenstream",3]]]],[11,"to_tokens","","",25,[[["tokenstream",3]]]],[11,"to_tokens","","",26,[[["tokenstream",3]]]],[11,"to_tokens","","",27,[[["tokenstream",3]]]],[11,"to_tokens","","",28,[[["tokenstream",3]]]],[11,"to_tokens","","",29,[[["tokenstream",3]]]],[11,"to_tokens","","",30,[[["tokenstream",3]]]],[11,"to_tokens","","",31,[[["tokenstream",3]]]],[11,"to_tokens","","",32,[[["tokenstream",3]]]],[11,"to_tokens","","",33,[[["tokenstream",3]]]],[11,"to_tokens","","",34,[[["tokenstream",3]]]],[11,"to_tokens","","",35,[[["tokenstream",3]]]],[11,"to_tokens","","",36,[[["tokenstream",3]]]],[11,"to_tokens","","",37,[[["tokenstream",3]]]],[11,"to_tokens","","",38,[[["tokenstream",3]]]],[11,"to_tokens","","",39,[[["tokenstream",3]]]],[11,"to_tokens","","",40,[[["tokenstream",3]]]],[11,"to_tokens","","",41,[[["tokenstream",3]]]],[11,"to_tokens","","",42,[[["tokenstream",3]]]],[11,"to_tokens","","",43,[[["tokenstream",3]]]],[11,"to_tokens","","",44,[[["tokenstream",3]]]],[11,"to_tokens","","",45,[[["tokenstream",3]]]],[11,"to_tokens","","",46,[[["tokenstream",3]]]],[11,"to_tokens","","",47,[[["tokenstream",3]]]],[11,"to_tokens","","",48,[[["tokenstream",3]]]],[11,"to_tokens","","",49,[[["tokenstream",3]]]],[11,"to_tokens","","",50,[[["tokenstream",3]]]],[11,"to_tokens","","",51,[[["tokenstream",3]]]],[11,"to_tokens","","",52,[[["tokenstream",3]]]],[11,"to_tokens","","",53,[[["tokenstream",3]]]],[11,"to_tokens","","",54,[[["tokenstream",3]]]],[11,"to_tokens","","",55,[[["tokenstream",3]]]],[11,"to_tokens","","",56,[[["tokenstream",3]]]],[11,"to_tokens","","",57,[[["tokenstream",3]]]],[11,"to_tokens","","",58,[[["tokenstream",3]]]],[11,"to_tokens","","",59,[[["tokenstream",3]]]],[11,"to_tokens","","",60,[[["tokenstream",3]]]],[11,"to_tokens","","",61,[[["tokenstream",3]]]],[11,"to_tokens","","",62,[[["tokenstream",3]]]],[11,"to_tokens","","",63,[[["tokenstream",3]]]],[11,"to_tokens","","",64,[[["tokenstream",3]]]],[11,"to_tokens","","",65,[[["tokenstream",3]]]],[11,"to_tokens","","",66,[[["tokenstream",3]]]],[11,"to_tokens","","",67,[[["tokenstream",3]]]],[11,"to_tokens","","",68,[[["tokenstream",3]]]],[11,"to_tokens","","",69,[[["tokenstream",3]]]],[11,"to_tokens","","",70,[[["tokenstream",3]]]],[11,"to_tokens","","",71,[[["tokenstream",3]]]],[11,"to_tokens","","",72,[[["tokenstream",3]]]],[11,"to_tokens","","",73,[[["tokenstream",3]]]],[11,"to_tokens","","",74,[[["tokenstream",3]]]],[11,"to_tokens","","",75,[[["tokenstream",3]]]],[11,"to_tokens","","",76,[[["tokenstream",3]]]],[11,"to_tokens","","",77,[[["tokenstream",3]]]],[11,"to_tokens","","",78,[[["tokenstream",3]]]],[11,"to_tokens","","",79,[[["tokenstream",3]]]],[11,"to_tokens","","",80,[[["tokenstream",3]]]],[11,"to_tokens","","",81,[[["tokenstream",3]]]],[11,"to_tokens","","",82,[[["tokenstream",3]]]],[11,"to_tokens","","",83,[[["tokenstream",3]]]],[11,"to_tokens","","",84,[[["tokenstream",3]]]],[11,"to_tokens","","",85,[[["tokenstream",3]]]],[11,"to_tokens","","",86,[[["tokenstream",3]]]],[11,"to_tokens","","",87,[[["tokenstream",3]]]],[11,"to_tokens","","",88,[[["tokenstream",3]]]],[11,"to_tokens","","",89,[[["tokenstream",3]]]],[11,"to_tokens","","",90,[[["tokenstream",3]]]],[11,"to_tokens","","",91,[[["tokenstream",3]]]],[11,"to_tokens","","",92,[[["tokenstream",3]]]],[11,"to_tokens","","",93,[[["tokenstream",3]]]],[11,"to_tokens","","",94,[[["tokenstream",3]]]],[11,"to_tokens","","",95,[[["tokenstream",3]]]],[11,"to_tokens","","",96,[[["tokenstream",3]]]],[11,"to_tokens","","",97,[[["tokenstream",3]]]],[11,"to_tokens","","",98,[[["tokenstream",3]]]],[11,"to_tokens","syn","",118,[[["tokenstream",3]]]],[11,"to_tokens","","",121,[[["tokenstream",3]]]],[11,"to_tokens","","",117,[[["tokenstream",3]]]],[11,"to_tokens","","",119,[[["tokenstream",3]]]],[11,"to_tokens","","",120,[[["tokenstream",3]]]],[11,"to_tokens","","",123,[[["tokenstream",3]]]],[11,"to_tokens","","",130,[[["tokenstream",3]]]],[11,"to_tokens","","",126,[[["tokenstream",3]]]],[11,"to_tokens","","",124,[[["tokenstream",3]]]],[11,"to_tokens","","",125,[[["tokenstream",3]]]],[11,"to_tokens","","",122,[[["tokenstream",3]]]],[11,"to_tokens","","",128,[[["tokenstream",3]]]],[11,"to_tokens","","",127,[[["tokenstream",3]]]],[11,"to_tokens","","",129,[[["tokenstream",3]]]],[11,"to_tokens","","",131,[[["tokenstream",3]]]],[11,"to_tokens","","",182,[[["tokenstream",3]]]],[11,"to_tokens","","",138,[[["tokenstream",3]]]],[11,"to_tokens","","",148,[[["tokenstream",3]]]],[11,"to_tokens","","",132,[[["tokenstream",3]]]],[11,"to_tokens","","",140,[[["tokenstream",3]]]],[11,"to_tokens","","",155,[[["tokenstream",3]]]],[11,"to_tokens","","",181,[[["tokenstream",3]]]],[11,"to_tokens","","",178,[[["tokenstream",3]]]],[11,"to_tokens","","",165,[[["tokenstream",3]]]],[11,"to_tokens","","",136,[[["tokenstream",3]]]],[11,"to_tokens","","",167,[[["tokenstream",3]]]],[11,"to_tokens","","",151,[[["tokenstream",3]]]],[11,"to_tokens","","",141,[[["tokenstream",3]]]],[11,"to_tokens","","",166,[[["tokenstream",3]]]],[11,"to_tokens","","",150,[[["tokenstream",3]]]],[11,"to_tokens","","",147,[[["tokenstream",3]]]],[11,"to_tokens","","",170,[[["tokenstream",3]]]],[11,"to_tokens","","",145,[[["tokenstream",3]]]],[11,"to_tokens","","",152,[[["tokenstream",3]]]],[11,"to_tokens","","",154,[[["tokenstream",3]]]],[11,"to_tokens","","",135,[[["tokenstream",3]]]],[11,"to_tokens","","",164,[[["tokenstream",3]]]],[11,"to_tokens","","",171,[[["tokenstream",3]]]],[11,"to_tokens","","",142,[[["tokenstream",3]]]],[11,"to_tokens","","",168,[[["tokenstream",3]]]],[11,"to_tokens","","",137,[[["tokenstream",3]]]],[11,"to_tokens","","",133,[[["tokenstream",3]]]],[11,"to_tokens","","",134,[[["tokenstream",3]]]],[11,"to_tokens","","",144,[[["tokenstream",3]]]],[11,"to_tokens","","",173,[[["tokenstream",3]]]],[11,"to_tokens","","",172,[[["tokenstream",3]]]],[11,"to_tokens","","",149,[[["tokenstream",3]]]],[11,"to_tokens","","",158,[[["tokenstream",3]]]],[11,"to_tokens","","",157,[[["tokenstream",3]]]],[11,"to_tokens","","",159,[[["tokenstream",3]]]],[11,"to_tokens","","",139,[[["tokenstream",3]]]],[11,"to_tokens","","",143,[[["tokenstream",3]]]],[11,"to_tokens","","",161,[[["tokenstream",3]]]],[11,"to_tokens","","",153,[[["tokenstream",3]]]],[11,"to_tokens","","",162,[[["tokenstream",3]]]],[11,"to_tokens","","",160,[[["tokenstream",3]]]],[11,"to_tokens","","",146,[[["tokenstream",3]]]],[11,"to_tokens","","",156,[[["tokenstream",3]]]],[11,"to_tokens","","",163,[[["tokenstream",3]]]],[11,"to_tokens","","",169,[[["tokenstream",3]]]],[11,"to_tokens","","",179,[[["tokenstream",3]]]],[11,"to_tokens","","",177,[[["tokenstream",3]]]],[11,"to_tokens","","",174,[[["tokenstream",3]]]],[11,"to_tokens","","",195,[[["tokenstream",3]]]],[11,"to_tokens","","",184,[[["tokenstream",3]]]],[11,"to_tokens","","",191,[[["tokenstream",3]]]],[11,"to_tokens","","",193,[[["tokenstream",3]]]],[11,"to_tokens","","",187,[[["tokenstream",3]]]],[11,"to_tokens","","",192,[[["tokenstream",3]]]],[11,"to_tokens","","",183,[[["tokenstream",3]]]],[11,"to_tokens","","",189,[[["tokenstream",3]]]],[11,"to_tokens","","",185,[[["tokenstream",3]]]],[11,"to_tokens","","",188,[[["tokenstream",3]]]],[11,"to_tokens","","",190,[[["tokenstream",3]]]],[11,"to_tokens","","",186,[[["tokenstream",3]]]],[11,"to_tokens","","",194,[[["tokenstream",3]]]],[11,"to_tokens","","",176,[[["tokenstream",3]]]],[11,"to_tokens","","",175,[[["tokenstream",3]]]],[11,"to_tokens","","",197,[[["tokenstream",3]]]],[11,"to_tokens","","",180,[[["tokenstream",3]]]],[11,"to_tokens","","",200,[[["tokenstream",3]]]],[11,"to_tokens","","",209,[[["tokenstream",3]]]],[11,"to_tokens","","",211,[[["tokenstream",3]]]],[11,"to_tokens","","",201,[[["tokenstream",3]]]],[11,"to_tokens","","",309,[[["tokenstream",3]]]],[11,"to_tokens","","",310,[[["tokenstream",3]]]],[11,"to_tokens","","",311,[[["tokenstream",3]]]],[11,"to_tokens","","",198,[[["tokenstream",3]]]],[11,"to_tokens","","",202,[[["tokenstream",3]]]],[11,"to_tokens","","",208,[[["tokenstream",3]]]],[11,"to_tokens","","",206,[[["tokenstream",3]]]],[11,"to_tokens","","",207,[[["tokenstream",3]]]],[11,"to_tokens","","",199,[[["tokenstream",3]]]],[11,"to_tokens","","",210,[[["tokenstream",3]]]],[11,"to_tokens","","",205,[[["tokenstream",3]]]],[11,"to_tokens","","",204,[[["tokenstream",3]]]],[11,"to_tokens","","",203,[[["tokenstream",3]]]],[11,"to_tokens","","",230,[[["tokenstream",3]]]],[11,"to_tokens","","",261,[[["tokenstream",3]]]],[11,"to_tokens","","",217,[[["tokenstream",3]]]],[11,"to_tokens","","",250,[[["tokenstream",3]]]],[11,"to_tokens","","",223,[[["tokenstream",3]]]],[11,"to_tokens","","",215,[[["tokenstream",3]]]],[11,"to_tokens","","",234,[[["tokenstream",3]]]],[11,"to_tokens","","",247,[[["tokenstream",3]]]],[11,"to_tokens","","",241,[[["tokenstream",3]]]],[11,"to_tokens","","",231,[[["tokenstream",3]]]],[11,"to_tokens","","",235,[[["tokenstream",3]]]],[11,"to_tokens","","",240,[[["tokenstream",3]]]],[11,"to_tokens","","",236,[[["tokenstream",3]]]],[11,"to_tokens","","",245,[[["tokenstream",3]]]],[11,"to_tokens","","",233,[[["tokenstream",3]]]],[11,"to_tokens","","",232,[[["tokenstream",3]]]],[11,"to_tokens","","",242,[[["tokenstream",3]]]],[11,"to_tokens","","",246,[[["tokenstream",3]]]],[11,"to_tokens","","",243,[[["tokenstream",3]]]],[11,"to_tokens","","",244,[[["tokenstream",3]]]],[11,"to_tokens","","",237,[[["tokenstream",3]]]],[11,"to_tokens","","",238,[[["tokenstream",3]]]],[11,"to_tokens","","",239,[[["tokenstream",3]]]],[11,"to_tokens","","",248,[[["tokenstream",3]]]],[11,"to_tokens","","",259,[[["tokenstream",3]]]],[11,"to_tokens","","",258,[[["tokenstream",3]]]],[11,"to_tokens","","",260,[[["tokenstream",3]]]],[11,"to_tokens","","",256,[[["tokenstream",3]]]],[11,"to_tokens","","",257,[[["tokenstream",3]]]],[11,"to_tokens","","",251,[[["tokenstream",3]]]],[11,"to_tokens","","",253,[[["tokenstream",3]]]],[11,"to_tokens","","",254,[[["tokenstream",3]]]],[11,"to_tokens","","",252,[[["tokenstream",3]]]],[11,"to_tokens","","",255,[[["tokenstream",3]]]],[11,"to_tokens","","",224,[[["tokenstream",3]]]],[11,"to_tokens","","",227,[[["tokenstream",3]]]],[11,"to_tokens","","",228,[[["tokenstream",3]]]],[11,"to_tokens","","",225,[[["tokenstream",3]]]],[11,"to_tokens","","",226,[[["tokenstream",3]]]],[11,"to_tokens","","",229,[[["tokenstream",3]]]],[11,"to_tokens","","",218,[[["tokenstream",3]]]],[11,"to_tokens","","",220,[[["tokenstream",3]]]],[11,"to_tokens","","",221,[[["tokenstream",3]]]],[11,"to_tokens","","",219,[[["tokenstream",3]]]],[11,"to_tokens","","",222,[[["tokenstream",3]]]],[11,"to_tokens","","",249,[[["tokenstream",3]]]],[11,"to_tokens","","",214,[[["tokenstream",3]]]],[11,"to_tokens","","",213,[[["tokenstream",3]]]],[11,"to_tokens","","",212,[[["tokenstream",3]]]],[11,"to_tokens","","",262,[[["tokenstream",3]]]],[11,"to_tokens","","",263,[[["tokenstream",3]]]],[11,"to_tokens","","",266,[[["tokenstream",3]]]],[11,"to_tokens","","",312,[[["tokenstream",3]]]],[11,"to_tokens","","",313,[[["tokenstream",3]]]],[11,"to_tokens","","",314,[[["tokenstream",3]]]],[11,"to_tokens","","",315,[[["tokenstream",3]]]],[11,"to_tokens","","",316,[[["tokenstream",3]]]],[11,"to_tokens","","",317,[[["tokenstream",3]]]],[11,"to_tokens","","",267,[[["tokenstream",3]]]],[11,"to_tokens","","",268,[[["tokenstream",3]]]],[11,"to_tokens","","",270,[[["tokenstream",3]]]],[11,"to_tokens","","",276,[[["tokenstream",3]]]],[11,"to_tokens","","",277,[[["tokenstream",3]]]],[11,"to_tokens","","",278,[[["tokenstream",3]]]],[11,"to_tokens","","",283,[[["tokenstream",3]]]],[11,"to_tokens","","",295,[[["tokenstream",3]]]],[11,"to_tokens","","",284,[[["tokenstream",3]]]],[11,"to_tokens","","",293,[[["tokenstream",3]]]],[11,"to_tokens","","",294,[[["tokenstream",3]]]],[11,"to_tokens","","",285,[[["tokenstream",3]]]],[11,"to_tokens","","",290,[[["tokenstream",3]]]],[11,"to_tokens","","",297,[[["tokenstream",3]]]],[11,"to_tokens","","",292,[[["tokenstream",3]]]],[11,"to_tokens","","",296,[[["tokenstream",3]]]],[11,"to_tokens","","",287,[[["tokenstream",3]]]],[11,"to_tokens","","",286,[[["tokenstream",3]]]],[11,"to_tokens","","",291,[[["tokenstream",3]]]],[11,"to_tokens","","",288,[[["tokenstream",3]]]],[11,"to_tokens","","",289,[[["tokenstream",3]]]],[11,"to_tokens","","",298,[[["tokenstream",3]]]],[11,"to_tokens","","",282,[[["tokenstream",3]]]],[11,"to_tokens","","",280,[[["tokenstream",3]]]],[11,"to_tokens","","",281,[[["tokenstream",3]]]],[11,"to_tokens","","",279,[[["tokenstream",3]]]],[11,"to_tokens","","",304,[[["tokenstream",3]]]],[11,"to_tokens","","",306,[[["tokenstream",3]]]],[11,"to_tokens","","",305,[[["tokenstream",3]]]],[11,"to_tokens","","",302,[[["tokenstream",3]]]],[11,"to_tokens","","",299,[[["tokenstream",3]]]],[11,"to_tokens","","",300,[[["tokenstream",3]]]],[11,"to_tokens","","",301,[[["tokenstream",3]]]],[11,"to_tokens","","",303,[[["tokenstream",3]]]],[11,"to_tokens","syn::punctuated","",106,[[["tokenstream",3]]]],[11,"to_tokens","","",107,[[["tokenstream",3]]]],[11,"new","syn","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …",308,[[["span",3]],["ident",3]]],[11,"span","","Returns the span of this <code>Ident</code>.",308,[[],["span",3]]],[11,"set_span","","Configures the span of this <code>Ident</code>, possibly changing its …",308,[[["span",3]]]],[11,"parse_meta","","Parses the content of the attribute, consisting of the …",117,[[],[["meta",4],["result",6]]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",117,[[["parsestream",6]],[["vec",3],["result",6]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",117,[[["parsestream",6]],[["vec",3],["result",6]]]],[11,"name","","Returns the identifier that begins this structured meta …",118,[[],["ident",3]]],[11,"parse_named","","Parses a named (braced struct) field.",122,[[["parsestream",6]],["result",6]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",122,[[["parsestream",6]],["result",6]]],[11,"iter","","Get an iterator over the borrowed [<code>Field</code>] items in this …",123,[[],[["field",3],["iter",3]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [<code>Field</code>] items …",123,[[],[["field",3],["itermut",3]]]],[11,"parse_within","","Parse the body of a block as zero or more statements, …",175,[[["parsestream",6]],[["result",6],["vec",3]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type …",201,[[],["typeparams",3]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type …",201,[[],["typeparamsmut",3]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the …",201,[[],["lifetimes",3]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the …",201,[[],["lifetimesmut",3]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant …",201,[[],["constparams",3]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the …",201,[[],["constparamsmut",3]]],[11,"make_where_clause","","Initializes an empty <code>where</code>-clause if there is not one …",201,[[],["whereclause",3]]],[11,"split_for_impl","","Split a type\'s generics into the pieces required for …",201,[[]]],[11,"as_turbofish","","Turn a type\'s generics like <code><X, Y></code> into a turbofish like …",310,[[],["turbofish",3]]],[11,"new","","",202,[[["lifetime",3]]]],[11,"new","","PanicsPanics if the lifetime does not conform to the …",263,[[["span",3]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",266,[[["literal",3]]]],[11,"new","","",312,[[["span",3]]]],[11,"value","","",312,[[],["string",3]]],[11,"parse","","Parse a syntax tree node from the content of this string …",312,[[],[["result",6],["parse",8]]]],[11,"parse_with","","Invoke parser on the content of this string literal.",312,[[["parser",8]],["result",6]]],[11,"span","","",312,[[],["span",3]]],[11,"set_span","","",312,[[["span",3]]]],[11,"new","","",313,[[["span",3]]]],[11,"value","","",313,[[],["vec",3]]],[11,"span","","",313,[[],["span",3]]],[11,"set_span","","",313,[[["span",3]]]],[11,"new","","",314,[[["span",3]]]],[11,"value","","",314,[[]]],[11,"span","","",314,[[],["span",3]]],[11,"set_span","","",314,[[["span",3]]]],[11,"new","","",315,[[["span",3]]]],[11,"value","","",315,[[]]],[11,"span","","",315,[[],["span",3]]],[11,"set_span","","",315,[[["span",3]]]],[11,"new","","",316,[[["intsuffix",4],["span",3]]]],[11,"value","","",316,[[]]],[11,"suffix","","",316,[[],["intsuffix",4]]],[11,"span","","",316,[[],["span",3]]],[11,"set_span","","",316,[[["span",3]]]],[11,"new","","",317,[[["floatsuffix",4],["span",3]]]],[11,"value","","",317,[[]]],[11,"suffix","","",317,[[],["floatsuffix",4]]],[11,"span","","",317,[[],["span",3]]],[11,"set_span","","",317,[[["span",3]]]],[11,"span","","",268,[[],["span",3]]],[11,"set_span","","",268,[[["span",3]]]],[11,"parse_body","","Parse the tokens within the macro invocation\'s delimiters …",270,[[],[["result",6],["parse",8]]]],[11,"parse_body_with","","Parse the tokens within the macro invocation\'s delimiters …",270,[[["parser",8]],["result",6]]],[11,"without_plus","","In some positions, types may not contain the <code>+</code> character, …",283,[[["parsestream",6]],["result",6]]],[11,"without_plus","","",282,[[["parsestream",6]],["result",6]]],[11,"parse","","",282,[[["parsestream",6]],["result",6]]],[11,"without_plus","","",296,[[["parsestream",6]],["result",6]]],[11,"parse","","",296,[[["parsestream",6]],["result",6]]],[11,"parse_mod_style","","Parse a <code>Path</code> containing no path arguments on any of its …",304,[[["parsestream",6]],["result",6]]],[11,"is_ident","","Determines whether this is a path of length 1 equal to …",304,[[]]],[11,"is_empty","","",305,[[]]],[11,"visit_abi","syn::visit","",109,[[["abi",3]]]],[11,"visit_angle_bracketed_generic_arguments","","",109,[[["anglebracketedgenericarguments",3]]]],[11,"visit_arg_captured","","",109,[[["argcaptured",3]]]],[11,"visit_arg_self","","",109,[[["argself",3]]]],[11,"visit_arg_self_ref","","",109,[[["argselfref",3]]]],[11,"visit_arm","","",109,[[["arm",3]]]],[11,"visit_attr_style","","",109,[[["attrstyle",4]]]],[11,"visit_attribute","","",109,[[["attribute",3]]]],[11,"visit_bare_fn_arg","","",109,[[["barefnarg",3]]]],[11,"visit_bare_fn_arg_name","","",109,[[["barefnargname",4]]]],[11,"visit_bin_op","","",109,[[["binop",4]]]],[11,"visit_binding","","",109,[[["binding",3]]]],[11,"visit_block","","",109,[[["block",3]]]],[11,"visit_bound_lifetimes","","",109,[[["boundlifetimes",3]]]],[11,"visit_const_param","","",109,[[["constparam",3]]]],[11,"visit_constraint","","",109,[[["constraint",3]]]],[11,"visit_data","","",109,[[["data",4]]]],[11,"visit_data_enum","","",109,[[["dataenum",3]]]],[11,"visit_data_struct","","",109,[[["datastruct",3]]]],[11,"visit_data_union","","",109,[[["dataunion",3]]]],[11,"visit_derive_input","","",109,[[["deriveinput",3]]]],[11,"visit_expr","","",109,[[["expr",4]]]],[11,"visit_expr_array","","",109,[[["exprarray",3]]]],[11,"visit_expr_assign","","",109,[[["exprassign",3]]]],[11,"visit_expr_assign_op","","",109,[[["exprassignop",3]]]],[11,"visit_expr_async","","",109,[[["exprasync",3]]]],[11,"visit_expr_binary","","",109,[[["exprbinary",3]]]],[11,"visit_expr_block","","",109,[[["exprblock",3]]]],[11,"visit_expr_box","","",109,[[["exprbox",3]]]],[11,"visit_expr_break","","",109,[[["exprbreak",3]]]],[11,"visit_expr_call","","",109,[[["exprcall",3]]]],[11,"visit_expr_cast","","",109,[[["exprcast",3]]]],[11,"visit_expr_closure","","",109,[[["exprclosure",3]]]],[11,"visit_expr_continue","","",109,[[["exprcontinue",3]]]],[11,"visit_expr_field","","",109,[[["exprfield",3]]]],[11,"visit_expr_for_loop","","",109,[[["exprforloop",3]]]],[11,"visit_expr_group","","",109,[[["exprgroup",3]]]],[11,"visit_expr_if","","",109,[[["exprif",3]]]],[11,"visit_expr_in_place","","",109,[[["exprinplace",3]]]],[11,"visit_expr_index","","",109,[[["exprindex",3]]]],[11,"visit_expr_let","","",109,[[["exprlet",3]]]],[11,"visit_expr_lit","","",109,[[["exprlit",3]]]],[11,"visit_expr_loop","","",109,[[["exprloop",3]]]],[11,"visit_expr_macro","","",109,[[["exprmacro",3]]]],[11,"visit_expr_match","","",109,[[["exprmatch",3]]]],[11,"visit_expr_method_call","","",109,[[["exprmethodcall",3]]]],[11,"visit_expr_paren","","",109,[[["exprparen",3]]]],[11,"visit_expr_path","","",109,[[["exprpath",3]]]],[11,"visit_expr_range","","",109,[[["exprrange",3]]]],[11,"visit_expr_reference","","",109,[[["exprreference",3]]]],[11,"visit_expr_repeat","","",109,[[["exprrepeat",3]]]],[11,"visit_expr_return","","",109,[[["exprreturn",3]]]],[11,"visit_expr_struct","","",109,[[["exprstruct",3]]]],[11,"visit_expr_try","","",109,[[["exprtry",3]]]],[11,"visit_expr_try_block","","",109,[[["exprtryblock",3]]]],[11,"visit_expr_tuple","","",109,[[["exprtuple",3]]]],[11,"visit_expr_type","","",109,[[["exprtype",3]]]],[11,"visit_expr_unary","","",109,[[["exprunary",3]]]],[11,"visit_expr_unsafe","","",109,[[["exprunsafe",3]]]],[11,"visit_expr_verbatim","","",109,[[["exprverbatim",3]]]],[11,"visit_expr_while","","",109,[[["exprwhile",3]]]],[11,"visit_expr_yield","","",109,[[["expryield",3]]]],[11,"visit_field","","",109,[[["field",3]]]],[11,"visit_field_pat","","",109,[[["fieldpat",3]]]],[11,"visit_field_value","","",109,[[["fieldvalue",3]]]],[11,"visit_fields","","",109,[[["fields",4]]]],[11,"visit_fields_named","","",109,[[["fieldsnamed",3]]]],[11,"visit_fields_unnamed","","",109,[[["fieldsunnamed",3]]]],[11,"visit_file","","",109,[[["file",3]]]],[11,"visit_fn_arg","","",109,[[["fnarg",4]]]],[11,"visit_fn_decl","","",109,[[["fndecl",3]]]],[11,"visit_foreign_item","","",109,[[["foreignitem",4]]]],[11,"visit_foreign_item_fn","","",109,[[["foreignitemfn",3]]]],[11,"visit_foreign_item_macro","","",109,[[["foreignitemmacro",3]]]],[11,"visit_foreign_item_static","","",109,[[["foreignitemstatic",3]]]],[11,"visit_foreign_item_type","","",109,[[["foreignitemtype",3]]]],[11,"visit_foreign_item_verbatim","","",109,[[["foreignitemverbatim",3]]]],[11,"visit_generic_argument","","",109,[[["genericargument",4]]]],[11,"visit_generic_method_argument","","",109,[[["genericmethodargument",4]]]],[11,"visit_generic_param","","",109,[[["genericparam",4]]]],[11,"visit_generics","","",109,[[["generics",3]]]],[11,"visit_impl_item","","",109,[[["implitem",4]]]],[11,"visit_impl_item_const","","",109,[[["implitemconst",3]]]],[11,"visit_impl_item_existential","","",109,[[["implitemexistential",3]]]],[11,"visit_impl_item_macro","","",109,[[["implitemmacro",3]]]],[11,"visit_impl_item_method","","",109,[[["implitemmethod",3]]]],[11,"visit_impl_item_type","","",109,[[["implitemtype",3]]]],[11,"visit_impl_item_verbatim","","",109,[[["implitemverbatim",3]]]],[11,"visit_index","","",109,[[["index",3]]]],[11,"visit_item","","",109,[[["item",4]]]],[11,"visit_item_const","","",109,[[["itemconst",3]]]],[11,"visit_item_enum","","",109,[[["itemenum",3]]]],[11,"visit_item_existential","","",109,[[["itemexistential",3]]]],[11,"visit_item_extern_crate","","",109,[[["itemexterncrate",3]]]],[11,"visit_item_fn","","",109,[[["itemfn",3]]]],[11,"visit_item_foreign_mod","","",109,[[["itemforeignmod",3]]]],[11,"visit_item_impl","","",109,[[["itemimpl",3]]]],[11,"visit_item_macro","","",109,[[["itemmacro",3]]]],[11,"visit_item_macro2","","",109,[[["itemmacro2",3]]]],[11,"visit_item_mod","","",109,[[["itemmod",3]]]],[11,"visit_item_static","","",109,[[["itemstatic",3]]]],[11,"visit_item_struct","","",109,[[["itemstruct",3]]]],[11,"visit_item_trait","","",109,[[["itemtrait",3]]]],[11,"visit_item_trait_alias","","",109,[[["itemtraitalias",3]]]],[11,"visit_item_type","","",109,[[["itemtype",3]]]],[11,"visit_item_union","","",109,[[["itemunion",3]]]],[11,"visit_item_use","","",109,[[["itemuse",3]]]],[11,"visit_item_verbatim","","",109,[[["itemverbatim",3]]]],[11,"visit_label","","",109,[[["label",3]]]],[11,"visit_lifetime","","",109,[[["lifetime",3]]]],[11,"visit_lifetime_def","","",109,[[["lifetimedef",3]]]],[11,"visit_lit","","",109,[[["lit",4]]]],[11,"visit_lit_bool","","",109,[[["litbool",3]]]],[11,"visit_lit_byte","","",109,[[["litbyte",3]]]],[11,"visit_lit_byte_str","","",109,[[["litbytestr",3]]]],[11,"visit_lit_char","","",109,[[["litchar",3]]]],[11,"visit_lit_float","","",109,[[["litfloat",3]]]],[11,"visit_lit_int","","",109,[[["litint",3]]]],[11,"visit_lit_str","","",109,[[["litstr",3]]]],[11,"visit_lit_verbatim","","",109,[[["litverbatim",3]]]],[11,"visit_local","","",109,[[["local",3]]]],[11,"visit_macro","","",109,[[["macro",3]]]],[11,"visit_macro_delimiter","","",109,[[["macrodelimiter",4]]]],[11,"visit_member","","",109,[[["member",4]]]],[11,"visit_meta","","",109,[[["meta",4]]]],[11,"visit_meta_list","","",109,[[["metalist",3]]]],[11,"visit_meta_name_value","","",109,[[["metanamevalue",3]]]],[11,"visit_method_sig","","",109,[[["methodsig",3]]]],[11,"visit_method_turbofish","","",109,[[["methodturbofish",3]]]],[11,"visit_nested_meta","","",109,[[["nestedmeta",4]]]],[11,"visit_parenthesized_generic_arguments","","",109,[[["parenthesizedgenericarguments",3]]]],[11,"visit_pat","","",109,[[["pat",4]]]],[11,"visit_pat_box","","",109,[[["patbox",3]]]],[11,"visit_pat_ident","","",109,[[["patident",3]]]],[11,"visit_pat_lit","","",109,[[["patlit",3]]]],[11,"visit_pat_macro","","",109,[[["patmacro",3]]]],[11,"visit_pat_path","","",109,[[["patpath",3]]]],[11,"visit_pat_range","","",109,[[["patrange",3]]]],[11,"visit_pat_ref","","",109,[[["patref",3]]]],[11,"visit_pat_slice","","",109,[[["patslice",3]]]],[11,"visit_pat_struct","","",109,[[["patstruct",3]]]],[11,"visit_pat_tuple","","",109,[[["pattuple",3]]]],[11,"visit_pat_tuple_struct","","",109,[[["pattuplestruct",3]]]],[11,"visit_pat_verbatim","","",109,[[["patverbatim",3]]]],[11,"visit_pat_wild","","",109,[[["patwild",3]]]],[11,"visit_path","","",109,[[["path",3]]]],[11,"visit_path_arguments","","",109,[[["patharguments",4]]]],[11,"visit_path_segment","","",109,[[["pathsegment",3]]]],[11,"visit_predicate_eq","","",109,[[["predicateeq",3]]]],[11,"visit_predicate_lifetime","","",109,[[["predicatelifetime",3]]]],[11,"visit_predicate_type","","",109,[[["predicatetype",3]]]],[11,"visit_qself","","",109,[[["qself",3]]]],[11,"visit_range_limits","","",109,[[["rangelimits",4]]]],[11,"visit_return_type","","",109,[[["returntype",4]]]],[11,"visit_stmt","","",109,[[["stmt",4]]]],[11,"visit_trait_bound","","",109,[[["traitbound",3]]]],[11,"visit_trait_bound_modifier","","",109,[[["traitboundmodifier",4]]]],[11,"visit_trait_item","","",109,[[["traititem",4]]]],[11,"visit_trait_item_const","","",109,[[["traititemconst",3]]]],[11,"visit_trait_item_macro","","",109,[[["traititemmacro",3]]]],[11,"visit_trait_item_method","","",109,[[["traititemmethod",3]]]],[11,"visit_trait_item_type","","",109,[[["traititemtype",3]]]],[11,"visit_trait_item_verbatim","","",109,[[["traititemverbatim",3]]]],[11,"visit_type","","",109,[[["type",4]]]],[11,"visit_type_array","","",109,[[["typearray",3]]]],[11,"visit_type_bare_fn","","",109,[[["typebarefn",3]]]],[11,"visit_type_group","","",109,[[["typegroup",3]]]],[11,"visit_type_impl_trait","","",109,[[["typeimpltrait",3]]]],[11,"visit_type_infer","","",109,[[["typeinfer",3]]]],[11,"visit_type_macro","","",109,[[["typemacro",3]]]],[11,"visit_type_never","","",109,[[["typenever",3]]]],[11,"visit_type_param","","",109,[[["typeparam",3]]]],[11,"visit_type_param_bound","","",109,[[["typeparambound",4]]]],[11,"visit_type_paren","","",109,[[["typeparen",3]]]],[11,"visit_type_path","","",109,[[["typepath",3]]]],[11,"visit_type_ptr","","",109,[[["typeptr",3]]]],[11,"visit_type_reference","","",109,[[["typereference",3]]]],[11,"visit_type_slice","","",109,[[["typeslice",3]]]],[11,"visit_type_trait_object","","",109,[[["typetraitobject",3]]]],[11,"visit_type_tuple","","",109,[[["typetuple",3]]]],[11,"visit_type_verbatim","","",109,[[["typeverbatim",3]]]],[11,"visit_un_op","","",109,[[["unop",4]]]],[11,"visit_use_glob","","",109,[[["useglob",3]]]],[11,"visit_use_group","","",109,[[["usegroup",3]]]],[11,"visit_use_name","","",109,[[["usename",3]]]],[11,"visit_use_path","","",109,[[["usepath",3]]]],[11,"visit_use_rename","","",109,[[["userename",3]]]],[11,"visit_use_tree","","",109,[[["usetree",4]]]],[11,"visit_variant","","",109,[[["variant",3]]]],[11,"visit_vis_crate","","",109,[[["viscrate",3]]]],[11,"visit_vis_public","","",109,[[["vispublic",3]]]],[11,"visit_vis_restricted","","",109,[[["visrestricted",3]]]],[11,"visit_visibility","","",109,[[["visibility",4]]]],[11,"visit_where_clause","","",109,[[["whereclause",3]]]],[11,"visit_where_predicate","","",109,[[["wherepredicate",4]]]],[11,"visit_span","","",109,[[["span",3]]]],[11,"visit_ident","","",109,[[["ident",3]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine …",324,[[["peek",8]]]],[11,"error","","Triggers an error at the current position of the parse …",324,[[],["error",3]]]],"p":[[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Existential"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[3,"Punctuated"],[4,"Pair"],[8,"Spanned"],[8,"Visit"],[8,"Speculative"],[8,"Parse"],[3,"StepCursor"],[3,"ParseBuffer"],[8,"Parser"],[3,"Error"],[4,"AttrStyle"],[3,"Attribute"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Field"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[4,"Visibility"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[4,"Member"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[4,"GenericMethodArgument"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[4,"RangeLimits"],[4,"Stmt"],[3,"BoundLifetimes"],[3,"ConstParam"],[4,"GenericParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"TypeParam"],[4,"TypeParamBound"],[3,"WhereClause"],[4,"WherePredicate"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[4,"FnArg"],[3,"FnDecl"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemMacro"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemExistential"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExistential"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[4,"UseTree"],[3,"File"],[3,"Lifetime"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[3,"LitBool"],[3,"LitVerbatim"],[4,"StrStyle"],[3,"Macro"],[4,"MacroDelimiter"],[4,"Data"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[4,"BinOp"],[4,"UnOp"],[3,"Abi"],[3,"BareFnArg"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[4,"GenericArgument"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[4,"PathArguments"],[3,"PathSegment"],[3,"QSelf"],[3,"Ident"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"]]},\
"target_spec":{"doc":"Evaluate <code>Cargo.toml</code> target specifications against …","i":[[0,"summaries","target_spec","Serialized versions of platform and target features.",null,null],[3,"PlatformSummary","target_spec::summaries","An owned, serializable version of <code>Platform</code>.",null,null],[12,"triple","","The platform triple.",0,null],[12,"target_features","","The target features used.",0,null],[12,"flags","","The flags enabled.",0,null],[11,"new","","Creates a new <code>PlatformSummary</code> instance from a platform.",0,[[["platform",3]],[["result",4],["error",4]]]],[11,"to_platform","","Converts <code>self</code> to a <code>Platform</code>.",0,[[],[["platform",3],["error",4],["result",4]]]],[4,"TargetFeaturesSummary","","An owned, serializable version of <code>TargetFeatures</code>.",null,null],[13,"Unknown","","The target features are unknown.",1,null],[13,"Features","","Only match the specified features.",1,null],[13,"All","","Match all features.",1,null],[11,"new","","Creates a new <code>TargetFeaturesSummary</code> from a <code>TargetFeatures</code>.",1,[[["targetfeatures",4]]]],[11,"to_target_features","","Converts <code>self</code> to a <code>TargetFeatures</code> instance.",1,[[],["targetfeatures",4]]],[0,"custom_platforms","target_spec","Support for creating custom platforms.",null,null],[3,"Arch","target_spec::custom_platforms","The \\\"architecture\\\" field",null,null],[12,"0","","",2,null],[4,"Endian","","The endian types known to rustc",null,null],[13,"big","","",3,null],[13,"little","","",3,null],[3,"Env","","The \\\"environment\\\" field, which specifies an ABI …",null,null],[12,"0","","",4,null],[4,"Family","","All of the target families known to rustc",null,null],[13,"unix","","Everything that isn\'t windows, and has a family!",5,null],[13,"windows","","The lone wolf of target families.",5,null],[3,"Os","","The \\\"operating system\\\" field, which sometimes implies an …",null,null],[12,"0","","",6,null],[3,"TargetInfo","","Contains information regarding a particular target known …",null,null],[12,"triple","","The target\'s unique identifier",7,null],[12,"os","","The target\'s operating system, if any. Used by the …",7,null],[12,"arch","","The target\'s CPU architecture. Used by the target_arch …",7,null],[12,"env","","The target\'s ABI/libc used, if any. Used by the target_env…",7,null],[12,"vendor","","The target\'s vendor, if any. Used by the target_vendor …",7,null],[12,"family","","The target\'s family, if any. Used by the target_family …",7,null],[12,"pointer_width","","The size of the target\'s pointer type. Used by the …",7,null],[12,"endian","","The target\'s endianness. Used by the target_endian …",7,null],[3,"Vendor","","The \\\"vendor\\\" field, which in practice is little more than …",null,null],[12,"0","","",8,null],[4,"Error","target_spec","An error that happened during <code>target-spec</code> parsing or …",null,null],[13,"InvalidCfg","","A <code>cfg()</code> expression was invalid and could not be parsed.",9,null],[13,"UnknownTargetTriple","","The provided target triple (in the position that a <code>cfg()</code> …",9,null],[13,"UnknownPlatformTriple","","The provided platform triple was unknown.",9,null],[13,"UnknownPredicate","","The provided <code>cfg()</code> expression parsed correctly, but it …",9,null],[13,"CustomPlatformSummary","","Attempt to generate summary from custom platform.",9,null],[5,"eval","","Evaluates the given spec against the provided target and …",null,[[],[["option",4],["error",4],["result",4]]]],[3,"TargetSpec","","A parsed target specification or triple, as found in a …",null,null],[3,"Platform","","A platform to evaluate target specs against.",null,null],[4,"TargetFeatures","","A set of target features to match.",null,null],[13,"Unknown","","The target features are unknown.",10,null],[13,"Features","","Only match the specified features.",10,null],[13,"All","","Match all features.",10,null],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","target_spec::custom_platforms","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","target_spec","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","target_spec::summaries","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"partial_cmp","target_spec::custom_platforms","",7,[[["targetinfo",3]],[["ordering",4],["option",4]]]],[11,"lt","","",7,[[["targetinfo",3]]]],[11,"le","","",7,[[["targetinfo",3]]]],[11,"gt","","",7,[[["targetinfo",3]]]],[11,"ge","","",7,[[["targetinfo",3]]]],[11,"partial_cmp","","",5,[[["family",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",3,[[["endian",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",8,[[["vendor",3]],[["ordering",4],["option",4]]]],[11,"lt","","",8,[[["vendor",3]]]],[11,"le","","",8,[[["vendor",3]]]],[11,"gt","","",8,[[["vendor",3]]]],[11,"ge","","",8,[[["vendor",3]]]],[11,"partial_cmp","","",6,[[["os",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["os",3]]]],[11,"le","","",6,[[["os",3]]]],[11,"gt","","",6,[[["os",3]]]],[11,"ge","","",6,[[["os",3]]]],[11,"partial_cmp","","",2,[[["arch",3]],[["ordering",4],["option",4]]]],[11,"lt","","",2,[[["arch",3]]]],[11,"le","","",2,[[["arch",3]]]],[11,"gt","","",2,[[["arch",3]]]],[11,"ge","","",2,[[["arch",3]]]],[11,"partial_cmp","","",4,[[["env",3]],[["ordering",4],["option",4]]]],[11,"lt","","",4,[[["env",3]]]],[11,"le","","",4,[[["env",3]]]],[11,"gt","","",4,[[["env",3]]]],[11,"ge","","",4,[[["env",3]]]],[11,"from_str","","",3,[[],[["endian",4],["result",4]]]],[11,"from_str","","",5,[[],[["family",4],["result",4]]]],[11,"hash","","",4,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",2,[[]]],[11,"clone","","",8,[[],["vendor",3]]],[11,"clone","","",6,[[],["os",3]]],[11,"clone","","",3,[[],["endian",4]]],[11,"clone","","",4,[[],["env",3]]],[11,"clone","","",7,[[],["targetinfo",3]]],[11,"clone","","",2,[[],["arch",3]]],[11,"clone","","",5,[[],["family",4]]],[11,"cmp","","",3,[[["endian",4]],["ordering",4]]],[11,"cmp","","",6,[[["os",3]],["ordering",4]]],[11,"cmp","","",7,[[["targetinfo",3]],["ordering",4]]],[11,"cmp","","",8,[[["vendor",3]],["ordering",4]]],[11,"cmp","","",2,[[["arch",3]],["ordering",4]]],[11,"cmp","","",4,[[["env",3]],["ordering",4]]],[11,"cmp","","",5,[[["family",4]],["ordering",4]]],[11,"eq","","",2,[[["arch",3]]]],[11,"ne","","",2,[[["arch",3]]]],[11,"eq","","",5,[[["family",4]]]],[11,"eq","","",7,[[["targetinfo",3]]]],[11,"ne","","",7,[[["targetinfo",3]]]],[11,"eq","","",3,[[["endian",4]]]],[11,"eq","","",8,[[["vendor",3]]]],[11,"ne","","",8,[[["vendor",3]]]],[11,"eq","","",6,[[["os",3]]]],[11,"ne","","",6,[[["os",3]]]],[11,"eq","","",4,[[["env",3]]]],[11,"ne","","",4,[[["env",3]]]],[11,"matches","","",7,[[["targetpredicate",4]]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",7,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","target_spec","",11,[[],["targetspec",3]]],[11,"clone","","",12,[[],["platform",3]]],[11,"clone","","",10,[[],["targetfeatures",4]]],[11,"clone","target_spec::summaries","",0,[[],["platformsummary",3]]],[11,"clone","","",1,[[],["targetfeaturessummary",4]]],[11,"cmp","target_spec","",12,[[["platform",3]],["ordering",4]]],[11,"cmp","","",10,[[["targetfeatures",4]],["ordering",4]]],[11,"eq","","",9,[[["error",4]]]],[11,"ne","","",9,[[["error",4]]]],[11,"eq","","",12,[[["platform",3]]]],[11,"ne","","",12,[[["platform",3]]]],[11,"eq","","",10,[[["targetfeatures",4]]]],[11,"ne","","",10,[[["targetfeatures",4]]]],[11,"eq","target_spec::summaries","",0,[[["platformsummary",3]]]],[11,"ne","","",0,[[["platformsummary",3]]]],[11,"eq","","",1,[[["targetfeaturessummary",4]]]],[11,"ne","","",1,[[["targetfeaturessummary",4]]]],[11,"partial_cmp","target_spec","",12,[[["platform",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["platform",3]]]],[11,"le","","",12,[[["platform",3]]]],[11,"gt","","",12,[[["platform",3]]]],[11,"ge","","",12,[[["platform",3]]]],[11,"partial_cmp","","",10,[[["targetfeatures",4]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["targetfeatures",4]]]],[11,"le","","",10,[[["targetfeatures",4]]]],[11,"gt","","",10,[[["targetfeatures",4]]]],[11,"ge","","",10,[[["targetfeatures",4]]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","target_spec::summaries","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","target_spec","",9,[[["formatter",3]],["result",6]]],[11,"hash","","",12,[[]]],[11,"hash","","",10,[[]]],[11,"from_str","","",11,[[],["result",4]]],[11,"source","","",9,[[],[["error",8],["option",4]]]],[11,"arbitrary_with","","",10,[[]]],[11,"serialize","target_spec::summaries","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"custom","target_spec","Creates a new exact, custom target spec to match against.",11,[[["targetinfo",3]]]],[11,"eval","","Evaluates this specification against the given platform.",11,[[["platform",3]],["option",4]]],[18,"aarch64","target_spec::custom_platforms","",2,null],[18,"arm","","",2,null],[18,"avr","","",2,null],[18,"hexagon","","",2,null],[18,"mips","","",2,null],[18,"mips64","","",2,null],[18,"msp430","","",2,null],[18,"nvptx64","","",2,null],[18,"powerpc","","",2,null],[18,"powerpc64","","",2,null],[18,"riscv32","","",2,null],[18,"riscv64","","",2,null],[18,"s390x","","",2,null],[18,"sparc","","",2,null],[18,"sparc64","","",2,null],[18,"wasm32","","",2,null],[18,"x86","","",2,null],[18,"x86_64","","",2,null],[18,"eabihf","","",4,null],[18,"gnu","","",4,null],[18,"gnueabihf","","",4,null],[18,"msvc","","",4,null],[18,"musl","","",4,null],[18,"relibc","","",4,null],[18,"sgx","","",4,null],[18,"uclibc","","",4,null],[18,"android","","",6,null],[18,"cuda","","",6,null],[18,"dragonfly","","",6,null],[18,"emscripten","","",6,null],[18,"freebsd","","",6,null],[18,"fuchsia","","",6,null],[18,"haiku","","",6,null],[18,"hermit","","",6,null],[18,"illumos","","",6,null],[18,"ios","","",6,null],[18,"l4re","","",6,null],[18,"linux","","",6,null],[18,"macos","","",6,null],[18,"netbsd","","",6,null],[18,"openbsd","","",6,null],[18,"psp","","",6,null],[18,"redox","","",6,null],[18,"solaris","","",6,null],[18,"tvos","","",6,null],[18,"uefi","","",6,null],[18,"unknown","","",6,null],[18,"vxworks","","",6,null],[18,"wasi","","",6,null],[18,"windows","","",6,null],[18,"apple","","",8,null],[18,"fortanix","","",8,null],[18,"nvidia","","",8,null],[18,"pc","","",8,null],[18,"rumprun","","",8,null],[18,"sony","","",8,null],[18,"sun","","",8,null],[18,"unknown","","",8,null],[18,"uwp","","",8,null],[18,"wrs","","",8,null],[11,"new","target_spec","Creates a new <code>Platform</code> from the given built-in triple and …",12,[[["targetfeatures",4]],[["result",4],["error",4]]]],[11,"custom","","Creates a new, custom platform from a <code>TargetInfo</code> and …",12,[[["targetfeatures",4],["targetinfo",3]]]],[11,"add_flags","","Adds a set of flags to accept.",12,[[]]],[11,"triple","","Returns the target triple for this platform.",12,[[]]],[11,"flags","","Returns the set of flags enabled for this platform.",12,[[]]],[11,"has_flag","","Returns true if this flag was set with <code>add_flags</code>.",12,[[]]],[11,"target_info","","Returns the underlying <code>TargetInfo</code>.",12,[[],["targetinfo",3]]],[11,"target_features","","Returns the set of target features for this platform.",12,[[],["targetfeatures",4]]],[11,"is_custom","","Returns true if this is a custom platform, created by …",12,[[]]],[11,"current","","Returns the current platform, as detected at build time.",12,[[],["option",4]]],[11,"features","","Creates a new <code>TargetFeatures</code> which matches some features.",10,[[]]],[11,"none","","Creates a new <code>TargetFeatures</code> which doesn\'t match any …",10,[[]]],[11,"matches","","Returns <code>Some(true)</code> if this feature is a match, <code>Some(false)</code>…",10,[[],["option",4]]],[11,"strategy","","Given a way to generate <code>TargetFeatures</code> instances, this …",12,[[]]],[11,"filtered_strategy","","A version of <code>strategy</code> that allows target triples to be …",12,[[]]]],"p":[[3,"PlatformSummary"],[4,"TargetFeaturesSummary"],[3,"Arch"],[4,"Endian"],[3,"Env"],[4,"Family"],[3,"Os"],[3,"TargetInfo"],[3,"Vendor"],[4,"Error"],[4,"TargetFeatures"],[3,"TargetSpec"],[3,"Platform"]]},\
"tempfile":{"doc":"Temporary files and directories.","i":[[5,"tempdir","tempfile","Create a new temporary directory.",null,[[],[["tempdir",3],["result",6]]]],[5,"tempdir_in","","Create a new temporary directory.",null,[[["asref",8],["path",3]],[["tempdir",3],["result",6]]]],[3,"TempDir","","A directory in the filesystem that is automatically …",null,null],[5,"tempfile","","Create a new temporary file.",null,[[],[["file",3],["result",6]]]],[5,"tempfile_in","","Create a new temporary file in the specified directory.",null,[[["asref",8],["path",3]],[["file",3],["result",6]]]],[3,"NamedTempFile","","A named temporary file.",null,null],[3,"PathPersistError","","Error returned when persisting a temporary file path …",null,null],[12,"error","","The underlying IO error.",0,null],[12,"path","","The temporary file path that couldn\'t be persisted.",0,null],[3,"PersistError","","Error returned when persisting a temporary file fails.",null,null],[12,"error","","The underlying IO error.",1,null],[12,"file","","The temporary file that couldn\'t be persisted.",1,null],[3,"TempPath","","A path to a named temporary file without an open file …",null,null],[5,"spooled_tempfile","","Create a new spooled temporary file.",null,[[],["spooledtempfile",3]]],[3,"SpooledTempFile","","An object that behaves like a regular temporary file, but …",null,null],[3,"Builder","","Create a new temporary file or directory with custom …",null,null],[11,"new","","Create a new <code>Builder</code>.",2,[[]]],[11,"prefix","","Set a custom filename prefix.",2,[[]]],[11,"suffix","","Set a custom filename suffix.",2,[[]]],[11,"rand_bytes","","Set the number of random bytes.",2,[[]]],[11,"append","","Set the file to be opened in append mode.",2,[[]]],[11,"tempfile","","Create the named temporary file.",2,[[],[["namedtempfile",3],["result",6]]]],[11,"tempfile_in","","Create the named temporary file in the specified …",2,[[["asref",8],["path",3]],[["namedtempfile",3],["result",6]]]],[11,"tempdir","","Attempts to make a temporary directory inside of …",2,[[],[["tempdir",3],["result",6]]]],[11,"tempdir_in","","Attempts to make a temporary directory inside of <code>dir</code>. The …",2,[[["asref",8],["path",3]],[["tempdir",3],["result",6]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"drop","","",3,[[]]],[11,"drop","","",4,[[]]],[11,"as_ref","","",3,[[],["path",3]]],[11,"as_ref","","",4,[[],["path",3]]],[11,"as_ref","","",4,[[],["osstr",3]]],[11,"as_ref","","",5,[[],["path",3]]],[11,"from","","",4,[[["pathpersisterror",3]],["temppath",3]]],[11,"from","","",5,[[["persisterror",3]],["namedtempfile",3]]],[11,"clone","","",2,[[],["builder",3]]],[11,"default","","",2,[[]]],[11,"eq","","",2,[[["builder",3]]]],[11,"ne","","",2,[[["builder",3]]]],[11,"deref","","",4,[[],["path",3]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"source","","",1,[[],[["error",8],["option",4]]]],[11,"read","","",5,[[],["result",6]]],[11,"read","","",6,[[],["result",6]]],[11,"seek","","",5,[[["seekfrom",4]],["result",6]]],[11,"seek","","",6,[[["seekfrom",4]],["result",6]]],[11,"write","","",5,[[],["result",6]]],[11,"flush","","",5,[[],["result",6]]],[11,"write","","",6,[[],["result",6]]],[11,"flush","","",6,[[],["result",6]]],[11,"as_raw_fd","","",5,[[],["rawfd",6]]],[11,"new","","Attempts to make a temporary directory inside of …",3,[[],[["tempdir",3],["result",6]]]],[11,"new_in","","Attempts to make a temporary directory inside of <code>dir</code>. The …",3,[[["asref",8],["path",3]],[["tempdir",3],["result",6]]]],[11,"path","","Accesses the <code>Path</code> to the temporary directory.",3,[[],["path",3]]],[11,"into_path","","Persist the temporary directory to disk, returning the …",3,[[],["pathbuf",3]]],[11,"close","","Closes and removes the temporary directory, returning a …",3,[[],["result",6]]],[11,"close","","Close and remove the temporary file.",4,[[],["result",6]]],[11,"persist","","Persist the temporary file at the target path.",4,[[["asref",8],["path",3]],[["pathpersisterror",3],["result",4]]]],[11,"persist_noclobber","","Persist the temporary file at the target path if and only …",4,[[["asref",8],["path",3]],[["pathpersisterror",3],["result",4]]]],[11,"keep","","Keep the temporary file from being deleted. This function …",4,[[],[["pathbuf",3],["pathpersisterror",3],["result",4]]]],[11,"new","","Create a new named temporary file.",5,[[],[["namedtempfile",3],["result",6]]]],[11,"new_in","","Create a new named temporary file in the specified …",5,[[["asref",8],["path",3]],[["namedtempfile",3],["result",6]]]],[11,"path","","Get the temporary file\'s path.",5,[[],["path",3]]],[11,"close","","Close and remove the temporary file.",5,[[],["result",6]]],[11,"persist","","Persist the temporary file at the target path.",5,[[["asref",8],["path",3]],[["result",4],["file",3],["persisterror",3]]]],[11,"persist_noclobber","","Persist the temporary file at the target path if and only …",5,[[["asref",8],["path",3]],[["result",4],["file",3],["persisterror",3]]]],[11,"keep","","Keep the temporary file from being deleted. This function …",5,[[],[["persisterror",3],["result",4]]]],[11,"reopen","","Securely reopen the temporary file.",5,[[],[["file",3],["result",6]]]],[11,"as_file","","Get a reference to the underlying file.",5,[[],["file",3]]],[11,"as_file_mut","","Get a mutable reference to the underlying file.",5,[[],["file",3]]],[11,"into_file","","Convert the temporary file into a <code>std::fs::File</code>.",5,[[],["file",3]]],[11,"into_temp_path","","Closes the file, leaving only the temporary file path.",5,[[],["temppath",3]]],[11,"into_parts","","Converts the named temporary file into its constituent …",5,[[]]],[11,"new","","",6,[[],["spooledtempfile",3]]],[11,"is_rolled","","Returns true if the file has been rolled over to disk.",6,[[]]],[11,"roll","","Rolls over to a file on disk, regardless of current size. …",6,[[],["result",6]]],[11,"set_len","","",6,[[],[["result",4],["error",3]]]]],"p":[[3,"PathPersistError"],[3,"PersistError"],[3,"Builder"],[3,"TempDir"],[3,"TempPath"],[3,"NamedTempFile"],[3,"SpooledTempFile"]]},\
"terminal_size":{"doc":"A simple utility for getting the size of a terminal.","i":[[3,"Width","terminal_size","",null,null],[12,"0","","",0,null],[3,"Height","","",null,null],[12,"0","","",1,null],[5,"terminal_size","","Returns the size of the terminal defaulting to STDOUT, if …",null,[[],["option",4]]],[5,"terminal_size_using_fd","","Returns the size of the terminal using the given file …",null,[[["rawfd",6]],["option",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"Width"],[3,"Height"]]},\
"textwrap":{"doc":"<code>textwrap</code> provides functions for word wrapping and filling …","i":[[5,"dedent","textwrap","Removes common leading whitespace from each line.",null,[[],["string",3]]],[5,"indent","","Add prefix to each non-empty line.",null,[[],["string",3]]],[3,"HyphenSplitter","","Simple and default way to split words: splitting on …",null,null],[3,"NoHyphenation","","Use this as a <code>Wrapper.splitter</code> to avoid any kind of …",null,null],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple…",0,[[],["vec",3]]],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. …",null,null],[12,"width","","The width in columns at which the text will be wrapped.",1,null],[12,"initial_indent","","Indentation used for the first line of output.",1,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",1,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a …",1,null],[12,"splitter","","The method for splitting words. If the <code>hyphenation</code> feature…",1,null],[11,"new","","Create a new Wrapper for wrapping at the specified width. …",1,[[],[["hyphensplitter",3],["wrapper",3]]]],[11,"with_splitter","","Use the given <code>WordSplitter</code> to create a new Wrapper for …",1,[[],["wrapper",3]]],[11,"initial_indent","","Change <code>self.initial_indent</code>. The initial indentation is …",1,[[],["wrapper",3]]],[11,"subsequent_indent","","Change <code>self.subsequent_indent</code>. The subsequent indentation …",1,[[],["wrapper",3]]],[11,"break_words","","Change <code>self.break_words</code>. This controls if words longer …",1,[[],["wrapper",3]]],[11,"fill","","Fill a line of text at <code>self.width</code> characters. Strings are …",1,[[],["string",3]]],[11,"wrap","","Wrap a line of text at <code>self.width</code> characters. Strings are …",1,[[],[["cow",4],["vec",3]]]],[11,"wrap_iter","","Lazily wrap a line of text at <code>self.width</code> characters. …",1,[[],["wrapiter",3]]],[11,"into_wrap_iter","","Lazily wrap a line of text at <code>self.width</code> characters. …",1,[[],["intowrapiter",3]]],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns …",null,null],[3,"WrapIter","","An iterator over the lines of the input string which …",null,null],[5,"fill","","Fill a line of text at <code>width</code> characters. Strings are …",null,[[],["string",3]]],[5,"wrap","","Wrap a line of text at <code>width</code> characters. Strings are …",null,[[],[["cow",4],["vec",3]]]],[5,"wrap_iter","","Lazily wrap a line of text at <code>width</code> characters. Strings …",null,[[],[["intowrapiter",3],["hyphensplitter",3]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"split","","",2,[[],["vec",3]]],[11,"split","","",3,[[],["vec",3]]],[11,"next","","",4,[[],[["cow",4],["option",4]]]],[11,"next","","",5,[[],[["cow",4],["option",4]]]],[11,"clone","","",2,[[],["nohyphenation",3]]],[11,"clone","","",3,[[],["hyphensplitter",3]]],[11,"clone","","",1,[[],["wrapper",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]]],"p":[[8,"WordSplitter"],[3,"Wrapper"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]},\
"time":{"doc":"Simple time handling.","i":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This …",null,null],[3,"OutOfRangeError","","Represents error when converting <code>Duration</code> to/from a …",null,null],[5,"strptime","","Parses the time from the string according to the format …",null,[[],[["parseerror",4],["tm",3],["result",4]]]],[3,"Timespec","","A record specifying a time value in seconds and …",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[11,"new","","",0,[[],["timespec",3]]],[5,"get_time","","Returns the current time as a <code>timespec</code> containing the …",null,[[],["timespec",3]]],[5,"precise_time_ns","","Returns the current value of a high-resolution …",null,[[]]],[5,"precise_time_s","","Returns the current value of a high-resolution …",null,[[]]],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[11,"now","","Returns a <code>PreciseTime</code> representing the current moment in …",1,[[],["precisetime",3]]],[11,"to","","Returns a <code>Duration</code> representing the span of time from the …",1,[[["precisetime",3]],["duration",3]]],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[11,"now","","Returns a <code>SteadyTime</code> representing the current moment in …",2,[[],["steadytime",3]]],[5,"tzset","","",null,[[]]],[3,"Tm","","Holds a calendar date and time broken down into its …",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",3,null],[12,"tm_min","","Minutes after the hour - [0, 59]",3,null],[12,"tm_hour","","Hours after midnight - [0, 23]",3,null],[12,"tm_mday","","Day of the month - [1, 31]",3,null],[12,"tm_mon","","Months since January - [0, 11]",3,null],[12,"tm_year","","Years since 1900",3,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., …",3,null],[12,"tm_yday","","Days since January 1 - [0, 365]",3,null],[12,"tm_isdst","","Daylight Saving Time flag.",3,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this …",3,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",3,null],[5,"empty_tm","","",null,[[],["tm",3]]],[5,"at_utc","","Returns the specified time in UTC",null,[[["timespec",3]],["tm",3]]],[5,"now_utc","","Returns the current time in UTC",null,[[],["tm",3]]],[5,"at","","Returns the specified time in the local timezone",null,[[["timespec",3]],["tm",3]]],[5,"now","","Returns the current time in the local timezone",null,[[],["tm",3]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",3,[[],["timespec",3]]],[11,"to_local","","Convert time to the local timezone",3,[[],["tm",3]]],[11,"to_utc","","Convert time to the UTC",3,[[],["tm",3]]],[11,"ctime","","Returns a TmFmt that outputs according to the <code>asctime</code> …",3,[[],["tmfmt",3]]],[11,"asctime","","Returns a TmFmt that outputs according to the <code>asctime</code> …",3,[[],["tmfmt",3]]],[11,"strftime","","Formats the time according to the format string.",3,[[],[["result",4],["tmfmt",3],["parseerror",4]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",3,[[],["tmfmt",3]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with …",3,[[],["tmfmt",3]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC …",3,[[],["tmfmt",3]]],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",4,null],[13,"InvalidMinute","","",4,null],[13,"InvalidHour","","",4,null],[13,"InvalidDay","","",4,null],[13,"InvalidMonth","","",4,null],[13,"InvalidYear","","",4,null],[13,"InvalidDayOfWeek","","",4,null],[13,"InvalidDayOfMonth","","",4,null],[13,"InvalidDayOfYear","","",4,null],[13,"InvalidZoneOffset","","",4,null],[13,"InvalidTime","","",4,null],[13,"InvalidSecondsSinceEpoch","","",4,null],[13,"MissingFormatConverter","","",4,null],[13,"InvalidFormatSpecifier","","",4,null],[13,"UnexpectedCharacter","","",4,null],[3,"TmFmt","","A wrapper around a <code>Tm</code> and format string that implements …",null,null],[5,"strftime","","Formats the time according to the format string.",null,[[["tm",3]],[["string",3],["parseerror",4],["result",4]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"clone","","",5,[[],["duration",3]]],[11,"clone","","",6,[[],["outofrangeerror",3]]],[11,"clone","","",0,[[],["timespec",3]]],[11,"clone","","",1,[[],["precisetime",3]]],[11,"clone","","",2,[[],["steadytime",3]]],[11,"clone","","",3,[[],["tm",3]]],[11,"clone","","",4,[[],["parseerror",4]]],[11,"cmp","","",5,[[["duration",3]],["ordering",4]]],[11,"cmp","","",0,[[["timespec",3]],["ordering",4]]],[11,"cmp","","",2,[[["steadytime",3]],["ordering",4]]],[11,"cmp","","",3,[[["tm",3]],["ordering",4]]],[11,"eq","","",5,[[["duration",3]]]],[11,"ne","","",5,[[["duration",3]]]],[11,"eq","","",6,[[["outofrangeerror",3]]]],[11,"ne","","",6,[[["outofrangeerror",3]]]],[11,"eq","","",0,[[["timespec",3]]]],[11,"ne","","",0,[[["timespec",3]]]],[11,"eq","","",2,[[["steadytime",3]]]],[11,"ne","","",2,[[["steadytime",3]]]],[11,"eq","","",3,[[["tm",3]]]],[11,"ne","","",3,[[["tm",3]]]],[11,"eq","","",4,[[["parseerror",4]]]],[11,"ne","","",4,[[["parseerror",4]]]],[11,"partial_cmp","","",5,[[["duration",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["duration",3]]]],[11,"le","","",5,[[["duration",3]]]],[11,"gt","","",5,[[["duration",3]]]],[11,"ge","","",5,[[["duration",3]]]],[11,"partial_cmp","","",0,[[["timespec",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["timespec",3]]]],[11,"le","","",0,[[["timespec",3]]]],[11,"gt","","",0,[[["timespec",3]]]],[11,"ge","","",0,[[["timespec",3]]]],[11,"partial_cmp","","",2,[[["steadytime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["steadytime",3]]]],[11,"le","","",2,[[["steadytime",3]]]],[11,"gt","","",2,[[["steadytime",3]]]],[11,"ge","","",2,[[["steadytime",3]]]],[11,"partial_cmp","","",3,[[["tm",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"div","","",5,[[],["duration",3]]],[11,"sub","","",5,[[["duration",3]],["duration",3]]],[11,"sub","","",0,[[["duration",3]],["timespec",3]]],[11,"sub","","",0,[[["timespec",3]],["duration",3]]],[11,"sub","","",2,[[["steadytime",3]],["duration",3]]],[11,"sub","","",2,[[["duration",3]],["steadytime",3]]],[11,"sub","","The resulting Tm is in UTC.",3,[[["duration",3]],["tm",3]]],[11,"sub","","",3,[[["tm",3]],["duration",3]]],[11,"add","","",5,[[["duration",3]],["duration",3]]],[11,"add","","",0,[[["duration",3]],["timespec",3]]],[11,"add","","",2,[[["duration",3]],["steadytime",3]]],[11,"add","","The resulting Tm is in UTC.",3,[[["duration",3]],["tm",3]]],[11,"mul","","",5,[[],["duration",3]]],[11,"neg","","",5,[[],["duration",3]]],[11,"hash","","",5,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",3,[[]]],[11,"description","","",6,[[]]],[11,"description","","",4,[[]]],[11,"weeks","","Makes a new <code>Duration</code> with given number of weeks. …",5,[[],["duration",3]]],[11,"days","","Makes a new <code>Duration</code> with given number of days. …",5,[[],["duration",3]]],[11,"hours","","Makes a new <code>Duration</code> with given number of hours. …",5,[[],["duration",3]]],[11,"minutes","","Makes a new <code>Duration</code> with given number of minutes. …",5,[[],["duration",3]]],[11,"seconds","","Makes a new <code>Duration</code> with given number of seconds. Panics …",5,[[],["duration",3]]],[11,"milliseconds","","Makes a new <code>Duration</code> with given number of milliseconds.",5,[[],["duration",3]]],[11,"microseconds","","Makes a new <code>Duration</code> with given number of microseconds.",5,[[],["duration",3]]],[11,"nanoseconds","","Makes a new <code>Duration</code> with given number of nanoseconds.",5,[[],["duration",3]]],[11,"span","","Runs a closure, returning the duration of time it took to …",5,[[],["duration",3]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",5,[[]]],[11,"num_days","","Returns the total number of whole days in the duration.",5,[[]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",5,[[]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",5,[[]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",5,[[]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the …",5,[[]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the …",5,[[],["option",4]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the …",5,[[],["option",4]]],[11,"checked_add","","Add two durations, returning <code>None</code> if overflow occurred.",5,[[["duration",3]],[["duration",3],["option",4]]]],[11,"checked_sub","","Subtract two durations, returning <code>None</code> if overflow …",5,[[["duration",3]],[["duration",3],["option",4]]]],[11,"min_value","","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.",5,[[],["duration",3]]],[11,"max_value","","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.",5,[[],["duration",3]]],[11,"zero","","A duration where the stored seconds and nanoseconds are …",5,[[],["duration",3]]],[11,"is_zero","","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.",5,[[]]],[11,"from_std","","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>",5,[[["stdduration",3]],[["result",4],["duration",3],["outofrangeerror",3]]]],[11,"to_std","","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>",5,[[],[["stdduration",3],["outofrangeerror",3],["result",4]]]]],"p":[[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[3,"Duration"],[3,"OutOfRangeError"],[3,"TmFmt"]]},\
"toml":{"doc":"A TOML-parsing library","i":[[0,"map","toml","A map of String to toml::Value.",null,null],[3,"Map","toml::map","Represents a TOML key/value type.",null,null],[11,"new","","Makes a new empty Map.",0,[[]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",0,[[]]],[11,"clear","","Clears the map, removing all values.",0,[[]]],[11,"get","","Returns a reference to the value corresponding to the key.",0,[[],[["option",4],["value",4]]]],[11,"contains_key","","Returns true if the map contains a value for the …",0,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",0,[[],[["option",4],["value",4]]]],[11,"insert","","Inserts a key-value pair into the map.",0,[[["value",4],["string",3]],[["option",4],["value",4]]]],[11,"remove","","Removes a key from the map, returning the value at the …",0,[[],[["option",4],["value",4]]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",0,[[],["entry",4]]],[11,"len","","Returns the number of elements in the map.",0,[[]]],[11,"is_empty","","Returns true if the map contains no elements.",0,[[]]],[11,"iter","","Gets an iterator over the entries of the map.",0,[[],["iter",3]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",0,[[],["itermut",3]]],[11,"keys","","Gets an iterator over the keys of the map.",0,[[],["keys",3]]],[11,"values","","Gets an iterator over the values of the map.",0,[[],["values",3]]],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Vacant","","A vacant Entry.",1,null],[13,"Occupied","","An occupied Entry.",1,null],[3,"VacantEntry","","A vacant Entry. It is part of the <code>Entry</code> enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the <code>Entry</code> enum.",null,null],[11,"key","","Returns a reference to this entry\'s key.",1,[[],["string",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",1,[[["value",4]],["value",4]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",1,[[],["value",4]]],[11,"key","","Gets a reference to the key that would be used when …",2,[[],["string",3]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",2,[[["value",4]],["value",4]]],[11,"key","","Gets a reference to the key in the entry.",3,[[],["string",3]]],[11,"get","","Gets a reference to the value in the entry.",3,[[],["value",4]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[],["value",4]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[],["value",4]]],[11,"insert","","Sets the value of the entry with the <code>OccupiedEntry</code>\'s key, …",3,[[["value",4]],["value",4]]],[11,"remove","","Takes the value of the entry out of the map, and returns …",3,[[],["value",4]]],[3,"Iter","","An iterator over a toml::Map\'s entries.",null,null],[3,"IterMut","","A mutable iterator over a toml::Map\'s entries.",null,null],[3,"IntoIter","","An owning iterator over a toml::Map\'s entries.",null,null],[3,"Keys","","An iterator over a toml::Map\'s keys.",null,null],[3,"Values","","An iterator over a toml::Map\'s values.",null,null],[0,"value","toml","Definition of a TOML value",null,null],[3,"Datetime","toml::value","A parsed TOML datetime value",null,null],[3,"DatetimeParseError","","Error returned from parsing a <code>Datetime</code> in the <code>FromStr</code> …",null,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","Represents a TOML string",4,null],[13,"Integer","","Represents a TOML integer",4,null],[13,"Float","","Represents a TOML float",4,null],[13,"Boolean","","Represents a TOML boolean",4,null],[13,"Datetime","","Represents a TOML datetime",4,null],[13,"Array","","Represents a TOML array",4,null],[13,"Table","","Represents a TOML table",4,null],[6,"Array","","Type representing a TOML array, payload of the …",null,null],[6,"Table","","Type representing a TOML table, payload of the …",null,null],[11,"try_from","","Convert a <code>T</code> into <code>toml::Value</code> which is an enum that can …",4,[[],[["value",4],["error",4],["result",4]]]],[11,"try_into","","Interpret a <code>toml::Value</code> as an instance of type <code>T</code>.",4,[[],[["error",3],["result",4]]]],[11,"get","","Index into a TOML array or map. A string index can be …",4,[[["index",8]],[["option",4],["value",4]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index …",4,[[["index",8]],[["option",4],["value",4]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",4,[[],["option",4]]],[11,"is_integer","","Tests whether this value is an integer.",4,[[]]],[11,"as_float","","Extracts the float value if it is a float.",4,[[],["option",4]]],[11,"is_float","","Tests whether this value is a float.",4,[[]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",4,[[],["option",4]]],[11,"is_bool","","Tests whether this value is a boolean.",4,[[]]],[11,"as_str","","Extracts the string of this value if it is a string.",4,[[],["option",4]]],[11,"is_str","","Tests if this value is a string.",4,[[]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",4,[[],[["option",4],["datetime",3]]]],[11,"is_datetime","","Tests whether this value is a datetime.",4,[[]]],[11,"as_array","","Extracts the array value if it is an array.",4,[[],[["option",4],["vec",3]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",4,[[],[["vec",3],["option",4]]]],[11,"is_array","","Tests whether this value is an array.",4,[[]]],[11,"as_table","","Extracts the table value if it is a table.",4,[[],[["table",6],["option",4]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",4,[[],[["table",6],["option",4]]]],[11,"is_table","","Tests whether this value is a table.",4,[[]]],[11,"same_type","","Tests whether this and another value have the same type.",4,[[["value",4]]]],[11,"type_str","","Returns a human-readable representation of the type of …",4,[[]]],[8,"Index","","Types that can be used to index a <code>toml::Value</code>",null,null],[0,"ser","toml","Serializing Rust structures into TOML.",null,null],[5,"to_vec","toml::ser","Serialize the given data structure as a TOML byte vector.",null,[[],[["result",4],["vec",3],["error",4]]]],[5,"to_string","","Serialize the given data structure as a String of TOML.",null,[[],[["error",4],["result",4],["string",3]]]],[5,"to_string_pretty","","Serialize the given data structure as a \\\"pretty\\\" String …",null,[[],[["error",4],["result",4],["string",3]]]],[4,"Error","","Errors that can occur when serializing a type.",null,null],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized …",5,null],[13,"KeyNotString","","The key of all TOML maps must be strings, but …",5,null],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further …",5,null],[13,"DateInvalid","","A serialized date was invalid.",5,null],[13,"NumberInvalid","","A serialized number was invalid.",5,null],[13,"UnsupportedNone","","None was attempted to be serialized, but it\'s not …",5,null],[13,"Custom","","A custom error which could be generated when serializing …",5,null],[3,"Serializer","","Serialization implementation for TOML.",null,null],[11,"new","","Creates a new serializer which will emit TOML into the …",6,[[["string",3]],["serializer",3]]],[11,"pretty","","Instantiate a \\\"pretty\\\" formatter",6,[[["string",3]],["serializer",3]]],[11,"pretty_string","","Enable or Disable pretty strings",6,[[]]],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",6,[[]]],[11,"pretty_array","","Enable or Disable pretty arrays",6,[[]]],[11,"pretty_array_indent","","Set the indent for pretty arrays",6,[[]]],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing …",6,[[]]],[5,"tables_last","","Convenience function to serialize items in a map in an …",null,[[],["result",4]]],[0,"de","toml","Deserializing TOML into Rust structures.",null,null],[5,"from_slice","toml::de","Deserializes a byte slice into a type.",null,[[],[["result",4],["error",3]]]],[5,"from_str","","Deserializes a string into a type.",null,[[],[["result",4],["error",3]]]],[3,"Error","","Errors that can occur when deserializing a type.",null,null],[3,"Deserializer","","Deserialization implementation for TOML.",null,null],[11,"new","","Creates a new deserializer which will be deserializing …",7,[[],["deserializer",3]]],[11,"end","","The <code>Deserializer::end</code> method should be called after a …",7,[[],[["result",4],["error",3]]]],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a …",7,[[]]],[11,"set_allow_duplicate_after_longer_table","","Historical versions of toml-rs accidentally allowed a …",7,[[]]],[11,"line_col","","Produces a (line, column) pair of the position of the …",8,[[],["option",4]]],[3,"Spanned","toml","A spanned value, indicating the range at which it is …",null,null],[14,"toml","","Construct a <code>toml::Value</code> from TOML syntax.",null,null],[11,"from","toml::map","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"into_iter","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"into_iter","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","toml::value","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","toml::ser","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","toml::de","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","toml","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","toml::value","",4,[[],["value",4]]],[11,"from","","",4,[[["vec",3]],["value",4]]],[11,"from","","",4,[[["btreemap",3]],["value",4]]],[11,"from","","",4,[[["hashmap",3]],["value",4]]],[11,"from","","",4,[[["string",3]],["value",4]]],[11,"from","","",4,[[],["value",4]]],[11,"from","","",4,[[],["value",4]]],[11,"from","","",4,[[],["value",4]]],[11,"from","","",4,[[],["value",4]]],[11,"from","","",4,[[],["value",4]]],[11,"from","","",4,[[],["value",4]]],[11,"from","","",4,[[],["value",4]]],[11,"from","","",4,[[],["value",4]]],[11,"from","","",4,[[["datetime",3]],["value",4]]],[11,"from","","",4,[[["table",6]],["value",4]]],[11,"next_back","toml::map","",9,[[],["option",4]]],[11,"next_back","","",10,[[],["option",4]]],[11,"next_back","","",11,[[],["option",4]]],[11,"next_back","","",12,[[],["option",4]]],[11,"next_back","","",13,[[],["option",4]]],[11,"len","","",9,[[]]],[11,"len","","",10,[[]]],[11,"len","","",11,[[]]],[11,"len","","",12,[[]]],[11,"len","","",13,[[]]],[11,"extend","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"next","","",11,[[],["option",4]]],[11,"size_hint","","",11,[[]]],[11,"next","","",12,[[],["option",4]]],[11,"size_hint","","",12,[[]]],[11,"next","","",13,[[],["option",4]]],[11,"size_hint","","",13,[[]]],[11,"clone","","",0,[[]]],[11,"clone","toml::value","",4,[[],["value",4]]],[11,"clone","","",14,[[],["datetime",3]]],[11,"clone","","",15,[[],["datetimeparseerror",3]]],[11,"clone","toml::ser","",5,[[],["error",4]]],[11,"clone","toml::de","",8,[[],["error",3]]],[11,"clone","toml","",16,[[],["spanned",3]]],[11,"default","toml::map","",0,[[]]],[11,"cmp","toml","",16,[[],["ordering",4]]],[11,"eq","toml::map","",0,[[]]],[11,"eq","toml::value","",4,[[["value",4]]]],[11,"ne","","",4,[[["value",4]]]],[11,"eq","","",14,[[["datetime",3]]]],[11,"ne","","",14,[[["datetime",3]]]],[11,"eq","toml::ser","",5,[[["error",4]]]],[11,"ne","","",5,[[["error",4]]]],[11,"eq","toml::de","",8,[[["error",3]]]],[11,"ne","","",8,[[["error",3]]]],[11,"eq","toml","",16,[[]]],[11,"partial_cmp","","",16,[[],[["option",4],["ordering",4]]]],[11,"fmt","toml::map","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","toml::value","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","toml::ser","",5,[[["formatter",3]],["result",6]]],[11,"fmt","toml::de","",8,[[["formatter",3]],["result",6]]],[11,"fmt","toml","",16,[[["formatter",3]],["result",6]]],[11,"fmt","toml::value","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","toml::ser","",5,[[["formatter",3]],["result",6]]],[11,"fmt","toml::de","",8,[[["formatter",3]],["result",6]]],[11,"index","toml::map","",0,[[],["value",4]]],[11,"index","toml::value","",4,[[],["value",4]]],[11,"index_mut","toml::map","",0,[[],["value",4]]],[11,"index_mut","toml::value","",4,[[],["value",4]]],[11,"hash","toml","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"from_str","toml::value","",4,[[],[["result",4],["value",4]]]],[11,"from_str","","",14,[[],[["result",4],["datetime",3],["datetimeparseerror",3]]]],[11,"from_iter","toml::map","",0,[[]]],[11,"deserialize_any","toml::value","",4,[[],[["error",3],["result",4]]]],[11,"deserialize_enum","","",4,[[],[["error",3],["result",4]]]],[11,"deserialize_option","","",4,[[],[["error",3],["result",4]]]],[11,"deserialize_newtype_struct","","",4,[[],[["error",3],["result",4]]]],[11,"deserialize_bool","","",4,[[],["result",4]]],[11,"deserialize_u8","","",4,[[],["result",4]]],[11,"deserialize_u16","","",4,[[],["result",4]]],[11,"deserialize_u32","","",4,[[],["result",4]]],[11,"deserialize_u64","","",4,[[],["result",4]]],[11,"deserialize_i8","","",4,[[],["result",4]]],[11,"deserialize_i16","","",4,[[],["result",4]]],[11,"deserialize_i32","","",4,[[],["result",4]]],[11,"deserialize_i64","","",4,[[],["result",4]]],[11,"deserialize_f32","","",4,[[],["result",4]]],[11,"deserialize_f64","","",4,[[],["result",4]]],[11,"deserialize_char","","",4,[[],["result",4]]],[11,"deserialize_str","","",4,[[],["result",4]]],[11,"deserialize_string","","",4,[[],["result",4]]],[11,"deserialize_unit","","",4,[[],["result",4]]],[11,"deserialize_seq","","",4,[[],["result",4]]],[11,"deserialize_bytes","","",4,[[],["result",4]]],[11,"deserialize_byte_buf","","",4,[[],["result",4]]],[11,"deserialize_map","","",4,[[],["result",4]]],[11,"deserialize_unit_struct","","",4,[[],["result",4]]],[11,"deserialize_tuple_struct","","",4,[[],["result",4]]],[11,"deserialize_struct","","",4,[[],["result",4]]],[11,"deserialize_tuple","","",4,[[],["result",4]]],[11,"deserialize_ignored_any","","",4,[[],["result",4]]],[11,"deserialize_identifier","","",4,[[],["result",4]]],[11,"into_deserializer","","",4,[[]]],[11,"custom","toml::ser","",5,[[["display",8]],["error",4]]],[11,"serialize","toml::map","",0,[[],["result",4]]],[11,"serialize","toml::value","",4,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","toml","",16,[[],["result",4]]],[11,"deserialize","toml::map","",0,[[],["result",4]]],[11,"deserialize","toml::value","",4,[[],[["value",4],["result",4]]]],[11,"deserialize","","",14,[[],[["datetime",3],["result",4]]]],[11,"deserialize","toml","",16,[[],[["spanned",3],["result",4]]]],[11,"custom","toml::de","",8,[[["display",8]],["error",3]]],[11,"start","toml","Access the start of the span of the contained value.",16,[[]]],[11,"end","","Access the end of the span of the contained value.",16,[[]]],[11,"span","","Get the span of the contained value.",16,[[]]],[11,"into_inner","","Consumes the spanned value and returns the contained …",16,[[]]],[11,"get_ref","","Returns a reference to the contained value.",16,[[]]],[11,"get_mut","","Returns a mutable reference to the contained value.",16,[[]]]],"p":[[3,"Map"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[4,"Value"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"],[3,"Error"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Datetime"],[3,"DatetimeParseError"],[3,"Spanned"]]},\
"toml_edit":{"doc":"<code>toml_edit</code>This crate allows you to parse and modify toml …","i":[[3,"ArrayOfTables","toml_edit","Type representing a TOML array of tables",null,null],[3,"Decor","","A prefix and suffix, including comments, whitespaces and …",null,null],[3,"Document","","Type representing a TOML document",null,null],[12,"root","","Root should always be <code>Item::Table</code>.",0,null],[3,"Key","","Key as part of a Key/Value Pair or a table header.",null,null],[3,"TomlError","","Type representing a TOML parse error",null,null],[5,"array","","Returns an empty array of tables.",null,[[],["item",4]]],[5,"table","","Returns an empty table.",null,[[],["item",4]]],[5,"value","","Returns a formatted value.",null,[[["value",4],["into",8]],["item",4]]],[4,"Item","","Type representing either a value, a table, an array of …",null,null],[13,"None","","Type representing none.",1,null],[13,"Value","","Type representing value.",1,null],[13,"Table","","Type representing table.",1,null],[13,"ArrayOfTables","","Type representing array of tables.",1,null],[6,"Iter","","An iterator type over <code>Table</code>\'s key/value pairs.",null,null],[3,"Table","","Type representing a TOML non-inline table",null,null],[8,"TableLike","","This trait represents either a <code>Table</code>, or an <code>InlineTable</code>.",null,null],[10,"iter","","Returns an iterator over key/value pairs.",2,[[],["iter",6]]],[11,"len","","Returns the number of nonempty items.",2,[[]]],[11,"is_empty","","Returns true iff the table is empty.",2,[[]]],[10,"get","","Returns an optional reference to an item given the key.",2,[[],[["option",4],["item",4]]]],[3,"Array","","Type representing a TOML array, payload of the …",null,null],[6,"ArrayIter","","An iterator type over <code>Array</code>\'s values.",null,null],[3,"InlineTable","","Type representing a TOML inline table, payload of the …",null,null],[4,"Value","","Representation of a TOML Value (as part of a Key/Value …",null,null],[13,"Integer","","A 64-bit integer value.",3,null],[13,"String","","A string value.",3,null],[13,"Float","","A 64-bit float value.",3,null],[13,"DateTime","","A Date-Time value.",3,null],[13,"Boolean","","A boolean value.",3,null],[13,"Array","","An inline array of values.",3,null],[13,"InlineTable","","An inline table of key/value pairs.",3,null],[5,"decorated","","Sets the prefix and the suffix for value.",null,[[["value",4]],["value",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"iter","","Returns an iterator over all subitems, including …",8,[[],["iter",6]]],[11,"get","","",8,[[],[["option",4],["item",4]]]],[11,"iter","","",10,[[],["iter",6]]],[11,"get","","",10,[[],[["option",4],["item",4]]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[["string",3]]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[["array",3]]]],[11,"from","","",3,[[["inlinetable",3]]]],[11,"clone","","",4,[[],["arrayoftables",3]]],[11,"clone","","",5,[[],["decor",3]]],[11,"clone","","",0,[[],["document",3]]],[11,"clone","","",6,[[],["key",3]]],[11,"clone","","",7,[[],["tomlerror",3]]],[11,"clone","","",8,[[],["table",3]]],[11,"clone","","",1,[[],["item",4]]],[11,"clone","","",3,[[],["value",4]]],[11,"clone","","",9,[[],["array",3]]],[11,"clone","","",10,[[],["inlinetable",3]]],[11,"default","","",4,[[],["arrayoftables",3]]],[11,"default","","",5,[[],["decor",3]]],[11,"default","","",0,[[]]],[11,"default","","",8,[[],["table",3]]],[11,"default","","",1,[[]]],[11,"default","","",9,[[],["array",3]]],[11,"default","","",10,[[],["inlinetable",3]]],[11,"cmp","","",6,[[["key",3]],["ordering",4]]],[11,"eq","","",5,[[["decor",3]]]],[11,"ne","","",5,[[["decor",3]]]],[11,"eq","","",6,[[["key",3]]]],[11,"ne","","",6,[[["key",3]]]],[11,"eq","","",7,[[["tomlerror",3]]]],[11,"ne","","",7,[[["tomlerror",3]]]],[11,"partial_cmp","","",6,[[["key",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["key",3]]]],[11,"le","","",6,[[["key",3]]]],[11,"gt","","",6,[[["key",3]]]],[11,"ge","","",6,[[["key",3]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"index","","",1,[[],["item",4]]],[11,"index","","",8,[[],["item",4]]],[11,"index","","",0,[[],["item",4]]],[11,"index_mut","","",1,[[],["item",4]]],[11,"index_mut","","",8,[[],["item",4]]],[11,"index_mut","","",0,[[],["item",4]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"from_str","","Parses a document from a &str",0,[[],["result",4]]],[11,"from_str","","Tries to parse a key from a &str, if fails, tries as …",6,[[],["result",4]]],[11,"from_str","","Parses a value from a &str",3,[[],["result",4]]],[11,"from_iter","","",3,[[]]],[11,"from_iter","","",3,[[]]],[11,"description","","",7,[[]]],[11,"new","","Creates an empty array of tables.",4,[[]]],[11,"iter","","Returns an iterator over tables.",4,[[],[["iterator",8],["box",3]]]],[11,"get","","Returns an optional reference to the table.",4,[[],[["table",3],["option",4]]]],[11,"get_mut","","Returns an optional mutable reference to the table.",4,[[],[["option",4],["table",3]]]],[11,"append","","Appends a table to the array.",4,[[["table",3]],["table",3]]],[11,"remove","","Removes a table with the given index.",4,[[]]],[11,"clear","","Removes all the tables.",4,[[]]],[11,"len","","Returns the length of the underlying Vec. To get the …",4,[[]]],[11,"is_empty","","Returns true iff <code>self.len() == 0</code>.",4,[[]]],[11,"new","","Creates a new decor from the given prefix and suffix.",5,[[["into",8],["string",3]]]],[11,"prefix","","Get the prefix.",5,[[]]],[11,"suffix","","Get the suffix.",5,[[]]],[11,"to_string_in_original_order","","Returns a string representation of the TOML document, …",0,[[],["string",3]]],[11,"new","","Creates an empty document",0,[[]]],[11,"as_table","","Returns a reference to the root table.",0,[[],["table",3]]],[11,"as_table_mut","","Returns a mutable reference to the root table.",0,[[],["table",3]]],[11,"iter","","Returns an iterator over the root table.",0,[[],["iter",6]]],[11,"get","","Returns the parsed key value.",6,[[]]],[11,"raw","","Returns the key raw representation.",6,[[]]],[11,"new","","Creates an empty table.",8,[[]]],[11,"contains_key","","Returns true iff the table contains an item with the …",8,[[]]],[11,"contains_table","","Returns true iff the table contains a table with the …",8,[[]]],[11,"contains_value","","Returns true iff the table contains a value with the …",8,[[]]],[11,"contains_array_of_tables","","Returns true iff the table contains an array of tables …",8,[[]]],[11,"iter","","Returns an iterator over all key/value pairs, including …",8,[[],["iter",6]]],[11,"remove","","Removes an item given the key.",8,[[],[["option",4],["item",4]]]],[11,"sort_values","","Sorts Key/Value Pairs of the table, doesn\'t affect …",8,[[]]],[11,"len","","Returns the number of non-empty items in the table.",8,[[]]],[11,"values_len","","Returns the number of key/value pairs in the table.",8,[[]]],[11,"is_empty","","Returns true iff the table is empty.",8,[[]]],[11,"entry","","Given the <code>key</code>, return a mutable reference to the value. …",8,[[],["item",4]]],[11,"get","","Returns an optional reference to an item given the key.",8,[[],[["option",4],["item",4]]]],[11,"set_implicit","","If a table has no key/value pairs and implicit, it will …",8,[[]]],[11,"or_insert","","Sets <code>self</code> to the given item iff <code>self</code> is none and returns …",1,[[["item",4]],["item",4]]],[11,"as_value","","Casts <code>self</code> to value.",1,[[],[["value",4],["option",4]]]],[11,"as_table","","Casts <code>self</code> to table.",1,[[],[["table",3],["option",4]]]],[11,"as_array_of_tables","","Casts <code>self</code> to array of tables.",1,[[],[["option",4],["arrayoftables",3]]]],[11,"as_value_mut","","Casts <code>self</code> to mutable value.",1,[[],[["option",4],["value",4]]]],[11,"as_table_mut","","Casts <code>self</code> to mutable table.",1,[[],[["option",4],["table",3]]]],[11,"as_array_of_tables_mut","","Casts <code>self</code> to mutable array of tables.",1,[[],[["arrayoftables",3],["option",4]]]],[11,"is_value","","Returns true iff <code>self</code> is a value.",1,[[]]],[11,"is_table","","Returns true iff <code>self</code> is a table.",1,[[]]],[11,"is_array_of_tables","","Returns true iff <code>self</code> is an array of tables.",1,[[]]],[11,"is_none","","Returns true iff <code>self</code> is <code>None</code>.",1,[[]]],[11,"as_integer","","Casts <code>self</code> to integer.",1,[[],["option",4]]],[11,"is_integer","","Returns true iff <code>self</code> is an integer.",1,[[]]],[11,"as_float","","Casts <code>self</code> to float.",1,[[],["option",4]]],[11,"is_float","","Returns true iff <code>self</code> is a float.",1,[[]]],[11,"as_bool","","Casts <code>self</code> to boolean.",1,[[],["option",4]]],[11,"is_bool","","Returns true iff <code>self</code> is a boolean.",1,[[]]],[11,"as_str","","Casts <code>self</code> to str.",1,[[],["option",4]]],[11,"is_str","","Returns true iff <code>self</code> is a string.",1,[[]]],[11,"as_date_time","","Casts <code>self</code> to date-time.",1,[[],[["option",4],["datetime",4]]]],[11,"is_date_time","","Returns true iff <code>self</code> is a date-time.",1,[[]]],[11,"as_array","","Casts <code>self</code> to array.",1,[[],[["array",3],["option",4]]]],[11,"as_array_mut","","Casts <code>self</code> to mutable array.",1,[[],[["array",3],["option",4]]]],[11,"is_array","","Returns true iff <code>self</code> is an array.",1,[[]]],[11,"as_inline_table","","Casts <code>self</code> to inline table.",1,[[],[["option",4],["inlinetable",3]]]],[11,"as_inline_table_mut","","Casts <code>self</code> to mutable inline table.",1,[[],[["option",4],["inlinetable",3]]]],[11,"is_inline_table","","Returns true iff <code>self</code> is an inline table.",1,[[]]],[11,"as_table_like","","Casts <code>self</code> to either a table or an inline table.",1,[[],[["tablelike",8],["option",4]]]],[11,"is_table_like","","Returns true iff <code>self</code> is either a table, or an inline …",1,[[]]],[11,"len","","Returns the number of nonempty items.",2,[[]]],[11,"is_empty","","Returns true iff the table is empty.",2,[[]]],[11,"len","","Returns the length of the underlying Vec. To get the …",9,[[]]],[11,"is_empty","","Return true iff <code>self.len() == 0</code>.",9,[[]]],[11,"iter","","Returns an iterator over all values.",9,[[],["arrayiter",6]]],[11,"push","","Appends a new value to the end of the array, applying …",9,[[["value",4],["into",8]],[["value",4],["result",4]]]],[11,"push_formatted","","Appends a new, already formatted value to the end of the …",9,[[["value",4]],[["value",4],["result",4]]]],[11,"insert","","Inserts an element at the given position within the …",9,[[["value",4],["into",8]],[["value",4],["result",4]]]],[11,"insert_formatted","","Inserts an already formatted value at the given position …",9,[[["value",4]],[["value",4],["result",4]]]],[11,"replace","","Replaces the element at the given position within the …",9,[[["value",4],["into",8]],[["value",4],["result",4]]]],[11,"replace_formatted","","Replaces the element at the given position within the …",9,[[["value",4]],[["value",4],["result",4]]]],[11,"get","","Returns a reference to the value at the given index, or …",9,[[],[["value",4],["option",4]]]],[11,"remove","","Removes the value at the given index.",9,[[],["value",4]]],[11,"fmt","","Auto formats the array.",9,[[]]],[11,"len","","Returns the number of key/value pairs.",10,[[]]],[11,"is_empty","","Returns true iff the table is empty.",10,[[]]],[11,"iter","","Returns an iterator over key/value pairs.",10,[[],[["box",3],["iterator",8]]]],[11,"sort","","Sorts the key/value pairs by key.",10,[[]]],[11,"contains_key","","Returns true iff the table contains given key.",10,[[]]],[11,"merge_into","","Merges the key/value pairs into the <code>other</code> table leaving …",10,[[["inlinetable",3]]]],[11,"get_or_insert","","Inserts a key/value pair if the table does not contain …",10,[[["value",4],["into",8]],["value",4]]],[11,"fmt","","Auto formats the table.",10,[[]]],[11,"remove","","Removes a key/value pair given the key.",10,[[],[["value",4],["option",4]]]],[11,"get","","Return an optional reference to the value at the given …",10,[[],[["value",4],["option",4]]]],[11,"get_mut","","Return an optional mutable reference to the value at the …",10,[[],[["option",4],["value",4]]]],[11,"as_integer","","Casts <code>self</code> to integer.",3,[[],["option",4]]],[11,"is_integer","","Returns true iff <code>self</code> is an integer.",3,[[]]],[11,"as_float","","Casts <code>self</code> to float.",3,[[],["option",4]]],[11,"is_float","","Returns true iff <code>self</code> is a float.",3,[[]]],[11,"as_bool","","Casts <code>self</code> to boolean.",3,[[],["option",4]]],[11,"is_bool","","Returns true iff <code>self</code> is a boolean.",3,[[]]],[11,"as_str","","Casts <code>self</code> to str.",3,[[],["option",4]]],[11,"is_str","","Returns true iff <code>self</code> is a string.",3,[[]]],[11,"as_date_time","","Casts <code>self</code> to date-time.",3,[[],[["option",4],["datetime",4]]]],[11,"is_date_time","","Returns true iff <code>self</code> is a date-time.",3,[[]]],[11,"as_array","","Casts <code>self</code> to array.",3,[[],[["array",3],["option",4]]]],[11,"as_array_mut","","Casts <code>self</code> to mutable array.",3,[[],[["array",3],["option",4]]]],[11,"is_array","","Returns true iff <code>self</code> is an array.",3,[[]]],[11,"as_inline_table","","Casts <code>self</code> to inline table.",3,[[],[["option",4],["inlinetable",3]]]],[11,"as_inline_table_mut","","Casts <code>self</code> to mutable inline table.",3,[[],[["option",4],["inlinetable",3]]]],[11,"is_inline_table","","Returns true iff <code>self</code> is an inline table.",3,[[]]],[11,"decor","","Get the decoration of the value.",3,[[],["decor",3]]]],"p":[[3,"Document"],[4,"Item"],[8,"TableLike"],[4,"Value"],[3,"ArrayOfTables"],[3,"Decor"],[3,"Key"],[3,"TomlError"],[3,"Table"],[3,"Array"],[3,"InlineTable"]]},\
"twox_hash":{"doc":"A Rust implementation of the XXHash algorithm.","i":[[0,"xxh3","twox_hash","The in-progress XXH3 algorithm.",null,null],[5,"hash64","twox_hash::xxh3","",null,[[]]],[5,"hash64_with_seed","","",null,[[]]],[5,"hash64_with_secret","","",null,[[]]],[5,"hash128","","",null,[[]]],[5,"hash128_with_seed","","",null,[[]]],[5,"hash128_with_secret","","",null,[[]]],[3,"Hash64","","Calculates the 64-bit hash.",null,null],[11,"with_seed","","",0,[[]]],[11,"with_secret","","",0,[[["into",8],["vec",3]]]],[3,"Hash128","","Calculates the 128-bit hash.",null,null],[11,"with_seed","","",1,[[]]],[11,"with_secret","","",1,[[["into",8],["vec",3]]]],[8,"HasherExt","","",null,null],[10,"finish_ext","","",2,[[]]],[3,"XxHash64","twox_hash","Calculates the 64-bit hash.",null,null],[3,"XxHash32","","Calculates the 32-bit hash. Care should be taken when …",null,null],[6,"XxHash","","A backwards compatibility type alias. Consider directly …",null,null],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","twox_hash::xxh3","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"finish_ext","","",1,[[]]],[11,"fmt","twox_hash","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"eq","","",3,[[["xxhash64",3]]]],[11,"ne","","",3,[[["xxhash64",3]]]],[11,"eq","","",4,[[["xxhash32",3]]]],[11,"ne","","",4,[[["xxhash32",3]]]],[11,"finish","","",3,[[]]],[11,"write","","",3,[[]]],[11,"finish","","",4,[[]]],[11,"write","","",4,[[]]],[11,"finish","twox_hash::xxh3","",0,[[]]],[11,"write","","",0,[[]]],[11,"finish","","",1,[[]]],[11,"write","","",1,[[]]],[11,"clone","twox_hash","",3,[[],["xxhash64",3]]],[11,"clone","","",4,[[],["xxhash32",3]]],[11,"clone","twox_hash::xxh3","",0,[[],["hash64",3]]],[11,"clone","","",1,[[],["hash128",3]]],[11,"default","twox_hash","",3,[[],["xxhash64",3]]],[11,"default","","",4,[[],["xxhash32",3]]],[11,"default","twox_hash::xxh3","",0,[[],["hash64",3]]],[11,"default","","",1,[[],["hash128",3]]],[11,"with_seed","twox_hash","Constructs the hash with an initial seed",3,[[],["xxhash64",3]]],[11,"seed","","",3,[[]]],[11,"total_len","","",3,[[]]],[11,"with_seed","","Constructs the hash with an initial seed",4,[[],["xxhash32",3]]],[11,"seed","","",4,[[]]],[11,"total_len","","Get the total number of bytes hashed, truncated to 32 …",4,[[]]],[11,"total_len_64","","Get the total number of bytes hashed.",4,[[]]]],"p":[[3,"Hash64"],[3,"Hash128"],[8,"HasherExt"],[3,"XxHash64"],[3,"XxHash32"]]},\
"ucd_trie":{"doc":"The ucd-trie crate provides a compressed trie set …","i":[[4,"Error","ucd_trie","An error that can occur during construction of a trie.",null,null],[13,"InvalidCodepoint","","This error is returned when an invalid codepoint is given …",0,null],[13,"GaveUp","","This error is returned when a set of Unicode codepoints …",0,null],[6,"Result","","A type alias that maps to …",null,null],[3,"TrieSetOwned","","An owned trie set.",null,null],[6,"TrieSet","","A type alias for <code>TrieSetSlice<\'static></code>.",null,null],[3,"TrieSetSlice","","A borrowed trie set.",null,null],[11,"contains_char","","Returns true if and only if the given Unicode scalar …",1,[[]]],[11,"contains_u32","","Returns true if and only if the given codepoint is in …",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","","",0,[[],["error",4]]],[11,"clone","","",2,[[],["triesetowned",3]]],[11,"clone","","",1,[[],["triesetslice",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"from_scalars","","Create a new trie set from a set of Unicode scalar values.",2,[[],[["result",6],["triesetowned",3]]]],[11,"from_codepoints","","Create a new trie set from a set of Unicode scalar values.",2,[[],[["result",6],["triesetowned",3]]]],[11,"as_slice","","Return this set as a slice.",2,[[],["triesetslice",3]]],[11,"contains_char","","Returns true if and only if the given Unicode scalar …",2,[[]]],[11,"contains_u32","","Returns true if and only if the given codepoint is in …",2,[[]]]],"p":[[4,"Error"],[3,"TrieSetSlice"],[3,"TrieSetOwned"]]},\
"unicode_segmentation":{"doc":"Iterators which split strings on Grapheme Cluster, Word …","i":[[3,"Graphemes","unicode_segmentation","External iterator for a string\'s grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",null,null],[4,"GraphemeIncomplete","","An error return indicating that not enough content was …",null,null],[13,"PreContext","","More pre-context is needed. The caller should call …",0,null],[13,"PrevChunk","","When requesting <code>prev_boundary</code>, the cursor is moving past …",0,null],[13,"NextChunk","","When requesting <code>next_boundary</code>, the cursor is moving past …",0,null],[13,"InvalidOffset","","An error returned when the chunk given does not contain …",0,null],[17,"UNICODE_VERSION","","The version of Unicode that this version of …",null,null],[3,"UWordBounds","","External iterator for a string\'s word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after …",null,null],[3,"USentenceBounds","","External iterator for a string\'s sentence boundaries.",null,null],[3,"USentenceBoundIndices","","External iterator for sentence boundaries and byte …",null,null],[3,"UnicodeSentences","","An iterator over the substrings of a string which, after …",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode …",null,null],[10,"graphemes","","Returns an iterator over the grapheme clusters of <code>self</code>.",1,[[],["graphemes",3]]],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of <code>self</code> …",1,[[],["graphemeindices",3]]],[10,"unicode_words","","Returns an iterator over the words of <code>self</code>, separated on …",1,[[],["unicodewords",3]]],[10,"split_word_bounds","","Returns an iterator over substrings of <code>self</code> separated on …",1,[[],["uwordbounds",3]]],[10,"split_word_bound_indices","","Returns an iterator over substrings of <code>self</code>, split on …",1,[[],["uwordboundindices",3]]],[10,"unicode_sentences","","Returns an iterator over substrings of <code>self</code> separated on …",1,[[],["unicodesentences",3]]],[10,"split_sentence_bounds","","Returns an iterator over substrings of <code>self</code> separated on …",1,[[],["usentencebounds",3]]],[10,"split_sentence_bound_indices","","Returns an iterator over substrings of <code>self</code>, split on …",1,[[],["usentenceboundindices",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"into_iter","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"into_iter","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"into_iter","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"into_iter","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"into_iter","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["graphemeincomplete",4]]]],[11,"ne","","",0,[[["graphemeincomplete",4]]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"next_back","","",5,[[],["option",4]]],[11,"next_back","","",7,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"size_hint","","",3,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",5,[[],["option",4]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"size_hint","","",6,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"clone","","",2,[[],["graphemeindices",3]]],[11,"clone","","",3,[[],["graphemes",3]]],[11,"clone","","",4,[[],["graphemecursor",3]]],[11,"clone","","",6,[[],["uwordbounds",3]]],[11,"clone","","",7,[[],["uwordboundindices",3]]],[11,"clone","","",8,[[],["unicodesentences",3]]],[11,"clone","","",9,[[],["usentencebounds",3]]],[11,"clone","","",10,[[],["usentenceboundindices",3]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as …",2,[[]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as …",3,[[]]],[11,"new","","Create a new cursor. The string and initial offset are …",4,[[],["graphemecursor",3]]],[11,"set_cursor","","Set the cursor to a new location in the same string.",4,[[]]],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value …",4,[[]]],[11,"provide_context","","Provide additional pre-context when it is needed to …",4,[[]]],[11,"is_boundary","","Determine whether the current cursor location is a …",4,[[],[["result",4],["graphemeincomplete",4]]]],[11,"next_boundary","","Find the next boundary after the current cursor position. …",4,[[],[["option",4],["result",4],["graphemeincomplete",4]]]],[11,"prev_boundary","","Find the previous boundary after the current cursor …",4,[[],[["option",4],["result",4],["graphemeincomplete",4]]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as …",7,[[]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as …",6,[[]]]],"p":[[4,"GraphemeIncomplete"],[8,"UnicodeSegmentation"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[3,"UnicodeSentences"],[3,"USentenceBounds"],[3,"USentenceBoundIndices"]]},\
"unicode_width":{"doc":"Determine displayed width of <code>char</code> and <code>str</code> types according …","i":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width …",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode …",null,null],[10,"width","","Returns the character\'s displayed width in columns, or …",0,[[],["option",4]]],[10,"width_cjk","","Returns the character\'s displayed width in columns, or …",0,[[],["option",4]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode …",null,null],[10,"width","","Returns the string\'s displayed width in columns.",1,[[]]],[10,"width_cjk","","Returns the string\'s displayed width in columns.",1,[[]]]],"p":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","i":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid …",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid …",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the …",0,[[]]],[10,"is_xid_continue","","Returns whether the specified <code>char</code> satisfies the …",0,[[]]]],"p":[[8,"UnicodeXID"]]},\
"unreachable":{"doc":"unreachableAn unreachable code optimization hint in …","i":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this …",null,[[]]],[8,"UncheckedOptionExt","","An extension trait for <code>Option<T></code> providing unchecked …",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for …",0,[[]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[]]],[8,"UncheckedResultExt","","An extension trait for <code>Result<T, E></code> providing unchecked …",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[]]]],"p":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]},\
"vec_map":{"doc":"A simple map based on a vector for small integer keys. …","i":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[11,"new","","Creates an empty <code>VecMap</code>.",1,[[]]],[11,"with_capacity","","Creates an empty <code>VecMap</code> with space for at least <code>capacity</code> …",1,[[]]],[11,"capacity","","Returns the number of elements the <code>VecMap</code> can hold without…",1,[[]]],[11,"reserve_len","","Reserves capacity for the given <code>VecMap</code> to contain <code>len</code> …",1,[[]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given <code>VecMap</code> to …",1,[[]]],[11,"shrink_to_fit","","Trims the <code>VecMap</code> of any excess capacity.",1,[[]]],[11,"keys","","Returns an iterator visiting all keys in ascending order …",1,[[],["keys",3]]],[11,"values","","Returns an iterator visiting all values in ascending …",1,[[],["values",3]]],[11,"values_mut","","Returns an iterator visiting all values in ascending …",1,[[],["valuesmut",3]]],[11,"iter","","Returns an iterator visiting all key-value pairs in …",1,[[],["iter",3]]],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in …",1,[[],["itermut",3]]],[11,"append","","Moves all elements from <code>other</code> into the map while …",1,[[]]],[11,"split_off","","Splits the collection into two at the given key.",1,[[]]],[11,"drain","","Returns an iterator visiting all key-value pairs in …",1,[[],["drain",3]]],[11,"len","","Returns the number of elements in the map.",1,[[]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[]]],[11,"clear","","Clears the map, removing all key-value pairs.",1,[[]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[],["option",4]]],[11,"contains_key","","Returns true if the map contains a value for the …",1,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",1,[[],["option",4]]],[11,"insert","","Inserts a key-value pair into the map. If the key already …",1,[[],["option",4]]],[11,"remove","","Removes a key from the map, returning the value at the …",1,[[],["option",4]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",1,[[],["entry",4]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",0,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",0,[[["fnonce",8]]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",2,[[]]],[11,"get","","Gets a reference to the value in the entry.",3,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[]]],[11,"insert","","Sets the value of the entry with the OccupiedEntry\'s key, …",3,[[]]],[11,"remove","","Takes the value of the entry out of the map, and returns …",3,[[]]],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the …",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"ValuesMut","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"next_back","","",4,[[],["option",4]]],[11,"next_back","","",5,[[],["option",4]]],[11,"next_back","","",10,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next_back","","",7,[[],["option",4]]],[11,"next_back","","",8,[[],["option",4]]],[11,"next_back","","",9,[[],["option",4]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"into_iter","","Returns an iterator visiting all key-value pairs in …",1,[[],["intoiter",3]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"clone","","",1,[[]]],[11,"clone_from","","",1,[[]]],[11,"clone","","",4,[[],["iter",3]]],[11,"clone","","",6,[[],["keys",3]]],[11,"clone","","",7,[[],["values",3]]],[11,"default","","",1,[[]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"eq","","",1,[[]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]]],"p":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Drain"]]},\
"void":{"doc":"VoidThe uninhabited void type for use in statically …","i":[[4,"Void","void","The empty type for cases which can\'t occur.",null,null],[5,"unreachable","","A safe version of <code>intrinsincs::unreachable</code>.",null,[[["void",4]]]],[8,"ResultVoidExt","","Extensions to <code>Result<T, Void></code>",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[]]],[8,"ResultVoidErrExt","","Extensions to <code>Result<Void, E></code>",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"eq","","",2,[[]]],[11,"partial_cmp","","",2,[[],[["option",4],["ordering",4]]]],[11,"clone","","",2,[[],["void",4]]]],"p":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]},\
"wait_timeout":{"doc":"A crate to wait on a child process with a particular …","i":[[8,"ChildExt","wait_timeout","Extension methods for the standard <code>std::process::Child</code> …",null,null],[10,"wait_timeout","","Wait for this child to exit, timing out after the …",0,[[["duration",3]],[["result",6],["option",4]]]]],"p":[[8,"ChildExt"]]},\
"zeroize":{"doc":"Securely zero memory with a simple trait (Zeroize) built …","i":[[8,"Zeroize","zeroize","Trait for securely erasing types from memory",null,null],[10,"zeroize","","Zero out this object from memory using Rust intrinsics …",0,[[]]],[8,"DefaultIsZeroes","","Marker trait for types whose <code>Default</code> is the desired …",null,null],[8,"TryZeroize","","Fallible trait for representing cases where zeroization …",null,null],[10,"try_zeroize","","Try to zero out this object from memory using Rust …",1,[[]]],[3,"Zeroizing","","<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which …",null,null],[11,"new","","Move value inside a <code>Zeroizing</code> wrapper which ensures it …",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"zeroize","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"from","","",2,[[],["zeroizing",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"eq","","",2,[[["zeroizing",3]]]],[11,"ne","","",2,[[["zeroizing",3]]]],[11,"drop","","",2,[[]]],[11,"clone","","",2,[[],["zeroizing",3]]]],"p":[[8,"Zeroize"],[8,"TryZeroize"],[3,"Zeroizing"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);